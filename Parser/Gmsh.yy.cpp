#line 2 "Gmsh.yy.cpp"

#line 4 "Gmsh.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gmsh_yy_create_buffer
#define yy_delete_buffer gmsh_yy_delete_buffer
#define yy_flex_debug gmsh_yy_flex_debug
#define yy_init_buffer gmsh_yy_init_buffer
#define yy_flush_buffer gmsh_yy_flush_buffer
#define yy_load_buffer_state gmsh_yy_load_buffer_state
#define yy_switch_to_buffer gmsh_yy_switch_to_buffer
#define yyin gmsh_yyin
#define yyleng gmsh_yyleng
#define yylex gmsh_yylex
#define yylineno gmsh_yylineno
#define yyout gmsh_yyout
#define yyrestart gmsh_yyrestart
#define yytext gmsh_yytext
#define yywrap gmsh_yywrap
#define yyalloc gmsh_yyalloc
#define yyrealloc gmsh_yyrealloc
#define yyfree gmsh_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gmsh_yyrestart(gmsh_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t gmsh_yyleng;

extern FILE *gmsh_yyin, *gmsh_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmsh_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gmsh_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gmsh_yyrestart()), so that the user can continue scanning by
	 * just pointing gmsh_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when gmsh_yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t gmsh_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow gmsh_yywrap()'s to do buffer switches
 * instead of setting up a fresh gmsh_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void gmsh_yyrestart (FILE *input_file  );
void gmsh_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE gmsh_yy_create_buffer (FILE *file,int size  );
void gmsh_yy_delete_buffer (YY_BUFFER_STATE b  );
void gmsh_yy_flush_buffer (YY_BUFFER_STATE b  );
void gmsh_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void gmsh_yypop_buffer_state (void );

static void gmsh_yyensure_buffer_stack (void );
static void gmsh_yy_load_buffer_state (void );
static void gmsh_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER gmsh_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE gmsh_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE gmsh_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE gmsh_yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *gmsh_yyalloc (yy_size_t  );
void *gmsh_yyrealloc (void *,yy_size_t  );
void gmsh_yyfree (void *  );

#define yy_new_buffer gmsh_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gmsh_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gmsh_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *gmsh_yyin = (FILE *) 0, *gmsh_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int gmsh_yylineno;

int gmsh_yylineno = 1;

extern char *gmsh_yytext;
#define yytext_ptr gmsh_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gmsh_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	gmsh_yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[672] =
    {   0,
        0,    0,  156,  154,    1,    1,  154,    5,  154,    6,
      154,  154,  154,  154,  154,  149,   21,    2,  154,   16,
      154,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  154,   28,   24,   19,   25,   17,   26,
       18,    0,  151,    3,    4,   20,  150,  149,    0,   29,
       27,   30,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,   93,   92,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      111,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  139,  140,  153,  153,
      153,  153,  153,  153,  153,   23,   22,    0,  150,    0,
        0,  152,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,   49,
      153,  153,  153,  153,  153,  153,  153,  153,  153,   64,
      153,  153,  153,  153,  153,   77,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      100,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  126,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  145,  153,  153,  153,  153,  153,    0,  151,
        0,    0,  150,   31,  153,  153,  153,  153,   35,   37,
      153,  153,  153,   57,  153,   44,  153,  153,  153,  153,
      153,  153,  153,   48,  153,  153,  153,  153,   63,  153,
      153,  153,  153,   72,  153,   73,  153,  153,   76,  153,
      153,  153,  153,  153,   85,   86,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   98,  153,   99,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  121,  153,  153,  153,  153,  153,  136,  127,
      153,  153,  153,  153,  125,  153,  153,  153,  153,  153,
      153,  141,  144,  153,  153,  153,  153,   10,   15,    9,
        8,  153,   12,   14,    0,  150,   33,  153,  153,  153,
       39,  153,  153,  153,  153,  153,  153,  153,   52,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,   70,
      153,  153,   74,   75,  153,  153,  153,  153,  153,  153,
      153,  153,  153,   91,  153,  153,   96,  153,  153,  153,
      101,  153,  153,  153,  107,  108,  153,  153,  153,  112,
      153,  113,  153,  153,  153,  153,  153,  153,  120,  153,

      153,  153,  130,  153,  153,  153,  153,  153,  153,  153,
      146,  153,  147,  153,   11,  153,   13,  153,   32,   36,
       38,  153,   41,  153,  153,  153,   45,  153,  153,  153,
      153,  153,  153,  153,  153,   60,   62,  153,  153,   69,
      153,  153,  153,  153,  153,   79,  153,  153,   89,   88,
      153,   90,  153,  153,  102,   97,  153,  153,  153,  104,
      153,  153,  153,  117,  153,  116,  153,  153,  123,  119,
      153,  128,  129,  153,  133,  153,  153,  153,  153,  153,
      153,  153,  148,    7,  153,   40,   42,  153,  153,  153,
      153,  153,   47,   51,  153,  153,  153,  153,   66,  153,

      153,  153,   67,  153,  153,  153,  153,  153,  153,   87,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  132,  153,  153,  131,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,   54,  153,  153,  153,
       65,   68,  153,   78,  153,  153,  153,  153,   81,  153,
      153,  103,  105,  106,  153,  109,  110,  153,  153,  153,
      124,  153,  153,  137,  153,  153,  153,  153,  153,  153,
      153,   46,  153,  153,  153,  153,   71,  153,  153,  153,
       80,  153,   94,  153,  153,  118,  153,  134,  153,  138,
      153,  143,  153,  153,   56,  153,   53,  153,  153,  153,

      153,  153,  153,  153,  114,  153,  122,  153,  153,  153,
       43,  153,   55,  153,   61,  153,  153,  153,  153,  115,
      135,  142,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   50,   58,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,   34,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,   82,   83,   84,  153,  153,  153,  153,   95,   59,
        0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   39,   39,   39,
        1,    1,    1,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   39,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,    1,   72,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    1
    } ;

static yyconst flex_int16_t yy_base[673] =
    {   0,
        0,    0,  793,  794,  794,  794,  771,  794,  785,  794,
      769,   64,   65,   63,   75,   77,  794,  794,  768,  767,
      766,   46,   48,   66,   51,   65,   78,   46,   45,   71,
        0,  727,   90,   80,  719,  721,   92,  106,  109,  145,
      719,  722,  730,  708,  794,  794,  794,  794,  794,  794,
      794,  768,  167,  794,  794,  794,  172,  187,  211,  794,
      794,  794,    0,  718,  722,  727,  720,  727,  712,  701,
      705,   62,  715,  722,  705,  152,  716,   59,  709,  718,
      707,  713,  713,   93,  713,  709,  699,  698,  694,  697,
      714,  689,  703,  111,  691,  709,    0,  685,  689,  678,

       92,  688,  137,  715,  695,  681,  693,  679,  678,  670,
        0,   35,  136,  684,  679,  113,  672,  679,  675,  675,
      673,  176,  669,  668,  667,  137,    0,    0,  694,  669,
      677,  679,  670,  667,  655,  794,  794,  227,  232,  241,
      247,  252,  658,  674,  190,  661,  660,  661,  662,  657,
      658,  656,  656,  649,  662,  659,  649,  174,  645,  653,
      659,  654,  653,  656,  634,  646,  242,  643,  634,    0,
      635,  633,  639,  635,  644,    0,  644,  662,  244,  640,
      639,  249,  629,  661,  636,  621,  634,  631,  632,  631,
      667,  619,  633,  612,  629,  625,  628,  619,  609,  613,

      618,  611,  622,  609,  617,  606,  610,  598,  616,  611,
      593,  606,  599,  607,  602,  601,  590,  254,  602,  595,
      603,  624,  596,  602,  589,  588,  580,  244,  299,  304,
      313,  318,  323,    0,  581,  584,  588,  595,    0,  626,
      585,  588,  588,    0,  571,    0,  589,  578,  571,  570,
      577,  215,  581,    0,  565,  570,  563,  562,    0,  565,
      565,  572,  568,    0,  556,    0,  571,  557,    0,  554,
      572,  558,  551,  568,    0,    0,  548,  562,  565,  560,
      545,  569,  545,  543,  543,  540,  547,    0,  590,    0,
      212,  545,  537,  537,  541,  538,  542,  545,  540,  529,

      530,  527,    0,  533,  531,  526,  523,  537,    0,    0,
      521,  522,  148,  525,    0,  536,  519,  530,  533,  528,
      543,    0,    0,  507,  512,  522,  516,    0,    0,  516,
        0,  521,  514,    0,  328,  333,  525,  505,  509,  508,
        0,  507,  502,  509,  506,  513,  510,  509,  517,  499,
      506,  490,  500,  503,  502,  501,  500,  212,  487,    0,
      499,  498,    0,    0,  492,  246,  479,  482,  487,  478,
      483,  482,  478,    0,  501,  474,    0,  473,  482,  471,
        0,  487,  478,  472,    0,    0,  480,  480,  480,    0,
      469,    0,  486,  474,  477,  473,  464,  471,    0,  467,

      469,  468,    0,  453,  452,  465,  458,  465,  448,  452,
        0,  177,    0,  460,    0,  457,    0,  454,    0,    0,
      493,  456,    0,  447,  448,  439,    0,  444,  455,  450,
      431,  440,  439,  455,  433,    0,    0,  122,  440,    0,
      439,  442,  432,  188,  468,    0,  435,  423,    0,    0,
      432,    0,  450,  435,    0,    0,  434,  425,  412,    0,
      417,  426,  433,    0,  418,    0,  423,  442,    0,    0,
      425,    0,    0,  423,    0,  422,  426,  421,  408,  420,
      414,  421,    0,    0,  402,    0,    0,  413,  425,  413,
      414,  414,    0,    0,  411,  413,  399,  411,    0,  393,

      407,  408,    0,  395,  421,  416,  409,  391,  398,    0,
      414,  398,  381,  389,  393,  380,  393,  384,  386,  380,
      387,  374,    0,  381,  370,    0,  364,  382,  373,  366,
      376,  405,  368,  364,  375,  368,    0,  359,  362,  357,
        0,    0,  362,    0,  383,  382,  393,  364,    0,  393,
      350,    0,    0,    0,  359,    0,    0,  362,  361,  347,
        0,  341,  354,    0,  351,  352,  355,  368,  344,  345,
      347,    0,  350,  349,  339,  347,    0,  357,  356,  365,
        0,  352,    0,  344,  329,    0,  337,    0,  323,    0,
      324,    0,  327,  318,    0,  322,    0,  321,  327,  333,

      336,  335,  334,  348,    0,  327,    0,  326,  325,  310,
        0,  309,    0,  313,    0,  328,  327,  326,  332,    0,
        0,    0,  313,  312,  313,  338,  337,  336,  326,  301,
      311,  289,  318,  317,  316,  309,  295,    0,  317,  311,
      310,  284,  283,  246,  249,  275,  273,  272,  277,    0,
      270,  262,  261,  260,  265,  231,  251,  250,  246,  253,
      160,    0,    0,    0,  121,   91,  105,   34,    0,    0,
      794,   82
    } ;

static yyconst flex_int16_t yy_def[673] =
    {   0,
      671,    1,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  671,  671,  671,  671,  671,
      671,  671,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  671,  671,
      671,  671,  671,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  671,  671,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
        0,  671
    } ;

static yyconst flex_int16_t yy_nxt[867] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   31,   38,
       39,   40,   41,   42,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   43,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   44,   48,   52,   50,   53,   53,   53,   53,   53,
       91,  200,   54,   63,   49,   51,   55,   57,   69,   58,
       58,   58,   58,   58,   64,   56,   92,  670,   70,   93,

      201,   78,   65,   59,   94,   79,   96,   71,   66,   67,
       68,  162,   72,   80,   95,  163,   73,  104,  151,   74,
       75,   81,   97,   82,   85,   76,  152,   59,   77,   98,
       83,  669,   86,   84,   87,   88,  100,   89,  108,  105,
      101,  668,  109,   90,  102,  110,  111,  169,  112,  103,
      188,  113,  115,  170,  114,  667,  116,  171,  189,  127,
      128,  206,  119,  120,  207,  117,  121,  181,  182,  122,
      123,  118,  499,  124,  125,  129,  500,  208,  126,   53,
       53,   53,   53,   53,  139,  139,  139,  139,  139,  191,
      202,  130,  203,  138,  220,  221,  192,   57,  140,   58,

       58,   58,   58,   58,  131,  156,  402,  132,  157,  158,
      505,  159,  403,   59,  236,  160,  666,  138,  506,  141,
      141,  251,  140,  142,  142,  142,  142,  142,  481,  214,
      237,  238,  215,  482,  252,  229,  229,   59,  216,  230,
      230,  230,  230,  230,  139,  139,  139,  139,  139,  232,
      232,  382,  383,  233,  233,  233,  233,  233,  231,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  261,
      272,  351,  262,  277,  352,  438,  439,  278,  316,  665,
      444,  664,  231,  445,  273,  663,  662,  274,  279,  280,
      661,  317,  328,  318,  660,  329,  659,  658,  657,  656,

      330,  655,  654,  653,  331,  652,  332,  333,  651,  650,
      334,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  335,  335,  649,  648,  336,  336,  336,  336,  336,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  636,  635,  634,  633,  632,  631,  630,  629,  628,
      627,  626,  625,  624,  623,  622,  621,  620,  619,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  598,

      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,
      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      547,  546,  545,  544,  543,  542,  541,  540,  539,  538,
      537,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  513,  512,  511,  510,  509,  508,
      507,  504,  503,  502,  501,  498,  497,  496,  495,  494,

      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  480,  479,  478,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  443,  442,  441,  440,
      437,  436,  435,  434,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,

      385,  384,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  337,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  276,
      275,  271,  270,  269,  268,  267,  266,  265,  264,  263,

      260,  259,  258,  257,  256,  255,  254,  253,  250,  249,
      248,  247,  246,  245,  244,  243,  242,  241,  240,  239,
      235,  234,  228,  227,  226,  225,  224,  223,  222,  219,
      218,  217,  213,  212,  211,  210,  209,  205,  204,  199,
      198,  197,  196,  195,  194,  193,  190,  187,  186,  185,
      184,  183,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  168,  167,  166,  165,  164,  161,  155,  154,  153,
      150,  149,  148,  147,  146,  145,  144,  143,  137,  136,
      135,  134,  133,  107,  106,   99,   62,   61,   60,   47,
       46,   45,  671,    3,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671
    } ;

static yyconst flex_int16_t yy_chk[867] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   12,   14,   13,   14,   14,   14,   14,   14,
       28,  112,   15,  672,   12,   13,   15,   16,   23,   16,
       16,   16,   16,   16,   22,   15,   28,  668,   23,   29,

      112,   25,   22,   16,   29,   25,   30,   23,   22,   22,
       22,   78,   24,   25,   29,   78,   24,   34,   72,   24,
       24,   26,   30,   26,   27,   24,   72,   16,   24,   30,
       26,  667,   27,   26,   27,   27,   33,   27,   37,   34,
       33,  666,   37,   27,   33,   37,   37,   84,   37,   33,
      101,   37,   38,   84,   37,  665,   38,   84,  101,   40,
       40,  116,   39,   39,  116,   38,   39,   94,   94,   39,
       39,   38,  438,   39,   39,   40,  438,  116,   39,   53,
       53,   53,   53,   53,   57,   57,   57,   57,   57,  103,
      113,   40,  113,   53,  126,  126,  103,   58,   57,   58,

       58,   58,   58,   58,   40,   76,  313,   40,   76,   76,
      444,   76,  313,   58,  145,   76,  661,   53,  444,   59,
       59,  158,   57,   59,   59,   59,   59,   59,  412,  122,
      145,  145,  122,  412,  158,  138,  138,   58,  122,  138,
      138,  138,  138,  138,  139,  139,  139,  139,  139,  140,
      140,  291,  291,  140,  140,  140,  140,  140,  139,  141,
      141,  141,  141,  141,  142,  142,  142,  142,  142,  167,
      179,  252,  167,  182,  252,  358,  358,  182,  218,  660,
      366,  659,  139,  366,  179,  658,  657,  179,  182,  182,
      656,  218,  228,  218,  655,  228,  654,  653,  652,  651,

      228,  649,  648,  647,  228,  646,  228,  228,  645,  644,
      228,  229,  229,  229,  229,  229,  230,  230,  230,  230,
      230,  231,  231,  643,  642,  231,  231,  231,  231,  231,
      232,  232,  232,  232,  232,  233,  233,  233,  233,  233,
      335,  335,  335,  335,  335,  336,  336,  336,  336,  336,
      641,  640,  639,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  619,  618,
      617,  616,  614,  612,  610,  609,  608,  606,  604,  603,
      602,  601,  600,  599,  598,  596,  594,  593,  591,  589,
      587,  585,  584,  582,  580,  579,  578,  576,  575,  574,

      573,  571,  570,  569,  568,  567,  566,  565,  563,  562,
      560,  559,  558,  555,  551,  550,  548,  547,  546,  545,
      543,  540,  539,  538,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  525,  524,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  509,  508,
      507,  506,  505,  504,  502,  501,  500,  498,  497,  496,
      495,  492,  491,  490,  489,  488,  485,  482,  481,  480,
      479,  478,  477,  476,  474,  471,  468,  467,  465,  463,
      462,  461,  459,  458,  457,  454,  453,  451,  448,  447,
      445,  443,  442,  441,  439,  435,  434,  433,  432,  431,

      430,  429,  428,  426,  425,  424,  422,  421,  418,  416,
      414,  410,  409,  408,  407,  406,  405,  404,  402,  401,
      400,  398,  397,  396,  395,  394,  393,  391,  389,  388,
      387,  384,  383,  382,  380,  379,  378,  376,  375,  373,
      372,  371,  370,  369,  368,  367,  365,  362,  361,  359,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  340,  339,  338,  337,
      333,  332,  330,  327,  326,  325,  324,  321,  320,  319,
      318,  317,  316,  314,  312,  311,  308,  307,  306,  305,
      304,  302,  301,  300,  299,  298,  297,  296,  295,  294,

      293,  292,  289,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  274,  273,  272,  271,  270,  268,
      267,  265,  263,  262,  261,  260,  258,  257,  256,  255,
      253,  251,  250,  249,  248,  247,  245,  243,  242,  241,
      240,  238,  237,  236,  235,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  203,  202,
      201,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      191,  190,  189,  188,  187,  186,  185,  184,  183,  181,
      180,  178,  177,  175,  174,  173,  172,  171,  169,  168,

      166,  165,  164,  163,  162,  161,  160,  159,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      144,  143,  135,  134,  133,  132,  131,  130,  129,  125,
      124,  123,  121,  120,  119,  118,  117,  115,  114,  110,
      109,  108,  107,  106,  105,  104,  102,  100,   99,   98,
       96,   95,   93,   92,   91,   90,   89,   88,   87,   86,
       85,   83,   82,   81,   80,   79,   77,   75,   74,   73,
       71,   70,   69,   68,   67,   66,   65,   64,   52,   44,
       43,   42,   41,   36,   35,   32,   21,   20,   19,   11,
        9,    7,    3,  671,  671,  671,  671,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  671,  671
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int gmsh_yy_flex_debug;
int gmsh_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *gmsh_yytext;
#line 1 "Gmsh.l"
#line 2 "Gmsh.l"
// Gmsh - Copyright (C) 1997-2011 C. Geuzaine, J.-F. Remacle
//
// See the LICENSE.txt file for license information. Please report all
// bugs and problems to <gmsh@geuz.org>.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "GmshMessage.h"
#include "Geo.h"
#include "Gmsh.tab.hpp"

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_INPUT(buf,result,max_size)					\
     {									\
       int c = '*', n;							\
       for ( n = 0; n < max_size &&					\
	       (c = getc( gmsh_yyin )) != EOF && c != '\n'; ++n )		\
	 buf[n] = (char) c;						\
       if ( c == '\n' ){						\
	 buf[n++] = (char) c;						\
	 gmsh_yylineno++;							\
       }								\
       if ( c == EOF && ferror( gmsh_yyin ) )				\
	 Msg::Fatal("Input in flex scanner failed");			\
       result = n;							\
     }									\

#if defined(WIN32)
#define isatty(arg) -1
#define YY_NO_UNISTD_H
#endif

#line 922 "Gmsh.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gmsh_yylex_destroy (void );

int gmsh_yyget_debug (void );

void gmsh_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE gmsh_yyget_extra (void );

void gmsh_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *gmsh_yyget_in (void );

void gmsh_yyset_in  (FILE * in_str  );

FILE *gmsh_yyget_out (void );

void gmsh_yyset_out  (FILE * out_str  );

yy_size_t gmsh_yyget_leng (void );

char *gmsh_yyget_text (void );

int gmsh_yyget_lineno (void );

void gmsh_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gmsh_yywrap (void );
#else
extern int gmsh_yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( gmsh_yytext, gmsh_yyleng, 1, gmsh_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gmsh_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gmsh_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, gmsh_yyin))==0 && ferror(gmsh_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(gmsh_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gmsh_yylex (void);

#define YY_DECL int gmsh_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after gmsh_yytext and gmsh_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 49 "Gmsh.l"


#line 1107 "Gmsh.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! gmsh_yyin )
			gmsh_yyin = stdin;

		if ( ! gmsh_yyout )
			gmsh_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gmsh_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE );
		}

		gmsh_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of gmsh_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 672 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 794 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 51 "Gmsh.l"
/* none */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 52 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 53 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 54 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 55 "Gmsh.l"
{ parsestring('\"'); return tBIGSTR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 56 "Gmsh.l"
{ parsestring('\''); return tBIGSTR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 57 "Gmsh.l"
{ gmsh_yylval.d = NEWREG(); return tDOUBLE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 58 "Gmsh.l"
{ gmsh_yylval.d = NEWPOINT(); return tDOUBLE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 59 "Gmsh.l"
{ gmsh_yylval.d = NEWLINE(); return tDOUBLE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 60 "Gmsh.l"
{ gmsh_yylval.d = NEWLINE(); return tDOUBLE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 61 "Gmsh.l"
{ gmsh_yylval.d = NEWLINELOOP(); return tDOUBLE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 62 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACE(); return tDOUBLE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 63 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACELOOP(); return tDOUBLE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 64 "Gmsh.l"
{ gmsh_yylval.d = NEWVOLUME(); return tDOUBLE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 65 "Gmsh.l"
{ gmsh_yylval.d = NEWFIELD(); return tDOUBLE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 66 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 67 "Gmsh.l"
return tAFFECTPLUS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 68 "Gmsh.l"
return tAFFECTMINUS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "Gmsh.l"
return tAFFECTTIMES;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "Gmsh.l"
return tAFFECTDIVIDE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "Gmsh.l"
return tOR;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "Gmsh.l"
return tAND;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "Gmsh.l"
return tPLUSPLUS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "Gmsh.l"
return tMINUSMINUS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "Gmsh.l"
return tEQUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "Gmsh.l"
return tNOTEQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "Gmsh.l"
return tLESSOREQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "Gmsh.l"
return tGREATEROREQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 82 "Gmsh.l"
return tAcos;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tAcos;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tAlias;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "Gmsh.l"
return tAliasWithOptions;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "Gmsh.l"
return tAsin;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "Gmsh.l"
return tAsin;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "Gmsh.l"
return tAtan;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "Gmsh.l"
return tAtan;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "Gmsh.l"
return tBezier;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tBoundingBox;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tCeil;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tCircle;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tCombine;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tCosh;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tCos;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tComplex;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tColor;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tCompound;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tCoordinates;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "Gmsh.l"
return tSpline;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tCall;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tCreateTopology;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tCreateTopologyNoHoles;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tDelete;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tDegenerated;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tDilate;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tDraw;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tExp;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 125 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tEuclidian;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tExit;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tFabs;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tField;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tFloor;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 132 "Gmsh.l"
return tFmod;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tFor;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 134 "Gmsh.l"
return tFunction;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tGetEnv;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tGetString;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tGetValue;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tGMSH_MAJOR_VERSION;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tGMSH_MINOR_VERSION;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tGMSH_PATCH_VERSION;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tHide;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tHole;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 145 "Gmsh.l"
return tHomRank;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tHomGen;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tHomCut;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tHomSeq;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tHypot;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tIn;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tIf;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tInterpolationScheme;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tNurbsKnots;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tLength;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tLine;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "Gmsh.l"
return tLoop;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tLog;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tLog10;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tLayers;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tLevelset;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 166 "Gmsh.l"
return tModulo;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tNurbsOrder;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tPeriodic;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tPi;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tPlane;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tPoint;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tParametric;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 180 "Gmsh.l"
return tPolarSphere;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 181 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tRotate;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tRuled;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tRand;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tRefineMesh;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tReturn;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tSmoother;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 192 "Gmsh.l"
return tSqrt;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tSin;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tSinh;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tSphere;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tSpline;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tSplit;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tSurface;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tSprintf;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tStrCat;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tStrPrefix;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 202 "Gmsh.l"
return tStrRelative;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tShow;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 205 "Gmsh.l"
return tSyncModel;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tText2D;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tText3D;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tTime;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 210 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tTanh;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tTan;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tToday;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tUsing;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tVolume;
	YY_BREAK
case 149:
#line 221 "Gmsh.l"
case 150:
#line 222 "Gmsh.l"
case 151:
#line 223 "Gmsh.l"
case 152:
YY_RULE_SETUP
#line 223 "Gmsh.l"
{ gmsh_yylval.d = atof((char *)gmsh_yytext); return tDOUBLE; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 225 "Gmsh.l"
{ gmsh_yylval.c = strsave((char*)gmsh_yytext); return tSTRING; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return gmsh_yytext[0];
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 229 "Gmsh.l"
ECHO;
	YY_BREAK
#line 1957 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gmsh_yyin at a new source and called
			 * gmsh_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = gmsh_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( gmsh_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * gmsh_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of gmsh_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gmsh_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gmsh_yyrestart(gmsh_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gmsh_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 672 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 672 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 671);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up gmsh_yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gmsh_yyrestart(gmsh_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gmsh_yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve gmsh_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void gmsh_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        gmsh_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE );
	}

	gmsh_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	gmsh_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void gmsh_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gmsh_yypop_buffer_state();
	 *		gmsh_yypush_buffer_state(new_buffer);
     */
	gmsh_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gmsh_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (gmsh_yywrap()) processing, but the only time this flag
	 * is looked at is after gmsh_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void gmsh_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	gmsh_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE gmsh_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gmsh_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gmsh_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	gmsh_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with gmsh_yy_create_buffer()
 * 
 */
    void gmsh_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gmsh_yyfree((void *) b->yy_ch_buf  );

	gmsh_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gmsh_yyrestart() or at EOF.
 */
    static void gmsh_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	gmsh_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gmsh_yy_init_buffer was _probably_
     * called from gmsh_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void gmsh_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gmsh_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void gmsh_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	gmsh_yyensure_buffer_stack();

	/* This block is copied from gmsh_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gmsh_yy_switch_to_buffer. */
	gmsh_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void gmsh_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	gmsh_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		gmsh_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gmsh_yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmsh_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmsh_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmsh_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmsh_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gmsh_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gmsh_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gmsh_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gmsh_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       gmsh_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE gmsh_yy_scan_string (yyconst char * yystr )
{
    
	return gmsh_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to gmsh_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gmsh_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gmsh_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gmsh_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gmsh_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmsh_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		gmsh_yytext[gmsh_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = gmsh_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		gmsh_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int gmsh_yyget_lineno  (void)
{
        
    return gmsh_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *gmsh_yyget_in  (void)
{
        return gmsh_yyin;
}

/** Get the output stream.
 * 
 */
FILE *gmsh_yyget_out  (void)
{
        return gmsh_yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t gmsh_yyget_leng  (void)
{
        return gmsh_yyleng;
}

/** Get the current token.
 * 
 */

char *gmsh_yyget_text  (void)
{
        return gmsh_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void gmsh_yyset_lineno (int  line_number )
{
    
    gmsh_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see gmsh_yy_switch_to_buffer
 */
void gmsh_yyset_in (FILE *  in_str )
{
        gmsh_yyin = in_str ;
}

void gmsh_yyset_out (FILE *  out_str )
{
        gmsh_yyout = out_str ;
}

int gmsh_yyget_debug  (void)
{
        return gmsh_yy_flex_debug;
}

void gmsh_yyset_debug (int  bdebug )
{
        gmsh_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gmsh_yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    gmsh_yyin = stdin;
    gmsh_yyout = stdout;
#else
    gmsh_yyin = (FILE *) 0;
    gmsh_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gmsh_yylex_init()
     */
    return 0;
}

/* gmsh_yylex_destroy is for both reentrant and non-reentrant scanners. */
int gmsh_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gmsh_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gmsh_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	gmsh_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gmsh_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gmsh_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gmsh_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gmsh_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see gmsh_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 229 "Gmsh.l"



#undef gmsh_yywrap

int gmsh_yywrap() {return 1;}

void skipcomments(void)
{
  int c;

  while (1) {
    while ((c = yyinput()) != '*'){
      if(feof(gmsh_yyin)){
	Msg::Error("End of file in commented region");
        return;
      }
    }
    if ((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar)
{
  int c;
  char tmp[1024];
  
  // Note that we keep special characters (end-of-line \n, tabs \t,
  // etc.) "as is" in the output string: see yyinput() above
  int i = 0;
  while ((c = yyinput()) != endchar) {
    if(feof(gmsh_yyin)){
      Msg::Error("End of file in string");
      break;
    }
    else if(i >= (int)sizeof(tmp)-1){
      Msg::Error("String too long");
      break;
    }
    else{
      tmp[i++] = (char)c;
    }
  }
  tmp[i] = '\0';
  gmsh_yylval.c = strsave(tmp);
}

char *strsave(char *ptr)
{
  return((char*)strcpy((char*)malloc(strlen(ptr)+1),ptr));
}

void skipline()
{
  int c;
  while ((c = yyinput()) != '\n'){
    if(feof(gmsh_yyin)) return;
  }
}

void skip_until(const char *skip, const char *until)
{
  int i, nb_skip;
  int l, l_skip, l_until;
  char chars[256];

  nb_skip = 0;

  if(skip)
    l_skip = strlen(skip);
  else
    l_skip = 0;

  l_until = strlen(until);

  while(1){
    while (1){
      chars[0] = yyinput();
      if(feof(gmsh_yyin)){
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == until[0]) break;
      if(skip && chars[0] == skip[0]) break;
    }

    l = std::max(l_skip,l_until);
    if(l >= (int)sizeof(chars)){
      Msg::Error("Search pattern too long in skip_until");
      return;
    }
    for(i=1; i<l; i++){
      chars[i] = yyinput();
      if(feof(gmsh_yyin)){
	l = i;
	break;
      }
    }

    if(!strncmp(chars,until,l_until)){
      if(!nb_skip){
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars,skip,l_skip)){
      nb_skip++;
    }
    else{
      for(i=1;i<l-1;i++){
	unput(chars[l-i]);
      }
    }

  }
}

void gmsh_yyflush() { YY_FLUSH_BUFFER; }

