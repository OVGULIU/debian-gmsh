@c
@c This file is generated automatically by running "gmsh -doc".
@c Do not edit by hand!
@c

@ftable @code
@item Attractor
Compute the distance from the nearest node in a list. It can also be used to compute the distance from curves, in which case each curve is replaced by NNodesByEdge equidistant nodes and the distance from those nodes is computed.@*
Options:@*
@table @code
@item EdgesList
Indices of curves in the geometric model@*
type: list@*
default value: @code{@{@}}
@item FacesList
Indices of surfaces in the geometric model (Warning, this feature is still experimental. It might (read: will probably) give wrong results for complex surfaces)@*
type: list@*
default value: @code{@{@}}
@item NNodesByEdge
Number of nodes used to discretized each curve@*
type: integer@*
default value: @code{20}
@item NodesList
Indices of nodes in the geometric model@*
type: list@*
default value: @code{@{@}}
@end table

@item BoundaryLayer
hwall * ratio^(dist/hwall)@*
Options:@*
@table @code
@item IField
Index of the field that contains the distance function@*
type: integer@*
default value: @code{0}
@item hfar
Element size far from the wall@*
type: float@*
default value: @code{1}
@item hwall_n
Mesh Size Normal to the The Wall@*
type: float@*
default value: @code{0.1}
@item hwall_t
Mesh Size Tangent to the Wall@*
type: float@*
default value: @code{0.5}
@item ratio
Size Ratio Between Two Successive Layers@*
type: float@*
default value: @code{1.1}
@end table

@item Box
The value of this field is VIn inside the box, VOut outside the box. The box is given by@*
@*
  Xmin <= x <= XMax &&@*
  YMin <= y <= YMax &&@*
  ZMin <= z <= ZMax@*
Options:@*
@table @code
@item VIn
Value inside the box@*
type: float@*
default value: @code{0}
@item VOut
Value outside the box@*
type: float@*
default value: @code{0}
@item XMax
Maximum X coordinate of the box@*
type: float@*
default value: @code{0}
@item XMin
Minimum X coordinate of the box@*
type: float@*
default value: @code{0}
@item YMax
Maximum Y coordinate of the box@*
type: float@*
default value: @code{0}
@item YMin
Minimum Y coordinate of the box@*
type: float@*
default value: @code{0}
@item ZMax
Maximum Z coordinate of the box@*
type: float@*
default value: @code{0}
@item ZMin
Minimum Z coordinate of the box@*
type: float@*
default value: @code{0}
@end table

@item Curvature
Compute the curvature of Field[IField]:@*
@*
  F = div(norm(grad(Field[IField])))@*
Options:@*
@table @code
@item Delta
Step of the finite differences@*
type: float@*
default value: @code{0}
@item IField
Field index@*
type: integer@*
default value: @code{1}
@end table

@item Cylinder
The value of this field is VIn inside a frustrated cylinder, VOut outside. The cylinder is given by@*
@*
  ||dX||^2 < R^2 &&@*
  (X-X0).A < ||A||^2@*
  dX = (X - X0) - ((X - X0).A)/(||A||^2) . A@*
Options:@*
@table @code
@item Radius
Radius@*
type: float@*
default value: @code{0}
@item VIn
Value inside the cylinder@*
type: float@*
default value: @code{0}
@item VOut
Value outside the cylinder@*
type: float@*
default value: @code{0}
@item XAxis
X component of the cylinder axis@*
type: float@*
default value: @code{0}
@item XCenter
X coordinate of the cylinder center@*
type: float@*
default value: @code{0}
@item YAxis
Y component of the cylinder axis@*
type: float@*
default value: @code{0}
@item YCenter
Y coordinate of the cylinder center@*
type: float@*
default value: @code{0}
@item ZAxis
Z component of the cylinder axis@*
type: float@*
default value: @code{1}
@item ZCenter
Z coordinate of the cylinder center@*
type: float@*
default value: @code{0}
@end table

@item Gradient
Compute the finite difference gradient of Field[IField]:@*
@*
  F = (Field[IField](X + Delta/2) -        Field[IField](X - Delta/2)) / Delta@*
Options:@*
@table @code
@item Delta
Finite difference step@*
type: float@*
default value: @code{0}
@item IField
Field index@*
type: integer@*
default value: @code{1}
@item Kind
Component of the gradient to evaluate: 0 for X, 1 for Y, 2 for Z, 3 for the norm@*
type: integer@*
default value: @code{0}
@end table

@item Laplacian
Compute finite difference the Laplacian of Field[IField]:@*
@*
  F = G(x+d,y,z) + G(x-d,y,z) +@*
      G(x,y+d,z) + G(x,y-d,z) +@*
      G(x,y,z+d) + G(x,y,z-d) - 6 * G(x,y,z),@*
@*
where G=Field[IField] and d=Delta@*
Options:@*
@table @code
@item Delta
Finite difference step@*
type: float@*
default value: @code{0.1}
@item IField
Field index@*
type: integer@*
default value: @code{1}
@end table

@item LonLat
Evaluate Field[IField] in geographic coordinates (longitude, latitude):@*
@*
  F = Field[IField](atan(y/x), asin(z/sqrt(x^2+y^2+z^2))@*
Options:@*
@table @code
@item IField
Index of the field to evaluate.@*
type: integer@*
default value: @code{1}
@end table

@item MathEval
Evaluate a mathematical expression. The expression can contain x, y, z for spatial coordinates, F0, F1, ... for field values, and and mathematical functions.@*
Options:@*
@table @code
@item F
Mathematical function to evaluate.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@end table

@item MathEvalAniso
Evaluate a metric expression. The expressions can contain x, y, z for spatial coordinates, F0, F1, ... for field values, and and mathematical functions.@*
Options:@*
@table @code
@item m11
element 11 of the metric tensor.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@item m12
element 12 of the metric tensor.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@item m13
element 13 of the metric tensor.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@item m22
element 22 of the metric tensor.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@item m23
element 23 of the metric tensor.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@item m33
element 33 of the metric tensor.@*
type: string@*
default value: @code{"F2 + Sin(z)"}
@end table

@item Max
Take the maximum value of a list of fields.@*
Options:@*
@table @code
@item FieldsList
Field indices@*
type: list@*
default value: @code{@{@}}
@end table

@item MaxEigenHessian
Compute the maximum eigenvalue of the Hessian matrix of Field[IField], with the gradients evaluated by finite differences:@*
@*
  F = max(eig(grad(grad(Field[IField]))))@*
Options:@*
@table @code
@item Delta
Step used for the finite differences@*
type: float@*
default value: @code{0}
@item IField
Field index@*
type: integer@*
default value: @code{1}
@end table

@item Mean
Simple smoother:@*
@*
  F = (G(x+delta,y,z) + G(x-delta,y,z) +@*
       G(x,y+delta,z) + G(x,y-delta,z) +@*
       G(x,y,z+delta) + G(x,y,z-delta) +@*
       G(x,y,z)) / 7,@*
@*
where G=Field[IField]@*
Options:@*
@table @code
@item Delta
Distance used to compute the mean value@*
type: float@*
default value: @code{0.0001}
@item IField
Field index@*
type: integer@*
default value: @code{0}
@end table

@item Min
Take the minimum value of a list of fields.@*
Options:@*
@table @code
@item FieldsList
Field indices@*
type: list@*
default value: @code{@{@}}
@end table

@item MinAniso
Take the intersection of a list of possibly anisotropic fields.@*
Options:@*
@table @code
@item FieldsList
Field indices@*
type: list@*
default value: @code{@{@}}
@end table

@item Param
Evaluate Field IField in parametric coordinates:@*
@*
  F = Field[IField](FX,FY,FZ)@*
@*
See the MathEval Field help to get a description of valid FX, FY and FZ expressions.@*
Options:@*
@table @code
@item FX
X component of parametric function@*
type: string@*
default value: @code{""}
@item FY
Y component of parametric function@*
type: string@*
default value: @code{""}
@item FZ
Z component of parametric function@*
type: string@*
default value: @code{""}
@item IField
Field index@*
type: integer@*
default value: @code{1}
@end table

@item PostView
Evaluate the post processing view IView.@*
Options:@*
@table @code
@item CropNegativeValues
return LC_MAX instead of a negative value (this option is needed for backward compatibility with the BackgroundMesh option@*
type: boolean@*
default value: @code{1}
@item IView
Post-processing view index@*
type: integer@*
default value: @code{0}
@end table

@item Restrict
Restrict the application of a field to a given list of geometrical curves, surfaces or volumes.@*
Options:@*
@table @code
@item EdgesList
Curve indices@*
type: list@*
default value: @code{@{@}}
@item FacesList
Surface indices@*
type: list@*
default value: @code{@{@}}
@item IField
Field index@*
type: integer@*
default value: @code{1}
@item RegionsList
Volume indices@*
type: list@*
default value: @code{@{@}}
@end table

@item Structured
Linearly interpolate between data provided on a 3D rectangular structured grid.@*
@*
The format of the input file is:@*
@*
  Ox Oy Oz @*
  Dx Dy Dz @*
  nx ny nz @*
  v(0,0,0) v(0,0,1) v(0,0,2) ... @*
  v(0,1,0) v(0,1,1) v(0,1,2) ... @*
  v(0,2,0) v(0,2,1) v(0,2,2) ... @*
  ...      ...      ... @*
  v(1,0,0) ...      ... @*
@*
where O are the coordinates of the first node, D are the distances between nodes in each direction, n are the numbers of nodes in each direction, and v are the values on each node.@*
Options:@*
@table @code
@item FileName
Name of the input file@*
type: path@*
default value: @code{""}
@item TextFormat
True for ASCII input files, false for binary files (4 bite signed integers for n, double precision floating points for v, D and O)@*
type: boolean@*
default value: @code{0}
@end table

@item Threshold
F = LCMin if Field[IField] <= DistMin,@*
F = LCMax if Field[IField] >= DistMax,@*
F = interpolation between LcMin and LcMax if DistMin < Field[IField] < DistMax@*
Options:@*
@table @code
@item DistMax
Distance from entity after which element size will be LcMax@*
type: float@*
default value: @code{10}
@item DistMin
Distance from entity up to which element size will be LcMin@*
type: float@*
default value: @code{1}
@item IField
Index of the field to evaluate@*
type: integer@*
default value: @code{0}
@item LcMax
Element size outside DistMax@*
type: float@*
default value: @code{1}
@item LcMin
Element size inside DistMin@*
type: float@*
default value: @code{0.1}
@item Sigmoid
True to interpolate between LcMin and LcMax using a sigmoid, false to interpolate linearly@*
type: boolean@*
default value: @code{0}
@item StopAtDistMax
True to not impose element size outside DistMax (i.e., F = a very big value if Field[IField] > DistMax)@*
type: boolean@*
default value: @code{0}
@end table

@item UTM
Evaluate Field[IField] in Universal Transverse Mercator coordinates.@*
@*
The formulas for the coordinates transformation are taken from:@*
@*
  http://www.uwgb.edu/dutchs/UsefulData/UTMFormulas.HTM@*
Options:@*
@table @code
@item IField
Index of the field to evaluate@*
type: integer@*
default value: @code{1}
@item Zone
Zone of the UTM projection@*
type: integer@*
default value: @code{0}
@end table

@end ftable
