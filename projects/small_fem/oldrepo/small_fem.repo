SVN-fs-dump-format-version: 2

UUID: aa0a1125-c65e-43c1-8df5-c7d60e4b9835

Revision-number: 0
Prop-content-length: 56
Content-length: 56

K 8
svn:date
V 27
2012-04-26T19:49:10.443765Z
PROPS-END

Revision-number: 1
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-04-26T19:57:16.044108Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 740
Text-content-md5: 15d597b5b0542e199a7fff9039ba21d1
Text-content-sha1: 69e88198313c95950a2b6d2069710a9775f34686
Content-length: 750

PROPS-END
cmake_minimum_required(VERSION 2.6)
project(SmallFem)

find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)

macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)



add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
add_subdirectory(postprocessing)
add_subdirectory(solver)


list(APPEND sources Main.cpp)

include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)

add_executable(sf ${sources}) 

target_link_libraries(sf cblas lapack)

Node-path: Main.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 788
Text-content-md5: cf2d9b5fe3f94dba9fdf887150440d38
Text-content-sha1: 3061cf153d55a37be3bb096945e8b3c5c394602c
Content-length: 798

PROPS-END
#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  // Create Formulation //
  Vector<double> f(2); f(0) = -1; f(1) = 1; // Vector to project
  FormulationLaplace laplace;
  FormulationProjection projection(f);

  // Create System //
  System sys(msh.getAllNodeElements(), laplace);
  //System sys(msh.getAllEdgeElements(), projection);

  // Set Bondary Conditions //
  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  // Solve System //
  sys.solve();

  // Write Solution //
  Solution sol(msh, laplace);
  //Solution sol(msh, projection);
  sol.write("sol.pos");

  return 0;
}


Node-path: assembler
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: assembler/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 100
Text-content-md5: 19838372a35f02f9dc8558834586b6ad
Text-content-sha1: f338f23d6d7f5550c9932eb1b6b6dc0dcf3100d5
Content-length: 110

PROPS-END
set(src
  Dof.cpp
  DofManager.cpp
  GroupOfDof.cpp
  System.cpp
)

add_sources(assembler "${src}")


Node-path: assembler/Dof.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 261
Text-content-md5: 54673c8fc8b8ae5bbb3ea9d5d224912a
Text-content-sha1: a44e6b0d09816b74a8fa8626157364a1ca5358ec
Content-length: 271

PROPS-END
#include <sstream>
#include "Dof.h"

Dof::Dof(const int entity, const int type){
  this->entity = entity;
  this->type = type;
}

std::string Dof::toString(void) const{
  std::stringstream s;
  
  s << "(" << entity << ", " << type << ")";

  return s.str();
}


Node-path: assembler/Dof.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1003
Text-content-md5: a8ca7031ddea0a33f56bd48670d02944
Text-content-sha1: a77ca7ae5a77a05a2ea085ee94af753083913f63
Content-length: 1013

PROPS-END
#ifndef _DOF_H_
#define _DOF_H_

#include <string>

class DofManager;

class Dof{
 private:
  int entity;
  int type;

  friend class DofManager;

 private:
   Dof(const int entity, const int type);
  ~Dof(void);

 public:
  int getEntity(void) const;
  int getType(void) const;

  bool operator<(const Dof& other) const;
  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

  std::string toString(void) const;
};

inline Dof::~Dof(void){
}

inline int Dof::getEntity(void) const{
  return entity;
}

inline int Dof::getType(void) const{
  return type;
}

inline bool Dof::operator<(const Dof& other) const{
  return (entity < other.entity) ||
    ((entity == other.entity) && (type < other.type));
}

inline bool Dof::operator>(const Dof& other) const{
  return (entity > other.entity) ||
    ((entity == other.entity) && (type > other.type));
}

inline bool Dof::operator==(const Dof& other) const{
  return (entity == other.entity) && (type == other.type);
}

#endif


Node-path: assembler/DofManager.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2649
Text-content-md5: c456a237d763f983886d55c137751f7f
Text-content-sha1: 12f0ff5bc4e6be820185adc487435d5dac972b05
Content-length: 2659

PROPS-END
#include <sstream>
#include "DofManager.h"

using namespace std;

DofManager::DofManager(const std::vector<Element*>& element){
  // Init Lookup struct and GroupOfDof //
  nGroup = element.size();
  dof               = new vector<Dof*>(getNbDofFromElements(element));
  globalId          = new map<Dof*, int    , DofComparator>;
  dofToEntityLookup = new map<Dof*, Entity*, DofComparator>;
  group             = new vector<GroupOfDof*>(nGroup);
  physical          = new multimap<int, Dof*>;

  // Add Elements to DofManager //
  nextId = 0;

  dofLookup = new set<Dof*, DofComparator>;

  for(int i = 0; i < nGroup; i++)
    add(*element[i], i);

  delete dofLookup;

  nDof = dof->size();
}

DofManager::~DofManager(void){
  for(int i = 0; i < nGroup; i++)
    delete (*group)[i];
  delete group;

  delete globalId;
  delete dofToEntityLookup;
  delete physical;

  for(int i = 0; i < nDof; i++)
    delete (*dof)[i];
  delete dof;
}

void DofManager::add(Element& element, int groupId){  
  const int type = element.getType();
  const int nEntity = element.nEntity();
  const std::vector<Entity*>& entity = element.getAllEntities();

  (*group)[groupId] = new GroupOfDof(nEntity, element.getId());

  for(int i = 0; i < nEntity; i++){
    pair<set<Dof*, DofComparator>::iterator, bool> p;
    Dof* tmp = new Dof(entity[i]->getId(), type);

    p = dofLookup->insert(tmp);
 
    if(p.second){
      (*dof)[nextId] = tmp;
      globalId->insert(pair<Dof*, int>(tmp, nextId));
      dofToEntityLookup->insert(pair<Dof*, Entity*>(tmp, entity[i]));
      
      (*group)[groupId]->add(tmp);

      if(entity[i]->gotPhysical())
	physical->insert(pair<int, Dof*>(entity[i]->getPhysical(), tmp));

      nextId += 1;
    }

    else{
      delete tmp; // Dof already exists
      (*group)[groupId]->add(*(p.first)); // Add real Dof
    }
  }
  
  (*group)[groupId]->jacobian(element);
  (*group)[groupId]->orientation(element.getAllOrientations());
}

int DofManager::getNbDofFromElements(const vector<Element*>& element) const{
  set<int> entityLookup;
  const int N = element.size();
  
  for(int i = 0; i < N; i++){
    const vector<int>& id = element[i]->getAllEntitiesId();
    const int M = id.size();
    
    for(int j = 0; j < M; j++)
      entityLookup.insert(id[j]);
  }
    
  return entityLookup.size();
}

string DofManager::toString(void) const{
  stringstream s;
  map<Dof*, int, DofComparator>::iterator i   = globalId->begin();
  map<Dof*, int, DofComparator>::iterator end = globalId->end();
  
  for(; i != end; i++)
    s << "("  << (*i).first->toString() 

      << ": " << (*i).second 
      << ")"  << endl;

  return s.str();
}


Node-path: assembler/DofManager.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1988
Text-content-md5: 8d601b955329dcf698c4f67991f6bde0
Text-content-sha1: 7b509957b59398b35246d33065e9a3d7f79e253c
Content-length: 1998

PROPS-END
#ifndef _DOFMANAGER_H_
#define _DOFMANAGER_H_

#include <string>
#include <set>
#include <map>
#include <vector>

#include "GroupOfDof.h"

class DofManager{
 private:
  
  class DofComparator{
  public:
    bool operator()(const Dof* a, const Dof* b) const;
  };

  int nDof;
  int nextId;
  std::vector<Dof*>* dof;

  std::map<Dof*, int    , DofComparator>* globalId;
  std::map<Dof*, Entity*, DofComparator>* dofToEntityLookup;
  std::multimap<int, Dof*>* physical;

  std::vector<GroupOfDof*>* group;
  int nGroup;

  std::set<Dof*, DofComparator>* dofLookup;

 public:
   DofManager(const std::vector<Element*>& element);
  ~DofManager(void);

  int dofNumber(void) const;
  int groupNumber(void) const;

  const std::vector<Dof*>& getAllDofs(void) const;
  const std::multimap<int, Dof*>& getAllPhysicals(void) const;
  const std::vector<GroupOfDof*>& getAllGroups(void) const;

  int   getGlobalId(Dof& dof) const;
  Entity& getEntity(Dof& dof) const;

  std::string toString(void) const;

 private:
  void add(Element& element, int groupId);
  int  getNbDofFromElements(const std::vector<Element*>& element) const;
};

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

inline int DofManager::dofNumber(void) const{
  return nDof;
}

inline int DofManager::groupNumber(void) const{
  return nGroup;
}

inline const std::vector<Dof*>& DofManager::getAllDofs(void) const{
  return *dof;
}

inline const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const{
  return *physical;
}

inline const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const{
  return *group;
}

inline int DofManager::getGlobalId(Dof& dof) const{
  return globalId->find(&dof)->second;
}

inline Entity& DofManager::getEntity(Dof& dof) const{
  return *(dofToEntityLookup->find(&dof)->second);
}

inline bool DofManager::DofComparator::operator()(const Dof* a, const Dof* b) const{
  return *a < *b;
}

#endif


Node-path: assembler/GroupOfDof.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 403
Text-content-md5: 1abedf53fb2c2f6a17fe997702973e01
Text-content-sha1: abf4294f46c723f58960c41fe62b7acf6df8adf7
Content-length: 413

PROPS-END
#include "GroupOfDof.h"

GroupOfDof::GroupOfDof(int numberOfDof, int groupId){
  id = groupId;
  
  nextDof = 0;
  nDof = numberOfDof;
  dof = new std::vector<Dof*>(nDof);
  jac = NULL;
}

GroupOfDof::~GroupOfDof(void){
  // GroupOfDofs are not responsible for
  // deleting dofs, orientations and Jacobian
  delete dof;
}

void GroupOfDof::add(Dof* dof){
  this->dof->at(nextDof) = dof;
  nextDof++;
}


Node-path: assembler/GroupOfDof.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1302
Text-content-md5: fb7c5e4e8eeb22dcbb5c41af9701f3f8
Text-content-sha1: c8084246cc3a1f87852ca46915fc2170bc9d777e
Content-length: 1312

PROPS-END
#ifndef _GROUPOFDOF_H_
#define _GROUPOFDOF_H_

#include <vector>
#include "Dof.h"
#include "Element.h"
#include "Jacobian.h"

class DofManager;

class GroupOfDof{
 private:
  int id;

  std::vector<Dof*>* dof;
  const std::vector<int>* direction;
  int nDof;
  int nextDof;
  
  Jacobian* jac;
  friend class DofManager;

 private:
   GroupOfDof(int numberOfDof, int groupId);
  ~GroupOfDof(void);

  void add(Dof* dof);
  void jacobian(Element& element);
  void orientation(const std::vector<int>& orientation);

 public:
  int getId(void) const;
  int dofNumber(void) const;
  const std::vector<Dof*>& getAllDofs(void) const;
  const Jacobian& getJacobian(void) const;
  int getOrientation(const int dofId) const;
};

inline void GroupOfDof::jacobian(Element& element){
  jac = &(element.getJacobian());
}

inline void GroupOfDof::orientation(const std::vector<int>& orientation){
  direction = &orientation;
}

inline int GroupOfDof::getId(void) const{
  return id;
}

inline int GroupOfDof::dofNumber(void) const{
  return nDof;
}

inline const std::vector<Dof*>& GroupOfDof::getAllDofs(void) const{
  return *dof;
}

inline const Jacobian& GroupOfDof::getJacobian(void) const{
  return *jac;
}

inline int GroupOfDof::getOrientation(const int dofId) const{
  return (*direction)[dofId];
}

#endif


Node-path: assembler/System.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2323
Text-content-md5: e4141e439560d904218110a90c7c5f43
Text-content-sha1: 0b5a6ec1a50e61af06d9d91f8f481e2afd1f1ee7
Content-length: 2333

PROPS-END
#include "System.h"
#include "Formulation.h"
#include "Exception.h"
#include "Solver.h"

#include <cstdio>

using namespace std;

System::System(const std::vector<Element*>& elements,
	       const Formulation& formulation){
  // Get Formulation //
  this->formulation = &formulation;

  // Get Dof Manager //
  dofM = new DofManager(elements);

  // Get DofManager Data //
  size = dofM->dofNumber();
  
  const std::vector<GroupOfDof*>& group = dofM->getAllGroups();
  const int E = dofM->groupNumber();

  // Create System //
  A = new Matrix(size, size);
  n = new Vector<double>(size);

  A->allToZero();
  n->allToZero();

  // Assemble System //
  for(int i = 0; i < E; i++)
    assemble(*(group[i]));
}

System::~System(void){
  delete A;
  delete n;
  delete dofM;
  // System is not responsible for deleting 'Formulations'
}

void System::fixBC(const int physicalId, const double value){
  
  const multimap<int, Dof*>& physicals = dofM->getAllPhysicals();

  multimap<int, Dof*>::const_iterator j;

  pair<multimap<int, Dof*>::const_iterator, multimap<int, Dof*>::const_iterator>
    range;
  range = physicals.equal_range(physicalId);
  
  if((range.first == range.second) &&
     (range.first == physicals.end()))
    throw Exception("Unknown Physical");
  
  for(j = range.first; j != range.second; j++){
    // Get Dof Id
    int dofId = dofM->getGlobalId(*((*j).second));

    // We set the 'dofId'th row to zero
    for(int i = 0; i < size; i++)
      (*A)(dofId, i) = 0.0;

    // We set the 'dofId'th diagonal to one
    (*A)(dofId, dofId) = 1.0;
    
    // We also set the 'dofId'th RHS to 'value' 
    (*n)(dofId) = value;
  }
}

void System::solve(void){
  // Get dof value //
  Solver::solve(*A, *n);

  // Set all Entities value //
  const vector<Dof*>* dof = &dofM->getAllDofs();
  const int N = dof->size();
  
  for(int i = 0; i < N; i++)
    dofM->getEntity(*((*dof)[i])).setValue((*n)(i));
}

void System::assemble(GroupOfDof& group){
  const vector<Dof*>& dof = group.getAllDofs();
  const int N = group.dofNumber();

  for(int i = 0; i < N; i++){
    int dofI = dofM->getGlobalId(*(dof[i]));

    for(int j = 0; j < N; j++){
      int dofJ = dofM->getGlobalId(*(dof[j]));
      (*A)(dofI, dofJ) += 
	formulation->weak(i, j, group);
    }

    (*n)(dofI) += formulation->rhs(i, group);
  }
}


Node-path: assembler/System.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 745
Text-content-md5: 2704c5582e8d3943b831aaf88b003223
Text-content-sha1: b1eaf4d7a314df9ee7cc02cb985c6472d3398cc6
Content-length: 755

PROPS-END
#ifndef _SYSTEM_H_
#define _SYSTEM_H_

#include "Matrix.h"
#include "Vector.h"
#include "Mesh.h"
#include "Jacobian.h"
#include "DofManager.h"
#include "Formulation.h"

class System{
 private:
  Matrix* A;
  Vector<double>* n;
  int size;

  DofManager* dofM;
  const Formulation* formulation;

 public:
   System(const std::vector<Element*>& elements, 
	  const Formulation& formulation);
  ~System(void);

  Matrix& getMatrix(void) const;
  Vector<double>& getRHS(void) const;

  void fixBC(const int physicalId, const double value);
  void solve(void);
  
 private:
  void assemble(GroupOfDof& group);
};

inline Matrix& System::getMatrix(void) const{
  return *A;
}

inline Vector<double>& System::getRHS(void) const{
  return *n;
}

#endif


Node-path: basis
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: basis/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 72
Text-content-md5: a9f579a5b8644ba7dc2393345bc5fd1e
Text-content-sha1: 1356ceb1a646fbe86579081e715a97ff228d9194
Content-length: 82

PROPS-END
set(src
  EdgeSpace.cpp
  NodalSpace.cpp
)


add_sources(basis "${src}")

Node-path: basis/EdgeSpace.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1262
Text-content-md5: d87609eb21f38e5e565ad7806a4b071e
Text-content-sha1: 042a40f1c3cd7a022238e1c830ccb6cfa7646d7d
Content-length: 1272

PROPS-END
#include "EdgeSpace.h"
#include "Exception.h"

EdgeSpace::EdgeSpace(void){
  phi[0] = &phi0;
  phi[1] = &phi1;
  phi[2] = &phi2;

  nodePhi[0] = &NodalSpace::phi0;
  nodePhi[1] = &NodalSpace::phi1;
  nodePhi[2] = &NodalSpace::phi2;
}

Vector<double> EdgeSpace::at(const int i, const double x, const double y) const{
  if(i < 0 || i > 2)
    throw Exception("Unknown function");

  return phi[i](x, y);
}

Vector<double> EdgeSpace::at(const int i, const double x, const double y, 
			     const Jacobian& jac) const{
  if(i < 0 || i > 2)
    throw Exception("Unknown function");
  
  const int j     = (i + 1) % 3;
  const Vector<double> uv = jac.invMap(x, y);

  const double phi0 = nodePhi[i](uv(0), uv(1));
  const double phi1 = nodePhi[j](uv(0), uv(1));
  
  const Vector<double> gradPhi0(2);
  const Vector<double> gradPhi1(2);

  Vector<double> edgePhi(2);
  edgePhi(0) = (phi0 * gradPhi1(0)) - (phi1 * gradPhi0(0));
  edgePhi(1) = (phi0 * gradPhi1(1)) - (phi1 * gradPhi0(1));

  return edgePhi;
}

Matrix EdgeSpace::dAt(const int i, const double x, const double y) const{
  throw Exception("Not implemented");
}

Matrix EdgeSpace::dAt(const int i, const double x, const double y,
		      const Jacobian& jac) const{
  throw Exception("Not implemented");
}


Node-path: basis/EdgeSpace.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1597
Text-content-md5: afa2aa3fe68fb9e0adcc357adb0ca214
Text-content-sha1: c5ea408ea0f8798f5093644b235d88df2c9a26ce
Content-length: 1607

PROPS-END
#ifndef _EDGESPACE_H_
#define _EDGESPACE_H_

#include "FunctionalSpace.h"
#include "Vector.h"
#include "Matrix.h"
#include "NodalSpace.h"

class EdgeSpace: public FunctionalSpace<Vector<double>, Matrix>{
 private:
  Vector<double> (*phi[3])(const double, const double);
  double         (*nodePhi[3])(const double, const double);

  
 public:
  EdgeSpace(void);
  virtual ~EdgeSpace(void);

  virtual Vector<double> at(const int i, 
			    const double x, 
			    const double y) const;

  virtual Vector<double> at(const int i,
			    const double x,
			    const double y,
			    const Jacobian& jac) const;
  
  virtual Matrix dAt(const int i, 
		     const double x, 
		     const double y) const;

  virtual Matrix dAt(const int i, 
		     const double x, 
		     const double y,
		     const Jacobian& jac) const;

  virtual int getSize(void) const;
  virtual int getType(void) const;

 private:
  static Vector<double> phi0(const double x, const double y);
  static Vector<double> phi1(const double x, const double y);
  static Vector<double> phi2(const double x, const double y);
};

#include <cstdio>
inline EdgeSpace::~EdgeSpace(void){
  printf("Bam\n");
}

inline int EdgeSpace::getSize(void) const{
  return 3;
}

inline int EdgeSpace::getType(void) const{
  return 1;
}

inline Vector<double> EdgeSpace::phi0(const double x, const double y){
  return Vector<double>(2);
}

inline Vector<double> EdgeSpace::phi1(const double x, const double y){
  return Vector<double>(2);
}

inline Vector<double> EdgeSpace::phi2(const double x, const double y){
  return Vector<double>(2);
}

#endif


Node-path: basis/FunctionalSpace.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 839
Text-content-md5: 3a2f8c58d93b06d6f2cf265d59a71a13
Text-content-sha1: 8c86dfee76beb6802adb2b4ed8939916a7d881ed
Content-length: 849

PROPS-END
#ifndef _FUNCTIONALSPACE_H_
#define _FUNCTIONALSPACE_H_

#include "Jacobian.h"

template<class FieldType, class DFieldType>
class FunctionalSpace{
 public:
  virtual ~FunctionalSpace(void) = 0;

  virtual FieldType at(const int i, 
		       const double x, 
		       const double y) const = 0;

  virtual FieldType at(const int i,
		       const double x,
		       const double y,
		       const Jacobian& jac) const = 0;

  virtual DFieldType dAt(const int i, 
			 const double x, 
			 const double y) const = 0;

  virtual DFieldType dAt(const int i, 
			 const double x, 
			 const double y,
			 const Jacobian& jac) const = 0;

  virtual int getSize(void) const = 0;
  virtual int getType(void) const = 0;
};

template<class FieldType, class DFieldType>
inline FunctionalSpace<FieldType, DFieldType>::~FunctionalSpace(void){
}

#endif


Node-path: basis/NodalSpace.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1324
Text-content-md5: e382a44860ec67b9f689bfb188552db6
Text-content-sha1: 2372b40bf2c4c53e6f9b770e2b2509af9726a989
Content-length: 1334

PROPS-END
#include "NodalSpace.h"
#include "Exception.h"

NodalSpace::NodalSpace(void){
  phi[0] = &phi0;
  phi[1] = &phi1;
  phi[2] = &phi2;

  gradPhi[0] = &gradPhi0;
  gradPhi[1] = &gradPhi1;
  gradPhi[2] = &gradPhi2;
}

double NodalSpace::at(const int i, const double x, const double y) const{
  if(i < 0 || i > 2)
    throw Exception("Unknown function");

  return phi[i](x, y);
}

double NodalSpace::at(const int i, const double x, const double y, 
		      const Jacobian& jac) const{
  throw Exception("Not implemented");
}

Vector<double> NodalSpace::dAt(const int i, const double x, const double y) const{
  if(i < 0 || i > 2)
    throw Exception("Unknown gradient");

  return gradPhi[i](x, y);
}

Vector<double> NodalSpace::dAt(const int i, const double x, const double y,
			       const Jacobian& jac) const{
  if(i < 0 || i > 2)
    throw Exception("Unknown gradient");

  return jac.grad(gradPhi[i](x, y));
}

Vector<double> NodalSpace::gradPhi0(const double x, const double y){
  Vector<double> a(2);
  a(0) = -1.0;
  a(1) = -1.0;

  return a;
}

Vector<double> NodalSpace::gradPhi1(const double x, const double y){
  Vector<double> a(2);
  a(0) = 1.0;
  a(1) = 0.0;

  return a;
}

Vector<double> NodalSpace::gradPhi2(const double x, const double y){
  Vector<double> a(2);
  a(0) = 0.0;
  a(1) = 1.0;

  return a;
}


Node-path: basis/NodalSpace.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1686
Text-content-md5: 6720cb3de668c3a481cb6e1666b3a80c
Text-content-sha1: 8daa41d4bd9b48f5cdfaf15e340cc68cf001beed
Content-length: 1696

PROPS-END
#ifndef _NODALSPACE_H_
#define _NODALSPACE_H_

#include "FunctionalSpace.h"
#include "Vector.h"

class EdgeSpace;

class NodalSpace: public FunctionalSpace<double, Vector<double> >{
 private:
  double         (*phi[3])(const double, const double);
  Vector<double> (*gradPhi[3])(const double, const double);

  friend class EdgeSpace;

 public:
  NodalSpace(void);
  virtual ~NodalSpace(void);

  virtual double at(const int i, 
		    const double x, 
		    const double y) const;

  virtual double at(const int i,
		    const double x,
		    const double y,
		    const Jacobian& jac) const;
  
  virtual Vector<double> dAt(const int i, 
			     const double x, 
			     const double y) const;
  
  virtual Vector<double> dAt(const int i, 
			     const double x, 
			     const double y,
			     const Jacobian& jac) const;

  virtual int getSize(void) const;
  virtual int getType(void) const;

 private:
  static double phi0(const double x, const double y);
  static double phi1(const double x, const double y);
  static double phi2(const double x, const double y);

  static Vector<double> gradPhi0(const double x, const double y);
  static Vector<double> gradPhi1(const double x, const double y);
  static Vector<double> gradPhi2(const double x, const double y);
};

inline NodalSpace::~NodalSpace(void){
}

inline int NodalSpace::getSize(void) const{
  return 3;
}

inline int NodalSpace::getType(void) const{
  return 0;
}

inline double NodalSpace::phi0(const double x, const double y){
  return 1.0 - x - y;
}

inline double NodalSpace::phi1(const double x, const double y){
  return x;
}

inline double NodalSpace::phi2(const double x, const double y){
  return y;
}

#endif


Node-path: common
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: common/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 57
Text-content-md5: 5b69593e5b6c2c5e58801b0af4e422a9
Text-content-sha1: 2c4c6f59fa706e87269584fbee9fab9d79316bb6
Content-length: 67

PROPS-END
set(src
  Exception.cpp
)


add_sources(common "${src}")


Node-path: common/Exception.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 200
Text-content-md5: 04925c82282b7c8fb4c7cb92cd013a73
Text-content-sha1: 1e2460721f2f5679715f3951faedcbda83a0e53c
Content-length: 210

PROPS-END
#include "Exception.h"

Exception::Exception(const std::string cause){
  why = cause;
}

Exception::~Exception(void) throw(){
}
  
const char* Exception::what() const throw(){
  return why.c_str();
}


Node-path: common/Exception.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 297
Text-content-md5: 74fdf6a00615c6088f4227bc672e2a15
Text-content-sha1: d2e623cd4023f2137c062df98f5a71456f4753ae
Content-length: 307

PROPS-END
#ifndef _EXCEPTION_H_
#define _EXCEPTION_H_

#include <string>
#include <exception>

class Exception: public std::exception{
 protected:
  std::string why;
  
 public:
  Exception(const std::string cause);
  virtual ~Exception(void) throw();
  virtual const char* what() const throw();
};

#endif


Node-path: formulation
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: formulation/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 99
Text-content-md5: 0b3f3dfabfa6624df48bc1994f5f51ff
Text-content-sha1: 4bf57e09f0e755556f69dd7cc37d002ca4c9d64d
Content-length: 109

PROPS-END
set(src
  FormulationLaplace.cpp
  FormulationProjection.cpp
)


add_sources(formulation "${src}")


Node-path: formulation/Formulation.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 731
Text-content-md5: 364da9a8a5fcf63f501ea504ed47be2a
Text-content-sha1: 59675ba2e19479885f068f2548a7d3f2c4f8b9d1
Content-length: 741

PROPS-END
#ifndef _FORMULATION_H_
#define _FORMULATION_H_

#include "GroupOfDof.h"
#include "Jacobian.h"
#include "Vector.h"

class Formulation{
 public:
  virtual ~Formulation(void) = 0;

  virtual double weak(const int entityI, const int entityJ,
		      const GroupOfDof& god) const = 0;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const = 0;

  virtual Vector<double> phiVect(const int i, const double x, const double y,
				 const Jacobian& jac) const = 0;

  virtual double phiScal(const int i, const double x, const double y,
			 const Jacobian& jac) const = 0;

  virtual int getBasisSize(void) const = 0;
  virtual int getBasisType(void) const = 0;
};

inline Formulation::~Formulation(void){
}

#endif


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1664
Text-content-md5: 34c1cfd999365f3c733db5fd109a5346
Text-content-sha1: 116cdfdbf36393c5a430a5024f7abd9ddbb01a63
Content-length: 1674

PROPS-END
#include "FormulationLaplace.h"
#include "Exception.h"

#include <cmath>

const int    FormulationLaplace::G    = 4;
const double FormulationLaplace::gx[4] = {0.333333333333333,0.6,0.2,0.2};
const double FormulationLaplace::gy[4] = {0.333333333333333,0.2,0.6,0.2};
const double FormulationLaplace::gw[4] = 
  {-0.28125,.260416666666,.260416666666,.260416666666};

double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = gradPhi(nodeI, jg(0), jg(1), jac);
    Vector<double> phiJ = gradPhi(nodeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}

Vector<double> FormulationLaplace::gradPhi(const int i, const double x, const double y,
					   const Jacobian& jac){
  Vector<double> v(2);
  
  switch(i){
  case 0: 
    v(0) = -1.0;
    v(1) = -1.0;
    break;
    
  case 1: 
    v(0) = 1.0;
    v(1) = 0.0;
    break;
    
  case 2: 
    v(0) = 0.0;
    v(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(v);
}

Vector<double> FormulationLaplace::phiVect(const int i, const double x, const double y, 
					   const Jacobian& jac) const{
  throw Exception
    ("Formulation 'Laplace' doesn't have Vectorial basis functions");
}

double FormulationLaplace::phiScal(const int i, const double x, const double y,
				   const Jacobian& jac) const{
  throw Exception
    ("Scalar basis functions are not yet implemented for formulation 'Laplace'");
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1334
Text-content-md5: e4c5687b5a15f23fa7014b809581e8d2
Text-content-sha1: f43d97aa87072419e098e20a102e94ed14f133e3
Content-length: 1344

PROPS-END
#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "Formulation.h"

class FormulationLaplace: public Formulation{
 private:
  // Gaussian Quadrature Data //
  static const int G;
  static const double gx[4];
  static const double gy[4];
  static const double gw[4];

 public:
  FormulationLaplace(void);
  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

  virtual double phiScal(const int i, const double x, const double y,
			 const Jacobian& jac) const;

  virtual int getBasisSize(void) const;
  virtual int getBasisType(void) const;

 private:
  static Vector<double> gradPhi(const int i, const double x, const double y,
				const Jacobian& jac);
  
};

inline FormulationLaplace::FormulationLaplace(void){
}

inline FormulationLaplace::~FormulationLaplace(void){
}

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline int FormulationLaplace::getBasisSize(void) const{
  return 3;
}

inline int FormulationLaplace::getBasisType(void) const{
  return 0;
}

#endif


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2955
Text-content-md5: e37c899fd18269a4ed7a3b57fbb0e0b1
Text-content-sha1: 06a4ef8f38463e89ebd1a6510371dd7f8c937fc1
Content-length: 2965

PROPS-END
#include "FormulationProjection.h"
#include "Exception.h"

#include <cmath>

const int    FormulationProjection::G    = 4;
const double FormulationProjection::gx[4] = {0.333333333333333,0.6,0.2,0.2};
const double FormulationProjection::gy[4] = {0.333333333333333,0.2,0.6,0.2};
const double FormulationProjection::gw[4] = 
  {-0.28125,.260416666666,.260416666666,.260416666666};

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = phiVect(edgeI, jg(0), jg(1), jac);
    Vector<double> phiJ = phiVect(edgeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jg    = jac.map(gx[g], gy[g]);
    Vector<double> jPhiI = phiVect(equationI, jg(0), jg(1), jac);
  
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

Vector<double> FormulationProjection::phiVect(const int i, const double x, const double y,
				      const Jacobian& jac) const{
  const int j = (i + 1) % 3;
  const Vector<double> uv = jac.invMap(x, y);

  const double phi0 = nodePhi(i, uv(0), uv(1));
  const double phi1 = nodePhi(j, uv(0), uv(1));
  
  const Vector<double> gradPhi0 = gradNodePhi(i, jac);
  const Vector<double> gradPhi1 = gradNodePhi(j, jac);

  Vector<double> phi(2);
  phi(0) = (phi0 * gradPhi1(0)) - (phi1 * gradPhi0(0));
  phi(1) = (phi0 * gradPhi1(1)) - (phi1 * gradPhi0(1));

  return phi;
}

double FormulationProjection::nodePhi(const int i, const double x, const double y){
  switch(i){
  case 0: 
    return 1.0 - x - y;
    
  case 1: 
    return x;

  case 2: 
    return y;

  default: throw Exception("Unknown function");
  }
  
  return 0;
}

Vector<double> FormulationProjection::gradNodePhi(const int i, const Jacobian& jac){
  Vector<double> a(2);
  
  switch(i){
  case 0: 
    a(0) = -1.0;
    a(1) = -1.0;
    break;
    
  case 1: 
    a(0) = 1.0;
    a(1) = 0.0;
    break;
    
  case 2: 
    a(0) = 0.0;
    a(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(a);
}

double FormulationProjection::phiScal(const int i, const double x, const double y,
				      const Jacobian& jac) const{
  throw Exception
    ("Formulation 'Projection' doesn't have Scalar basis functions");
}


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1411
Text-content-md5: cb13dd4de342ce693c11f69a7270bb80
Text-content-sha1: c2c47e30cb2f5a5219b74b2d0c97db24de12dd9c
Content-length: 1421

PROPS-END
#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "Formulation.h"
#include "Vector.h"

class FormulationProjection: public Formulation{
 private:
  // Gaussian Quadrature Data //
  static const int G;
  static const double gx[4];
  static const double gy[4];
  static const double gw[4];

  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

  virtual double phiScal(const int i, const double x, const double y,
			 const Jacobian& jac) const;

  virtual int getBasisSize(void) const;
  virtual int getBasisType(void) const;

 private:
  static double nodePhi(const int i, const double x, const double y);
  
  static Vector<double> gradNodePhi(const int i, const Jacobian& jac);
};

inline FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  f = &vectorToProject;
}

inline FormulationProjection::~FormulationProjection(void){
}

inline int FormulationProjection::getBasisSize(void) const{
  return 3;
}

inline int FormulationProjection::getBasisType(void) const{
  return 1;
}

#endif


Node-path: geometry
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: geometry/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 118
Text-content-md5: 9b1c2944d0b2caa7dfe3b170c4a015fd
Text-content-sha1: 198612c80a7ac02d3d8e995cabe5fb19e96e47b2
Content-length: 128

PROPS-END
set(src
  Edge.cpp
  Element.cpp
  Entity.cpp
  Jacobian.cpp
  Mesh.cpp
  Node.cpp
)


add_sources(geometry "${src}")


Node-path: geometry/Edge.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 601
Text-content-md5: dbf4482e6d7a557d59ed648987d8aa1e
Text-content-sha1: 2b9e4bdcaf92f2731b7b9e0eb327a863c03a6872
Content-length: 611

PROPS-END
#include <sstream>
#include "Edge.h"

Edge::Edge(const int id, Node& node0, Node& node1):
  Entity::Entity(id, 1){

  this->node0 = &node0;
  this->node1 = &node1;  
}

std::string Edge::toString(void) const{
  std::stringstream stream;
  
  stream << "Edge " << id << std::endl;
  stream << "**** " << std::endl;
  stream << "  -- Node0: " << node0->getId() << std::endl;
  stream << "  -- Node1: " << node1->getId() << std::endl;
  if(hasPhysical)
    stream << "  -- Physical: " << physical << std::endl;
  if(hasValue)
    stream << "  -- Value: " << value << std::endl;

  return stream.str();
}


Node-path: geometry/Edge.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 601
Text-content-md5: d2a2e810636910769f8977f69f305e23
Text-content-sha1: 424238e6b73caad94c24c5590bad260dc90e717e
Content-length: 611

PROPS-END
#ifndef _EDGE_H_
#define _EDGE_H_

#include <string>
#include "Entity.h"
#include "Node.h"

class Mesh;

class Edge: public Entity{
 private:
  Node* node0;
  Node* node1;

  friend class Mesh;

 private:
  Edge(const int id, Node& node0, Node& node1);
  virtual ~Edge(void);

 public:
  Node& getNode0(void) const;
  Node& getNode1(void) const;

  virtual std::string toString(void) const;
};

inline Edge::~Edge(void){
  // Edge is not responsible for deleting nodes
}

inline Node& Edge::getNode0(void) const{
  return *node0;
}

inline Node& Edge::getNode1(void) const{
  return *node1;
}

#endif


Node-path: geometry/Element.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1507
Text-content-md5: 3d41aa9e40c5c4d45c0bde4105cdf8d8
Text-content-sha1: 152e1c5f885f3349b5b5a23975283be9445d9f49
Content-length: 1517

PROPS-END
#include <sstream>
#include "Element.h"
#include "Exception.h"

Element::Element(const int id, const int type){
  this->id   = id;
  this->type = type;
  
  switch(type){
  case 30: numberOfEntity = 3; break;
  case 31: numberOfEntity = 3; break;
  default: throw Exception("Unknow ElementType"); break;
  }

  node        = new std::vector<Node*>(numberOfEntity);
  entity      = new std::vector<Entity*>(numberOfEntity);
  orientation = new std::vector<int>(numberOfEntity);
  entityId    = NULL;
}

Element::~Element(void){
  delete node;
  // Elements are not responsible for deleting nodes...
  delete entity;
  // Elements are not responsible for deleting entities...
  delete orientation;

  if(entityId)
    delete entityId;

  if(jac)
    delete jac;
}

const std::vector<int>& Element::getAllEntitiesId(void){
  if(!entityId){
    entityId = new std::vector<int>(numberOfEntity);

    for(int i = 0; i < numberOfEntity; i++)
      (*entityId)[i] = (*entity)[i]->getId();
  }
  
  return *entityId;
}

std::string Element::toString(void) const{
  std::stringstream stream;
  
  stream << "Element " << id << std::endl;
  stream << "******* " << std::endl;

  stream << "  -- Entity:" << std::endl;
  for(int i = 0; i < numberOfEntity; i++)
    stream << "    ++ " << (*entity)[i]->getId() 
	   << " ("      << (*entity)[i]->getType() << ")" 
	   << " ["      << (*orientation)[i] << "]"
	   << std::endl;

  return stream.str();
}

void Element::buildJacobian(void){
  jac = new Jacobian(*node);
}


Node-path: geometry/Element.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1975
Text-content-md5: f93dddfa6520580d08f2c77b8ae5cd25
Text-content-sha1: 5d802fcd5c2657d8957e40664b52032e88c82852
Content-length: 1985

PROPS-END
#ifndef _ELEMENT_H_
#define _ELEMENT_H_

#include <string>
#include <vector>
#include "Entity.h"
#include "Node.h"
#include "Jacobian.h"

class Mesh;

class Element{
 private:
  int type;
  int id;
  int numberOfEntity;

  std::vector<Node*>* node;

  std::vector<Entity*>* entity;
  std::vector<int>* orientation;
  std::vector<int>* entityId;  

  Jacobian* jac;

  friend class Mesh;

 private:
   Element(const int id, const int type);
  ~Element(void);

 public:
  Entity& getEntity(const int id) const;
  const std::vector<Entity*>& getAllEntities(void) const;
  const std::vector<int>&   getAllEntitiesId(void);
  
  const std::vector<Node*>& getAllNodes(void) const;

  int getOrientation(const int id) const;
  const std::vector<int>& getAllOrientations(void) const;  

  int getId(void) const;
  int nEntity(void) const;
  int getType(void) const;
  
  Jacobian& getJacobian(void) const;

  bool operator==(const Element& other) const;
  bool operator!=(const Element& other) const;
    
  std::string toString(void) const;

 private:
  void buildJacobian(void);
};

inline Entity& Element::getEntity(const int id) const{
  return *((*entity)[id]);
}

inline const std::vector<Entity*>& Element::getAllEntities(void) const{
  return *entity;
}

inline const std::vector<Node*>& Element::getAllNodes(void) const{
  return *node;
}

inline int Element::getOrientation(const int id) const{
  return (*orientation)[id];
}

inline const std::vector<int>& Element::getAllOrientations(void) const{
  return *orientation;
}

inline int Element::getId(void) const{
  return id;
}

inline int Element::nEntity(void) const{
  return numberOfEntity;
}

inline int Element::getType(void) const{
  return type;
}

inline Jacobian& Element::getJacobian(void) const{
  return *jac;
}

inline bool Element::operator==(const Element& other) const{
  return (*this).id == other.id;
}

inline bool Element::operator!=(const Element& other) const{
  return !(*this == other);
}

#endif


Node-path: geometry/Entity.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 499
Text-content-md5: a3c474f2845f408ba6f464f6fa61bc55
Text-content-sha1: 325e440660c103f2504c2b7be626f13840b00949
Content-length: 509

PROPS-END
#include <sstream>
#include "Entity.h"

Entity::Entity(const int id, const int type){
  this->id   = id;
  this->type = type;
  
  hasValue    = false;
  hasPhysical = false;
}

std::string Entity::toString(void) const{
  std::stringstream stream;
  
  stream << "Entity " << id << std::endl;
  stream << "****** " << std::endl;

  if(hasPhysical)
    stream << "  -- Physical: " << physical << std::endl;
  if(hasValue)
    stream << "  -- Value: " << value << std::endl;

  return stream.str();
}


Node-path: geometry/Entity.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1596
Text-content-md5: 39e3e0e421438144728ba74df285acc1
Text-content-sha1: ce7a142303bd68281ae6623009117aa82f2e84f5
Content-length: 1606

PROPS-END
#ifndef _ENTITY_H_
#define _ENTITY_H_

#include <string>

class Mesh;

class Entity{
 protected:
  int id;
  int type;

  bool   hasValue;
  double value;

  bool   hasPhysical;
  int    physical;

  friend class Mesh;

 protected:
  Entity(const int id, const int type);
  virtual ~Entity(void);

 public:
  bool   gotValue(void) const;
  void   setValue(const double x);
  double getValue(void) const;

  bool   gotPhysical(void) const;
  void   setPhysical(const int physical);
  double getPhysical(void) const;  

  int getId(void) const;
  int getType(void) const;

  bool operator<(const Entity& other) const;
  bool operator==(const Entity& other) const;

  virtual std::string toString(void) const;
};

inline Entity::~Entity(void){
}

inline bool Entity::gotValue(void) const{
  return hasValue;
}

inline void Entity::setValue(const double x){
  hasValue = true;
  value = x;
}

inline double Entity::getValue(void) const{
  return value;
}

inline bool Entity::gotPhysical(void) const{
  return hasPhysical;
}

inline void Entity::setPhysical(const int physical){
  hasPhysical = true;
  this->physical = physical;
}

inline double Entity::getPhysical(void) const{
  return physical;
}

inline int Entity::getId(void) const{
  return id;
}

inline int Entity::getType(void) const{
  return type;
}

inline bool Entity::operator<(const Entity& other) const{
  return ((*this).type == other.type) &&
         ((*this).id    < other.id);
}

inline bool Entity::operator==(const Entity& other) const{
  return ((*this).type == other.type) &&
         ((*this).id   == other.id);
}

#endif


Node-path: geometry/Jacobian.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1591
Text-content-md5: 62a6f8e3f7892210ea4be8574702c627
Text-content-sha1: b9d156c1528b73a80a52c206bfc69bd391425dc1
Content-length: 1601

PROPS-END
#include "Jacobian.h"

Jacobian::Jacobian(const std::vector<Node*>& nodes){
  const int N = nodes.size();
  
  for(int i = 0; i < N; i++){
    nodeX[i] = nodes[i]->getX();
    nodeY[i] = nodes[i]->getY();
  }  

  dxdu = nodeX[1] - nodeX[0];
  dxdv = nodeX[2] - nodeX[0];
  dydu = nodeY[1] - nodeY[0];
  dydv = nodeY[2] - nodeY[0];
  
  detDxDu = (dxdu * dydv) - (dxdv * dydu);
  
  dudx = +dydv / detDxDu;
  dudy = -dxdv / detDxDu;
  dvdx = -dydu / detDxDu;
  dvdy = +dxdu / detDxDu; 
}

Vector<double> Jacobian::grad(const Vector<double>& gradUV) const{
  Vector<double> gradXY(2);
  
  gradXY(0) = gradUV(0) * dudx + gradUV(1) * dvdx;
  gradXY(1) = gradUV(0) * dudy + gradUV(1) * dvdy;  
  
  return gradXY;
}

Vector<double> Jacobian::invMap(const Vector<double>& XY) const{
  Vector<double> UV(2);
  
  UV(0) = (XY(0) - nodeX[0]) * dudx + (XY(1) - nodeY[0]) * dudy;
  UV(1) = (XY(0) - nodeX[0]) * dvdx + (XY(1) - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::invMap(const double x, const double y) const{
  Vector<double> UV(2);
  
  UV(0) = (x - nodeX[0]) * dudx + (y - nodeY[0]) * dudy;
  UV(1) = (x - nodeX[0]) * dvdx + (y - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::map(const Vector<double>& UV) const{
  Vector<double> XY(2);

  XY(0) = UV(0) * dxdu + UV(1) * dxdv + nodeX[0];
  XY(1) = UV(0) * dydu + UV(1) * dydv + nodeY[0];  

  return XY;
}

Vector<double> Jacobian::map(const double u, const double v) const{
  Vector<double> XY(2);

  XY(0) = u * dxdu + v * dxdv + nodeX[0];
  XY(1) = u * dydu + v * dydv + nodeY[0];  

  return XY;
}


Node-path: geometry/Jacobian.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 826
Text-content-md5: 3f57cc61f512fae868bb170823c0d348
Text-content-sha1: d3eead4a472f05dc4c79a8d99880eca1f20e472f
Content-length: 836

PROPS-END
#ifndef _JACOBIAN_H_
#define _JACOBIAN_H_

#include <vector>
#include "Vector.h"
#include "Node.h"

class Jacobian{
 private:
  int type;

  double nodeX[3];
  double nodeY[3];

  double dxdu;
  double dxdv;
  double dydu;
  double dydv;

  double detDxDu;

  double dudx;
  double dudy;
  double dvdx;
  double dvdy;

 public:
   Jacobian(const std::vector<Node*>& nodes);
  ~Jacobian(void);

  double det(void) const;

  Vector<double> grad(const Vector<double>& gradUV) const;

  Vector<double> invMap(const Vector<double>& XY) const;
  Vector<double> invMap(const double x, const double y) const;

  Vector<double> map(const Vector<double>& UV) const;
  Vector<double> map(const double u, const double v) const;
};

inline Jacobian::~Jacobian(void){
}

inline double Jacobian::det(void) const{
  return detDxDu;
}

#endif


Node-path: geometry/Mesh.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 6283
Text-content-md5: b94c0326a3a8eeaad2ff47d1c8b961e1
Text-content-sha1: 9abee1f87da9b24073f414866fc463d2dba13cad
Content-length: 6293

PROPS-END
#include <sstream>
#include <fstream>

#include <set>
#include <deque>

#include "Mesh.h"
#include "Exception.h"

using namespace std;

Mesh::Mesh(const std::string fileName){ 
  // Get Stream //
  in = new ifstream(fileName.c_str());

  // Goto Nodes Definition //
  skipLine(4);
  *in >> nNode;
  node = new vector<Node*>(nNode);
  
  // Create Nodes //
  for(int i = 0; i < nNode; i++){
    int id;
    double x, y, z;
    *in >> id >> x >> y >> z;
    (*node)[i] = new Node(id - 1, x, y, z);
    // NB: I start counting nodes from 0
  }

  // Goto Node Elements Definitions //
  skipLine(3);
  *in >> nNodeElement;
  skipLine(1);

  // Get Lines //
  nodeElement = NULL;
  nLine = 0;
  bool isLine = false;
  do{
    char ln[512];
    in->getline(ln, 512);
    isLine = parse(ln);
  } 
  while(isLine);

  // Get Other NodeElements //
  for(int i = 1; i < nNodeElement; i++){
    char ln[512];
    in->getline(ln, 512);
    parse(ln);
  }

  delete in;

  // Get EdgeElements //
  nEdgeElement = nNodeElement;
  edgeElement  = new vector<Element*>(nEdgeElement);
  getEdges();
  nEdge = edge->size();
}
 
Mesh::~Mesh(void){
  for(int i = 0; i < nNode; i++)
    delete (*node)[i];
  delete node;
  
  for(int i = 0; i < nNodeElement; i++)
    delete (*nodeElement)[i];
  delete nodeElement;

  for(int i = 0; i < nEdge; i++)
    delete (*edge)[i];
  delete edge;

  for(int i = 0; i < nEdgeElement; i++)
    delete (*edgeElement)[i];
  delete edgeElement;
}

string Mesh::toString(void) const{
  stringstream stream;

  stream << "Mesh Informations" << endl;
  stream << "*****************" << endl << endl;

  stream << "Nodes" << endl;
  stream << "-----" << endl << endl;
  for(int i = 0; i < nNode; i++)
    stream << (*node)[i]->toString() << endl;
  stream << endl;

  stream << "Node Elements" << endl;
  stream << "-------------" << endl << endl;  
  for(int i = 0; i < nNodeElement; i++)
    stream << (*nodeElement)[i]->toString() << endl;
  stream << endl;

  stream << "Edges" << endl;
  stream << "-----" << endl << endl;
  for(int i = 0; i < nEdge; i++)
    stream << (*edge)[i]->toString() << endl;
  stream << endl;

  stream << "Edge Elements" << endl;
  stream << "-------------" << endl << endl;  
  for(int i = 0; i < nEdgeElement; i++)
    stream << (*edgeElement)[i]->toString() << endl;

  return stream.str();
}

void Mesh::skipLine(const int N){
  char ln[512];
  for(int i = 0; i < N; i++)
    in->getline(ln, 512);
}

bool Mesh::parse(const string str){
  istringstream stream(str);
  int id;
  int type;

  stream >> id >> type;

  switch(type){
  case 1: getLine(id, stream); return true;
  case 2: getTri(id, stream);  return false;
  case 3: throw Exception("I don't do Quads !"); return false;
  
  default: return false;
  }
}

void Mesh::getTri(int id, istringstream& stream){
  // Is Element allocated ? //
  if(!nodeElement){
    nNodeElement -= nLine;
    nodeElement = new vector<Element*>(nNodeElement);
  }

  // New Element
  id -= 1 + nLine;
  (*nodeElement)[id] = new Element(id, 30);

  // Get Node
  int nodeId[3];
  stream >> nodeId[0] >> nodeId[0] >> nodeId[0] >> nodeId[0];
  stream >> nodeId[1];
  stream >> nodeId[2];
 
  (*nodeElement)[id]->node->at(0) = (*node)[nodeId[0] - 1];
  (*nodeElement)[id]->node->at(1) = (*node)[nodeId[1] - 1];
  (*nodeElement)[id]->node->at(2) = (*node)[nodeId[2] - 1];

  (*nodeElement)[id]->entity->at(0) = (*node)[nodeId[0] - 1];
  (*nodeElement)[id]->entity->at(1) = (*node)[nodeId[1] - 1];
  (*nodeElement)[id]->entity->at(2) = (*node)[nodeId[2] - 1];

  (*nodeElement)[id]->orientation->at(0) = 1;
  (*nodeElement)[id]->orientation->at(1) = 1;
  (*nodeElement)[id]->orientation->at(2) = 1;

  (*nodeElement)[id]->buildJacobian();
}

void Mesh::getLine(int id, istringstream& stream){
  int phys;
  int nodeId;
  
  stream >> phys >> phys;
  for(int i = 0; i < 3; i++){
    stream >> nodeId;
    nodeId -= 1;
    if(!(*node)[nodeId]->gotPhysical())
      (*node)[nodeId]->setPhysical(phys);
  }

  nLine += 1;
}

void Mesh::getEdges(void){
  deque<Edge*> stack;
  set<edgeTriplet, EdgeTripletComparator> lookup;
  int edgeId = 0;

  for(int i = 0; i < nNodeElement; i++){
    (*edgeElement)[i] = new Element(i, 31); // New Edge Element

    // Get Geometric informations
    const vector<Node*>& nodes = (*nodeElement)[i]->getAllNodes();
    const int N = nodes.size();

    for(int j = 0; j < N; j++)
      (*edgeElement)[i]->node->at(j) = nodes[j];

    (*edgeElement)[i]->buildJacobian();

    // Edge Element are build from node Element
    const vector<Entity*>& n = (*nodeElement)[i]->getAllEntities();
    const int E = n.size();

    // Get *Unique* Edges //
    for(int j = 0; j < E; j++){
      int k = (j + 1) % 3; 
      struct edgeTriplet idUnswap;
      struct edgeTriplet idSwap;
      
      idUnswap.origin = n[j]->getId(); idUnswap.end = n[k]->getId();
      idSwap.origin   = n[k]->getId(); idSwap.end   = n[j]->getId();
      
      pair<set<edgeTriplet>::iterator, bool>
	notInLookUpUnswap = lookup.insert(idUnswap);
      pair<set<edgeTriplet>::iterator, bool>
	notInLookUpSwap   = lookup.insert(idSwap);

      // If New Edge
      if(notInLookUpUnswap.second && 
	 notInLookUpSwap.second){
	struct edgeTriplet* t0;
	struct edgeTriplet* t1;
	t0 = const_cast<struct edgeTriplet*>(&(*notInLookUpUnswap.first));
	t1 = const_cast<struct edgeTriplet*>(&(*notInLookUpSwap.first));
	
	// NOTE
	// const_casts are OK:
	// We change only the 'edge' of our edgeTriplet
	// and 'egde' doesn't change the ordering of the set
	 
	t0->edge = new Edge(edgeId, *((Node*)n[j]), *((Node*)n[k]));
	t1->edge = t0->edge;
	edgeId++;
	
	(*edgeElement)[i]->entity->at(j) = t0->edge;
	(*edgeElement)[i]->orientation->at(j) = 1;

	stack.push_back(t0->edge);
      }
      
      // If Edge Found
      if(!notInLookUpUnswap.second){
	(*edgeElement)[i]->entity->at(j) = notInLookUpUnswap.first->edge;	
	(*edgeElement)[i]->orientation->at(j) = 1;
      }

      if(!notInLookUpSwap.second){
	(*edgeElement)[i]->entity->at(j) = notInLookUpSwap.first->edge;
  	(*edgeElement)[i]->orientation->at(j) = -1; //Edge goes wrong way
      } 
    }
  }

  // Store Edges //
  deque<Edge*>::iterator ie   = stack.begin();
  deque<Edge*>::iterator eend = stack.end();
  
  edge = new vector<Edge*>(ie, eend);
}


Node-path: geometry/Mesh.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2966
Text-content-md5: a892b206e73a51ec239f8aa32c60939f
Text-content-sha1: b29f837d7914a1b59dcb5d9403b66a80435a7a72
Content-length: 2976

PROPS-END
#ifndef _MESH_H_
#define _MESH_H_

#include <vector>
#include <string>
#include "Node.h"
#include "Edge.h"
#include "Element.h"

class Mesh{
 private:
  struct edgeTriplet{
    int   origin;
    int   end;
    Edge* edge;
  };
  
  class EdgeTripletComparator{
  public:
    inline bool operator()(const edgeTriplet& a, 
			   const edgeTriplet& b) const;
  };

  class PairComparator{
  public:
    inline bool operator()(const std::pair<int, int>& a, 
			   const std::pair<int, int>& b) const;
  };

  std::vector<Node*>* node;
  std::vector<Element*>* nodeElement; 
  std::vector<Element*>* edgeElement;
  std::vector<Edge*>* edge;
  int nNode;
  int nNodeElement;
  int nLine;
  int nEdge;
  int nEdgeElement;

  std::ifstream* in;  
  
 public:
   Mesh(const std::string fileName);
  ~Mesh(void);
   
  Node& getNode(const int i) const;
  const std::vector<Node*>& getAllNodes(void) const;
  int getNbNode(void) const;

  Element& getNodeElement(const int i) const;
  const std::vector<Element*>& getAllNodeElements(void) const;
  int getNbNodeElement(void) const;

  Edge& getEdge(const int i) const;
  const std::vector<Edge*>& getAllEdges(void) const;
  int getNbEdge(void) const;

  Element& getEdgeElement(const int i) const;
  const std::vector<Element*>& getAllEdgeElements(void) const;
  int getNbEdgeElement(void) const;

  std::string toString(void) const;

 private:
  void skipLine(const int N);
  bool parse(const std::string str);

  void getTri(int id, std::istringstream& stream);
  void getLine(int id, std::istringstream& stream);
  void getEdges(void);
};

inline Node& Mesh::getNode(const int i) const{
  return *((*node)[i]);
}
  
inline const std::vector<Node*>& Mesh::getAllNodes(void) const{
  return *node;
}

inline int Mesh::getNbNode(void) const{
  return nNode;
}

inline Element& Mesh::getNodeElement(const int i) const{
  return *((*nodeElement)[i]);
}
  
inline const std::vector<Element*>& Mesh::getAllNodeElements(void) const{
  return *nodeElement;
}

inline int Mesh::getNbNodeElement(void) const{
  return nNodeElement; 
}

inline Edge& Mesh::getEdge(const int i) const{
  return *((*edge)[i]);
}

inline const std::vector<Edge*>& Mesh::getAllEdges(void) const{
  return *edge;
}

inline int Mesh::getNbEdge(void) const{
  return nEdge;
}

inline Element& Mesh::getEdgeElement(const int i) const{
  return *((*edgeElement)[i]);
}

inline const std::vector<Element*>& Mesh::getAllEdgeElements(void) const{
  return *edgeElement;
}

inline int Mesh::getNbEdgeElement(void) const{
  return nEdgeElement;
}

inline bool Mesh::PairComparator::operator()(const std::pair<int, int>& a, 
				       const std::pair<int, int>& b) const{
  return (a.first < b.first) || 
    ((a.first == b.first) && (a.second < b.second));
}

inline bool Mesh::EdgeTripletComparator::operator()(const edgeTriplet& a, 
					  const edgeTriplet& b) const{
  return (a.origin < b.origin) || 
    ((a.origin == b.origin) && (a.end < b.end));
}


#endif


Node-path: geometry/Node.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 631
Text-content-md5: a3d1106601b01a4ab946795afe11d1ca
Text-content-sha1: 71277833fb2718a50e3f35a6fbeb57e24a09fff2
Content-length: 641

PROPS-END
#include <sstream>
#include "Node.h"

Node::Node(const int id, const double x, const double y, const double z):
  Entity::Entity(id, 0){
  
  this->x  = x;
  this->y  = y;
  this->z  = z;
}

std::string Node::toString(void) const{
  std::stringstream stream;
  
  stream << "Node " << id << std::endl;
  stream << "**** " << std::endl;
  stream << "  -- X: " << x << std::endl;
  stream << "  -- Y: " << y << std::endl;
  stream << "  -- Z: " << z << std::endl;
  if(hasPhysical)
    stream << "  -- Physical: " << physical << std::endl;
  if(hasValue)
    stream << "  -- Value: " << value << std::endl;

  return stream.str();
}


Node-path: geometry/Node.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 621
Text-content-md5: 3f16d6fe2eb338cee1ffc39bfa4d7566
Text-content-sha1: 5cceb37e708f0d7754be6e44b70f15db8da1cdd8
Content-length: 631

PROPS-END
#ifndef _NODE_H_
#define _NODE_H_

#include <string>
#include "Entity.h"

class Mesh;

class Node: public Entity{
 private:
  double x;
  double y;
  double z;

  friend class Mesh;

 private:
  Node(const int id, const double x, const double y, const double z);
  virtual ~Node(void);

 public:
  double getX(void) const;
  double getY(void) const;
  double getZ(void) const;

  virtual std::string toString(void) const;
};

inline Node::~Node(void){
}

inline double Node::getX(void) const{
  return x;
}

inline double Node::getY(void) const{
  return y;
}

inline double Node::getZ(void) const{
  return z;
}

#endif


Node-path: mathematics
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: mathematics/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 72
Text-content-md5: 11badf198f0e4f8e5b6d84e5e5ac0a3d
Text-content-sha1: ec03d406af16162050fe78b63de4ef3795da2e0f
Content-length: 82

PROPS-END
set(src
  Matrix.cpp
  Vector.cpp
)


add_sources(mathematics "${src}")


Node-path: mathematics/Matrix.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1207
Text-content-md5: a73b8ffb806efba3ab98dcbeb62dde37
Text-content-sha1: 70799eed209e3b8b7f80b01b0d08ec81d5f67cbc
Content-length: 1217

PROPS-END
#include <sstream>
#include "Matrix.h"
#include "Exception.h"

extern "C"{
#include <cblas.h>
}

Matrix::Matrix(const int n, const int m){
  if(!(n || m))
    throw Exception("Matrix can't be of dimension (0, 0)");
    
  nRow = n;
  nCol = m;
  nElem = nRow * nCol;
  matrix = new double[nElem];
}

Matrix::~Matrix(void){
  if(matrix)
    delete[] matrix;
}

void Matrix::allToZero(void){
  for(int i = 0; i < nElem; i++)
    matrix[i] = 0.0;
}

Vector<double> Matrix::mult(const Vector<double>& v) const{
  Vector<double> s(v.N);
  
  cblas_dgemv(CblasRowMajor, CblasNoTrans, 
	      nRow, nCol, 
	      1.0, matrix, nCol,
	      v.v, 1,
	      0.0, s.v, 1);

  return s;
}

std::string Matrix::toString(void) const{
  std::stringstream s;
  
  for(int i = 0; i < nRow; i++){
    for(int j = 0; j < nCol; j++){
      s << std::scientific << std::showpos << get(i, j) << "\t";
    }
    s << std::endl;
  }

  return s.str();
}

std::string Matrix::toStringMatlab(void) const{
  std::stringstream s;
  
  s << "[";
  for(int i = 0; i < nRow; i++){
    for(int j = 0; j < nCol; j++){
      s << std::scientific << std::showpos << get(j, i) << " ";
    }
    s << ";";
  }
  s << "]";
  
  return s.str();
}


Node-path: mathematics/Matrix.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1181
Text-content-md5: c8bde4eb3502ca0d4d1ac320faed6e02
Text-content-sha1: e02eeceefb6feeab473c061f104c2e50f7332e64
Content-length: 1191

PROPS-END
#ifndef _MATRIX_H_
#define _MATRIX_H_

#include <string>
#include "Vector.h"

class Solver;

class Matrix{
 private:
  int nRow;
  int nCol;
  int nElem;
  double *matrix;
  friend class Solver;

 public:
   Matrix(const int n, const int m);
  ~Matrix(void);

  int row(void) const;
  int col(void) const;

  void   set(const int i, const int j, const double v);
  void   allToZero(void);
  double get(const int i, const int j) const;
  
  double& operator()(const int i, const int j);
  double  operator()(const int i, const int j) const;
  
  Vector<double> mult(const Vector<double>& v) const;

  std::string toString(void) const;
  std::string toStringMatlab(void) const;
};

inline int Matrix::row(void) const{
  return nRow;
}

inline int Matrix::col(void) const{
  return nCol;
}

inline void Matrix::set(const int i, const int j, const double v){
  matrix[j + i * nCol] = v;
}

inline double Matrix::get(const int i, const int j) const{
  return matrix[j + i * nCol];
}

inline double& Matrix::operator()(const int i, const int j){
  return matrix[j + i * nCol];
}

inline double Matrix::operator()(const int i, const int j) const{
  return matrix[j + i * nCol];
}

#endif


Node-path: mathematics/Vector.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 887
Text-content-md5: 9d083646c88ccfab0da2124ac1130a65
Text-content-sha1: 2e7d78b98f4782413ea55d760292f461c9111903
Content-length: 897

PROPS-END
#include <sstream>
#include "Vector.h"

template<>
void Vector<double>::allToZero(void){
  for(int i = 0; i < N; i++)
    v[i] = 0.0;
}

template<>
void Vector<double>::plus(const Vector<double>& b){
  if(this->N != b.N)
    throw Exception("Vector Addition must be with vectors of the same size");

  for(int i = 0; i < N; i++)
    v[i] += b.v[i];  
}

template<>
void Vector<double>::minus(const Vector<double>& b){
  if(this->N != b.N)
    throw Exception("Vector Substraction must be with vectors of the same size");

  for(int i = 0; i < N; i++)
    v[i] -= b.v[i];  
}

template<>
void Vector<double>::mult(const double alpha){
  for(int i = 0; i < N; i++)
    v[i] *= alpha;  
}

template<>
std::string Vector<double>::toString(void) const{
  std::stringstream s;
  
  for(int i = 0; i < N; i++)
    s << std::scientific << std::showpos << v[i] << std::endl;

  return s.str();
}


Node-path: mathematics/Vector.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1558
Text-content-md5: 03801785e0c1ce43bc27cf3aa6702660
Text-content-sha1: 7f8ad0b583966090bff4983623945b2f3947deb9
Content-length: 1568

PROPS-END
#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <string>

extern "C"{
#include <cblas.h>
}

#include "Exception.h"

class Solver;

template<class T>
class Vector{
 private:
  int N;
  T* v;

  friend class Solver;
  friend class Matrix;
  
 public:
   Vector(const int a);
  ~Vector(void);

  int dim(void) const;
  
  void set(const int i, const T a);
  T    get(const int i) const;

  T& operator()(const int i);
  T  operator()(const int i) const;

  void plus(const Vector<T>& b);
  void minus(const Vector<T>& b);
  void mult(const double alpha);

  void allToZero(void);

  double dot(const Vector<T>& v) const;

  std::string toString(void) const;
};

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

template<class T>
Vector<T>::Vector(const int a){
  if(!a)
    throw Exception("Vector must by of dimensio bigger than 0");
  
  N = a;
  v = new T[N];
}

template<class T>
Vector<T>::~Vector(void){
  delete[] v;
}

template<class T>
inline int Vector<T>::dim(void) const{
  return N;
}

template<class T>
inline void Vector<T>::set(const int i, const T a){
  v[i] = a;
}

template<class T>
inline T Vector<T>::get(const int i) const{
  return v[i];
}

template<class T>
inline T& Vector<T>::operator()(const int i){
  return v[i];
}

template<class T>
inline T Vector<T>::operator()(const int i) const{
  return v[i];
}

template<>
inline double Vector<double>::dot(const Vector<double>& v) const{ 
  return cblas_ddot(N, (*this).v, 1, v.v, 1);
}

#endif


Node-path: postprocessing
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: postprocessing/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 83
Text-content-md5: a747ddf7ffffd7afcc0957b857b592fd
Text-content-sha1: 8a544e55274799eb776b2696d05e97873a82547d
Content-length: 93

PROPS-END
set(src
  Interpolator.cpp
  Solution.cpp
)


add_sources(postprocessing "${src}")


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2342
Text-content-md5: a8558cc2a06217b5f1cec32707324c8c
Text-content-sha1: f86420cce98de9317f27b4880970d95577f2496f
Content-length: 2352

PROPS-END
#include "Interpolator.h"
#include "Jacobian.h"
#include "Exception.h"

using namespace std;

Interpolator::Interpolator(const Formulation& formulation, const Mesh& mesh){
  f     = &formulation;
  fType = f->getBasisType();
  bSize = f->getBasisSize();

  msh = &mesh;

  nNode = msh->getNbNode();
  nodeVectorValue = new vector<Vector<double>*>(nNode);
  isInterpolated  = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    Vector<double>* v = new Vector<double>(2);
    (*v)(0) = 0.0; 
    (*v)(1) = 0.0;
    (*nodeVectorValue)[i] = v;
    (*isInterpolated)[i] = false;
  }

 switch(fType){
 case 0 : break;
 case 1 : interpolateEdgeElement(); break;
 default: throw Exception("Unknown Basis Type"); break;
 }
}

Interpolator::~Interpolator(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeVectorValue)[i];
  delete nodeVectorValue;

  delete isInterpolated;
}

void Interpolator::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeVectorValue)[id];
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = f->phiVect(k, x, y, jac);
	  vk.mult(entity[k]->getValue() * orient[k]);
	  vn->plus(vk);
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
}

const std::vector<Vector<double>*>& Interpolator::getVectorNodeValue(void) const{
  if(fType != 1 && fType != 2)
    throw Exception("The Basis Functions are scalar");
    
    return *nodeVectorValue;
}

const std::vector<double>& Interpolator::getScalarNodeValue(void) const{
  if(fType != 0 && fType != 3)
    throw Exception("The Basis Functions are vectorial");
    
  if(fType == 0)
    throw Exception("Interpolation of Nodal function is not implemented");

  if(fType == 3)
    throw Exception("Interpolation of Volume function is not implemented");
}


Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 626
Text-content-md5: 3ea71ad773c17f39572c12b36933d03c
Text-content-sha1: 203981a5c9641fd8ed5bb151d9cc4a6aca8ba3e6
Content-length: 636

PROPS-END
#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

#include <vector>
#include "Vector.h"
#include "Formulation.h"
#include "Mesh.h"

class Interpolator{
 private:
  const Formulation* f;
  int fType;
  int bSize;

  const Mesh* msh;  
  int nNode;
  std::vector<Vector<double>*>* nodeVectorValue;
  std::vector<bool>* isInterpolated;

 public:
   Interpolator(const Formulation& formulation, const Mesh& mesh);
  ~Interpolator(void);

  const std::vector<Vector<double>*>& getVectorNodeValue(void) const;
  const std::vector<double>&  getScalarNodeValue(void) const;

 private:
  void interpolateEdgeElement(void);
};

#endif


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 3124
Text-content-md5: 9765f7d032307778b24aa368b260725a
Text-content-sha1: a6bb693fcefcdcad9ca933fa7e176f12f6d6fbd9
Content-length: 3134

PROPS-END
#include "Solution.h"
#include "Exception.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();

  f     = &formulation;
  fType = f->getBasisType();
  
  interpolator = new Interpolator(*f, *msh);

  nodalScalarValue = NULL;
  
  switch(fType){
  case 0 : getNodalScalarValue(); break;
  case 1 : getNodalVectorValue(); break;
  default: throw Exception("Unknown basis type"); break;
  }
}

Solution::~Solution(void){
  if(nodalScalarValue)
    delete nodalScalarValue;

  delete interpolator;
  // Interpolator is responsible for deleting 'nodalVectorValue'
}

void Solution::getNodalScalarValue(void){
  nodalScalarValue = new vector<double>(N);
  
  for(int i = 0; i < N; i++)
    (*nodalScalarValue)[i] = (*node)[i]->getValue();
}

void Solution::getNodalVectorValue(void){
  nodalVectorValue = &(interpolator->getVectorNodeValue());
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  bool isScalar;
  if(fType == 0 || fType == 3)
    isScalar = true;
  else
    isScalar = false;

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, isScalar);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 933
Text-content-md5: 666332a4258d04fe282d4900af6c243d
Text-content-sha1: e6915494b2baf8ee28bf616c74f4d74ee7356556
Content-length: 943

PROPS-END
#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"
#include "Interpolator.h"

#include <fstream>
#include <string>
#include <vector>

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  const Formulation* f;
  int fType;

  Interpolator *interpolator;

  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void getNodalScalarValue(void);
  void getNodalVectorValue(void);

  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

#endif


Node-path: solver
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: solver/CMakeLists.txt
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 54
Text-content-md5: 19eb55302e00401cf515f58801571cf8
Text-content-sha1: f19f1a4420dd6592cbb2e7c3b41d726d603d2464
Content-length: 64

PROPS-END
set(src
  Solver.cpp
)


add_sources(solver "${src}")


Node-path: solver/Solver.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 232
Text-content-md5: f3fa2b935271195fbdd211f075468583
Text-content-sha1: 87a4cc53cb80b5daebfa07ef8a70583760efc77a
Content-length: 242

PROPS-END
#include "Solver.h"

extern "C"{
#include <clapack.h>
}

void Solver::solve(Matrix& A, Vector<double>& x){
  int *ipiv = new int[x.N];
  
  clapack_dgesv(CblasRowMajor, x.N, 1, A.matrix, A.nCol, ipiv, x.v, x.N);

  delete[] ipiv;
}


Node-path: solver/Solver.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 165
Text-content-md5: 38b9c385ad50c1dc6126b37e7b3b7003
Text-content-sha1: 570f5c38134c9c65ce68638170bb08c590f4656c
Content-length: 175

PROPS-END
#ifndef _SOLVER_H_
#define _SOLVER_H_

#include "Matrix.h"
#include "Vector.h"

class Solver{
 public:
  static void solve(Matrix& A, Vector<double>& x);
};

#endif


Node-path: tests
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: tests/circle.geo
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 652
Text-content-md5: ade21fa096c038422af44889e71f05e8
Text-content-sha1: db797bab53920bde092e3810d62badd849265641
Content-length: 662

PROPS-END
cl = 2.75;

L = 2;
l = 0.75;

Point(0) = {0, 0, 0, cl};

Point(1) = {+L, -L, 0, cl};
Point(2) = {+L, +L, 0, cl};
Point(3) = {-L, +L, 0, cl};
Point(4) = {-L, -L, 0, cl};

Circle(1) = {1, 0, 2};
Circle(2) = {2, 0, 3};
Circle(3) = {3, 0, 4};
Circle(4) = {4, 0, 1};

Point(5) = {+l, -l, 0, cl};
Point(6) = {+l, +l, 0, cl};
Point(7) = {-l, +l, 0, cl};
Point(8) = {-l, -l, 0, cl};

Circle(5) = {5, 0, 6};
Circle(6) = {6, 0, 7};
Circle(7) = {7, 0, 8};
Circle(8) = {8, 0, 5};

Line Loop(9) = {3, 4, 1, 2};
Line Loop(10) = {7, 8, 5, 6};
Plane Surface(11) = {9, 10};

Physical Line(5) = {1, 2, 3, 4};
Physical Line(6) = {5, 6, 7, 8};
Physical Surface(7) = {11};


Node-path: tests/circle.msh
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 21214
Text-content-md5: 789ac774ab4bb2c6e551683e350431ad
Text-content-sha1: dc453d16d87d3627ff7e1a29eec70e744b7dcaf8
Content-length: 21224

PROPS-END
$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
240
1 2 -2 0
2 2 2 0
3 -2 2 0
4 -2 -2 0
5 0.75 -0.75 0
6 0.75 0.75 0
7 -0.75 0.75 0
8 -0.75 -0.75 0
9 2.243942107185828 -1.721837338309988 0
10 2.449489742780063 -1.414213562378489 0
11 2.613125929749177 -1.082392200301025 0
12 2.732050807567089 -0.7320508075755515 0
13 2.804229538599327 -0.3691838225694668 0
14 2.82842712474619 -2.042810365310288e-12 0
15 2.804229538599814 0.3691838225657669 0
16 2.732050807567963 0.7320508075722882 0
17 2.613125929750335 1.082392200298232 0
18 2.449489742781072 1.414213562376743 0
19 2.243942107186442 1.721837338309189 0
20 1.721837338309988 2.243942107185828 0
21 1.414213562378489 2.449489742780063 0
22 1.082392200301025 2.613125929749177 0
23 0.7320508075755515 2.732050807567089 0
24 0.3691838225694668 2.804229538599327 0
25 2.042810365310288e-12 2.82842712474619 0
26 -0.3691838225657669 2.804229538599814 0
27 -0.7320508075722882 2.732050807567963 0
28 -1.082392200298232 2.613125929750335 0
29 -1.414213562376743 2.449489742781072 0
30 -1.721837338309189 2.243942107186442 0
31 -2.243942107185828 1.721837338309988 0
32 -2.449489742780063 1.414213562378489 0
33 -2.613125929749177 1.082392200301025 0
34 -2.732050807567089 0.7320508075755515 0
35 -2.804229538599327 0.3691838225694668 0
36 -2.82842712474619 2.042810365310288e-12 0
37 -2.804229538599814 -0.3691838225657669 0
38 -2.732050807567963 -0.7320508075722882 0
39 -2.613125929750335 -1.082392200298232 0
40 -2.449489742781072 -1.414213562376743 0
41 -2.243942107186442 -1.721837338309189 0
42 -1.721837338309988 -2.243942107185828 0
43 -1.414213562378489 -2.449489742780063 0
44 -1.082392200301025 -2.613125929749177 0
45 -0.7320508075755515 -2.732050807567089 0
46 -0.3691838225694668 -2.804229538599327 0
47 -2.042810365310288e-12 -2.82842712474619 0
48 0.3691838225657669 -2.804229538599814 0
49 0.7320508075722882 -2.732050807567963 0
50 1.082392200298232 -2.613125929750335 0
51 1.414213562376743 -2.449489742781072 0
52 1.721837338309189 -2.243942107186442 0
53 0.9799222236558836 -0.4058970751130254 0
54 1.060660171779821 -1.17217346939924e-12 0
55 0.9799222236563322 0.4058970751119425 0
56 0.4058970751130254 0.9799222236558836 0
57 1.17217346939924e-12 1.060660171779821 0
58 -0.4058970751119425 0.9799222236563322 0
59 -0.9799222236558836 0.4058970751130254 0
60 -1.060660171779821 1.17217346939924e-12 0
61 -0.9799222236563322 -0.4058970751119425 0
62 -0.4058970751130254 -0.9799222236558836 0
63 -1.17217346939924e-12 -1.060660171779821 0
64 0.4058970751119425 -0.9799222236563322 0
65 -1.603053551837808 1.035931010198212 0
66 1.036577788372759 1.605723664129419 0
67 -1.036577788372759 -1.605723664129419 0
68 1.603053551837808 -1.035931010198211 0
69 -0.4014118666649887 1.861391223022966 0
70 1.861391223022966 0.4014118666649886 0
71 0.4014118666649886 -1.861391223022966 0
72 -1.864557687207496 -0.4026727515019466 0
73 1.154138473928815 -1.730679595767878 0
74 1.732512748297238 1.153777812932465 0
75 -1.155304301156612 1.735356898214211 0
76 -1.735679212481769 -1.155038697769424 0
77 -2.041869137620635 0.3999207875336748 0
78 2.044826586608688 -0.4032166135917449 0
79 0.4005792405678246 2.044509930799427 0
80 -0.4005792405678246 -2.044509930799427 0
81 0.8952504472633332 2.122720546077642 0
82 2.122710649333369 -0.8947969122024874 0
83 -0.8952504472633332 -2.122720546077642 0
84 -2.119516411327709 0.8944743134538751 0
85 1.617029444517882 1.638288716625273 0
86 -1.617029444517882 -1.638288716625273 0
87 1.638288716625273 -1.617029444517882 0
88 -1.638288716625273 1.617029444517883 0
89 -2.134520261171363 -0.8649827639402138 0
90 -0.8653014880048396 2.134133484050294 0
91 2.130720504149927 0.863469702135864 0
92 0.8654881125039046 -2.134184635301302 0
93 -2.298935263512999 -0.0196758845402565 0
94 0.01966187470873467 -2.298900080577615 0
95 -0.01966187470873472 2.298900080577615 0
96 2.299206341770291 0.01964011872137049 0
97 -1.088784557322285 1.158436444448123 0
98 1.162459035459992 1.093230142938433 0
99 1.089240462981675 -1.156001376132773 0
100 -1.158447212141924 -1.088811274087889 0
101 1.488901246608084 -0.6356751918254733 0
102 0.6379134222969599 1.494034914587925 0
103 -0.6361250019511276 -1.489206173038491 0
104 -1.489260868271343 0.6353781098071914 0
105 -1.523900761773187 0.01918594275462009 0
106 1.524126660320931 -0.01921574760369067 0
107 0.01919761761422042 1.523871442660368 0
108 -0.01919761761422043 -1.523871442660368 0
109 -0.5726572407466781 1.451093136919772 0
110 1.451180146051569 0.5729643710179282 0
111 0.5730996819571672 -1.44955839993104 0
112 -1.45167097430954 -0.5725496649707034 0
113 -2.070271601712551 1.383826797297103 0
114 2.070271601712552 -1.383826797297104 0
115 1.383826797297103 2.070271601712551 0
116 -1.383826797297103 -2.070271601712551 0
117 -0.4862306120893571 2.44224914814872 0
118 2.44224914814872 0.4862306120893571 0
119 -2.44224914814872 -0.4862306120893568 0
120 0.4862306120893571 -2.44224914814872 0
121 2.05273979839492 1.36995202103259 0
122 1.369986369698909 -2.052565212439743 0
123 -1.370097400863461 2.053010669815584 0
124 -2.053041366412494 -1.370072105302776 0
125 -2.421931623629217 0.4811586065579935 0
126 2.422213285437603 -0.4814724947540004 0
127 -0.4812213163707699 -2.422183127741483 0
128 0.4812213163707699 2.422183127741483 0
129 0.7662761304239127 1.117235760616998 0
130 -0.7587362543620141 -1.116159418432683 0
131 1.116159418432683 -0.7587362543620146 0
132 -1.116159418432683 0.7587362543620148 0
133 -1.337444170311493 -0.2566438024586724 0
134 1.337444170311494 0.2566438024586729 0
135 -0.256643802458673 1.337444170311494 0
136 0.2566438024586729 -1.337444170311494 0
137 1.807038054662166 0.7987354812149148 0
138 -1.809025287186327 -0.7931201828820965 0
139 0.7969102971097755 -1.80650809316086 0
140 -0.7955106133667879 1.8061244587783 0
141 -1.941503573951054 0.01364218294485497 0
142 0.01374725668126803 1.941239701935676 0
143 -0.01374725668126807 -1.941239701935676 0
144 1.943536660880746 -0.01391042658649948 0
145 1.358378938594602 -1.398140292795051 0
146 1.398531222816724 1.359675003606271 0
147 -1.399985690099442 -1.358405970858358 0
148 -1.358205595116323 1.399904932395933 0
149 1.846193910446221 -0.7067849762229077 0
150 0.710186489179253 1.846268136028276 0
151 -0.710186489179253 -1.846268136028276 0
152 -1.849430505415559 0.7041112380583637 0
153 1.112325524507742 -2.285089179531918 0
154 -2.285089179531918 -1.112325524507742 0
155 2.285089179531918 1.112325524507742 0
156 -1.112325524507742 2.285089179531918 0
157 -1.905017469171253 -1.683476901169955 0
158 1.904983961613745 1.683463558473268 0
159 1.683467374991747 -1.90496456317428 0
160 -1.68347971178781 1.905014058438264 0
161 -0.8264872362770279 -2.404573203645117 0
162 0.8264872362770279 2.404573203645117 0
163 2.404575454861989 -0.8264647522017373 0
164 -2.404189243771539 0.8263940314301128 0
165 -0.155948373639831 -2.537306360520791 0
166 0.155948373639831 2.537306360520791 0
167 2.537343740397324 -0.1559786996810082 0
168 -2.53728232483447 0.1559398492349088 0
169 -1.310509946735339 0.3216763004306342 0
170 1.310495088611394 -0.3217126211936726 0
171 0.3227970630318853 1.311156732222904 0
172 -0.3217605856532485 -1.310500611808043 0
173 -0.7866627321231576 1.098110598215478 0
174 -1.098175998780318 -0.7866537477886718 0
175 1.09940498446054 0.7873104052422367 0
176 0.7871232094383829 -1.095836356207886 0
177 -2.276997346823582 1.124980157761986 0
178 1.125076750946028 2.277396024003972 0
179 -1.125076750946028 -2.277396024003972 0
180 2.277395174500928 -1.125023859930901 0
181 1.674332845561644 1.911408820393052 0
182 -1.67433656862359 -1.911410302914906 0
183 -1.911410615205778 1.674336189653258 0
184 1.911409244450661 -1.674330690179482 0
185 2.406550323854878 0.8146461018737431 0
186 0.8148703696924143 -2.406935227316142 0
187 -0.8148496336369626 2.406929543843808 0
188 -2.406972519079482 -0.814814219852004 0
189 0.168530944973311 -2.533993575803263 0
190 -0.168530944973311 2.533993575803263 0
191 2.534031758144286 0.1685251580812509 0
192 -2.533994814386492 -0.1685334487773601 0
193 1.449057054979459 0.9565799151468541 0
194 0.9510879554236283 -1.446964061591388 0
195 -0.955627895466809 1.448823752448747 0
196 -1.449263519785136 -0.95534506196962 0
197 -0.3387270220634718 -1.699995029163552 0
198 0.3390408995884128 1.700604458270697 0
199 1.700271046630862 -0.3386069537720326 0
200 -1.700092673329867 0.337873507605961 0
201 1.998444214034606 1.068219608351843 0
202 1.068298039808586 -1.99856773819001 0
203 -1.999678216934299 -1.067856772695666 0
204 -1.068256779828625 1.999192801415157 0
205 1.749132194880438 1.43572304393114 0
206 -1.749792995819416 -1.435739747805263 0
207 1.435603412087071 -1.748809785954348 0
208 -1.435752192315088 1.749734705245954 0
209 -2.250803169944966 0.2175967728683715 0
210 2.251550462151136 -0.2181237827564662 0
211 -0.2177099423110098 -2.251152140348515 0
212 0.2177099423110098 2.251152140348515 0
213 -0.6555501412305837 -2.170728572205124 0
214 0.6555501412305837 2.170728572205124 0
215 2.170763897857914 -0.6554182771392063 0
216 -2.170286169201486 0.6545280408806916 0
217 1.924491814990389 -1.085266906362569 0
218 1.085772986052221 1.924797935448276 0
219 -1.085772986052221 -1.924797935448276 0
220 -1.924452318244425 1.084929124242339 0
221 -2.18745382015758 -0.2778432663014699 0
222 -0.2776896582782549 2.187068624855522 0
223 2.18736211401983 0.2776684679688486 0
224 0.2776896582782548 -2.187068624855522 0
225 -0.244158001309803 1.624613862920414 0
226 1.624965754352071 0.2441747786933428 0
227 0.2442169934712016 -1.624409231321916 0
228 -1.625152195280746 -0.2443273423307354 0
229 -1.327045276602698 1.004181334220865 0
230 1.327081226932619 -1.003660984101139 0
231 1.005964113975381 1.328970009255845 0
232 -1.004379360316304 -1.327424277878217 0
233 -2.133232934848308 -0.5925946265464197 0
234 2.1321810065047 0.5928722304776007 0
235 -0.5927424127102093 2.132468241487047 0
236 0.5929209731877095 -2.132517182498813 0
237 -1.747573353265246 1.354712570504157 0
238 1.747596849872927 -1.354553419731443 0
239 1.354725191205669 1.748071502506656 0
240 -1.354887212355076 -1.747930663592649 0
$EndNodes
$Elements
480
1 1 2 5 1 1 9
2 1 2 5 1 9 10
3 1 2 5 1 10 11
4 1 2 5 1 11 12
5 1 2 5 1 12 13
6 1 2 5 1 13 14
7 1 2 5 1 14 15
8 1 2 5 1 15 16
9 1 2 5 1 16 17
10 1 2 5 1 17 18
11 1 2 5 1 18 19
12 1 2 5 1 19 2
13 1 2 5 2 2 20
14 1 2 5 2 20 21
15 1 2 5 2 21 22
16 1 2 5 2 22 23
17 1 2 5 2 23 24
18 1 2 5 2 24 25
19 1 2 5 2 25 26
20 1 2 5 2 26 27
21 1 2 5 2 27 28
22 1 2 5 2 28 29
23 1 2 5 2 29 30
24 1 2 5 2 30 3
25 1 2 5 3 3 31
26 1 2 5 3 31 32
27 1 2 5 3 32 33
28 1 2 5 3 33 34
29 1 2 5 3 34 35
30 1 2 5 3 35 36
31 1 2 5 3 36 37
32 1 2 5 3 37 38
33 1 2 5 3 38 39
34 1 2 5 3 39 40
35 1 2 5 3 40 41
36 1 2 5 3 41 4
37 1 2 5 4 4 42
38 1 2 5 4 42 43
39 1 2 5 4 43 44
40 1 2 5 4 44 45
41 1 2 5 4 45 46
42 1 2 5 4 46 47
43 1 2 5 4 47 48
44 1 2 5 4 48 49
45 1 2 5 4 49 50
46 1 2 5 4 50 51
47 1 2 5 4 51 52
48 1 2 5 4 52 1
49 1 2 6 5 5 53
50 1 2 6 5 53 54
51 1 2 6 5 54 55
52 1 2 6 5 55 6
53 1 2 6 6 6 56
54 1 2 6 6 56 57
55 1 2 6 6 57 58
56 1 2 6 6 58 7
57 1 2 6 7 7 59
58 1 2 6 7 59 60
59 1 2 6 7 60 61
60 1 2 6 7 61 8
61 1 2 6 8 8 62
62 1 2 6 8 62 63
63 1 2 6 8 63 64
64 1 2 6 8 64 5
65 2 2 7 11 66 102 231
66 2 2 7 11 67 103 232
67 2 2 7 11 68 101 230
68 2 2 7 11 65 104 229
69 2 2 7 11 65 152 104
70 2 2 7 11 66 150 102
71 2 2 7 11 67 151 103
72 2 2 7 11 68 149 101
73 2 2 7 11 131 101 170
74 2 2 7 11 102 171 129
75 2 2 7 11 130 103 172
76 2 2 7 11 132 104 169
77 2 2 7 11 98 129 175
78 2 2 7 11 131 176 99
79 2 2 7 11 130 174 100
80 2 2 7 11 132 173 97
81 2 2 7 11 72 138 112
82 2 2 7 11 69 140 109
83 2 2 7 11 70 137 110
84 2 2 7 11 71 139 111
85 2 2 7 11 53 131 170
86 2 2 7 11 56 129 171
87 2 2 7 11 62 130 172
88 2 2 7 11 59 132 169
89 2 2 7 11 6 175 129
90 2 2 7 11 5 176 131
91 2 2 7 11 8 174 130
92 2 2 7 11 7 173 132
93 2 2 7 11 70 110 226
94 2 2 7 11 72 112 228
95 2 2 7 11 69 109 225
96 2 2 7 11 71 111 227
97 2 2 7 11 31 32 113
98 2 2 7 11 42 43 116
99 2 2 7 11 20 21 115
100 2 2 7 11 9 10 114
101 2 2 7 11 37 38 119
102 2 2 7 11 26 27 117
103 2 2 7 11 15 16 118
104 2 2 7 11 48 49 120
105 2 2 7 11 64 136 111
106 2 2 7 11 58 135 109
107 2 2 7 11 55 134 110
108 2 2 7 11 61 133 112
109 2 2 7 11 57 107 135
110 2 2 7 11 54 106 134
111 2 2 7 11 63 108 136
112 2 2 7 11 60 105 133
113 2 2 7 11 64 111 176
114 2 2 7 11 58 109 173
115 2 2 7 11 55 110 175
116 2 2 7 11 61 112 174
117 2 2 7 11 57 171 107
118 2 2 7 11 54 170 106
119 2 2 7 11 63 172 108
120 2 2 7 11 60 169 105
121 2 2 7 11 131 230 101
122 2 2 7 11 130 232 103
123 2 2 7 11 102 129 231
124 2 2 7 11 132 229 104
125 2 2 7 11 29 30 123
126 2 2 7 11 51 52 122
127 2 2 7 11 40 41 124
128 2 2 7 11 18 19 121
129 2 2 7 11 34 35 125
130 2 2 7 11 12 13 126
131 2 2 7 11 45 46 127
132 2 2 7 11 23 24 128
133 2 2 7 11 31 113 183
134 2 2 7 11 20 115 181
135 2 2 7 11 42 116 182
136 2 2 7 11 9 114 184
137 2 2 7 11 32 177 113
138 2 2 7 11 21 178 115
139 2 2 7 11 10 180 114
140 2 2 7 11 43 179 116
141 2 2 7 11 38 188 119
142 2 2 7 11 27 187 117
143 2 2 7 11 49 186 120
144 2 2 7 11 16 185 118
145 2 2 7 11 37 119 192
146 2 2 7 11 48 120 189
147 2 2 7 11 26 117 190
148 2 2 7 11 15 118 191
149 2 2 7 11 5 131 53
150 2 2 7 11 6 129 56
151 2 2 7 11 8 130 62
152 2 2 7 11 7 132 59
153 2 2 7 11 70 226 144
154 2 2 7 11 69 225 142
155 2 2 7 11 71 227 143
156 2 2 7 11 72 228 141
157 2 2 7 11 114 180 217
158 2 2 7 11 116 179 219
159 2 2 7 11 115 178 218
160 2 2 7 11 113 177 220
161 2 2 7 11 118 223 191
162 2 2 7 11 120 224 189
163 2 2 7 11 119 221 192
164 2 2 7 11 117 222 190
165 2 2 7 11 68 145 238
166 2 2 7 11 66 146 239
167 2 2 7 11 67 147 240
168 2 2 7 11 65 148 237
169 2 2 7 11 82 217 180
170 2 2 7 11 83 219 179
171 2 2 7 11 81 218 178
172 2 2 7 11 84 220 177
173 2 2 7 11 96 191 223
174 2 2 7 11 94 189 224
175 2 2 7 11 93 192 221
176 2 2 7 11 95 190 222
177 2 2 7 11 69 235 140
178 2 2 7 11 70 234 137
179 2 2 7 11 71 236 139
180 2 2 7 11 138 72 233
181 2 2 7 11 65 220 152
182 2 2 7 11 150 66 218
183 2 2 7 11 151 67 219
184 2 2 7 11 68 217 149
185 2 2 7 11 66 231 146
186 2 2 7 11 67 232 147
187 2 2 7 11 65 229 148
188 2 2 7 11 68 230 145
189 2 2 7 11 119 188 233
190 2 2 7 11 118 185 234
191 2 2 7 11 120 186 236
192 2 2 7 11 117 187 235
193 2 2 7 11 113 237 183
194 2 2 7 11 114 238 184
195 2 2 7 11 115 239 181
196 2 2 7 11 116 240 182
197 2 2 7 11 69 142 222
198 2 2 7 11 70 144 223
199 2 2 7 11 71 143 224
200 2 2 7 11 72 141 221
201 2 2 7 11 41 157 124
202 2 2 7 11 19 158 121
203 2 2 7 11 52 159 122
204 2 2 7 11 30 160 123
205 2 2 7 11 40 124 154
206 2 2 7 11 18 121 155
207 2 2 7 11 29 123 156
208 2 2 7 11 51 122 153
209 2 2 7 11 45 127 161
210 2 2 7 11 23 128 162
211 2 2 7 11 34 125 164
212 2 2 7 11 12 126 163
213 2 2 7 11 24 166 128
214 2 2 7 11 46 165 127
215 2 2 7 11 13 167 126
216 2 2 7 11 35 168 125
217 2 2 7 11 89 233 188
218 2 2 7 11 91 234 185
219 2 2 7 11 92 236 186
220 2 2 7 11 90 235 187
221 2 2 7 11 88 183 237
222 2 2 7 11 87 184 238
223 2 2 7 11 85 181 239
224 2 2 7 11 86 182 240
225 2 2 7 11 54 134 55
226 2 2 7 11 63 136 64
227 2 2 7 11 60 133 61
228 2 2 7 11 57 135 58
229 2 2 7 11 141 228 105
230 2 2 7 11 144 226 106
231 2 2 7 11 143 227 108
232 2 2 7 11 142 225 107
233 2 2 7 11 133 228 112
234 2 2 7 11 135 225 109
235 2 2 7 11 136 227 111
236 2 2 7 11 134 226 110
237 2 2 7 11 74 146 193
238 2 2 7 11 75 148 195
239 2 2 7 11 76 147 196
240 2 2 7 11 73 145 194
241 2 2 7 11 149 78 199
242 2 2 7 11 151 80 197
243 2 2 7 11 150 79 198
244 2 2 7 11 77 200 152
245 2 2 7 11 140 235 90
246 2 2 7 11 91 137 234
247 2 2 7 11 139 236 92
248 2 2 7 11 138 233 89
249 2 2 7 11 142 95 222
250 2 2 7 11 144 96 223
251 2 2 7 11 143 94 224
252 2 2 7 11 141 93 221
253 2 2 7 11 85 239 146
254 2 2 7 11 86 240 147
255 2 2 7 11 87 238 145
256 2 2 7 11 88 237 148
257 2 2 7 11 148 97 195
258 2 2 7 11 147 100 196
259 2 2 7 11 98 193 146
260 2 2 7 11 145 99 194
261 2 2 7 11 149 199 101
262 2 2 7 11 151 197 103
263 2 2 7 11 150 198 102
264 2 2 7 11 152 200 104
265 2 2 7 11 100 174 196
266 2 2 7 11 99 176 194
267 2 2 7 11 98 175 193
268 2 2 7 11 97 173 195
269 2 2 7 11 104 200 169
270 2 2 7 11 101 199 170
271 2 2 7 11 103 197 172
272 2 2 7 11 102 198 171
273 2 2 7 11 112 196 174
274 2 2 7 11 111 194 176
275 2 2 7 11 110 193 175
276 2 2 7 11 109 195 173
277 2 2 7 11 105 169 200
278 2 2 7 11 108 172 197
279 2 2 7 11 107 171 198
280 2 2 7 11 106 170 199
281 2 2 7 11 150 218 81
282 2 2 7 11 151 219 83
283 2 2 7 11 149 217 82
284 2 2 7 11 84 152 220
285 2 2 7 11 28 29 156
286 2 2 7 11 39 40 154
287 2 2 7 11 17 18 155
288 2 2 7 11 50 51 153
289 2 2 7 11 44 45 161
290 2 2 7 11 22 23 162
291 2 2 7 11 11 12 163
292 2 2 7 11 33 34 164
293 2 2 7 11 2 158 19
294 2 2 7 11 4 157 41
295 2 2 7 11 1 159 52
296 2 2 7 11 3 160 30
297 2 2 7 11 35 36 168
298 2 2 7 11 46 47 165
299 2 2 7 11 24 25 166
300 2 2 7 11 13 14 167
301 2 2 7 11 53 170 54
302 2 2 7 11 56 171 57
303 2 2 7 11 62 172 63
304 2 2 7 11 59 169 60
305 2 2 7 11 7 58 173
306 2 2 7 11 6 55 175
307 2 2 7 11 5 64 176
308 2 2 7 11 8 61 174
309 2 2 7 11 77 216 125
310 2 2 7 11 80 213 127
311 2 2 7 11 79 214 128
312 2 2 7 11 78 215 126
313 2 2 7 11 75 123 208
314 2 2 7 11 76 124 206
315 2 2 7 11 74 121 205
316 2 2 7 11 73 122 207
317 2 2 7 11 75 204 123
318 2 2 7 11 74 201 121
319 2 2 7 11 73 202 122
320 2 2 7 11 76 203 124
321 2 2 7 11 77 125 209
322 2 2 7 11 80 127 211
323 2 2 7 11 78 126 210
324 2 2 7 11 79 128 212
325 2 2 7 11 147 232 100
326 2 2 7 11 148 229 97
327 2 2 7 11 98 146 231
328 2 2 7 11 145 230 99
329 2 2 7 11 91 201 137
330 2 2 7 11 139 92 202
331 2 2 7 11 140 90 204
332 2 2 7 11 138 89 203
333 2 2 7 11 144 210 96
334 2 2 7 11 143 211 94
335 2 2 7 11 142 212 95
336 2 2 7 11 141 209 93
337 2 2 7 11 74 137 201
338 2 2 7 11 73 139 202
339 2 2 7 11 138 203 76
340 2 2 7 11 140 204 75
341 2 2 7 11 143 80 211
342 2 2 7 11 142 79 212
343 2 2 7 11 78 210 144
344 2 2 7 11 141 77 209
345 2 2 7 11 138 76 196
346 2 2 7 11 74 193 137
347 2 2 7 11 73 194 139
348 2 2 7 11 140 75 195
349 2 2 7 11 141 200 77
350 2 2 7 11 142 198 79
351 2 2 7 11 143 197 80
352 2 2 7 11 78 144 199
353 2 2 7 11 16 17 185
354 2 2 7 11 49 50 186
355 2 2 7 11 27 28 187
356 2 2 7 11 38 39 188
357 2 2 7 11 43 44 179
358 2 2 7 11 32 33 177
359 2 2 7 11 21 22 178
360 2 2 7 11 10 11 180
361 2 2 7 11 2 20 181
362 2 2 7 11 4 42 182
363 2 2 7 11 1 9 184
364 2 2 7 11 3 31 183
365 2 2 7 11 36 37 192
366 2 2 7 11 47 48 189
367 2 2 7 11 25 26 190
368 2 2 7 11 14 15 191
369 2 2 7 11 130 100 232
370 2 2 7 11 98 231 129
371 2 2 7 11 131 99 230
372 2 2 7 11 132 97 229
373 2 2 7 11 87 145 207
374 2 2 7 11 88 148 208
375 2 2 7 11 85 146 205
376 2 2 7 11 86 147 206
377 2 2 7 11 151 83 213
378 2 2 7 11 150 81 214
379 2 2 7 11 149 82 215
380 2 2 7 11 84 216 152
381 2 2 7 11 138 196 112
382 2 2 7 11 139 194 111
383 2 2 7 11 137 193 110
384 2 2 7 11 140 195 109
385 2 2 7 11 141 105 200
386 2 2 7 11 143 108 197
387 2 2 7 11 142 107 198
388 2 2 7 11 144 106 199
389 2 2 7 11 73 207 145
390 2 2 7 11 74 205 146
391 2 2 7 11 76 206 147
392 2 2 7 11 75 208 148
393 2 2 7 11 151 213 80
394 2 2 7 11 150 214 79
395 2 2 7 11 149 215 78
396 2 2 7 11 77 152 216
397 2 2 7 11 33 164 177
398 2 2 7 11 44 161 179
399 2 2 7 11 11 163 180
400 2 2 7 11 22 162 178
401 2 2 7 11 17 155 185
402 2 2 7 11 50 153 186
403 2 2 7 11 39 154 188
404 2 2 7 11 28 156 187
405 2 2 7 11 2 181 158
406 2 2 7 11 4 182 157
407 2 2 7 11 1 184 159
408 2 2 7 11 3 183 160
409 2 2 7 11 25 190 166
410 2 2 7 11 47 189 165
411 2 2 7 11 14 191 167
412 2 2 7 11 36 192 168
413 2 2 7 11 83 179 161
414 2 2 7 11 82 180 163
415 2 2 7 11 81 178 162
416 2 2 7 11 84 177 164
417 2 2 7 11 154 89 188
418 2 2 7 11 155 91 185
419 2 2 7 11 153 92 186
420 2 2 7 11 156 90 187
421 2 2 7 11 88 160 183
422 2 2 7 11 85 158 181
423 2 2 7 11 86 157 182
424 2 2 7 11 87 159 184
425 2 2 7 11 94 165 189
426 2 2 7 11 95 166 190
427 2 2 7 11 96 167 191
428 2 2 7 11 93 168 192
429 2 2 7 11 135 107 225
430 2 2 7 11 133 105 228
431 2 2 7 11 136 108 227
432 2 2 7 11 134 106 226
433 2 2 7 11 125 216 164
434 2 2 7 11 126 215 163
435 2 2 7 11 127 213 161
436 2 2 7 11 128 214 162
437 2 2 7 11 123 160 208
438 2 2 7 11 122 159 207
439 2 2 7 11 121 158 205
440 2 2 7 11 124 157 206
441 2 2 7 11 125 168 209
442 2 2 7 11 126 167 210
443 2 2 7 11 128 166 212
444 2 2 7 11 127 165 211
445 2 2 7 11 156 123 204
446 2 2 7 11 155 121 201
447 2 2 7 11 154 124 203
448 2 2 7 11 153 122 202
449 2 2 7 11 82 163 215
450 2 2 7 11 84 164 216
451 2 2 7 11 83 161 213
452 2 2 7 11 81 162 214
453 2 2 7 11 88 208 160
454 2 2 7 11 85 205 158
455 2 2 7 11 87 207 159
456 2 2 7 11 86 206 157
457 2 2 7 11 156 204 90
458 2 2 7 11 155 201 91
459 2 2 7 11 153 202 92
460 2 2 7 11 154 203 89
461 2 2 7 11 96 210 167
462 2 2 7 11 94 211 165
463 2 2 7 11 95 212 166
464 2 2 7 11 93 209 168
465 2 2 7 11 67 240 219
466 2 2 7 11 66 239 218
467 2 2 7 11 68 238 217
468 2 2 7 11 65 237 220
469 2 2 7 11 69 222 235
470 2 2 7 11 70 223 234
471 2 2 7 11 71 224 236
472 2 2 7 11 72 221 233
473 2 2 7 11 119 233 221
474 2 2 7 11 118 234 223
475 2 2 7 11 117 235 222
476 2 2 7 11 120 236 224
477 2 2 7 11 113 220 237
478 2 2 7 11 114 217 238
479 2 2 7 11 115 218 239
480 2 2 7 11 116 219 240
$EndElements


Node-path: tests/tri.geo
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 427
Text-content-md5: 4257d7c861347dccb5396d3ba6115658
Text-content-sha1: 86f5ac26d4ff10a285d8c06cff9ec268070a092e
Content-length: 437

PROPS-END
msh = 2;
cl = 1.5;

l = 1;

Point(1) = {+l, -l, 0, cl};
Point(2) = {+l, +l, 0, cl};
Point(3) = {-l, +l, 0, cl};
Point(4) = {-l, -l, 0, cl};

Line(1) = {1, 2};
Line(2) = {2, 3};
Line(3) = {3, 4};
Line(4) = {4, 1};

Line Loop(1) = {1, 2, 3, 4};

Plane Surface(1) = {1};

Transfinite Line {1, 2, 3, 4} = msh Using Progression 1;
Transfinite Surface {1};

Physical Line(5) = {3};
Physical Line(6) = {1};
Physical Surface(7) = {1};


Node-path: tests/tri.msh
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 175
Text-content-md5: 59776cb98a0cf7bbbe82f33f14a697c3
Text-content-sha1: cceac2ab74381fadeaacdbfb2d74b797fa095830
Content-length: 185

PROPS-END
$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
4
1 1 -1 0
2 1 1 0
3 -1 1 0
4 -1 -1 0
$EndNodes
$Elements
4
1 1 2 6 1 1 2
2 1 2 5 3 3 4
3 2 2 7 1 1 2 4
4 2 2 7 1 4 2 3
$EndElements


Revision-number: 2
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-04-30T07:59:35.567169Z
PROPS-END

Node-path: assembler/System.cpp
Node-kind: file
Node-action: change
Text-content-length: 2323
Text-content-md5: 09f73d25dd8a89af3277aa56bc8550b0
Text-content-sha1: 1c02478728e9b139d4a20311518aa07eb3a1c6b6
Content-length: 2323

#include "System.h"
#include "Formulation.h"
#include "Exception.h"
#include "Solver.h"

#include <cstdio>

using namespace std;

System::System(const std::vector<Element*>& elements,
	       const Formulation& formulation){
  // Get Formulation //
  this->formulation = &formulation;

  // Get Dof Manager //
  dofM = new DofManager(elements);

  // Get DofManager Data //
  size = dofM->dofNumber();
  
  const std::vector<GroupOfDof*>& group = dofM->getAllGroups();
  const int E = dofM->groupNumber();

  // Create System //
  A = new Matrix(size, size);
  n = new Vector<double>(size);

  A->allToZero();
  n->allToZero();

  // Assemble System //
  for(int i = 0; i < E; i++)
    assemble(*(group[i]));
}

System::~System(void){
  delete A;
  delete n;
  delete dofM;
  // System is not responsible for deleting 'Formulations'
}

void System::fixBC(const int physicalId, const double value){
  
  const multimap<int, Dof*>& physicals = dofM->getAllPhysicals();

  multimap<int, Dof*>::const_iterator j;

  pair<multimap<int, Dof*>::const_iterator, multimap<int, Dof*>::const_iterator>
    range;
  range = physicals.equal_range(physicalId);
  
  if((range.first == range.second) &&
     (range.first == physicals.end()))
    throw Exception("Unknown Physical");
  
  for(j = range.first; j != range.second; j++){
    // Get Dof Id
    int dofId = dofM->getGlobalId(*((*j).second));

    // We set the 'dofId'th row to zero
    for(int i = 0; i < size; i++)
      (*A)(dofId, i) = 0.0;

    // We set the 'dofId'th diagonal to one
    (*A)(dofId, dofId) = 1.0;
    
    // We also set the 'dofId'th RHS to 'value' 
    (*n)[dofId] = value;
  }
}

void System::solve(void){
  // Get dof value //
  Solver::solve(*A, *n);

  // Set all Entities value //
  const vector<Dof*>* dof = &dofM->getAllDofs();
  const int N = dof->size();
  
  for(int i = 0; i < N; i++)
    dofM->getEntity(*((*dof)[i])).setValue((*n)(i));
}

void System::assemble(GroupOfDof& group){
  const vector<Dof*>& dof = group.getAllDofs();
  const int N = group.dofNumber();

  for(int i = 0; i < N; i++){
    int dofI = dofM->getGlobalId(*(dof[i]));

    for(int j = 0; j < N; j++){
      int dofJ = dofM->getGlobalId(*(dof[j]));
      (*A)(dofI, dofJ) += 
	formulation->weak(i, j, group);
    }

    (*n)[dofI] += formulation->rhs(i, group);
  }
}


Node-path: basis/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 117
Text-content-md5: af18cadb847e34d1f0944974bb330614
Text-content-sha1: d6eb270c6152a5b7c75a41105ed8b53defc687b3
Content-length: 117

set(src
  QuadNodeBasis.cpp
  QuadEdgeBasis.cpp
  TriNodeBasis.cpp
  TriEdgeBasis.cpp
)


add_sources(basis "${src}")

Node-path: build
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: mathematics/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 133
Text-content-md5: 0f5e7e40f224d3a6d905027bed056cc6
Text-content-sha1: ebe8d83f08cd27ed14bb701ba9aea278102ea482
Content-length: 133

set(src
  Matrix.cpp
  VectorDouble.cpp
  VectorPolynomial.cpp
  Polynomial.cpp
  Legendre.cpp
)


add_sources(mathematics "${src}")


Node-path: mathematics/Vector.h
Node-kind: file
Node-action: change
Text-content-length: 2453
Text-content-md5: 263ef4f2637dbf16c24b29661d6e5d5e
Text-content-sha1: a152be8d2c779df7f6a85f898432b0058719d877
Content-length: 2453

#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <string>
#include <cstdarg>

extern "C"{
#include <cblas.h>
}

#include "Exception.h"

class Solver;

template<class T>
class Vector{
 private:
  int N;
  T* v;

  friend class Solver;
  friend class Matrix;
  
 public:
   Vector(const int a);
   Vector(void);
  ~Vector(void);

  int dim(void) const;

  double operator()(const double x0, ...);

  T&   operator[](const int i);
  T    operator[](const int i) const;
  void operator=(const Vector<T>& other);

  void set(const int i, const T a);
  T    get(const int i) const;

  Vector<T> operator+(const Vector<T>& other);
  Vector<T> operator-(const Vector<T>& other);
  Vector<T> operator*(const T& other);
  Vector<T> operator*(const double alpha);

  void   add(const Vector<T>& b);
  void   sub(const Vector<T>& b);
  void   mul(const T& other);
  void   mul(const double alpha);
  double dot(const Vector<T>& v) const;

  void allToZero(void);

  std::string toString(void) const;
};

//////////////////////////////////////////////////////////////////////
// Templated Implementations                                        //
//////////////////////////////////////////////////////////////////////

template<class T>
Vector<T>::Vector(const int a){
  if(!a)
    throw Exception("Vector must by of dimension bigger than 0");
  
  N = a;
  v = new T[N];
}

template<class T>
Vector<T>::Vector(void){
  N = 3;
  v = new T[N];
}

template<class T>
Vector<T>::~Vector(void){
  delete[] v;
}

template<class T>
inline int Vector<T>::dim(void) const{
  return N;
}

template<class T>
inline T& Vector<T>::operator[](const int i){
  return v[i];
}

template<class T>
inline T Vector<T>::operator[](const int i) const{
  return v[i];
}

template<class T>
void Vector<T>::operator=(const Vector<T>& other){
  if(N != other.N)
    throw Exception("Vectors must be of the same dimension");

  for(int i = 0; i < N; i++)
    v[i] = other.v[i];
}

template<class T>
inline void Vector<T>::set(const int i, const T a){
  v[i] = a;
}

template<class T>
inline T Vector<T>::get(const int i) const{
  return v[i];
}

//////////////////////////////////////////////////////////////////////
// Inline Vector<double> Implementations                            //
//////////////////////////////////////////////////////////////////////

template<>
inline double Vector<double>::dot(const Vector<double>& v) const{ 
  return cblas_ddot(N, (*this).v, 1, v.v, 1);
}

#endif


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: change
Text-content-length: 2340
Text-content-md5: 9941bf5aecd5d5e519c30130fa0a6aad
Text-content-sha1: 1a6b66e4ff2b951cb1ccd9990dce2dc770d915b8
Content-length: 2340

#include "Interpolator.h"
#include "Jacobian.h"
#include "Exception.h"

using namespace std;

Interpolator::Interpolator(const Formulation& formulation, const Mesh& mesh){
  f     = &formulation;
  fType = f->getBasisType();
  bSize = f->getBasisSize();

  msh = &mesh;

  nNode = msh->getNbNode();
  nodeVectorValue = new vector<Vector<double>*>(nNode);
  isInterpolated  = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    Vector<double>* v = new Vector<double>(2);
    (*v)[0] = 0.0; 
    (*v)[1] = 0.0;
    (*nodeVectorValue)[i] = v;
    (*isInterpolated)[i] = false;
  }

 switch(fType){
 case 0 : break;
 case 1 : interpolateEdgeElement(); break;
 default: throw Exception("Unknown Basis Type"); break;
 }
}

Interpolator::~Interpolator(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeVectorValue)[i];
  delete nodeVectorValue;

  delete isInterpolated;
}

void Interpolator::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeVectorValue)[id];
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = f->phiVect(k, x, y, jac);
	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
}

const std::vector<Vector<double>*>& Interpolator::getVectorNodeValue(void) const{
  if(fType != 1 && fType != 2)
    throw Exception("The Basis Functions are scalar");
    
    return *nodeVectorValue;
}

const std::vector<double>& Interpolator::getScalarNodeValue(void) const{
  if(fType != 0 && fType != 3)
    throw Exception("The Basis Functions are vectorial");
    
  if(fType == 0)
    throw Exception("Interpolation of Nodal function is not implemented");

  if(fType == 3)
    throw Exception("Interpolation of Volume function is not implemented");
}


Revision-number: 3
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-04-30T08:02:19.314153Z
PROPS-END

Node-path: build
Node-action: delete


Revision-number: 4
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-04-30T08:04:49.295423Z
PROPS-END

Node-path: basis/Basis.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1081
Text-content-md5: bf2aba2384d2aa45e283fc578254273b
Text-content-sha1: 22e759b98617e60de26e0956eb7a9b49f3fccc66
Content-length: 1091

PROPS-END
#ifndef _BASIS_H_
#define _BASIS_H_

#include "Polynomial.h"

template<class T>
class Basis{
 protected:
  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

  T* basis;

 public:
  ~Basis(void);
  
  int getOrder(void);
  int getType(void);
  int getSize(void);
  int getNodeNbr(void);
  int getDim(void);

  const T* getBasis(void);

 protected:
  Basis(void);
};

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

template<class T>
Basis<T>::Basis(void){
}

template<class T>
Basis<T>::~Basis(void){
  delete[] basis;
}

template<class T>
inline int Basis<T>::getOrder(void){
  return order;
}

template<class T>
inline int Basis<T>::getType(void){
  return type;
}

template<class T>
inline int Basis<T>::getSize(void){
  return size;
}

template<class T>
inline int Basis<T>::getNodeNbr(void){
  return nodeNbr;
}

template<class T>
inline int Basis<T>::getDim(void){
  return dim;
}

template<class T>
inline const T* Basis<T>::getBasis(void){
  return basis;
}


#endif


Node-path: basis/QuadEdgeBasis.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 5791
Text-content-md5: 376cf9ea6cb74e88365988cd7ddd8424
Text-content-sha1: e9fdcd5089a67cbf3f4b91506872a637892855c4
Content-length: 5801

PROPS-END
#include "QuadEdgeBasis.h"
#include "Legendre.h"

QuadEdgeBasis::QuadEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 2;
  size    = 2 * (order + 2) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  const int  orderPlus = order + 1;
  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];

  Polynomial* iLegendreX  = new Polynomial[orderPlus];
  Polynomial* iLegendreY  = new Polynomial[orderPlus];
  Polynomial* legendreX   = new Polynomial[orderPlus];
  Polynomial* legendreY   = new Polynomial[orderPlus];

  Polynomial* lagrange    = new Polynomial[4];
  Polynomial* lagrangeSum = new Polynomial[4];

  Polynomial* lifting     = new Polynomial[4];
  Polynomial* liftingSub  = new Polynomial[4];

  // Integrated and classical Legendre Polynomial //
  Legendre::integrated(intLegendre, orderPlus);
  Legendre::legendre(legendre, order);

  // Lagrange // 
  lagrange[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  lagrange[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    lagrangeSum[i] = lagrange[i] + lagrange[j];
    
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  // Lifting Sub //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    liftingSub[i] = lifting[j] - lifting[i];


  // Basis //
  basis = new Vector<Polynomial>[size];
  
  // Edge Based (Nedelec) // 
  int i = 0;
  for(int e = 0; e < 4; e++){
    basis[i] = 
      (liftingSub[e]).gradient();
    
    basis[i].mul(lagrangeSum[e]);
    basis[i].mul(0.5);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 4; e++){
      basis[i] = 
	(intLegendre[l].compose(liftingSub[e]) * lagrangeSum[e]).gradient();
     
      i++;
    }
  }

  
  // Cell Based (Preliminary) //
  Polynomial px   = Polynomial(2, 1, 0, 0);
  Polynomial py   = Polynomial(2, 0, 1, 0);
  Polynomial zero = Polynomial(0, 0, 0, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l = 0; l < orderPlus; l++){
    iLegendreX[l] = intLegendre[l].compose(px);
    iLegendreY[l] = intLegendre[l].compose(py);
     legendreX[l] =    legendre[l].compose(px);
     legendreY[l] =    legendre[l].compose(py);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i] = (iLegendreX[l1] * iLegendreY[l2]).gradient();

      i++;
    }
  }
  
  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i][0] =  legendreX[l1] * iLegendreY[l2];
      basis[i][1] = iLegendreX[l1] *  legendreY[l2] * -1;
      basis[i][2] = zero;

      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 1, iPlus = i + order; l < orderPlus; l++, iPlus++){
      basis[i][0] = iLegendreY[l];
      basis[i][1] = zero;
      basis[i][2] = zero;

      basis[iPlus][0] = zero;
      basis[iPlus][1] = iLegendreX[l];
      basis[iPlus][2] = zero;

      i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;

  delete[] iLegendreX;
  delete[] iLegendreY;
  delete[] legendreX;
  delete[] legendreY;

  delete[] lagrange;
  delete[] lagrangeSum;

  delete[] lifting;
  delete[] liftingSub;
}

/*
#include <cstdio>
int main(void){
  const int P = 3;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  QuadEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("close all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++){
    for(int j = 0; j < 2; j++)
      printf("p(%d, %d) = %s;\n", i + 1, j + 1, basis[i](j).toString().c_str());
    //printf("p(%d) = %s", i, basis[i].toString().c_str());
    printf("\n");
  }

  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);

  printf("\n");
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/QuadEdgeBasis.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 228
Text-content-md5: cfcc350daa321878fc4e50b5ade2f8ad
Text-content-sha1: 07c2d7af38c6ef50a0e2caa7ecb0cb05fff80357
Content-length: 238

PROPS-END
#ifndef _QUADEDGEBASIS_H_
#define _QUADEDGEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

class QuadEdgeBasis: public Basis<Vector<Polynomial> >{
 public:
   QuadEdgeBasis(const int order);
};

#endif


Node-path: basis/QuadNodeBasis.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 3453
Text-content-md5: 7b7d133ff6c0fe646248bf8d914244ed
Text-content-sha1: fb707b082520b91d834a8a4fc8ae1e8f76415b61
Content-length: 3463

PROPS-END
#include "QuadNodeBasis.h"
#include "Legendre.h"

QuadNodeBasis::QuadNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 1;
  size    = (order + 1) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre = new Polynomial[order];
  Polynomial* lifting  = new Polynomial[4];

  // Legendre Polynomial //
  Legendre::integrated(legendre, order);
  
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));



  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  basis[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));
  
  // Edge Based //
  int i = 4;

  for(int l = 1; l < order; l++){
    for(int e1 = 0, e2 = 1; e1 < 4; e1++, e2 = (e2 + 1) % 4){
      basis[i] = 
	legendre[l].compose(lifting[e2] - lifting[e1]) * (basis[e1] + basis[e2]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial px = Polynomial(2, 1, 0, 0);
  Polynomial py = Polynomial(2, 0, 1, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 1; l2 < order; l2++){
      basis[i] = legendre[l1].compose(px) * legendre[l2].compose(py);

      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] lifting;
}


/*
#include <cstdio>
int main(void){
  const int P = 4;
  const double d = 0.05;

  QuadNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());

  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize(); i > 0; i--)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i, i);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/QuadNodeBasis.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 199
Text-content-md5: ac5a1df9c4be5b15097590c5699f9409
Text-content-sha1: 02b2a07a04f29a2afa86e8b3b252d3ab2119cc50
Content-length: 209

PROPS-END
#ifndef _QUADNODEBASIS_H_
#define _QUADNODEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"

class QuadNodeBasis: public Basis<Polynomial>{
 public:
   QuadNodeBasis(const int order);
};

#endif


Node-path: basis/TriEdgeBasis.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 4793
Text-content-md5: 2d622916384a1e77f7ca337ff443b801
Text-content-sha1: cab2b1c285df27b9401e14a4f287ed5d61880670
Content-length: 4803

PROPS-END
#include "TriEdgeBasis.h"
#include "Legendre.h"

TriEdgeBasis::TriEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 2;
  size    = (order + 1) * (order + 2);
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  const int orderPlus     = order + 1;
  const int orderMinus    = order - 1;

  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];
  
  Polynomial* lagrange    = new Polynomial[3];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  Polynomial* u           = new Polynomial[orderPlus];
  Polynomial* v           = new Polynomial[orderPlus];

  // Classical and Intrated-Scaled Legendre Polynomial //
  Legendre::legendre(legendre, order);
  Legendre::intScaled(intLegendre, orderPlus);

  // Lagrange //
  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = lagrange[j] + lagrange[i];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = lagrange[i] - lagrange[j];


  // Basis //
  basis = new Vector<Polynomial>[size];

  // Edge Based (Nedelec) //
  int i = 0;

  for(int j = 1; i < 3; j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	(intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e])).gradient();

      i++;
    }
  }

  // Cell Based (Preliminary) //
  Polynomial p = lagrange[2] * 2 - Polynomial(1, 0, 0, 0);
  
  for(int l = 0; l < orderPlus; l++){
    u[l] = intLegendre[l].compose(lagrangeSub[0] * -1, lagrangeSum[0]);
    v[l] = legendre[l].compose(p);
    v[l].mul(lagrange[2]);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].add(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].sub(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 0; l < orderMinus; l++){
    basis[i] = basis[0];
    basis[i].mul(v[l]);
    
    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrange;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
  delete[] u;
  delete[] v;
}


#include <cstdio>
int main(void){
  const int P = 4;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i][0].toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i][1].toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}



Node-path: basis/TriEdgeBasis.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 224
Text-content-md5: 9c6c2edf925e14cd332ab156e3f3f832
Text-content-sha1: 0256977fa61180549cf5ba0e4bf29383d83f816c
Content-length: 234

PROPS-END
#ifndef _TRIEDGEBASIS_H_
#define _TRIEDGEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

class TriEdgeBasis: public Basis<Vector<Polynomial> >{
 public:
   TriEdgeBasis(const int order);
};

#endif


Node-path: basis/TriNodeBasis.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 3307
Text-content-md5: 3e6b64ea5f8f7985c1c62b30d4322447
Text-content-sha1: 45e38dd260ad3a970bafab98a6f99a19c040c53e
Content-length: 3317

PROPS-END
#include "TriNodeBasis.h"
#include "Legendre.h"

TriNodeBasis::TriNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 1;
  size    = (order + 1) * (order + 2) / 2;
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre    = new Polynomial[order];
  Polynomial* intLegendre = new Polynomial[order];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  // Classical and Intrated-Scaled Legendre Polynomial //
  const int orderMinus = order - 1;

  Legendre::legendre(legendre, orderMinus);
  Legendre::intScaled(intLegendre, order);
 

  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  basis[1] = 
    Polynomial(1, 1, 0, 0);

  basis[2] = 
    Polynomial(1, 0, 1, 0);

  
  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = basis[i] + basis[j];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = basis[j] - basis[i];

  
  // Edge Based //
  int i = 3;

  for(int l = 1; l < order; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial p             = basis[2] * 2 - Polynomial(1, 0, 0, 0);
  const int  orderMinusTwo = order - 2;
  
  for(int l1 = 1; l1 < orderMinus; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinusTwo; l2++){
      basis[i] = 
	intLegendre[l1].compose(lagrangeSub[0], lagrangeSum[0]) * 
	   legendre[l2].compose(p) * basis[2];
      
      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
}

/*
#include <cstdio>
int main(void){
  const int P = 5;
  const double d = 0.01;

  TriNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
  
  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNodeBasis.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 195
Text-content-md5: 088b1c0344b7d58033d7224e86f32743
Text-content-sha1: 9af7163ea066166ffdd3d3868f49df943218382f
Content-length: 205

PROPS-END
#ifndef _TRINODEBASIS_H_
#define _TRINODEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"

class TriNodeBasis: public Basis<Polynomial>{
 public:
   TriNodeBasis(const int order);
};

#endif


Node-path: mathematics/Legendre.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 3726
Text-content-md5: f5d4ba66c086de3275fb0536136c550d
Text-content-sha1: 1c353b0537e5e91dfba2d802c86b5d86de51df2f
Content-length: 3736

PROPS-END
#include "Legendre.h"

Polynomial Legendre::legendre(const int n, const Polynomial& l, 
			      const Polynomial& lMinus){
  const double nPlus = n + 1;

  return
    l * Polynomial(1, 1, 0, 0) * ((2 * n + 1) / nPlus) - lMinus * (n / nPlus);
}

Polynomial Legendre::scaled(const int n, const Polynomial& l, 
			    const Polynomial& lMinus){
  const double nPlus = n + 1;

  return
    l      * Polynomial(1, 1, 0, 0) * ((2 * n + 1) / nPlus) - 
    lMinus * Polynomial(1, 0, 2, 0) * ((    n    ) / nPlus);
}

Polynomial Legendre::integrated(const int n, const Polynomial& l, 
				const Polynomial& lMinus){
  const double nPlus = n + 1;

  return
    l * Polynomial(1, 1, 0, 0) * ((2 * n - 1) / nPlus) - lMinus * ((n - 2) / nPlus);
}

Polynomial Legendre::intScaled(const int n, const Polynomial& l, 
			       const Polynomial& lMinus){
  const double nPlus = n + 1;

  return
    l      * Polynomial(1, 1, 0, 0) * ((2 * n - 1) / nPlus) - 
    lMinus * Polynomial(1, 0, 2, 0) * ((    n - 2) / nPlus);
}



void Legendre::legendre(Polynomial* polynomial, const int order){
  int i, j, k;

  if(order >= 0)
    polynomial[0] = Polynomial(1, 0, 0, 0);
  
  if(order >= 1)
    polynomial[1] = Polynomial(1, 1, 0, 0);

  if(order >= 2){
    for(k = 2; k <= order; k++){
      i = k - 1;
      j = k - 2;
      
      polynomial[k] = legendre(i, polynomial[i], polynomial[j]);
    }
  }
}

void Legendre::integrated(Polynomial* polynomial, const int order){
  int i, j, k;

  if(order >= 1)
    polynomial[0] = Polynomial(1, 1, 0, 0);

  if(order >= 2)
    polynomial[1] = (Polynomial(1, 2, 0, 0) + Polynomial(-1, 0, 0, 0)) * 0.5;

  if(order >= 3){
    for(k = 2; k < order; k++){
      i = k - 1;
      j = k - 2;
      
      polynomial[k] = integrated(k, polynomial[i], polynomial[j]);
    }
  }
}

void Legendre::scaled(Polynomial* polynomial, const int order){
  int i, j, k;

  if(order >= 0)
    polynomial[0] = Polynomial(1, 0, 0, 0);
  
  if(order >= 1)
    polynomial[1] = Polynomial(1, 1, 0, 0);

  if(order >= 2){
    for(k = 2; k <= order; k++){
      i = k - 1;
      j = k - 2;
      
      polynomial[k] = scaled(i, polynomial[i], polynomial[j]);
    }
  }
}

void Legendre::intScaled(Polynomial* polynomial, const int order){
  int i, j, k;

  if(order >= 1)
    polynomial[0] = Polynomial(1, 1, 0, 0);

  if(order >= 2)
    polynomial[1] = (Polynomial(1, 2, 0, 0) + Polynomial(-1, 0, 2, 0)) * 0.5;

  if(order >= 3){
    for(k = 2; k < order; k++){
      i = k - 1;
      j = k - 2;
      
      polynomial[k] = intScaled(k, polynomial[i], polynomial[j]);
    }
  }
}

/*
#include <iostream>
int main(void){
  Polynomial p[13];
  Legendre::legendre(p, 12);

  for(int i = 0; i < 13; i++)
    std::cout << "l(" << i << ")= " << (p[i]).toString() << std::endl;


  std::cout << std::endl;

  Polynomial pi[12];
  Legendre::integrated(pi, 12);

  for(int i = 0; i < 12; i++)
    std::cout << "L(" << i + 1 << ")= " << pi[i].toString() << std::endl;


  std::cout << std::endl;

  Polynomial ps[13];
  Legendre::scaled(ps, 12);

  for(int i = 0; i < 13; i++)
    std::cout << "ls(" << i << ")= " << (ps[i]).toString() << std::endl;


  std::cout << std::endl;

  Polynomial pis[12];
  Legendre::intScaled(pis, 12);

  for(int i = 0; i < 12; i++)
    std::cout << "Ls(" << i + 1<< ")= " << (pis[i]).toString() << std::endl;


  Polynomial p1 = Polynomial(1, 1, 1, 0);// - Polynomial(1, 0, 0, 0);
  Polynomial p2 = Polynomial(1, 0, 1, 1);// - Polynomial(1, 0, 0, 0);

  Polynomial p3 = pis[11].compose(p1, p2);

  std::cout << std::endl << "p1 = " << p1.toString() << std::endl;
  std::cout << "p2 = " << p2.toString() << std::endl;
  std::cout << "Ls(12, p1, p2) = " << p3.toString() << std::endl;

  return 0;
}
*/


Node-path: mathematics/Legendre.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 812
Text-content-md5: 6eccfed3d615b9091b2e7225831b0667
Text-content-sha1: 2b52b8a726e4b30440517048d7e83aa817416f9c
Content-length: 822

PROPS-END
#ifndef _LEGENDRE_H_
#define _LEGENDRE_H_

#include "Polynomial.h"

class Legendre{
 public:
  static void legendre(Polynomial* polynomial, const int order);
  static void integrated(Polynomial* polynomial, const int order);
  static void scaled(Polynomial* polynomial, const int order);
  static void intScaled(Polynomial* polynomial, const int order);

 private:
  static Polynomial legendre(const int n,
			     const Polynomial& l, 
			     const Polynomial& lMinus);
  
  static Polynomial integrated(const int n,
			       const Polynomial& l, 
			       const Polynomial& lMinus);

  static Polynomial scaled(const int n,
			   const Polynomial& l, 
			   const Polynomial& lMinus);

  static Polynomial intScaled(const int n,
			      const Polynomial& l, 
			      const Polynomial& lMinus);
};

#endif


Node-path: mathematics/Polynomial.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 14296
Text-content-md5: bd14cfc351484e634d351a0ec346101e
Text-content-sha1: e808f3f2af9ebf61c4b73885d1fa02599b429cbb
Content-length: 14306

PROPS-END
#include <cmath>
#include <sstream>
#include <stack>
#include "Polynomial.h"

using namespace std;

const char Polynomial::coefName[3] = {'x', 'y', 'z'};

Polynomial::Polynomial(const double coef, const int powerX,
 	                                  const int powerY,
                                          const int powerZ){
  nMon = 1;
  mon  = new monomial_t[1];
  
  mon[0].coef     = coef;
  mon[0].power[0] = powerX;
  mon[0].power[1] = powerY;
  mon[0].power[2] = powerZ;
}
 
Polynomial::Polynomial(const Polynomial& other){
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon); 
}

Polynomial::Polynomial(void){
  nMon = 0;
  mon  = NULL;
}

Polynomial::~Polynomial(void){
  if(mon)
    delete[] mon;
}

void Polynomial::derivative(const int dim){ 
  // Take derivative //
  for(int i = 0; i < nMon; i++){
    mon[i].coef *= mon[i].power[dim];
    mon[i].power[dim] -= 1;
  }

  // Remove zero monomials //
  int N = 0;
  stack<monomial_t*> s;

  for(int i = 0; i < nMon; i++){
    if(mon[i].coef != 0.0){
      s.push(&mon[i]);
      N++;
    }
  }

  // If no monomial any more ---> return zero polynomial
  if(!N){
    delete[] mon;
    
    mon  = zeroPolynomial();
    nMon = 1;
    return;
  }
  
  // If no zero found ---> return;
  if(N == nMon) 
    return;

  // Else, remove them //
  monomial_t* tmp = mon;
  
  mon  = new monomial_t[N];
  nMon = N;

  for(int i = N - 1; i >= 0; i--){
    mon[i] = *(s.top());
    s.pop();
  }

  delete[] tmp;

  // Sort resulting monomial and return // 
  sort(mon, nMon);

  return;
}

Vector<Polynomial> Polynomial::gradient(void) const{
  Vector<Polynomial> grad(3);

  // Copy Polynomial //
  grad[0] = *this;
  grad[1] = *this;
  grad[2] = *this;

  // Derivative with respect to each direction //
  grad[0].derivative(0);
  grad[1].derivative(1);
  grad[2].derivative(2);
  
  return grad;
}

double Polynomial::operator()
  (const double x, const double y, const double z) const{
  
  double val = 0;
  for(int i = 0; i < nMon; i++){
    val += mon[i].coef * pow(x, mon[i].power[0]) 
                       * pow(y, mon[i].power[1]) 
                       * pow(z, mon[i].power[2]);
  }

  return val;
}

Polynomial Polynomial::operator+(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mergeMon(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator-(const Polynomial& other) const{
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  
  Polynomial  newP;

  mult(otherMinus, otherNMon, -1); 
  newP.nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &newP.mon);

  delete[] otherMinus;
  return newP;
}

Polynomial Polynomial::operator*(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mult(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator*(const double alpha) const{
  Polynomial newP;
  
  newP.mon  = copyMonomial(mon, nMon);
  newP.nMon = nMon;

  newP.mul(alpha);

  return newP;
}


void Polynomial::add(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mergeMon(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::sub(const Polynomial& other){
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  monomial_t* tmp        = mon;
  
  mult(otherMinus, otherNMon, -1); 
  nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &mon);

  delete[] otherMinus;
  delete[] tmp;
}

void Polynomial::mul(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mult(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::mul(const double alpha){
  for(int i = 0; i < nMon; i++)
    mon[i].coef *= alpha;
}

void Polynomial::power(const int n){
  if (n < 0)
    return;

  switch(n){
  case 0:
    delete[] mon;
    
    mon  = unitPolynomial();
    nMon = 1;
    
    break;
    
  case 1:
    break;

  default:
    Polynomial old = *this;
    
    for(int i = 1; i < n; i++)
      mul(old);
    
    break;
  }
}

Polynomial Polynomial::compose(const Polynomial& other){
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], other, &stk);

  return polynomialFromStack(stk);
}

Polynomial Polynomial::compose(const Polynomial& otherA,
			       const Polynomial& otherB){
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], otherA, otherB, &stk);

  return polynomialFromStack(stk);
}

void Polynomial::operator=(const Polynomial& other){
  if(mon)
    delete[] mon;
  
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon);
}

string Polynomial::toString(const Polynomial::monomial_t* mon, const bool isAbs){
  stringstream stream;
  const bool minusOne    = mon->coef == -1.0;
  const bool notUnitCoef = mon->coef !=  1.0 && !minusOne;

  // If we have a constant term
  if(!mon->power[0] && !mon->power[1] && !mon->power[2]){
    stream << mon->coef;
    return stream.str();
  }

  // If we're here, we do not have a constant term
  
  // If we have a coefficient of '1', we don't display it
  if(notUnitCoef && isAbs)
    stream << abs(mon->coef);

  if(notUnitCoef && !isAbs)
    stream << mon->coef;

  if(minusOne && !isAbs)
    stream << "-";

  // We look for each power
  bool notOnce = false;
  for(int i = 0; i < 3; i++){
    // If we have a non zero power, we display it
    if(mon->power[i]){
      if(notUnitCoef || notOnce)
	stream << " * ";

      stream << coefName[i];
      
      if(mon->power[i] != 1)
	stream << "^" << mon->power[i];

      notOnce = true;
    }
  }

  return stream.str();
}

string Polynomial::toString(void) const{
  stringstream stream;
  bool isAbs = false;

  stream << toString(&mon[0], isAbs);
    
  for(int i = 1; i < nMon; i++){
    if(mon[i].coef < 0.0){
      stream << " - ";
      isAbs = true;
    }

    else{
      stream << " + ";
      isAbs = false;
    }

    stream << toString(&mon[i], isAbs);
  }

  return stream.str();
}

bool Polynomial::isSmaller(const Polynomial::monomial_t* a, 
			   const Polynomial::monomial_t* b){
  // GRevLex order: 
  // http://www.math.uiuc.edu/Macaulay2/doc/Macaulay2-1.4/share/doc/Macaulay2/Macaulay2Doc/html/___G__Rev__Lex.html
  
  int dif[3];
  int last = 0;

  if(isSmallerPower(a, b))
    return true;
  
  if(isEqualPower(a, b)){
    for(int i = 0, j = 2; i < 3; i++, j--)
      dif[i] = b->power[j] - a->power[j];

    for(int i = 0; i < 3; i++)
      if(dif[i])
	last = dif[i];

    if(last < 0)
      return true;
    
    else
      return false;
  }
    
  return false;
}

void Polynomial::sort(monomial_t* mon, const int size){
  for(int i = 0; i < size; i++)
    for(int j = i; j < size; j++)
      if(isSmaller(&mon[j], &mon[i]))
        swap(mon, i, j);
}

void Polynomial::swap(monomial_t* mon, const int i, const int j){
  monomial_t tmp = mon[i];
  mon[i] = mon[j];
  mon[j] = tmp;
}


int Polynomial::mergeMon(monomial_t* sourceA, const int sizeA, 
			 monomial_t* sourceB, const int sizeB,
			 monomial_t** dest){
  stack<monomial_t> s;
  monomial_t tmp;

  int i = 0;
  int j = 0;
  int N = 0;

  while(i < sizeA && j < sizeB){
    if(sourceA[i].coef == 0.0)
      i++;

    else if(sourceB[j].coef == 0.0)
      j++;
    
    else if(isEqual(&sourceA[i], &sourceB[j])){
      tmp       = sourceA[i];
      tmp.coef += sourceB[j].coef; 
      
      if(tmp.coef != 0.0){
	s.push(tmp);
	N++;
      }
      
      i++;
      j++;
    }
    
    else if(isSmaller(&sourceA[i], &sourceB[j])){
      s.push(sourceA[i]);
      i++;
      N++;
    }

    else{
      s.push(sourceB[j]);
      j++;
      N++;
    }
  }

  while(i == sizeA && j < sizeB){
    s.push(sourceB[j]);
    j++;
    N++;
  }

  while(i < sizeA && j == sizeB){
    s.push(sourceA[i]);
    i++;
    N++;
  }

  if(!N){
    *dest = zeroPolynomial();
    N++;
  }

  else{
    *dest = new monomial_t[N];

    for(int k = N - 1; k >= 0; k--){
      (*dest)[k] = s.top();
      s.pop();
    }
  }

  return N;
}

int Polynomial::mult(const monomial_t* sourceA, const int sizeA,
		     const monomial_t* sourceB, const int sizeB,
		     monomial_t** dest){

  const monomial_t* a; // smaller polynomial
  const monomial_t* b; // bigger polynomial
  int nDist;
  int size;

  if(sizeA < sizeB){
    a     = sourceA;
    b     = sourceB; 
    nDist = sizeA;
    size  = sizeB;
  }
  
  else{
    a     = sourceB;
    b     = sourceA;
    nDist = sizeB;
    size  = sizeA;
  }

  // Check if zero //
  if(a[0].coef == 0 || b[0].coef == 0){
    *dest = zeroPolynomial();
    return 1;
  }

  // Distrubute all monomials //
  monomial_t** dist = new monomial_t*[nDist];

  for(int i = 0; i < nDist; i++){
    dist[i] = copyMonomial(b, size);
  
    distribute(dist[i], size, &a[i]);
  }

  // Merge //
  int finalSize    = size;
  int nDistMinus   = nDist - 1;
  monomial_t** tmp = new monomial_t*[nDistMinus]; // Temp array for all dist[0];

  for(int i = 1, j = 0; i < nDist; i++, j++){
    tmp[j] = dist[0];
    
    finalSize = mergeMon(dist[0], finalSize, 
			 dist[i], size,
			 &dist[0]);
  }

  // Keep distributed polynomial //
  *dest = dist[0];

  // Free Temporary Resources and Return //
  for(int i = 1, j = 0; i < nDist; i++, j++){
    delete[] dist[i];
    delete[] tmp[j];
  }
  
  delete[] dist;
  delete[] tmp;

  return finalSize;
}

void Polynomial::mult(monomial_t* source, const int size, const double alpha){
  for(int i = 0; i < size; i++)
    source[i].coef *= alpha;
}


void Polynomial::distribute(monomial_t* src, const int size, const monomial_t* m){ 
  for(int i = 0; i < size; i++){
    src[i].coef *= m->coef;
    
    src[i].power[0] += m->power[0];
    src[i].power[1] += m->power[1];
    src[i].power[2] += m->power[2];    
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial comp,
			 stack<Polynomial::monomial_t>* stk){
  
  comp.power(src->power[0]);
  comp.mul(src->coef);
  
  const int size = comp.nMon;

  for(int i = 0; i < size; i++){
    if(comp.mon[i].coef != 0){
      
      comp.mon[i].power[1] += src->power[1];
      comp.mon[i].power[2] += src->power[2];
      
      stk->push(comp.mon[i]);
    }
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial compA, Polynomial compB,
			 stack<Polynomial::monomial_t>* stk){

  compA.power(src->power[0]);
  compB.power(src->power[1]);
  
  compA.mul(compB);
  compA.mul(src->coef);
  
  const int size = compA.nMon;

  for(int i = 0; i < size; i++){
    if(compA.mon[i].coef != 0){
      
      compA.mon[i].power[2] += src->power[2];
      
      stk->push(compA.mon[i]);
    }
  }
}

Polynomial Polynomial::polynomialFromStack(std::stack<Polynomial::monomial_t>& stk){
  Polynomial  newP;
  monomial_t* tmp;
  monomial_t* newMon;
  int         newNMon;

  if(!stk.size()){
    newMon  = zeroPolynomial();
    newNMon = 1;
  }

  else{
    newMon    = new monomial_t[1];
    newMon[0] = stk.top();
    newNMon   = 1;
    stk.pop();
    
    while(!stk.empty()){
      tmp     = newMon;
      newNMon = mergeMon(newMon, newNMon, &stk.top(), 1, &newMon);
      stk.pop();
      
      delete[] tmp;
    }
  }

  newP.nMon = newNMon;
  newP.mon  = newMon;

  return newP;
}

Polynomial::monomial_t* Polynomial::copyMonomial(const monomial_t* src, const int size){
  monomial_t* dest = new monomial_t[size];

  for(int i = 0; i < size; i++){
    dest[i].coef     = src[i].coef;
    dest[i].power[0] = src[i].power[0];
    dest[i].power[1] = src[i].power[1];
    dest[i].power[2] = src[i].power[2];
  }

  return dest;
}

Polynomial::monomial_t* Polynomial::zeroPolynomial(void){
  monomial_t* zero = new monomial_t[1];
  
  zero->coef     = 0;
  zero->power[0] = 0;
  zero->power[1] = 0;
  zero->power[2] = 0;
 
  return zero;
}

Polynomial::monomial_t* Polynomial::unitPolynomial(void){
  monomial_t* unit = new monomial_t[1];
  
  unit->coef     = 1;
  unit->power[0] = 0;
  unit->power[1] = 0;
  unit->power[2] = 0;
 
  return unit;
}







/*
#include <iostream>
int main(void){
  Polynomial m0(-1  , 0, 0, 0);
  Polynomial m1(4.2, 1, 0, 0);
  Polynomial m2(4.2, 1, 1, 0);
  Polynomial m3(4.2, 1, 0, 1);

  cout << "m0 = " << m0.toString() << endl;
  cout << "m1 = " << m1.toString() << endl;
  cout << "m1(4, 5, 6) = " << m1.at(4, 5, 6) << endl;
  cout << "m2 = " << m2.toString() << endl;
  cout << "m3 = " << m3.toString() << endl;

  Polynomial p0 = m1 + m0;
  Polynomial p1 = m3 + m3;
  Polynomial p2 = p1 + p0;

  cout << "p0 = " << p0.toString() << endl;
  cout << "p1 = " << p1.toString() << endl;
  cout << "p2 = " << p2.toString() << endl;
  cout << "p2(1.1, 2.2, 3.3) = " << p2.at(1.1, 2.2, 3.3) << endl;

  p2.add(p0);
  cout << "p2 = " << p2.toString() << endl;


  Polynomial p3 = p2 * p0;
  Polynomial p4 = p3 * p3;
  cout << "p3 = " << p3.toString() << endl;
  cout << "p4 = " << p4.toString() << endl;
  
  p3.mul(p3);
  cout << "p3 = " << p3.toString() << endl;

  Polynomial p5 = p2 - p3;
  Polynomial p6 = p3 - p2;
  Polynomial p7 = p6 - p6;
  cout << "p5 = " << p5.toString() << endl;
  cout << "p6 = " << p6.toString() << endl;
  cout << "p7 = " << p7.toString() << endl;
  
  p6.sub(p6);
  cout << "p6 = " << p6.toString() << endl;
  

  Polynomial p8(p4);
  Polynomial p9(p4);
  Polynomial p10(p4);

  p8.derivative(0);
  p9.derivative(1);
  p10.derivative(2);

  cout << "p8 = "  << p8.toString()  << endl;
  cout << "p9 = "  << p9.toString()  << endl;
  cout << "p10 = " << p10.toString() << endl;

  Polynomial p11 = p8 * 4;
  cout << "p11 = " << p11.toString() << endl;
  cout << "p11(1, 2, 3) = " << p11.at(1, 2, 3.1) << endl;

  Polynomial m4(1, 1, 0, 0);
  Polynomial m5(1, 0, 1, 0);
  Polynomial m6(1, 0, 0, 1);

  Polynomial p12 = m4 + m5 + m6;

  cout << "p12 = " << p12.toString() << endl;

  p12.power(4);
  cout << "p12^4 = " << p12.toString() << endl;

 Polynomial m7(1, 1, 0, 0);
 Polynomial m8(2, 2, 0, 0);
 Polynomial m9(3, 3, 0, 0);

 Polynomial p13 = m9 + m7;
 cout << "p13 = " << p13.toString() << endl;

 Polynomial m10(1, 1, 1, 0);
 Polynomial m11(2, 2, 1, 2);
 Polynomial m12(1, 1, 3, 1);

 Polynomial p14 = m10 + m11 + m12;
 cout << "p14 = " << p14.toString() << endl;

 Polynomial p15 = p14.compose(p13);
 cout << "p15 = p14(p13) = " << p15.toString() << endl;

 return 0;
}

*/


Node-path: mathematics/Polynomial.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 3390
Text-content-md5: 55db1c95250c90a8de75b5faf123793a
Text-content-sha1: 7723915a2c03f27bc0d8f46e16153d9dff1979da
Content-length: 3400

PROPS-END
#ifndef _POLYNOMIAL_H_
#define _POLYNOMIAL_H_

#include <string>
#include <stack>
#include "Vector.h"

// We suppose 3D Polynomial
class Polynomial{
 private: 
  static const char coefName[3];

  struct monomial_t{
    double coef;
    int power[3];
  };
  
  int         nMon;
  monomial_t*  mon;

 public:
   Polynomial(const double coef, const int powerX,
 	                         const int powerY,
                                 const int powerZ);

   Polynomial(const Polynomial& other);
   Polynomial(void);
  ~Polynomial(void);

  void               derivative(const int dim);
  Vector<Polynomial> gradient(void) const;

  double operator()
    (const double x, const double y, const double z) const;  

  Polynomial operator+(const Polynomial& other) const;
  Polynomial operator-(const Polynomial& other) const;
  Polynomial operator*(const Polynomial& other) const;
  Polynomial operator*(const double alpha) const;

  void add(const Polynomial& other);
  void sub(const Polynomial& other);
  void mul(const Polynomial& other);
  void mul(const double alpha);

  void power(const int n);

  Polynomial compose(const Polynomial& other);
  Polynomial compose(const Polynomial& otherA, const Polynomial& otherB);

  void operator=(const Polynomial& other);

  std::string toString(void) const;

 private:
  static std::string toString(const monomial_t* mon, const bool isAbs);

  static bool isSmaller(const monomial_t* a, const monomial_t*b); 
  static bool isEqual(const monomial_t* a, const monomial_t*b); 
  static bool isSmallerPower(const monomial_t* a, const monomial_t* b);  
  static bool isEqualPower(const monomial_t* a, const monomial_t* b);
  
  static void sort(monomial_t* mon, const int size);
  static void swap(monomial_t* mon, const int i, const int j);

  static int mergeMon(monomial_t* sourceA, const int sizeA, 
		      monomial_t* sourceB, const int sizeB,
		      monomial_t** dest);
  
  static int mult(const monomial_t* sourceA, const int sizeA,
		  const monomial_t* sourceB, const int sizeB,
		  monomial_t** dest);
  
  static void mult(monomial_t* source, const int size, const double alpha);

  static void distribute(monomial_t* src, const int size, const monomial_t* m);

  static void compose(const monomial_t* src, 
		      Polynomial comp,
		      std::stack<monomial_t>* stk);

  static void compose(const monomial_t* src, 
		      Polynomial compA, Polynomial compB,
		      std::stack<monomial_t>* stk);

  static Polynomial polynomialFromStack(std::stack<monomial_t>& stk);

  static monomial_t* copyMonomial(const monomial_t* src, const int size);

  static monomial_t* zeroPolynomial(void);
  static monomial_t* unitPolynomial(void);
};




inline bool Polynomial::isEqual(const Polynomial::monomial_t* a,
				const Polynomial::monomial_t* b){
  return a->power[0] == b->power[0] &&
         a->power[1] == b->power[1] &&
         a->power[2] == b->power[2];
}

inline bool Polynomial::isSmallerPower(const Polynomial::monomial_t* a,
				       const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    < 
    b->power[0] + b->power[1] + b->power[2] ;    
}

inline bool Polynomial::isEqualPower(const Polynomial::monomial_t* a,
				     const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    ==
    b->power[0] + b->power[1] + b->power[2] ;    
}

#endif


Node-path: mathematics/VectorDouble.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 844
Text-content-md5: 6389d3b25320cd1eef8e6947fe17796c
Text-content-sha1: c5928382498fca6e2fb3537837f6cae8ac77f256
Content-length: 854

PROPS-END
#include <sstream>
#include "Vector.h"

using namespace std;

template<>
void Vector<double>::allToZero(void){
  for(int i = 0; i < N; i++)
    v[i] = 0.0;
}

template<>
void Vector<double>::add(const Vector<double>& b){
  if(this->N != b.N)
    throw Exception("Vectors must be with of the same size");

  for(int i = 0; i < N; i++)
    v[i] += b.v[i];  
}

template<>
void Vector<double>::sub(const Vector<double>& b){
  if(this->N != b.N)
    throw Exception("Vectors must be with of the same size");

  for(int i = 0; i < N; i++)
    v[i] -= b.v[i];  
}

template<>
void Vector<double>::mul(const double alpha){
  for(int i = 0; i < N; i++)
    v[i] *= alpha;  
}

template<>
string Vector<double>::toString(void) const{
  stringstream s;
  
  for(int i = 0; i < N; i++)
    s << scientific << showpos << v[i] << endl;

  return s.str();
}


Node-path: mathematics/VectorPolynomial.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 789
Text-content-md5: 7a874db630588223350fad36b8df1a89
Text-content-sha1: 87db9a3d7ebc67c7a876069ee1de1a3d70dd8680
Content-length: 799

PROPS-END
#include <sstream>
#include "Vector.h"
#include "Polynomial.h"

using namespace std;

template<>
void Vector<Polynomial>::add(const Vector<Polynomial>& other){
  for(int i = 0; i < N; i++)
    v[i].add(other.v[i]);    
}

template<>
void Vector<Polynomial>::sub(const Vector<Polynomial>& other){
  for(int i = 0; i < N; i++)
    v[i].sub(other.v[i]);    
}

template<>
void Vector<Polynomial>::mul(const Polynomial& other){
  for(int i = 0; i < N; i++)
    v[i].mul(other);    
}

template<>
void Vector<Polynomial>::mul(const double alpha){
  for(int i = 0; i < N; i++)
    v[i].mul(alpha);  
}

template<>
string Vector<Polynomial>::toString(void) const{
  stringstream s; 

  s << endl;

  for(int i = 0; i < N; i++)
    s << "[" << v[i].toString() << "]" << endl;

  return s.str();
}


Revision-number: 5
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-04-30T11:56:22.075733Z
PROPS-END

Node-path: assembler/System.cpp
Node-kind: file
Node-action: change
Text-content-length: 2323
Text-content-md5: e4141e439560d904218110a90c7c5f43
Text-content-sha1: 0b5a6ec1a50e61af06d9d91f8f481e2afd1f1ee7
Content-length: 2323

#include "System.h"
#include "Formulation.h"
#include "Exception.h"
#include "Solver.h"

#include <cstdio>

using namespace std;

System::System(const std::vector<Element*>& elements,
	       const Formulation& formulation){
  // Get Formulation //
  this->formulation = &formulation;

  // Get Dof Manager //
  dofM = new DofManager(elements);

  // Get DofManager Data //
  size = dofM->dofNumber();
  
  const std::vector<GroupOfDof*>& group = dofM->getAllGroups();
  const int E = dofM->groupNumber();

  // Create System //
  A = new Matrix(size, size);
  n = new Vector<double>(size);

  A->allToZero();
  n->allToZero();

  // Assemble System //
  for(int i = 0; i < E; i++)
    assemble(*(group[i]));
}

System::~System(void){
  delete A;
  delete n;
  delete dofM;
  // System is not responsible for deleting 'Formulations'
}

void System::fixBC(const int physicalId, const double value){
  
  const multimap<int, Dof*>& physicals = dofM->getAllPhysicals();

  multimap<int, Dof*>::const_iterator j;

  pair<multimap<int, Dof*>::const_iterator, multimap<int, Dof*>::const_iterator>
    range;
  range = physicals.equal_range(physicalId);
  
  if((range.first == range.second) &&
     (range.first == physicals.end()))
    throw Exception("Unknown Physical");
  
  for(j = range.first; j != range.second; j++){
    // Get Dof Id
    int dofId = dofM->getGlobalId(*((*j).second));

    // We set the 'dofId'th row to zero
    for(int i = 0; i < size; i++)
      (*A)(dofId, i) = 0.0;

    // We set the 'dofId'th diagonal to one
    (*A)(dofId, dofId) = 1.0;
    
    // We also set the 'dofId'th RHS to 'value' 
    (*n)(dofId) = value;
  }
}

void System::solve(void){
  // Get dof value //
  Solver::solve(*A, *n);

  // Set all Entities value //
  const vector<Dof*>* dof = &dofM->getAllDofs();
  const int N = dof->size();
  
  for(int i = 0; i < N; i++)
    dofM->getEntity(*((*dof)[i])).setValue((*n)(i));
}

void System::assemble(GroupOfDof& group){
  const vector<Dof*>& dof = group.getAllDofs();
  const int N = group.dofNumber();

  for(int i = 0; i < N; i++){
    int dofI = dofM->getGlobalId(*(dof[i]));

    for(int j = 0; j < N; j++){
      int dofJ = dofM->getGlobalId(*(dof[j]));
      (*A)(dofI, dofJ) += 
	formulation->weak(i, j, group);
    }

    (*n)(dofI) += formulation->rhs(i, group);
  }
}


Node-path: basis/QuadEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 5818
Text-content-md5: cfd6e5cc77572a79ec81a1bd9fbaa822
Text-content-sha1: 67c6e93eba2c02795f2b9cd70d2e1f824c08f710
Content-length: 5818

#include "QuadEdgeBasis.h"
#include "Legendre.h"

QuadEdgeBasis::QuadEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 2;
  size    = 2 * (order + 2) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  const int  orderPlus = order + 1;
  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];

  Polynomial* iLegendreX  = new Polynomial[orderPlus];
  Polynomial* iLegendreY  = new Polynomial[orderPlus];
  Polynomial* legendreX   = new Polynomial[orderPlus];
  Polynomial* legendreY   = new Polynomial[orderPlus];

  Polynomial* lagrange    = new Polynomial[4];
  Polynomial* lagrangeSum = new Polynomial[4];

  Polynomial* lifting     = new Polynomial[4];
  Polynomial* liftingSub  = new Polynomial[4];

  // Integrated and classical Legendre Polynomial //
  Legendre::integrated(intLegendre, orderPlus);
  Legendre::legendre(legendre, order);

  // Lagrange // 
  lagrange[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  lagrange[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    lagrangeSum[i] = lagrange[i] + lagrange[j];
    
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  // Lifting Sub //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    liftingSub[i] = lifting[j] - lifting[i];


  // Basis //
  basis = new Vector<Polynomial>[size];
  
  // Edge Based (Nedelec) // 
  int i = 0;
  Polynomial oneHalf(0.5, 0, 0, 0);

  for(int e = 0; e < 4; e++){
    basis[i] = 
      (liftingSub[e]).gradient();
    
    basis[i].mul(lagrangeSum[e]);
    basis[i].mul(oneHalf);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 4; e++){
      basis[i] = 
	(intLegendre[l].compose(liftingSub[e]) * lagrangeSum[e]).gradient();
     
      i++;
    }
  }

  
  // Cell Based (Preliminary) //
  Polynomial px   = Polynomial(2, 1, 0, 0);
  Polynomial py   = Polynomial(2, 0, 1, 0);
  Polynomial zero = Polynomial(0, 0, 0, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l = 0; l < orderPlus; l++){
    iLegendreX[l] = intLegendre[l].compose(px);
    iLegendreY[l] = intLegendre[l].compose(py);
     legendreX[l] =    legendre[l].compose(px);
     legendreY[l] =    legendre[l].compose(py);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i] = (iLegendreX[l1] * iLegendreY[l2]).gradient();

      i++;
    }
  }
  
  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i](0) =  legendreX[l1] * iLegendreY[l2];
      basis[i](1) = iLegendreX[l1] *  legendreY[l2] * -1;
      basis[i](2) = zero;

      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 1, iPlus = i + order; l < orderPlus; l++, iPlus++){
    basis[i](0) = iLegendreY[l];
    basis[i](1) = zero;
    basis[i](2) = zero;

    basis[iPlus](0) = zero;
    basis[iPlus](1) = iLegendreX[l];
    basis[iPlus](2) = zero;

    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;

  delete[] iLegendreX;
  delete[] iLegendreY;
  delete[] legendreX;
  delete[] legendreY;

  delete[] lagrange;
  delete[] lagrangeSum;

  delete[] lifting;
  delete[] liftingSub;
}

/*
#include <cstdio>
int main(void){
  const int P = 3;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  QuadEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("close all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++){
    for(int j = 0; j < 2; j++)
      printf("p(%d, %d) = %s;\n", i + 1, j + 1, basis[i](j).toString().c_str());
    //printf("p(%d) = %s", i, basis[i].toString().c_str());
    printf("\n");
  }

  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);

  printf("\n");
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/TriEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 4797
Text-content-md5: 17cdea3b8447aab073cc6053b6e923f7
Text-content-sha1: fb5ab1be1550f1a20b5170312b4199fb3bbe13f7
Content-length: 4797

#include "TriEdgeBasis.h"
#include "Legendre.h"

TriEdgeBasis::TriEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 2;
  size    = (order + 1) * (order + 2);
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  const int orderPlus     = order + 1;
  const int orderMinus    = order - 1;

  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];
  
  Polynomial* lagrange    = new Polynomial[3];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  Polynomial* u           = new Polynomial[orderPlus];
  Polynomial* v           = new Polynomial[orderPlus];

  // Classical and Intrated-Scaled Legendre Polynomial //
  Legendre::legendre(legendre, order);
  Legendre::intScaled(intLegendre, orderPlus);

  // Lagrange //
  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = lagrange[j] + lagrange[i];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = lagrange[i] - lagrange[j];


  // Basis //
  basis = new Vector<Polynomial>[size];

  // Edge Based (Nedelec) //
  int i = 0;

  for(int j = 1; i < 3; j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	(intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e])).gradient();

      i++;
    }
  }

  // Cell Based (Preliminary) //
  Polynomial p = lagrange[2] * 2 - Polynomial(1, 0, 0, 0);
  
  for(int l = 0; l < orderPlus; l++){
    u[l] = intLegendre[l].compose(lagrangeSub[0] * -1, lagrangeSum[0]);
    v[l] = legendre[l].compose(p);
    v[l].mul(lagrange[2]);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].add(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].sub(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 0; l < orderMinus; l++){
    basis[i] = basis[0];
    basis[i].mul(v[l]);
    
    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrange;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
  delete[] u;
  delete[] v;
}

/*
#include <cstdio>
int main(void){
  const int P = 4;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1766
Text-content-md5: fad2a66f31d66c30d497b1aadef1900c
Text-content-sha1: 55a6724b1593020213a72efb072fb6335736775e
Content-length: 1766

#include "FormulationLaplace.h"
#include "Exception.h"

#include <cmath>

const int    FormulationLaplace::G    = 4;
const double FormulationLaplace::gx[4] = {0.333333333333333,0.6,0.2,0.2};
const double FormulationLaplace::gy[4] = {0.333333333333333,0.2,0.6,0.2};
const double FormulationLaplace::gw[4] = 
  {-0.28125,.260416666666,.260416666666,.260416666666};


FormulationLaplace::FormulationLaplace(void){

}

FormulationLaplace::~FormulationLaplace(void){
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = gradPhi(nodeI, jg(0), jg(1), jac);
    Vector<double> phiJ = gradPhi(nodeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}

Vector<double> FormulationLaplace::gradPhi(const int i, const double x, const double y,
					   const Jacobian& jac){
  Vector<double> v(2);
  
  switch(i){
  case 0: 
    v(0) = -1.0;
    v(1) = -1.0;
    break;
    
  case 1: 
    v(0) = 1.0;
    v(1) = 0.0;
    break;
    
  case 2: 
    v(0) = 0.0;
    v(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(v);
}

Vector<double> FormulationLaplace::phiVect(const int i, const double x, const double y, 
					   const Jacobian& jac) const{
  throw Exception
    ("Formulation 'Laplace' doesn't have Vectorial basis functions");
}

double FormulationLaplace::phiScal(const int i, const double x, const double y,
				   const Jacobian& jac) const{
  throw Exception
    ("Scalar basis functions are not yet implemented for formulation 'Laplace'");
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1252
Text-content-md5: b1afd1e58ec43d8dc816cfe779c4547e
Text-content-sha1: 4567d71caa4d341bc9b107509a83bc371a7b734a
Content-length: 1252

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "Formulation.h"
#include "Basis.h"

class FormulationLaplace: public Formulation{
 private:
  // Gaussian Quadrature Data //
  static const int G;
  static const double gx[4];
  static const double gy[4];
  static const double gw[4];

  // Basis

 public:
  FormulationLaplace(void);
  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

  virtual double phiScal(const int i, const double x, const double y,
			 const Jacobian& jac) const;

  virtual int getBasisSize(void) const;
  virtual int getBasisType(void) const;

 private:
  static Vector<double> gradPhi(const int i, const double x, const double y,
				const Jacobian& jac);
  
};

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline int FormulationLaplace::getBasisSize(void) const{
  return 3;
}

inline int FormulationLaplace::getBasisType(void) const{
  return 0;
}

#endif


Node-path: mathematics/Polynomial.cpp
Node-kind: file
Node-action: change
Text-content-length: 14296
Text-content-md5: e264ca3d8f067aea2b40ab6217f32dfb
Text-content-sha1: 523b250aab587eb684132cdf3116ebf35f3dcf91
Content-length: 14296

#include <cmath>
#include <sstream>
#include <stack>
#include "Polynomial.h"

using namespace std;

const char Polynomial::coefName[3] = {'x', 'y', 'z'};

Polynomial::Polynomial(const double coef, const int powerX,
 	                                  const int powerY,
                                          const int powerZ){
  nMon = 1;
  mon  = new monomial_t[1];
  
  mon[0].coef     = coef;
  mon[0].power[0] = powerX;
  mon[0].power[1] = powerY;
  mon[0].power[2] = powerZ;
}
 
Polynomial::Polynomial(const Polynomial& other){
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon); 
}

Polynomial::Polynomial(void){
  nMon = 0;
  mon  = NULL;
}

Polynomial::~Polynomial(void){
  if(mon)
    delete[] mon;
}

void Polynomial::derivative(const int dim){ 
  // Take derivative //
  for(int i = 0; i < nMon; i++){
    mon[i].coef *= mon[i].power[dim];
    mon[i].power[dim] -= 1;
  }

  // Remove zero monomials //
  int N = 0;
  stack<monomial_t*> s;

  for(int i = 0; i < nMon; i++){
    if(mon[i].coef != 0.0){
      s.push(&mon[i]);
      N++;
    }
  }

  // If no monomial any more ---> return zero polynomial
  if(!N){
    delete[] mon;
    
    mon  = zeroPolynomial();
    nMon = 1;
    return;
  }
  
  // If no zero found ---> return;
  if(N == nMon) 
    return;

  // Else, remove them //
  monomial_t* tmp = mon;
  
  mon  = new monomial_t[N];
  nMon = N;

  for(int i = N - 1; i >= 0; i--){
    mon[i] = *(s.top());
    s.pop();
  }

  delete[] tmp;

  // Sort resulting monomial and return // 
  sort(mon, nMon);

  return;
}

Vector<Polynomial> Polynomial::gradient(void) const{
  Vector<Polynomial> grad(3);

  // Copy Polynomial //
  grad(0) = *this;
  grad(1) = *this;
  grad(2) = *this;

  // Derivative with respect to each direction //
  grad(0).derivative(0);
  grad(1).derivative(1);
  grad(2).derivative(2);
  
  return grad;
}

double Polynomial::operator()
  (const double x, const double y, const double z) const{
  
  double val = 0;
  for(int i = 0; i < nMon; i++){
    val += mon[i].coef * pow(x, mon[i].power[0]) 
                       * pow(y, mon[i].power[1]) 
                       * pow(z, mon[i].power[2]);
  }

  return val;
}

Polynomial Polynomial::operator+(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mergeMon(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator-(const Polynomial& other) const{
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  
  Polynomial  newP;

  mult(otherMinus, otherNMon, -1); 
  newP.nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &newP.mon);

  delete[] otherMinus;
  return newP;
}

Polynomial Polynomial::operator*(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mult(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator*(const double alpha) const{
  Polynomial newP;
  
  newP.mon  = copyMonomial(mon, nMon);
  newP.nMon = nMon;

  newP.mul(alpha);

  return newP;
}


void Polynomial::add(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mergeMon(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::sub(const Polynomial& other){
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  monomial_t* tmp        = mon;
  
  mult(otherMinus, otherNMon, -1); 
  nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &mon);

  delete[] otherMinus;
  delete[] tmp;
}

void Polynomial::mul(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mult(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::mul(const double alpha){
  for(int i = 0; i < nMon; i++)
    mon[i].coef *= alpha;
}

void Polynomial::power(const int n){
  if (n < 0)
    return;

  switch(n){
  case 0:
    delete[] mon;
    
    mon  = unitPolynomial();
    nMon = 1;
    
    break;
    
  case 1:
    break;

  default:
    Polynomial old = *this;
    
    for(int i = 1; i < n; i++)
      mul(old);
    
    break;
  }
}

Polynomial Polynomial::compose(const Polynomial& other){
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], other, &stk);

  return polynomialFromStack(stk);
}

Polynomial Polynomial::compose(const Polynomial& otherA,
			       const Polynomial& otherB){
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], otherA, otherB, &stk);

  return polynomialFromStack(stk);
}

void Polynomial::operator=(const Polynomial& other){
  if(mon)
    delete[] mon;
  
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon);
}

string Polynomial::toString(const Polynomial::monomial_t* mon, const bool isAbs){
  stringstream stream;
  const bool minusOne    = mon->coef == -1.0;
  const bool notUnitCoef = mon->coef !=  1.0 && !minusOne;

  // If we have a constant term
  if(!mon->power[0] && !mon->power[1] && !mon->power[2]){
    stream << mon->coef;
    return stream.str();
  }

  // If we're here, we do not have a constant term
  
  // If we have a coefficient of '1', we don't display it
  if(notUnitCoef && isAbs)
    stream << abs(mon->coef);

  if(notUnitCoef && !isAbs)
    stream << mon->coef;

  if(minusOne && !isAbs)
    stream << "-";

  // We look for each power
  bool notOnce = false;
  for(int i = 0; i < 3; i++){
    // If we have a non zero power, we display it
    if(mon->power[i]){
      if(notUnitCoef || notOnce)
	stream << " * ";

      stream << coefName[i];
      
      if(mon->power[i] != 1)
	stream << "^" << mon->power[i];

      notOnce = true;
    }
  }

  return stream.str();
}

string Polynomial::toString(void) const{
  stringstream stream;
  bool isAbs = false;

  stream << toString(&mon[0], isAbs);
    
  for(int i = 1; i < nMon; i++){
    if(mon[i].coef < 0.0){
      stream << " - ";
      isAbs = true;
    }

    else{
      stream << " + ";
      isAbs = false;
    }

    stream << toString(&mon[i], isAbs);
  }

  return stream.str();
}

bool Polynomial::isSmaller(const Polynomial::monomial_t* a, 
			   const Polynomial::monomial_t* b){
  // GRevLex order: 
  // http://www.math.uiuc.edu/Macaulay2/doc/Macaulay2-1.4/share/doc/Macaulay2/Macaulay2Doc/html/___G__Rev__Lex.html
  
  int dif[3];
  int last = 0;

  if(isSmallerPower(a, b))
    return true;
  
  if(isEqualPower(a, b)){
    for(int i = 0, j = 2; i < 3; i++, j--)
      dif[i] = b->power[j] - a->power[j];

    for(int i = 0; i < 3; i++)
      if(dif[i])
	last = dif[i];

    if(last < 0)
      return true;
    
    else
      return false;
  }
    
  return false;
}

void Polynomial::sort(monomial_t* mon, const int size){
  for(int i = 0; i < size; i++)
    for(int j = i; j < size; j++)
      if(isSmaller(&mon[j], &mon[i]))
        swap(mon, i, j);
}

void Polynomial::swap(monomial_t* mon, const int i, const int j){
  monomial_t tmp = mon[i];
  mon[i] = mon[j];
  mon[j] = tmp;
}


int Polynomial::mergeMon(monomial_t* sourceA, const int sizeA, 
			 monomial_t* sourceB, const int sizeB,
			 monomial_t** dest){
  stack<monomial_t> s;
  monomial_t tmp;

  int i = 0;
  int j = 0;
  int N = 0;

  while(i < sizeA && j < sizeB){
    if(sourceA[i].coef == 0.0)
      i++;

    else if(sourceB[j].coef == 0.0)
      j++;
    
    else if(isEqual(&sourceA[i], &sourceB[j])){
      tmp       = sourceA[i];
      tmp.coef += sourceB[j].coef; 
      
      if(tmp.coef != 0.0){
	s.push(tmp);
	N++;
      }
      
      i++;
      j++;
    }
    
    else if(isSmaller(&sourceA[i], &sourceB[j])){
      s.push(sourceA[i]);
      i++;
      N++;
    }

    else{
      s.push(sourceB[j]);
      j++;
      N++;
    }
  }

  while(i == sizeA && j < sizeB){
    s.push(sourceB[j]);
    j++;
    N++;
  }

  while(i < sizeA && j == sizeB){
    s.push(sourceA[i]);
    i++;
    N++;
  }

  if(!N){
    *dest = zeroPolynomial();
    N++;
  }

  else{
    *dest = new monomial_t[N];

    for(int k = N - 1; k >= 0; k--){
      (*dest)[k] = s.top();
      s.pop();
    }
  }

  return N;
}

int Polynomial::mult(const monomial_t* sourceA, const int sizeA,
		     const monomial_t* sourceB, const int sizeB,
		     monomial_t** dest){

  const monomial_t* a; // smaller polynomial
  const monomial_t* b; // bigger polynomial
  int nDist;
  int size;

  if(sizeA < sizeB){
    a     = sourceA;
    b     = sourceB; 
    nDist = sizeA;
    size  = sizeB;
  }
  
  else{
    a     = sourceB;
    b     = sourceA;
    nDist = sizeB;
    size  = sizeA;
  }

  // Check if zero //
  if(a[0].coef == 0 || b[0].coef == 0){
    *dest = zeroPolynomial();
    return 1;
  }

  // Distrubute all monomials //
  monomial_t** dist = new monomial_t*[nDist];

  for(int i = 0; i < nDist; i++){
    dist[i] = copyMonomial(b, size);
  
    distribute(dist[i], size, &a[i]);
  }

  // Merge //
  int finalSize    = size;
  int nDistMinus   = nDist - 1;
  monomial_t** tmp = new monomial_t*[nDistMinus]; // Temp array for all dist[0];

  for(int i = 1, j = 0; i < nDist; i++, j++){
    tmp[j] = dist[0];
    
    finalSize = mergeMon(dist[0], finalSize, 
			 dist[i], size,
			 &dist[0]);
  }

  // Keep distributed polynomial //
  *dest = dist[0];

  // Free Temporary Resources and Return //
  for(int i = 1, j = 0; i < nDist; i++, j++){
    delete[] dist[i];
    delete[] tmp[j];
  }
  
  delete[] dist;
  delete[] tmp;

  return finalSize;
}

void Polynomial::mult(monomial_t* source, const int size, const double alpha){
  for(int i = 0; i < size; i++)
    source[i].coef *= alpha;
}


void Polynomial::distribute(monomial_t* src, const int size, const monomial_t* m){ 
  for(int i = 0; i < size; i++){
    src[i].coef *= m->coef;
    
    src[i].power[0] += m->power[0];
    src[i].power[1] += m->power[1];
    src[i].power[2] += m->power[2];    
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial comp,
			 stack<Polynomial::monomial_t>* stk){
  
  comp.power(src->power[0]);
  comp.mul(src->coef);
  
  const int size = comp.nMon;

  for(int i = 0; i < size; i++){
    if(comp.mon[i].coef != 0){
      
      comp.mon[i].power[1] += src->power[1];
      comp.mon[i].power[2] += src->power[2];
      
      stk->push(comp.mon[i]);
    }
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial compA, Polynomial compB,
			 stack<Polynomial::monomial_t>* stk){

  compA.power(src->power[0]);
  compB.power(src->power[1]);
  
  compA.mul(compB);
  compA.mul(src->coef);
  
  const int size = compA.nMon;

  for(int i = 0; i < size; i++){
    if(compA.mon[i].coef != 0){
      
      compA.mon[i].power[2] += src->power[2];
      
      stk->push(compA.mon[i]);
    }
  }
}

Polynomial Polynomial::polynomialFromStack(std::stack<Polynomial::monomial_t>& stk){
  Polynomial  newP;
  monomial_t* tmp;
  monomial_t* newMon;
  int         newNMon;

  if(!stk.size()){
    newMon  = zeroPolynomial();
    newNMon = 1;
  }

  else{
    newMon    = new monomial_t[1];
    newMon[0] = stk.top();
    newNMon   = 1;
    stk.pop();
    
    while(!stk.empty()){
      tmp     = newMon;
      newNMon = mergeMon(newMon, newNMon, &stk.top(), 1, &newMon);
      stk.pop();
      
      delete[] tmp;
    }
  }

  newP.nMon = newNMon;
  newP.mon  = newMon;

  return newP;
}

Polynomial::monomial_t* Polynomial::copyMonomial(const monomial_t* src, const int size){
  monomial_t* dest = new monomial_t[size];

  for(int i = 0; i < size; i++){
    dest[i].coef     = src[i].coef;
    dest[i].power[0] = src[i].power[0];
    dest[i].power[1] = src[i].power[1];
    dest[i].power[2] = src[i].power[2];
  }

  return dest;
}

Polynomial::monomial_t* Polynomial::zeroPolynomial(void){
  monomial_t* zero = new monomial_t[1];
  
  zero->coef     = 0;
  zero->power[0] = 0;
  zero->power[1] = 0;
  zero->power[2] = 0;
 
  return zero;
}

Polynomial::monomial_t* Polynomial::unitPolynomial(void){
  monomial_t* unit = new monomial_t[1];
  
  unit->coef     = 1;
  unit->power[0] = 0;
  unit->power[1] = 0;
  unit->power[2] = 0;
 
  return unit;
}







/*
#include <iostream>
int main(void){
  Polynomial m0(-1  , 0, 0, 0);
  Polynomial m1(4.2, 1, 0, 0);
  Polynomial m2(4.2, 1, 1, 0);
  Polynomial m3(4.2, 1, 0, 1);

  cout << "m0 = " << m0.toString() << endl;
  cout << "m1 = " << m1.toString() << endl;
  cout << "m1(4, 5, 6) = " << m1.at(4, 5, 6) << endl;
  cout << "m2 = " << m2.toString() << endl;
  cout << "m3 = " << m3.toString() << endl;

  Polynomial p0 = m1 + m0;
  Polynomial p1 = m3 + m3;
  Polynomial p2 = p1 + p0;

  cout << "p0 = " << p0.toString() << endl;
  cout << "p1 = " << p1.toString() << endl;
  cout << "p2 = " << p2.toString() << endl;
  cout << "p2(1.1, 2.2, 3.3) = " << p2.at(1.1, 2.2, 3.3) << endl;

  p2.add(p0);
  cout << "p2 = " << p2.toString() << endl;


  Polynomial p3 = p2 * p0;
  Polynomial p4 = p3 * p3;
  cout << "p3 = " << p3.toString() << endl;
  cout << "p4 = " << p4.toString() << endl;
  
  p3.mul(p3);
  cout << "p3 = " << p3.toString() << endl;

  Polynomial p5 = p2 - p3;
  Polynomial p6 = p3 - p2;
  Polynomial p7 = p6 - p6;
  cout << "p5 = " << p5.toString() << endl;
  cout << "p6 = " << p6.toString() << endl;
  cout << "p7 = " << p7.toString() << endl;
  
  p6.sub(p6);
  cout << "p6 = " << p6.toString() << endl;
  

  Polynomial p8(p4);
  Polynomial p9(p4);
  Polynomial p10(p4);

  p8.derivative(0);
  p9.derivative(1);
  p10.derivative(2);

  cout << "p8 = "  << p8.toString()  << endl;
  cout << "p9 = "  << p9.toString()  << endl;
  cout << "p10 = " << p10.toString() << endl;

  Polynomial p11 = p8 * 4;
  cout << "p11 = " << p11.toString() << endl;
  cout << "p11(1, 2, 3) = " << p11.at(1, 2, 3.1) << endl;

  Polynomial m4(1, 1, 0, 0);
  Polynomial m5(1, 0, 1, 0);
  Polynomial m6(1, 0, 0, 1);

  Polynomial p12 = m4 + m5 + m6;

  cout << "p12 = " << p12.toString() << endl;

  p12.power(4);
  cout << "p12^4 = " << p12.toString() << endl;

 Polynomial m7(1, 1, 0, 0);
 Polynomial m8(2, 2, 0, 0);
 Polynomial m9(3, 3, 0, 0);

 Polynomial p13 = m9 + m7;
 cout << "p13 = " << p13.toString() << endl;

 Polynomial m10(1, 1, 1, 0);
 Polynomial m11(2, 2, 1, 2);
 Polynomial m12(1, 1, 3, 1);

 Polynomial p14 = m10 + m11 + m12;
 cout << "p14 = " << p14.toString() << endl;

 Polynomial p15 = p14.compose(p13);
 cout << "p15 = p14(p13) = " << p15.toString() << endl;

 return 0;
}

*/


Node-path: mathematics/Vector.h
Node-kind: file
Node-action: change
Text-content-length: 2394
Text-content-md5: 23760347052a46c439b0eb3ded92a1cb
Text-content-sha1: b4ec882b07a3f152afd18c05e72f7f19c24b30e6
Content-length: 2394

#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <string>

extern "C"{
#include <cblas.h>
}

#include "Exception.h"

class Solver;

template<class T>
class Vector{
 private:
  int N;
  T* v;

  friend class Solver;
  friend class Matrix;
  
 public:
   Vector(const int a);
   Vector(void);
  ~Vector(void);

  int dim(void) const;

  T&   operator()(const int i);
  T    operator()(const int i) const;
  void operator=(const Vector<T>& other);

  T    get(const int i) const;
  void set(const int i, const T a);

  Vector<T> operator+(const Vector<T>& other);
  Vector<T> operator-(const Vector<T>& other);
  Vector<T> operator*(const T& other);
  //Vector<T> operator*(const double alpha);

  void   add(const Vector<T>& b);
  void   sub(const Vector<T>& b);
  void   mul(const T& other);
  //void   mul(const double alpha);
  double dot(const Vector<T>& v) const;

  void allToZero(void);

  std::string toString(void) const;
};

//////////////////////////////////////////////////////////////////////
// Templated Implementations                                        //
//////////////////////////////////////////////////////////////////////

template<class T>
Vector<T>::Vector(const int a){
  if(!a)
    throw Exception("Vector must by of dimension bigger than 0");
  
  N = a;
  v = new T[N];
}

template<class T>
Vector<T>::Vector(void){
  N = 3;
  v = new T[N];
}

template<class T>
Vector<T>::~Vector(void){
  delete[] v;
}

template<class T>
inline int Vector<T>::dim(void) const{
  return N;
}

template<class T>
inline T& Vector<T>::operator()(const int i){
  return v[i];
}

template<class T>
inline T Vector<T>::operator()(const int i) const{
  return v[i];
}

template<class T>
void Vector<T>::operator=(const Vector<T>& other){
  if(N != other.N)
    throw Exception("Vectors must be of the same dimension");

  for(int i = 0; i < N; i++)
    v[i] = other.v[i];
}

template<class T>
inline T Vector<T>::get(const int i) const{
  return v[i];
}

template<class T>
inline void Vector<T>::set(const int i, const T a){
  v[i] = a;
}

//////////////////////////////////////////////////////////////////////
// Inline Vector<double> Implementations                            //
//////////////////////////////////////////////////////////////////////

template<>
inline double Vector<double>::dot(const Vector<double>& v) const{ 
  return cblas_ddot(N, (*this).v, 1, v.v, 1);
}

#endif


Node-path: mathematics/VectorDouble.cpp
Node-kind: file
Node-action: change
Text-content-length: 845
Text-content-md5: ffab34f25bce5a1d2edf16d21ef92d58
Text-content-sha1: 99b131d991d5339a56b40a30eadfbf08055a8cac
Content-length: 845

#include <sstream>
#include "Vector.h"

using namespace std;

template<>
void Vector<double>::allToZero(void){
  for(int i = 0; i < N; i++)
    v[i] = 0.0;
}

template<>
void Vector<double>::add(const Vector<double>& b){
  if(this->N != b.N)
    throw Exception("Vectors must be with of the same size");

  for(int i = 0; i < N; i++)
    v[i] += b.v[i];  
}

template<>
void Vector<double>::sub(const Vector<double>& b){
  if(this->N != b.N)
    throw Exception("Vectors must be with of the same size");

  for(int i = 0; i < N; i++)
    v[i] -= b.v[i];  
}

template<>
void Vector<double>::mul(const double& alpha){
  for(int i = 0; i < N; i++)
    v[i] *= alpha;  
}

template<>
string Vector<double>::toString(void) const{
  stringstream s;
  
  for(int i = 0; i < N; i++)
    s << scientific << showpos << v[i] << endl;

  return s.str();
}


Node-path: mathematics/VectorPolynomial.cpp
Node-kind: file
Node-action: change
Text-content-length: 793
Text-content-md5: 039366f3bdb92566ef44a01fa0b7a7b9
Text-content-sha1: eecd21d306c46ed0486f32697dd02ab8dda82402
Content-length: 793

#include <sstream>
#include "Vector.h"
#include "Polynomial.h"

using namespace std;

template<>
void Vector<Polynomial>::add(const Vector<Polynomial>& other){
  for(int i = 0; i < N; i++)
    v[i].add(other.v[i]);    
}

template<>
void Vector<Polynomial>::sub(const Vector<Polynomial>& other){
  for(int i = 0; i < N; i++)
    v[i].sub(other.v[i]);    
}

template<>
void Vector<Polynomial>::mul(const Polynomial& other){
  for(int i = 0; i < N; i++)
    v[i].mul(other);    
}
/*
template<>
void Vector<Polynomial>::mul(const double alpha){
  for(int i = 0; i < N; i++)
    v[i].mul(alpha);  
}
*/
template<>
string Vector<Polynomial>::toString(void) const{
  stringstream s; 

  s << endl;

  for(int i = 0; i < N; i++)
    s << "[" << v[i].toString() << "]" << endl;

  return s.str();
}


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: change
Text-content-length: 2340
Text-content-md5: bb603bf15275d1833d809b17d872957b
Text-content-sha1: 4587568cf0c2ed873cf2098ee887d364bffb5e67
Content-length: 2340

#include "Interpolator.h"
#include "Jacobian.h"
#include "Exception.h"

using namespace std;

Interpolator::Interpolator(const Formulation& formulation, const Mesh& mesh){
  f     = &formulation;
  fType = f->getBasisType();
  bSize = f->getBasisSize();

  msh = &mesh;

  nNode = msh->getNbNode();
  nodeVectorValue = new vector<Vector<double>*>(nNode);
  isInterpolated  = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    Vector<double>* v = new Vector<double>(2);
    (*v)(0) = 0.0; 
    (*v)(1) = 0.0;
    (*nodeVectorValue)[i] = v;
    (*isInterpolated)[i] = false;
  }

 switch(fType){
 case 0 : break;
 case 1 : interpolateEdgeElement(); break;
 default: throw Exception("Unknown Basis Type"); break;
 }
}

Interpolator::~Interpolator(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeVectorValue)[i];
  delete nodeVectorValue;

  delete isInterpolated;
}

void Interpolator::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeVectorValue)[id];
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = f->phiVect(k, x, y, jac);
	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
}

const std::vector<Vector<double>*>& Interpolator::getVectorNodeValue(void) const{
  if(fType != 1 && fType != 2)
    throw Exception("The Basis Functions are scalar");
    
    return *nodeVectorValue;
}

const std::vector<double>& Interpolator::getScalarNodeValue(void) const{
  if(fType != 0 && fType != 3)
    throw Exception("The Basis Functions are vectorial");
    
  if(fType == 0)
    throw Exception("Interpolation of Nodal function is not implemented");

  if(fType == 3)
    throw Exception("Interpolation of Volume function is not implemented");
}


Revision-number: 6
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-03T15:59:20.963965Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 741
Text-content-md5: 0018cce43a9199d48d3cec71c8ff98d5
Text-content-sha1: b74d9653f332ba99c827531bda7877f1f3ac974a
Content-length: 741

cmake_minimum_required(VERSION 2.6)
project(SmallFem)

find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)

macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)



add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
#add_subdirectory(postprocessing)
add_subdirectory(solver)


list(APPEND sources Main.cpp)

include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)

add_executable(sf ${sources}) 

target_link_libraries(sf cblas lapack)

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 792
Text-content-md5: 52c66044579dd9951f73c714a4a6e18d
Text-content-sha1: ef9ab959216c3380a137f908c6c9b7b8e1eef4ac
Content-length: 792

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  // Create Formulation //
  Vector<double> f(2); f(0) = -1; f(1) = 1; // Vector to project
  FormulationLaplace laplace;
  FormulationProjection projection(f);

  // Create System //
  System sys(msh.getAllNodeElements(), laplace);
  //System sys(msh.getAllEdgeElements(), projection);

  // Set Bondary Conditions //
  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  // Solve System //
  sys.solve();

  // Write Solution //
  //Solution sol(msh, laplace);
  //Solution sol(msh, projection);
  //sol.write("sol.pos");

  return 0;
}


Node-path: formulation/Formulation.h
Node-kind: file
Node-action: change
Text-content-length: 399
Text-content-md5: 8ffe4c94b173155570c827ccf638880c
Text-content-sha1: 2315ccbfabd35d903e52c57bbab115f3f03f328f
Content-length: 399

#ifndef _FORMULATION_H_
#define _FORMULATION_H_

#include "GroupOfDof.h"
#include "Jacobian.h"

class Formulation{
 public:
  virtual ~Formulation(void);
  
  virtual double weak(const int entityI, const int entityJ,
		      const GroupOfDof& god) const = 0;
  
  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const = 0;
};

inline Formulation::~Formulation(void){
}

#endif


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1771
Text-content-md5: b37eb1d13378792098f6c6127653548d
Text-content-sha1: e882ca201e8bb00d0c6fdac88c72e36c0d9cd8e1
Content-length: 1771

#include "FormulationLaplace.h"
#include "Exception.h"

#include <cmath>

const int    FormulationLaplace::G    = 4;
const double FormulationLaplace::gx[4] = {0.333333333333333,0.6,0.2,0.2};
const double FormulationLaplace::gy[4] = {0.333333333333333,0.2,0.6,0.2};
const double FormulationLaplace::gw[4] = 
  {-0.28125,.260416666666,.260416666666,.260416666666};


FormulationLaplace::FormulationLaplace(void){

}

FormulationLaplace::~FormulationLaplace(void){
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = gradPhi(nodeI, jg(0), jg(1), jac);
    Vector<double> phiJ = gradPhi(nodeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}

Vector<double> FormulationLaplace::gradPhi(const int i, const double x, const double y,
					   const Jacobian& jac){
  Vector<double> v(2);
  
  switch(i){
  case 0: 
    v(0) = -1.0;
    v(1) = -1.0;
    break;
    
  case 1: 
    v(0) = 1.0;
    v(1) = 0.0;
    break;
    
  case 2: 
    v(0) = 0.0;
    v(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(v);
}
/*
Vector<double> FormulationLaplace::phiVect(const int i, const double x, const double y, 
					   const Jacobian& jac) const{
  throw Exception
    ("Formulation 'Laplace' doesn't have Vectorial basis functions");
}

double FormulationLaplace::phiScal(const int i, const double x, const double y,
				   const Jacobian& jac) const{
  throw Exception
    ("Scalar basis functions are not yet implemented for formulation 'Laplace'");
}
*/


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1140
Text-content-md5: 11d0b13bfa6c12e4be92e81146985865
Text-content-sha1: 789ec68b61b599a0207e896c6287390e64a1a6cc
Content-length: 1140

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "Formulation.h"
#include "Basis.h"
#include "Polynomial.h"

class FormulationLaplace: public Formulation{
 private:
  // Gaussian Quadrature Data //
  static const int G;
  static const double gx[4];
  static const double gy[4];
  static const double gw[4];

  // Basis

 public:
  FormulationLaplace(void);
  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;
  /*
  virtual Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

  virtual double phiScal(const int i, const double x, const double y,
			 const Jacobian& jac) const;
  */
  virtual int getBasisSize(void) const;
  virtual int getBasisType(void) const;

 private:
  static Vector<double> gradPhi(const int i, const double x, const double y,
				const Jacobian& jac);
  
};

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

#endif


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: change
Text-content-length: 2956
Text-content-md5: 4c0fb48ca1505244afae4b22f93e1399
Text-content-sha1: b62dffa3b73791139377da58a6a5d630d4902f3c
Content-length: 2956

#include "FormulationProjection.h"
#include "Exception.h"

#include <cmath>

const int    FormulationProjection::G    = 4;
const double FormulationProjection::gx[4] = {0.333333333333333,0.6,0.2,0.2};
const double FormulationProjection::gy[4] = {0.333333333333333,0.2,0.6,0.2};
const double FormulationProjection::gw[4] = 
  {-0.28125,.260416666666,.260416666666,.260416666666};

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = phiVect(edgeI, jg(0), jg(1), jac);
    Vector<double> phiJ = phiVect(edgeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jg    = jac.map(gx[g], gy[g]);
    Vector<double> jPhiI = phiVect(equationI, jg(0), jg(1), jac);
  
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

Vector<double> FormulationProjection::phiVect(const int i, const double x, const double y,
				      const Jacobian& jac) const{
  const int j = (i + 1) % 3;
  const Vector<double> uv = jac.invMap(x, y);

  const double phi0 = nodePhi(i, uv(0), uv(1));
  const double phi1 = nodePhi(j, uv(0), uv(1));
  
  const Vector<double> gradPhi0 = gradNodePhi(i, jac);
  const Vector<double> gradPhi1 = gradNodePhi(j, jac);

  Vector<double> phi(2);
  phi(0) = (phi0 * gradPhi1(0)) - (phi1 * gradPhi0(0));
  phi(1) = (phi0 * gradPhi1(1)) - (phi1 * gradPhi0(1));

  return phi;
}

double FormulationProjection::nodePhi(const int i, const double x, const double y){
  switch(i){
  case 0: 
    return 1.0 - x - y;
    
  case 1: 
    return x;

  case 2: 
    return y;

  default: throw Exception("Unknown function");
  }
  
  return 0;
}

Vector<double> FormulationProjection::gradNodePhi(const int i, const Jacobian& jac){
  Vector<double> a(2);
  
  switch(i){
  case 0: 
    a(0) = -1.0;
    a(1) = -1.0;
    break;
    
  case 1: 
    a(0) = 1.0;
    a(1) = 0.0;
    break;
    
  case 2: 
    a(0) = 0.0;
    a(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(a);
}

double FormulationProjection::phiScal(const int i, const double x, const double y,
				      const Jacobian& jac) const{
  throw Exception
    ("Formulation 'Projection' doesn't have Scalar basis functions");
}



Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1399
Text-content-md5: a1ca6e7ae621a90d999bee67ff8ca52c
Text-content-sha1: 216a334b536247ca25679cc404974d3a47b387d3
Content-length: 1399

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "Formulation.h"
#include "Vector.h"

class FormulationProjection: public Formulation{
 private:
  // Gaussian Quadrature Data //
  static const int G;
  static const double gx[4];
  static const double gy[4];
  static const double gw[4];

  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;
  
  Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

  double phiScal(const int i, const double x, const double y,
			 const Jacobian& jac) const;
  
  virtual int getBasisSize(void) const;
  virtual int getBasisType(void) const;

 private:
  static double nodePhi(const int i, const double x, const double y);
  
  static Vector<double> gradNodePhi(const int i, const Jacobian& jac);
};

inline FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  f = &vectorToProject;
}

inline FormulationProjection::~FormulationProjection(void){
}

inline int FormulationProjection::getBasisSize(void) const{
  return 3;
}

inline int FormulationProjection::getBasisType(void) const{
  return 1;
}

#endif


Revision-number: 7
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-03T18:30:06.563176Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 740
Text-content-md5: 15d597b5b0542e199a7fff9039ba21d1
Text-content-sha1: 69e88198313c95950a2b6d2069710a9775f34686
Content-length: 740

cmake_minimum_required(VERSION 2.6)
project(SmallFem)

find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)

macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)



add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
add_subdirectory(postprocessing)
add_subdirectory(solver)


list(APPEND sources Main.cpp)

include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)

add_executable(sf ${sources}) 

target_link_libraries(sf cblas lapack)

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 788
Text-content-md5: cf2d9b5fe3f94dba9fdf887150440d38
Text-content-sha1: 3061cf153d55a37be3bb096945e8b3c5c394602c
Content-length: 788

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  // Create Formulation //
  Vector<double> f(2); f(0) = -1; f(1) = 1; // Vector to project
  FormulationLaplace laplace;
  FormulationProjection projection(f);

  // Create System //
  System sys(msh.getAllNodeElements(), laplace);
  //System sys(msh.getAllEdgeElements(), projection);

  // Set Bondary Conditions //
  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  // Solve System //
  sys.solve();

  // Write Solution //
  Solution sol(msh, laplace);
  //Solution sol(msh, projection);
  sol.write("sol.pos");

  return 0;
}


Node-path: formulation/Formulation.h
Node-kind: file
Node-action: change
Text-content-length: 377
Text-content-md5: 49563f2840c9bc47b896adee8344bd1f
Text-content-sha1: 09d4d87c53aefd1fea4602e7703f7b19cc9e704b
Content-length: 377

#ifndef _FORMULATION_H_
#define _FORMULATION_H_

#include "GroupOfDof.h"

class Formulation{
 public:
  virtual ~Formulation(void);
  
  virtual double weak(const int entityI, const int entityJ,
		      const GroupOfDof& god) const = 0;
  
  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const = 0;
};

inline Formulation::~Formulation(void){
}

#endif


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1267
Text-content-md5: 5a73e2bc8dab7fa44484ba1ce1005cea
Text-content-sha1: 8fd76cfab60604eb7758b56a00ffe3f1570c9e58
Content-length: 1267

#include "FormulationLaplace.h"

#include <cmath>
#include <stdio.h>

FormulationLaplace::FormulationLaplace(void){
  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  // Generate Basis
  TriNodeBasis baseGen(1);  
  const Polynomial* basis = baseGen.getBasis();

  // Take gradient
  basisSize = baseGen.getSize();  
  gradBasis = new Vector<Polynomial> [basisSize];

  for(int i = 0; i < basisSize; i++)
    gradBasis[i] = basis[i].gradient();
}

FormulationLaplace::~FormulationLaplace(void){
  delete[] gradBasis;
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = jac.grad(gradBasis[nodeI].at(jg(0), jg(1), 0));
    Vector<double> phiJ = jac.grad(gradBasis[nodeJ].at(jg(0), jg(1), 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 760
Text-content-md5: 4e1f7bcce9e0e13e9dd9e4b1adafa519
Text-content-sha1: 35201207c2c0311c6ad6e63c9236344607ae3517
Content-length: 760

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "Formulation.h"
#include "TriNodeBasis.h"
#include "Polynomial.h"
#include "Vector.h"

class FormulationLaplace: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;
};

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

#endif


Node-path: mathematics/Polynomial.cpp
Node-kind: file
Node-action: change
Text-content-length: 14288
Text-content-md5: 1ad996f1285382fcf5b9edfba1665530
Text-content-sha1: e348174f189eb7f764765cb2e1fad8f2cb1d4da3
Content-length: 14288

#include <cmath>
#include <sstream>
#include <stack>
#include "Polynomial.h"

using namespace std;

const char Polynomial::coefName[3] = {'x', 'y', 'z'};

Polynomial::Polynomial(const double coef, const int powerX,
 	                                  const int powerY,
                                          const int powerZ){
  nMon = 1;
  mon  = new monomial_t[1];
  
  mon[0].coef     = coef;
  mon[0].power[0] = powerX;
  mon[0].power[1] = powerY;
  mon[0].power[2] = powerZ;
}
 
Polynomial::Polynomial(const Polynomial& other){
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon); 
}

Polynomial::Polynomial(void){
  nMon = 0;
  mon  = NULL;
}

Polynomial::~Polynomial(void){
  if(mon)
    delete[] mon;
}

void Polynomial::derivative(const int dim){ 
  // Take derivative //
  for(int i = 0; i < nMon; i++){
    mon[i].coef *= mon[i].power[dim];
    mon[i].power[dim] -= 1;
  }

  // Remove zero monomials //
  int N = 0;
  stack<monomial_t*> s;

  for(int i = 0; i < nMon; i++){
    if(mon[i].coef != 0.0){
      s.push(&mon[i]);
      N++;
    }
  }

  // If no monomial any more ---> return zero polynomial
  if(!N){
    delete[] mon;
    
    mon  = zeroPolynomial();
    nMon = 1;
    return;
  }
  
  // If no zero found ---> return;
  if(N == nMon) 
    return;

  // Else, remove them //
  monomial_t* tmp = mon;
  
  mon  = new monomial_t[N];
  nMon = N;

  for(int i = N - 1; i >= 0; i--){
    mon[i] = *(s.top());
    s.pop();
  }

  delete[] tmp;

  // Sort resulting monomial and return // 
  sort(mon, nMon);

  return;
}

Vector<Polynomial> Polynomial::gradient(void) const{
  Vector<Polynomial> grad(3);

  // Copy Polynomial //
  grad(0) = *this;
  grad(1) = *this;
  grad(2) = *this;

  // Derivative with respect to each direction //
  grad(0).derivative(0);
  grad(1).derivative(1);
  grad(2).derivative(2);
  
  return grad;
}

double Polynomial::at
  (const double x, const double y, const double z) const{
  
  double val = 0;
  for(int i = 0; i < nMon; i++){
    val += mon[i].coef * pow(x, mon[i].power[0]) 
                       * pow(y, mon[i].power[1]) 
                       * pow(z, mon[i].power[2]);
  }

  return val;
}

Polynomial Polynomial::operator+(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mergeMon(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator-(const Polynomial& other) const{
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  
  Polynomial  newP;

  mult(otherMinus, otherNMon, -1); 
  newP.nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &newP.mon);

  delete[] otherMinus;
  return newP;
}

Polynomial Polynomial::operator*(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mult(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator*(const double alpha) const{
  Polynomial newP;
  
  newP.mon  = copyMonomial(mon, nMon);
  newP.nMon = nMon;

  newP.mul(alpha);

  return newP;
}


void Polynomial::add(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mergeMon(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::sub(const Polynomial& other){
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  monomial_t* tmp        = mon;
  
  mult(otherMinus, otherNMon, -1); 
  nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &mon);

  delete[] otherMinus;
  delete[] tmp;
}

void Polynomial::mul(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mult(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::mul(const double alpha){
  for(int i = 0; i < nMon; i++)
    mon[i].coef *= alpha;
}

void Polynomial::power(const int n){
  if (n < 0)
    return;

  switch(n){
  case 0:
    delete[] mon;
    
    mon  = unitPolynomial();
    nMon = 1;
    
    break;
    
  case 1:
    break;

  default:
    Polynomial old = *this;
    
    for(int i = 1; i < n; i++)
      mul(old);
    
    break;
  }
}

Polynomial Polynomial::compose(const Polynomial& other){
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], other, &stk);

  return polynomialFromStack(stk);
}

Polynomial Polynomial::compose(const Polynomial& otherA,
			       const Polynomial& otherB){
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], otherA, otherB, &stk);

  return polynomialFromStack(stk);
}

void Polynomial::operator=(const Polynomial& other){
  if(mon)
    delete[] mon;
  
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon);
}

string Polynomial::toString(const Polynomial::monomial_t* mon, const bool isAbs){
  stringstream stream;
  const bool minusOne    = mon->coef == -1.0;
  const bool notUnitCoef = mon->coef !=  1.0 && !minusOne;

  // If we have a constant term
  if(!mon->power[0] && !mon->power[1] && !mon->power[2]){
    stream << mon->coef;
    return stream.str();
  }

  // If we're here, we do not have a constant term
  
  // If we have a coefficient of '1', we don't display it
  if(notUnitCoef && isAbs)
    stream << abs(mon->coef);

  if(notUnitCoef && !isAbs)
    stream << mon->coef;

  if(minusOne && !isAbs)
    stream << "-";

  // We look for each power
  bool notOnce = false;
  for(int i = 0; i < 3; i++){
    // If we have a non zero power, we display it
    if(mon->power[i]){
      if(notUnitCoef || notOnce)
	stream << " * ";

      stream << coefName[i];
      
      if(mon->power[i] != 1)
	stream << "^" << mon->power[i];

      notOnce = true;
    }
  }

  return stream.str();
}

string Polynomial::toString(void) const{
  stringstream stream;
  bool isAbs = false;

  stream << toString(&mon[0], isAbs);
    
  for(int i = 1; i < nMon; i++){
    if(mon[i].coef < 0.0){
      stream << " - ";
      isAbs = true;
    }

    else{
      stream << " + ";
      isAbs = false;
    }

    stream << toString(&mon[i], isAbs);
  }

  return stream.str();
}

bool Polynomial::isSmaller(const Polynomial::monomial_t* a, 
			   const Polynomial::monomial_t* b){
  // GRevLex order: 
  // http://www.math.uiuc.edu/Macaulay2/doc/Macaulay2-1.4/share/doc/Macaulay2/Macaulay2Doc/html/___G__Rev__Lex.html
  
  int dif[3];
  int last = 0;

  if(isSmallerPower(a, b))
    return true;
  
  if(isEqualPower(a, b)){
    for(int i = 0, j = 2; i < 3; i++, j--)
      dif[i] = b->power[j] - a->power[j];

    for(int i = 0; i < 3; i++)
      if(dif[i])
	last = dif[i];

    if(last < 0)
      return true;
    
    else
      return false;
  }
    
  return false;
}

void Polynomial::sort(monomial_t* mon, const int size){
  for(int i = 0; i < size; i++)
    for(int j = i; j < size; j++)
      if(isSmaller(&mon[j], &mon[i]))
        swap(mon, i, j);
}

void Polynomial::swap(monomial_t* mon, const int i, const int j){
  monomial_t tmp = mon[i];
  mon[i] = mon[j];
  mon[j] = tmp;
}


int Polynomial::mergeMon(monomial_t* sourceA, const int sizeA, 
			 monomial_t* sourceB, const int sizeB,
			 monomial_t** dest){
  stack<monomial_t> s;
  monomial_t tmp;

  int i = 0;
  int j = 0;
  int N = 0;

  while(i < sizeA && j < sizeB){
    if(sourceA[i].coef == 0.0)
      i++;

    else if(sourceB[j].coef == 0.0)
      j++;
    
    else if(isEqual(&sourceA[i], &sourceB[j])){
      tmp       = sourceA[i];
      tmp.coef += sourceB[j].coef; 
      
      if(tmp.coef != 0.0){
	s.push(tmp);
	N++;
      }
      
      i++;
      j++;
    }
    
    else if(isSmaller(&sourceA[i], &sourceB[j])){
      s.push(sourceA[i]);
      i++;
      N++;
    }

    else{
      s.push(sourceB[j]);
      j++;
      N++;
    }
  }

  while(i == sizeA && j < sizeB){
    s.push(sourceB[j]);
    j++;
    N++;
  }

  while(i < sizeA && j == sizeB){
    s.push(sourceA[i]);
    i++;
    N++;
  }

  if(!N){
    *dest = zeroPolynomial();
    N++;
  }

  else{
    *dest = new monomial_t[N];

    for(int k = N - 1; k >= 0; k--){
      (*dest)[k] = s.top();
      s.pop();
    }
  }

  return N;
}

int Polynomial::mult(const monomial_t* sourceA, const int sizeA,
		     const monomial_t* sourceB, const int sizeB,
		     monomial_t** dest){

  const monomial_t* a; // smaller polynomial
  const monomial_t* b; // bigger polynomial
  int nDist;
  int size;

  if(sizeA < sizeB){
    a     = sourceA;
    b     = sourceB; 
    nDist = sizeA;
    size  = sizeB;
  }
  
  else{
    a     = sourceB;
    b     = sourceA;
    nDist = sizeB;
    size  = sizeA;
  }

  // Check if zero //
  if(a[0].coef == 0 || b[0].coef == 0){
    *dest = zeroPolynomial();
    return 1;
  }

  // Distrubute all monomials //
  monomial_t** dist = new monomial_t*[nDist];

  for(int i = 0; i < nDist; i++){
    dist[i] = copyMonomial(b, size);
  
    distribute(dist[i], size, &a[i]);
  }

  // Merge //
  int finalSize    = size;
  int nDistMinus   = nDist - 1;
  monomial_t** tmp = new monomial_t*[nDistMinus]; // Temp array for all dist[0];

  for(int i = 1, j = 0; i < nDist; i++, j++){
    tmp[j] = dist[0];
    
    finalSize = mergeMon(dist[0], finalSize, 
			 dist[i], size,
			 &dist[0]);
  }

  // Keep distributed polynomial //
  *dest = dist[0];

  // Free Temporary Resources and Return //
  for(int i = 1, j = 0; i < nDist; i++, j++){
    delete[] dist[i];
    delete[] tmp[j];
  }
  
  delete[] dist;
  delete[] tmp;

  return finalSize;
}

void Polynomial::mult(monomial_t* source, const int size, const double alpha){
  for(int i = 0; i < size; i++)
    source[i].coef *= alpha;
}


void Polynomial::distribute(monomial_t* src, const int size, const monomial_t* m){ 
  for(int i = 0; i < size; i++){
    src[i].coef *= m->coef;
    
    src[i].power[0] += m->power[0];
    src[i].power[1] += m->power[1];
    src[i].power[2] += m->power[2];    
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial comp,
			 stack<Polynomial::monomial_t>* stk){
  
  comp.power(src->power[0]);
  comp.mul(src->coef);
  
  const int size = comp.nMon;

  for(int i = 0; i < size; i++){
    if(comp.mon[i].coef != 0){
      
      comp.mon[i].power[1] += src->power[1];
      comp.mon[i].power[2] += src->power[2];
      
      stk->push(comp.mon[i]);
    }
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial compA, Polynomial compB,
			 stack<Polynomial::monomial_t>* stk){

  compA.power(src->power[0]);
  compB.power(src->power[1]);
  
  compA.mul(compB);
  compA.mul(src->coef);
  
  const int size = compA.nMon;

  for(int i = 0; i < size; i++){
    if(compA.mon[i].coef != 0){
      
      compA.mon[i].power[2] += src->power[2];
      
      stk->push(compA.mon[i]);
    }
  }
}

Polynomial Polynomial::polynomialFromStack(std::stack<Polynomial::monomial_t>& stk){
  Polynomial  newP;
  monomial_t* tmp;
  monomial_t* newMon;
  int         newNMon;

  if(!stk.size()){
    newMon  = zeroPolynomial();
    newNMon = 1;
  }

  else{
    newMon    = new monomial_t[1];
    newMon[0] = stk.top();
    newNMon   = 1;
    stk.pop();
    
    while(!stk.empty()){
      tmp     = newMon;
      newNMon = mergeMon(newMon, newNMon, &stk.top(), 1, &newMon);
      stk.pop();
      
      delete[] tmp;
    }
  }

  newP.nMon = newNMon;
  newP.mon  = newMon;

  return newP;
}

Polynomial::monomial_t* Polynomial::copyMonomial(const monomial_t* src, const int size){
  monomial_t* dest = new monomial_t[size];

  for(int i = 0; i < size; i++){
    dest[i].coef     = src[i].coef;
    dest[i].power[0] = src[i].power[0];
    dest[i].power[1] = src[i].power[1];
    dest[i].power[2] = src[i].power[2];
  }

  return dest;
}

Polynomial::monomial_t* Polynomial::zeroPolynomial(void){
  monomial_t* zero = new monomial_t[1];
  
  zero->coef     = 0;
  zero->power[0] = 0;
  zero->power[1] = 0;
  zero->power[2] = 0;
 
  return zero;
}

Polynomial::monomial_t* Polynomial::unitPolynomial(void){
  monomial_t* unit = new monomial_t[1];
  
  unit->coef     = 1;
  unit->power[0] = 0;
  unit->power[1] = 0;
  unit->power[2] = 0;
 
  return unit;
}







/*
#include <iostream>
int main(void){
  Polynomial m0(-1  , 0, 0, 0);
  Polynomial m1(4.2, 1, 0, 0);
  Polynomial m2(4.2, 1, 1, 0);
  Polynomial m3(4.2, 1, 0, 1);

  cout << "m0 = " << m0.toString() << endl;
  cout << "m1 = " << m1.toString() << endl;
  cout << "m1(4, 5, 6) = " << m1.at(4, 5, 6) << endl;
  cout << "m2 = " << m2.toString() << endl;
  cout << "m3 = " << m3.toString() << endl;

  Polynomial p0 = m1 + m0;
  Polynomial p1 = m3 + m3;
  Polynomial p2 = p1 + p0;

  cout << "p0 = " << p0.toString() << endl;
  cout << "p1 = " << p1.toString() << endl;
  cout << "p2 = " << p2.toString() << endl;
  cout << "p2(1.1, 2.2, 3.3) = " << p2.at(1.1, 2.2, 3.3) << endl;

  p2.add(p0);
  cout << "p2 = " << p2.toString() << endl;


  Polynomial p3 = p2 * p0;
  Polynomial p4 = p3 * p3;
  cout << "p3 = " << p3.toString() << endl;
  cout << "p4 = " << p4.toString() << endl;
  
  p3.mul(p3);
  cout << "p3 = " << p3.toString() << endl;

  Polynomial p5 = p2 - p3;
  Polynomial p6 = p3 - p2;
  Polynomial p7 = p6 - p6;
  cout << "p5 = " << p5.toString() << endl;
  cout << "p6 = " << p6.toString() << endl;
  cout << "p7 = " << p7.toString() << endl;
  
  p6.sub(p6);
  cout << "p6 = " << p6.toString() << endl;
  

  Polynomial p8(p4);
  Polynomial p9(p4);
  Polynomial p10(p4);

  p8.derivative(0);
  p9.derivative(1);
  p10.derivative(2);

  cout << "p8 = "  << p8.toString()  << endl;
  cout << "p9 = "  << p9.toString()  << endl;
  cout << "p10 = " << p10.toString() << endl;

  Polynomial p11 = p8 * 4;
  cout << "p11 = " << p11.toString() << endl;
  cout << "p11(1, 2, 3) = " << p11.at(1, 2, 3.1) << endl;

  Polynomial m4(1, 1, 0, 0);
  Polynomial m5(1, 0, 1, 0);
  Polynomial m6(1, 0, 0, 1);

  Polynomial p12 = m4 + m5 + m6;

  cout << "p12 = " << p12.toString() << endl;

  p12.power(4);
  cout << "p12^4 = " << p12.toString() << endl;

 Polynomial m7(1, 1, 0, 0);
 Polynomial m8(2, 2, 0, 0);
 Polynomial m9(3, 3, 0, 0);

 Polynomial p13 = m9 + m7;
 cout << "p13 = " << p13.toString() << endl;

 Polynomial m10(1, 1, 1, 0);
 Polynomial m11(2, 2, 1, 2);
 Polynomial m12(1, 1, 3, 1);

 Polynomial p14 = m10 + m11 + m12;
 cout << "p14 = " << p14.toString() << endl;

 Polynomial p15 = p14.compose(p13);
 cout << "p15 = p14(p13) = " << p15.toString() << endl;

 return 0;
}

*/


Node-path: mathematics/Polynomial.h
Node-kind: file
Node-action: change
Text-content-length: 3606
Text-content-md5: a50bbee503c31188411d11f7276567db
Text-content-sha1: faa142e56e9eb78d5312f023dc132c4aabfc5d6c
Content-length: 3606

#ifndef _POLYNOMIAL_H_
#define _POLYNOMIAL_H_

#include <string>
#include <stack>
#include "Vector.h"

// We suppose 3D Polynomial
class Polynomial{
 private: 
  static const char coefName[3];

  struct monomial_t{
    double coef;
    int power[3];
  };
  
  int         nMon;
  monomial_t*  mon;

 public:
   Polynomial(const double coef, const int powerX,
 	                         const int powerY,
                                 const int powerZ);

   Polynomial(const Polynomial& other);
   Polynomial(void);
  ~Polynomial(void);

  void               derivative(const int dim);
  Vector<Polynomial> gradient(void) const;

  double operator()
    (const double x, const double y, const double z) const;  
  
  double at
    (const double x, const double y, const double z) const;  


  Polynomial operator+(const Polynomial& other) const;
  Polynomial operator-(const Polynomial& other) const;
  Polynomial operator*(const Polynomial& other) const;
  Polynomial operator*(const double alpha) const;

  void add(const Polynomial& other);
  void sub(const Polynomial& other);
  void mul(const Polynomial& other);
  void mul(const double alpha);

  void power(const int n);

  Polynomial compose(const Polynomial& other);
  Polynomial compose(const Polynomial& otherA, const Polynomial& otherB);

  void operator=(const Polynomial& other);

  std::string toString(void) const;

 private:
  static std::string toString(const monomial_t* mon, const bool isAbs);

  static bool isSmaller(const monomial_t* a, const monomial_t*b); 
  static bool isEqual(const monomial_t* a, const monomial_t*b); 
  static bool isSmallerPower(const monomial_t* a, const monomial_t* b);  
  static bool isEqualPower(const monomial_t* a, const monomial_t* b);
  
  static void sort(monomial_t* mon, const int size);
  static void swap(monomial_t* mon, const int i, const int j);

  static int mergeMon(monomial_t* sourceA, const int sizeA, 
		      monomial_t* sourceB, const int sizeB,
		      monomial_t** dest);
  
  static int mult(const monomial_t* sourceA, const int sizeA,
		  const monomial_t* sourceB, const int sizeB,
		  monomial_t** dest);
  
  static void mult(monomial_t* source, const int size, const double alpha);

  static void distribute(monomial_t* src, const int size, const monomial_t* m);

  static void compose(const monomial_t* src, 
		      Polynomial comp,
		      std::stack<monomial_t>* stk);

  static void compose(const monomial_t* src, 
		      Polynomial compA, Polynomial compB,
		      std::stack<monomial_t>* stk);

  static Polynomial polynomialFromStack(std::stack<monomial_t>& stk);

  static monomial_t* copyMonomial(const monomial_t* src, const int size);

  static monomial_t* zeroPolynomial(void);
  static monomial_t* unitPolynomial(void);
};


inline double Polynomial::operator() (const double x, 
				      const double y, 
				      const double z) const{
  return at(x, y, z);
}

inline bool Polynomial::isEqual(const Polynomial::monomial_t* a,
				const Polynomial::monomial_t* b){
  return a->power[0] == b->power[0] &&
         a->power[1] == b->power[1] &&
         a->power[2] == b->power[2];
}

inline bool Polynomial::isSmallerPower(const Polynomial::monomial_t* a,
				       const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    < 
    b->power[0] + b->power[1] + b->power[2] ;    
}

inline bool Polynomial::isEqualPower(const Polynomial::monomial_t* a,
				     const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    ==
    b->power[0] + b->power[1] + b->power[2] ;    
}

#endif


Node-path: mathematics/Vector.h
Node-kind: file
Node-action: change
Text-content-length: 2470
Text-content-md5: 9ca0f0f0a5527025d3efc5aaadc22425
Text-content-sha1: e5d443eeab68c7b338ad3f57487c75e014281eb9
Content-length: 2470

#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <string>

extern "C"{
#include <cblas.h>
}

#include "Exception.h"

class Solver;

template<class T>
class Vector{
 private:
  int N;
  T* v;

  friend class Solver;
  friend class Matrix;
  
 public:
   Vector(const int a);
   Vector(void);
  ~Vector(void);

  int dim(void) const;

  T&   operator()(const int i);
  T    operator()(const int i) const;
  void operator=(const Vector<T>& other);

  T    get(const int i) const;
  void set(const int i, const T a);

  Vector<double> at(const double x, const double y, const double z) const;

  Vector<T> operator+(const Vector<T>& other);
  Vector<T> operator-(const Vector<T>& other);
  Vector<T> operator*(const T& other);
  //Vector<T> operator*(const double alpha);

  void   add(const Vector<T>& b);
  void   sub(const Vector<T>& b);
  void   mul(const T& other);
  //void   mul(const double alpha);
  double dot(const Vector<T>& v) const;

  void allToZero(void);

  std::string toString(void) const;
};

//////////////////////////////////////////////////////////////////////
// Templated Implementations                                        //
//////////////////////////////////////////////////////////////////////

template<class T>
Vector<T>::Vector(const int a){
  if(!a)
    throw Exception("Vector must by of dimension bigger than 0");
  
  N = a;
  v = new T[N];
}

template<class T>
Vector<T>::Vector(void){
  N = 3;
  v = new T[N];
}

template<class T>
Vector<T>::~Vector(void){
  delete[] v;
}

template<class T>
inline int Vector<T>::dim(void) const{
  return N;
}

template<class T>
inline T& Vector<T>::operator()(const int i){
  return v[i];
}

template<class T>
inline T Vector<T>::operator()(const int i) const{
  return v[i];
}

template<class T>
void Vector<T>::operator=(const Vector<T>& other){
  if(N != other.N)
    throw Exception("Vectors must be of the same dimension");

  for(int i = 0; i < N; i++)
    v[i] = other.v[i];
}

template<class T>
inline T Vector<T>::get(const int i) const{
  return v[i];
}

template<class T>
inline void Vector<T>::set(const int i, const T a){
  v[i] = a;
}

//////////////////////////////////////////////////////////////////////
// Inline Vector<double> Implementations                            //
//////////////////////////////////////////////////////////////////////

template<>
inline double Vector<double>::dot(const Vector<double>& v) const{ 
  return cblas_ddot(N, (*this).v, 1, v.v, 1);
}

#endif


Node-path: mathematics/VectorPolynomial.cpp
Node-kind: file
Node-action: change
Text-content-length: 1025
Text-content-md5: c21b932d6e27708a4d8fe85666fc6bfc
Text-content-sha1: 52d0bddd0993172c6b07f676e573710af9fb6c6f
Content-length: 1025

#include <sstream>
#include "Vector.h"
#include "Polynomial.h"

using namespace std;

template<>
Vector<double> Vector<Polynomial>::at(const double x, 
				      const double y, 
				      const double z) const{
  Vector<double> val(N);
  
  for(int i = 0; i < N; i++)
    val(i) = v[i].at(x, y, z);

  return val;
}

template<>
void Vector<Polynomial>::add(const Vector<Polynomial>& other){
  for(int i = 0; i < N; i++)
    v[i].add(other.v[i]);    
}

template<>
void Vector<Polynomial>::sub(const Vector<Polynomial>& other){
  for(int i = 0; i < N; i++)
    v[i].sub(other.v[i]);    
}

template<>
void Vector<Polynomial>::mul(const Polynomial& other){
  for(int i = 0; i < N; i++)
    v[i].mul(other);    
}
/*
template<>
void Vector<Polynomial>::mul(const double alpha){
  for(int i = 0; i < N; i++)
    v[i].mul(alpha);  
}
*/
template<>
string Vector<Polynomial>::toString(void) const{
  stringstream s; 

  s << endl;

  for(int i = 0; i < N; i++)
    s << "[" << v[i].toString() << "]" << endl;

  return s.str();
}


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: change
Text-content-length: 2420
Text-content-md5: 0c5286124072667ac3881db39c86d736
Text-content-sha1: d11ec33713d3ab431dc76ae1450b05fcb1866bfc
Content-length: 2420

#include "Interpolator.h"
#include "Jacobian.h"
#include "Exception.h"

using namespace std;

Interpolator::Interpolator(const Formulation& formulation, const Mesh& mesh){
  f     = &formulation;
  
  /*
  fType = f->getBasisType();
  bSize = f->getBasisSize();
  */

  fType = 0; // TEMPORARY SOLUTION
  bSize = 0; // IDEM

  msh = &mesh;

  nNode = msh->getNbNode();
  nodeVectorValue = new vector<Vector<double>*>(nNode);
  isInterpolated  = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    Vector<double>* v = new Vector<double>(2);
    (*v)(0) = 0.0; 
    (*v)(1) = 0.0;
    (*nodeVectorValue)[i] = v;
    (*isInterpolated)[i] = false;
  }

 switch(fType){
 case 0 : break;
 case 1 : interpolateEdgeElement(); break;
 default: throw Exception("Unknown Basis Type"); break;
 }
}

Interpolator::~Interpolator(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeVectorValue)[i];
  delete nodeVectorValue;

  delete isInterpolated;
}

void Interpolator::interpolateEdgeElement(void){
  /*
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeVectorValue)[id];
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = f->phiVect(k, x, y, jac);
	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
  */
}

const std::vector<Vector<double>*>& Interpolator::getVectorNodeValue(void) const{
  if(fType != 1 && fType != 2)
    throw Exception("The Basis Functions are scalar");
    
    return *nodeVectorValue;
}

const std::vector<double>& Interpolator::getScalarNodeValue(void) const{
  if(fType != 0 && fType != 3)
    throw Exception("The Basis Functions are vectorial");
    
  if(fType == 0)
    throw Exception("Interpolation of Nodal function is not implemented");

  if(fType == 3)
    throw Exception("Interpolation of Volume function is not implemented");
}


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 3160
Text-content-md5: 7fadecad0a75845db98b4d0f08c0e4f1
Text-content-sha1: ecd41bf5389c6ad4662f4aa085f332d505636c9d
Content-length: 3160

#include "Solution.h"
#include "Exception.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();

  f     = &formulation;

  /*
  fType = f->getBasisType();
  */
  fType = 0;  // TEMPORARY

  interpolator = new Interpolator(*f, *msh);

  nodalScalarValue = NULL;
  
  switch(fType){
  case 0 : getNodalScalarValue(); break;
  case 1 : getNodalVectorValue(); break;
  default: throw Exception("Unknown basis type"); break;
  }
}

Solution::~Solution(void){
  if(nodalScalarValue)
    delete nodalScalarValue;

  delete interpolator;
  // Interpolator is responsible for deleting 'nodalVectorValue'
}

void Solution::getNodalScalarValue(void){
  nodalScalarValue = new vector<double>(N);
  
  for(int i = 0; i < N; i++)
    (*nodalScalarValue)[i] = (*node)[i]->getValue();
}

void Solution::getNodalVectorValue(void){
  nodalVectorValue = &(interpolator->getVectorNodeValue());
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  bool isScalar;
  if(fType == 0 || fType == 3)
    isScalar = true;
  else
    isScalar = false;

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, isScalar);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: tests/circle.geo
Node-kind: file
Node-action: change
Text-content-length: 665
Text-content-md5: c630fdf4cf2189a17c08dcd9315a353e
Text-content-sha1: 4e2198d57332f92f33eecaef1a03d39b9e14910c
Content-length: 665

//cl = 2.75;
cl = 0.75;

L = 2;
l = 0.75;

Point(0) = {0, 0, 0, cl};

Point(1) = {+L, -L, 0, cl};
Point(2) = {+L, +L, 0, cl};
Point(3) = {-L, +L, 0, cl};
Point(4) = {-L, -L, 0, cl};

Circle(1) = {1, 0, 2};
Circle(2) = {2, 0, 3};
Circle(3) = {3, 0, 4};
Circle(4) = {4, 0, 1};

Point(5) = {+l, -l, 0, cl};
Point(6) = {+l, +l, 0, cl};
Point(7) = {-l, +l, 0, cl};
Point(8) = {-l, -l, 0, cl};

Circle(5) = {5, 0, 6};
Circle(6) = {6, 0, 7};
Circle(7) = {7, 0, 8};
Circle(8) = {8, 0, 5};

Line Loop(9) = {3, 4, 1, 2};
Line Loop(10) = {7, 8, 5, 6};
Plane Surface(11) = {9, 10};

Physical Line(5) = {1, 2, 3, 4};
Physical Line(6) = {5, 6, 7, 8};
Physical Surface(7) = {11};


Node-path: tests/circle.msh
Node-kind: file
Node-action: change
Text-content-length: 267949
Text-content-md5: ce1197800b134a47783ff47289b3bb12
Text-content-sha1: 22cf87a10a3d261c714acfb8b1003bfb81f23c32
Content-length: 267949

$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
2712
1 2 -2 0
2 2 2 0
3 -2 2 0
4 -2 -2 0
5 0.75 -0.75 0
6 0.75 0.75 0
7 -0.75 0.75 0
8 -0.75 -0.75 0
9 2.073383798128843 -1.923819021024798 0
10 2.143867781534048 -1.84494740719086 0
11 2.211353371991436 -1.763495467581956 0
12 2.275746184800493 -1.679577120100772 0
13 2.336956160789899 -1.593309732144423 0
14 2.394897692273435 -1.504813956455539 0
15 2.449489742780063 -1.414213562378489 0
16 2.500655960390763 -1.321635262756766 0
17 2.548324784523594 -1.227208536713616 0
18 2.59242954601764 -1.131065448563774 0
19 2.632908560376147 -1.033340463108844 0
20 2.669705214037212 -0.9341702575775559 0
21 2.702768043553101 -0.8336935304703623 0
22 2.732050807567089 -0.7320508075755515 0
23 2.757512551485858 -0.629384245431954 0
24 2.779117664758207 -0.5258374325101685 0
25 2.796835930679621 -0.4215551883911033 0
26 2.810642568653064 -0.3166833612226954 0
27 2.820518268846891 -0.2113686237380878 0
28 2.826449219201389 -0.1057582681205504 0
29 2.82842712474619 -2.043476499125063e-12 0
30 2.826449219201538 0.1057582681165679 0
31 2.820518268847182 0.2113686237342141 0
32 2.810642568653487 0.3166833612189366 0
33 2.796835930680169 0.4215551883874624 0
34 2.779117664758873 0.5258374325066506 0
35 2.757512551486633 0.6293842454285619 0
36 2.732050807567963 0.7320508075722882 0
37 2.702768043554068 0.8336935304672314 0
38 2.669705214038262 0.9341702575745581 0
39 2.632908560377271 1.033340463105981 0
40 2.592429546018792 1.131065448561134 0
41 2.548324784524719 1.227208536711281 0
42 2.50065596039184 1.321635262754729 0
43 2.449489742781072 1.414213562376743 0
44 2.394897692274355 1.504813956454076 0
45 2.33695616079071 1.593309732143234 0
46 2.275746184801176 1.679577120099844 0
47 2.211353371991975 1.76349546758128 0
48 2.143867781534424 1.844947407190423 0
49 2.073383798129039 1.923819021024587 0
50 1.923819021024798 2.073383798128843 0
51 1.84494740719086 2.143867781534048 0
52 1.763495467581956 2.211353371991436 0
53 1.679577120100772 2.275746184800493 0
54 1.593309732144423 2.336956160789899 0
55 1.504813956455539 2.394897692273435 0
56 1.414213562378489 2.449489742780063 0
57 1.321635262756766 2.500655960390763 0
58 1.227208536713616 2.548324784523594 0
59 1.131065448563774 2.59242954601764 0
60 1.033340463108844 2.632908560376147 0
61 0.9341702575775559 2.669705214037212 0
62 0.8336935304703623 2.702768043553101 0
63 0.7320508075755515 2.732050807567089 0
64 0.629384245431954 2.757512551485858 0
65 0.5258374325101685 2.779117664758207 0
66 0.4215551883911033 2.796835930679621 0
67 0.3166833612226954 2.810642568653064 0
68 0.2113686237380878 2.820518268846891 0
69 0.1057582681205504 2.826449219201389 0
70 2.043476499125063e-12 2.82842712474619 0
71 -0.1057582681165679 2.826449219201538 0
72 -0.2113686237342141 2.820518268847182 0
73 -0.3166833612189366 2.810642568653487 0
74 -0.4215551883874624 2.796835930680169 0
75 -0.5258374325066506 2.779117664758873 0
76 -0.6293842454285619 2.757512551486633 0
77 -0.7320508075722882 2.732050807567963 0
78 -0.8336935304672314 2.702768043554068 0
79 -0.9341702575745581 2.669705214038262 0
80 -1.033340463105981 2.632908560377271 0
81 -1.131065448561134 2.592429546018792 0
82 -1.227208536711281 2.548324784524719 0
83 -1.321635262754729 2.50065596039184 0
84 -1.414213562376743 2.449489742781072 0
85 -1.504813956454076 2.394897692274355 0
86 -1.593309732143234 2.33695616079071 0
87 -1.679577120099844 2.275746184801176 0
88 -1.76349546758128 2.211353371991975 0
89 -1.844947407190423 2.143867781534424 0
90 -1.923819021024587 2.073383798129039 0
91 -2.073383798128843 1.923819021024798 0
92 -2.143867781534048 1.84494740719086 0
93 -2.211353371991436 1.763495467581956 0
94 -2.275746184800493 1.679577120100772 0
95 -2.336956160789899 1.593309732144423 0
96 -2.394897692273435 1.504813956455539 0
97 -2.449489742780063 1.414213562378489 0
98 -2.500655960390763 1.321635262756766 0
99 -2.548324784523594 1.227208536713616 0
100 -2.59242954601764 1.131065448563774 0
101 -2.632908560376147 1.033340463108844 0
102 -2.669705214037212 0.9341702575775559 0
103 -2.702768043553101 0.8336935304703623 0
104 -2.732050807567089 0.7320508075755515 0
105 -2.757512551485858 0.629384245431954 0
106 -2.779117664758207 0.5258374325101685 0
107 -2.796835930679621 0.4215551883911033 0
108 -2.810642568653064 0.3166833612226954 0
109 -2.820518268846891 0.2113686237380878 0
110 -2.826449219201389 0.1057582681205504 0
111 -2.82842712474619 2.043476499125063e-12 0
112 -2.826449219201538 -0.1057582681165679 0
113 -2.820518268847182 -0.2113686237342141 0
114 -2.810642568653487 -0.3166833612189366 0
115 -2.796835930680169 -0.4215551883874624 0
116 -2.779117664758873 -0.5258374325066506 0
117 -2.757512551486633 -0.6293842454285619 0
118 -2.732050807567963 -0.7320508075722882 0
119 -2.702768043554068 -0.8336935304672314 0
120 -2.669705214038262 -0.9341702575745581 0
121 -2.632908560377271 -1.033340463105981 0
122 -2.592429546018792 -1.131065448561134 0
123 -2.548324784524719 -1.227208536711281 0
124 -2.50065596039184 -1.321635262754729 0
125 -2.449489742781072 -1.414213562376743 0
126 -2.394897692274355 -1.504813956454076 0
127 -2.33695616079071 -1.593309732143234 0
128 -2.275746184801176 -1.679577120099844 0
129 -2.211353371991975 -1.76349546758128 0
130 -2.143867781534424 -1.844947407190423 0
131 -2.073383798129039 -1.923819021024587 0
132 -1.923819021024798 -2.073383798128843 0
133 -1.84494740719086 -2.143867781534048 0
134 -1.763495467581956 -2.211353371991436 0
135 -1.679577120100772 -2.275746184800493 0
136 -1.593309732144423 -2.336956160789899 0
137 -1.504813956455539 -2.394897692273435 0
138 -1.414213562378489 -2.449489742780063 0
139 -1.321635262756766 -2.500655960390763 0
140 -1.227208536713616 -2.548324784523594 0
141 -1.131065448563774 -2.59242954601764 0
142 -1.033340463108844 -2.632908560376147 0
143 -0.9341702575775559 -2.669705214037212 0
144 -0.8336935304703623 -2.702768043553101 0
145 -0.7320508075755515 -2.732050807567089 0
146 -0.629384245431954 -2.757512551485858 0
147 -0.5258374325101685 -2.779117664758207 0
148 -0.4215551883911033 -2.796835930679621 0
149 -0.3166833612226954 -2.810642568653064 0
150 -0.2113686237380878 -2.820518268846891 0
151 -0.1057582681205504 -2.826449219201389 0
152 -2.043476499125063e-12 -2.82842712474619 0
153 0.1057582681165679 -2.826449219201538 0
154 0.2113686237342141 -2.820518268847182 0
155 0.3166833612189366 -2.810642568653487 0
156 0.4215551883874624 -2.796835930680169 0
157 0.5258374325066506 -2.779117664758873 0
158 0.6293842454285619 -2.757512551486633 0
159 0.7320508075722882 -2.732050807567963 0
160 0.8336935304672314 -2.702768043554068 0
161 0.9341702575745581 -2.669705214038262 0
162 1.033340463105981 -2.632908560377271 0
163 1.131065448561134 -2.592429546018792 0
164 1.227208536711281 -2.548324784524719 0
165 1.321635262754729 -2.50065596039184 0
166 1.414213562376743 -2.449489742781072 0
167 1.504813956454076 -2.394897692274355 0
168 1.593309732143234 -2.33695616079071 0
169 1.679577120099844 -2.275746184801176 0
170 1.76349546758128 -2.211353371991975 0
171 1.844947407190423 -2.143867781534424 0
172 1.923819021024587 -2.073383798129039 0
173 0.8199014002507383 -0.6728756897576837 0
174 0.8819067018135037 -0.5892712187918466 0
175 0.9354187597387111 -0.499991743860728 0
176 0.9799222236558836 -0.4058970751130253 0
177 1.014988500879884 -0.3078933956446724 0
178 1.04027988399114 -0.206924534464575 0
179 1.055552803144611 -0.1039628769011031 0
180 1.060660171779821 -1.17217346939924e-12 0
181 1.055552803144812 0.1039628768990615 0
182 1.040279883991483 0.2069245344628503 0
183 1.014988500880309 0.30789339564327 0
184 0.9799222236563322 0.4058970751119425 0
185 0.9354187597391255 0.4999917438599528 0
186 0.8819067018138294 0.5892712187913591 0
187 0.8199014002509244 0.6728756897574573 0
188 0.6728756897576837 0.8199014002507383 0
189 0.5892712187918466 0.8819067018135037 0
190 0.499991743860728 0.9354187597387111 0
191 0.4058970751130253 0.9799222236558836 0
192 0.3078933956446724 1.014988500879884 0
193 0.206924534464575 1.04027988399114 0
194 0.1039628769011031 1.055552803144611 0
195 1.17217346939924e-12 1.060660171779821 0
196 -0.1039628768990615 1.055552803144812 0
197 -0.2069245344628503 1.040279883991483 0
198 -0.30789339564327 1.014988500880309 0
199 -0.4058970751119425 0.9799222236563322 0
200 -0.4999917438599528 0.9354187597391255 0
201 -0.5892712187913591 0.8819067018138294 0
202 -0.6728756897574573 0.8199014002509244 0
203 -0.8199014002507383 0.6728756897576837 0
204 -0.8819067018135037 0.5892712187918466 0
205 -0.9354187597387111 0.499991743860728 0
206 -0.9799222236558836 0.4058970751130253 0
207 -1.014988500879884 0.3078933956446724 0
208 -1.04027988399114 0.206924534464575 0
209 -1.055552803144611 0.1039628769011031 0
210 -1.060660171779821 1.17217346939924e-12 0
211 -1.055552803144812 -0.1039628768990615 0
212 -1.040279883991483 -0.2069245344628503 0
213 -1.014988500880309 -0.30789339564327 0
214 -0.9799222236563322 -0.4058970751119425 0
215 -0.9354187597391255 -0.4999917438599528 0
216 -0.8819067018138294 -0.5892712187913591 0
217 -0.8199014002509244 -0.6728756897574573 0
218 -0.6728756897576837 -0.8199014002507383 0
219 -0.5892712187918466 -0.8819067018135037 0
220 -0.499991743860728 -0.9354187597387111 0
221 -0.4058970751130253 -0.9799222236558836 0
222 -0.3078933956446724 -1.014988500879884 0
223 -0.206924534464575 -1.04027988399114 0
224 -0.1039628769011031 -1.055552803144611 0
225 -1.17217346939924e-12 -1.060660171779821 0
226 0.1039628768990615 -1.055552803144812 0
227 0.2069245344628503 -1.040279883991483 0
228 0.30789339564327 -1.014988500880309 0
229 0.4058970751119425 -0.9799222236563322 0
230 0.4999917438599528 -0.9354187597391255 0
231 0.5892712187913591 -0.8819067018138294 0
232 0.6728756897574573 -0.8199014002509244 0
233 -1.675592868956513 1.00101697331708 0
234 1.00101697331708 1.675592868956513 0
235 1.675592868956513 -1.001016973317083 0
236 -1.001016973317083 -1.675592868956513 0
237 -1.004724783693921 1.680388742524567 0
238 -1.680388742524568 -1.004724783693923 0
239 1.004724783693923 -1.680388742524568 0
240 1.680388742524567 1.004724783693921 0
241 -1.941217085280069 0.1049452518161482 0
242 1.941217085280069 -0.1049452518161478 0
243 -0.1049452518161474 -1.941217085280069 0
244 0.1049452518161483 1.941217085280069 0
245 -2.110551840722817 -0.5197181353573471 0
246 -0.5197181353573477 2.110551840722818 0
247 0.5197181353573475 -2.110551840722818 0
248 2.110551840722818 0.5197181353573468 0
249 2.143661307312704 -0.6552199675069728 0
250 -0.6552199675069729 -2.143661307312704 0
251 -2.143661307312704 0.6552199675069733 0
252 0.6552199675069728 2.143661307312704 0
253 1.591571199214583 1.583925148936936 0
254 -1.583925148936938 1.591571199214583 0
255 -1.591571199214584 -1.583925148936938 0
256 1.583925148936939 -1.591571199214583 0
257 -0.3921249359943486 1.569701701268798 0
258 0.392124935994348 -1.569701701268798 0
259 1.569701701268797 0.3921249359943481 0
260 -1.569701701268797 -0.3921249359943477 0
261 1.140113751844552 1.140697994084603 0
262 -1.140113751844553 -1.140697994084602 0
263 -1.140697994084604 1.140113751844552 0
264 1.140697994084603 -1.140113751844553 0
265 1.537235997083475 -0.4673241721259884 0
266 -0.4673241721259884 -1.537235997083475 0
267 -1.537235997083475 0.4673241721259876 0
268 0.4673241721259874 1.537235997083475 0
269 0.1362931003954599 -2.357177644296475 0
270 -2.357177644296476 -0.1362931003954597 0
271 -0.1362931003954599 2.357177644296475 0
272 2.357177644296476 0.1362931003954596 0
273 -0.998927535163474 2.14511377990222 0
274 -2.14511377990222 -0.9989275351634722 0
275 2.14511377990222 0.9989275351634735 0
276 0.9989275351634741 -2.14511377990222 0
277 -2.10034570637802 1.0907725630665 0
278 1.090772563066499 2.100345706378019 0
279 2.10034570637802 -1.090772563066499 0
280 -1.090772563066499 -2.10034570637802 0
281 1.486071610874764 -0.03775739599181208 0
282 -0.037757395991812 -1.486071610874764 0
283 -1.486071610874763 0.03775739599181142 0
284 0.03775739599181162 1.486071610874763 0
285 -0.7266344701697544 1.305396880975857 0
286 1.305396880975856 0.7266344701697539 0
287 0.7266344701697539 -1.305396880975857 0
288 -1.305396880975856 -0.7266344701697539 0
289 -1.398078275506882 1.955211920604768 0
290 1.955211920604767 1.398078275506882 0
291 -1.955211920604769 -1.398078275506882 0
292 1.398078275506883 -1.955211920604769 0
293 -0.3071269494168859 -2.382132273812633 0
294 2.382132273812634 -0.307126949416886 0
295 -2.382132273812635 0.3071269494168858 0
296 0.3071269494168863 2.382132273812635 0
297 -1.236807845196658 0.7420031493331508 0
298 0.742003149333151 1.236807845196658 0
299 -0.7420031493331509 -1.236807845196658 0
300 1.236807845196658 -0.7420031493331508 0
301 -1.45691848061371 -1.946038555215579 0
302 1.946038555215579 -1.45691848061371 0
303 -1.946038555215579 1.456918480613711 0
304 1.456918480613711 1.946038555215579 0
305 0.6706383275517063 -1.772028484913299 0
306 -1.772028484913299 -0.6706383275517067 0
307 -0.670638327551706 1.7720284849133 0
308 1.772028484913299 0.6706383275517054 0
309 -1.892909378555157 -0.259814891993898 0
310 -0.2598148919938981 1.892909378555157 0
311 0.259814891993899 -1.892909378555157 0
312 1.892909378555158 0.2598148919938989 0
313 -1.877110970169661 0.4322046985386031 0
314 0.4322046985386032 1.877110970169661 0
315 -0.4322046985386025 -1.877110970169662 0
316 1.877110970169662 -0.4322046985386025 0
317 -1.450570985128759 1.268908230935793 0
318 -1.268908230935796 -1.450570985128757 0
319 1.450570985128757 -1.268908230935797 0
320 1.268908230935794 1.450570985128759 0
321 2.376231992825084 0.7505733079426472 0
322 0.7505733079426457 -2.376231992825085 0
323 -2.376231992825085 -0.7505733079426454 0
324 -0.7505733079426472 2.376231992825085 0
325 -0.4435214774604602 2.456714299412036 0
326 2.456714299412038 0.4435214774604602 0
327 -2.456714299412038 -0.4435214774604608 0
328 0.4435214774604616 -2.456714299412037 0
329 0.8909202942482328 2.355745037344463 0
330 -2.355745037344462 0.8909202942482336 0
331 -0.8909202942482318 -2.355745037344462 0
332 2.355745037344462 -0.8909202942482316 0
333 -1.274340416237504 1.529988256672232 0
334 1.529988256672232 1.274340416237505 0
335 -1.529988256672234 -1.274340416237506 0
336 1.274340416237506 -1.529988256672234 0
337 -0.737032808447159 -1.8402081989181 0
338 1.8402081989181 -0.737032808447159 0
339 0.737032808447159 1.840208198918101 0
340 -1.840208198918101 0.7370328084471592 0
341 1.875752218852007 1.67833345085214 0
342 -1.678333450852139 1.875752218852007 0
343 -1.87575221885201 -1.678333450852139 0
344 1.678333450852139 -1.875752218852009 0
345 -2.453426853499258 0.604407768245578 0
346 0.6044077682455771 2.453426853499259 0
347 2.453426853499258 -0.6044077682455772 0
348 -0.6044077682455773 -2.453426853499259 0
349 0.2220614263653415 -1.331935599372384 0
350 1.331935599372384 0.2220614263653408 0
351 -0.2220614263653425 1.331935599372384 0
352 -1.331935599372384 -0.2220614263653414 0
353 -0.8559333306083573 1.049107891859953 0
354 1.049107891859954 0.8559333306083572 0
355 0.8559333306083569 -1.049107891859953 0
356 -1.049107891859953 -0.8559333306083572 0
357 -0.270332612090131 -1.322791103425298 0
358 1.322791103425297 -0.2703326120901312 0
359 0.2703326120901303 1.322791103425297 0
360 -1.322791103425297 0.2703326120901304 0
361 -1.742071412025401 1.2668725170687 0
362 1.266872517068699 1.742071412025401 0
363 1.742071412025399 -1.266872517068703 0
364 -1.266872517068703 -1.742071412025399 0
365 1.536761024624167 -0.748405572907933 0
366 -0.748405572907933 -1.536761024624167 0
367 -1.536761024624167 0.7484055729079314 0
368 0.7484055729079313 1.536761024624167 0
369 -1.379874340276214 -0.997112252935913 0
370 0.9971122529359128 -1.379874340276213 0
371 1.379874340276213 0.9971122529359137 0
372 -0.997112252935914 1.379874340276212 0
373 1.375446373742149 -0.99567743771392 0
374 -0.9956774377139198 -1.375446373742149 0
375 -1.37544637374215 0.9956774377139186 0
376 0.995677437713919 1.37544637374215 0
377 0.2213641686153264 1.692732805724396 0
378 -1.692732805724395 0.2213641686153266 0
379 -0.2213641686153268 -1.692732805724396 0
380 1.692732805724396 -0.2213641686153265 0
381 -2.554214418342231 0.08474958539781353 0
382 -0.0847495853978142 -2.55421441834223 0
383 2.55421441834223 -0.08474958539781278 0
384 0.08474958539781419 2.554214418342232 0
385 2.221556125524339 1.268149739108309 0
386 1.268149739108309 -2.221556125524339 0
387 -1.268149739108309 2.221556125524339 0
388 -2.221556125524339 -1.268149739108309 0
389 1.258006055393931 0.4695101112634467 0
390 0.469510111263447 -1.258006055393931 0
391 -1.258006055393931 -0.4695101112634467 0
392 -0.4695101112634471 1.25800605539393 0
393 0.3134359042551227 2.118105900594583 0
394 -2.118105900594583 0.3134359042551227 0
395 2.118105900594582 -0.3134359042551225 0
396 -0.3134359042551219 -2.118105900594583 0
397 -1.117488338538527 1.897196319297705 0
398 1.897196319297704 1.117488338538527 0
399 -1.897196319297707 -1.117488338538527 0
400 1.117488338538529 -1.897196319297706 0
401 -1.717213334581761 -1.90127134658927 0
402 1.90127134658927 -1.717213334581761 0
403 1.717213334581761 1.901271346589271 0
404 -1.90127134658927 1.717213334581762 0
405 -1.358877769825451 -2.190127850410699 0
406 2.190127850410699 -1.358877769825452 0
407 1.358877769825451 2.190127850410698 0
408 -2.190127850410698 1.358877769825451 0
409 -1.54772978737017 -0.7554189627329481 0
410 0.7554189627329476 -1.54772978737017 0
411 -0.755418962732946 1.54772978737017 0
412 1.54772978737017 0.7554189627329458 0
413 -0.06099468944347456 1.746014997947738 0
414 -1.746014997947738 -0.06099468944347475 0
415 1.746014997947738 0.06099468944347503 0
416 0.06099468944347519 -1.746014997947738 0
417 0.1034319679042384 -2.093449030956088 0
418 -0.1034319679042373 2.093449030956088 0
419 -2.093449030956088 -0.1034319679042373 0
420 2.093449030956088 0.1034319679042392 0
421 2.039889499171399 0.787891376386689 0
422 -0.787891376386688 2.0398894991714 0
423 -2.0398894991714 -0.787891376386689 0
424 0.7878913763866896 -2.0398894991714 0
425 0.8236156218323627 1.023454760416103 0
426 1.023454760416103 -0.8236156218323629 0
427 -1.023454760416103 0.8236156218323626 0
428 -0.8236156218323626 -1.023454760416103 0
429 0.5143561348934245 1.208814337865783 0
430 -1.208814337865783 0.5143561348934247 0
431 -0.5143561348934247 -1.208814337865783 0
432 1.208814337865783 -0.514356134893425 0
433 0.9908861515233461 -2.378516650846406 0
434 -2.378516650846407 -0.9908861515233442 0
435 2.378516650846406 0.9908861515233466 0
436 -0.9908861515233466 2.378516650846407 0
437 -2.248754795783668 0.0896568478241017 0
438 -0.08965684782410017 -2.248754795783666 0
439 2.248754795783667 -0.08965684782410067 0
440 0.08965684782410094 2.248754795783666 0
441 -2.567360716564532 -0.2238617189429209 0
442 2.567360716564532 0.2238617189429215 0
443 -0.2238617189429218 2.567360716564532 0
444 0.2238617189429216 -2.567360716564531 0
445 -0.9585826681693688 -1.909480220963884 0
446 1.909480220963884 -0.9585826681693685 0
447 -1.909480220963884 0.9585826681693688 0
448 0.9585826681693683 1.909480220963884 0
449 -2.21238838100949 -0.3085614492057838 0
450 -0.3085614492057835 2.21238838100949 0
451 0.3085614492057843 -2.21238838100949 0
452 2.212388381009492 0.3085614492057836 0
453 -1.40401807430619 1.730892091955633 0
454 1.730892091955633 1.40401807430619 0
455 -1.730892091955635 -1.404018074306193 0
456 1.404018074306192 -1.730892091955635 0
457 1.11938710734937 2.347247988184295 0
458 -2.347247988184294 1.11938710734937 0
459 -1.119387107349369 -2.347247988184295 0
460 2.347247988184295 -1.119387107349369 0
461 -2.109786950959887 0.8772256466714856 0
462 0.8772256466714842 2.109786950959887 0
463 2.109786950959887 -0.8772256466714848 0
464 -0.8772256466714848 -2.109786950959887 0
465 2.075898454780491 1.578577321156025 0
466 -1.578577321156025 2.075898454780491 0
467 -2.075898454780493 -1.578577321156025 0
468 1.578577321156025 -2.075898454780492 0
469 -0.04836579821520427 -1.281405462062805 0
470 1.281405462062804 -0.04836579821520471 0
471 0.04836579821520431 1.281405462062803 0
472 -1.281405462062804 0.04836579821520402 0
473 -0.6621905407286934 1.118354883957766 0
474 1.118354883957766 0.6621905407286937 0
475 0.6621905407286934 -1.118354883957766 0
476 -1.118354883957765 -0.6621905407286937 0
477 -1.776888804160469 -0.4527747073094939 0
478 0.4527747073094946 -1.77688880416047 0
479 -0.452774707309494 1.776888804160469 0
480 1.776888804160468 0.4527747073094938 0
481 -2.5728069795299 0.4169822220829981 0
482 2.572806979529899 -0.4169822220829961 0
483 -0.4169822220829959 -2.572806979529899 0
484 0.4169822220829972 2.572806979529901 0
485 1.552945946187282 0.1599374609463876 0
486 0.1599374609463882 -1.552945946187281 0
487 -1.55294594618728 -0.1599374609463874 0
488 -0.1599374609463885 1.55294594618728 0
489 -1.456237418910449 -0.5722421685154624 0
490 0.5722421685154623 -1.45623741891045 0
491 -0.5722421685154617 1.456237418910448 0
492 1.456237418910448 0.5722421685154612 0
493 -1.863510046365312 -0.9134773049101261 0
494 -0.913477304910125 1.863510046365311 0
495 0.9134773049101271 -1.863510046365313 0
496 1.863510046365312 0.9134773049101261 0
497 1.938830929787365 -1.242657483388524 0
498 -1.242657483388524 -1.938830929787365 0
499 -1.938830929787366 1.242657483388525 0
500 1.242657483388524 1.938830929787366 0
501 2.242319751660212 -0.4613572429523556 0
502 -0.4613572429523557 -2.242319751660212 0
503 0.4613572429523541 2.242319751660213 0
504 -2.242319751660212 0.4613572429523555 0
505 2.542377073393952 0.6314659758211381 0
506 -0.6312611143807648 2.542570228909067 0
507 -2.542377073393953 -0.6314659758211379 0
508 0.6312611143807649 -2.542570228909067 0
509 0.5770783130798002 1.72242945701555 0
510 -1.72242945701555 0.5770783130797993 0
511 -0.5770783130797994 -1.722429457015551 0
512 1.722429457015551 -0.5770783130797994 0
513 1.267548813485051 -1.313637410249756 0
514 -1.313637410249756 -1.267548813485051 0
515 -1.267548813485053 1.313637410249753 0
516 1.313637410249754 1.267548813485053 0
517 0.6369075793868412 1.062615600738809 0
518 -1.06261560073881 0.6369075793868414 0
519 -0.6369075793868415 -1.06261560073881 0
520 1.062615600738809 -0.6369075793868412 0
521 1.184434889535539 -0.9330399642579399 0
522 -0.9330399642579397 -1.184434889535539 0
523 0.9330399642579393 1.184434889535539 0
524 -1.184434889535539 0.9330399642579389 0
525 -1.385660433987782 0.6035736225367249 0
526 0.6035736225367246 1.385660433987782 0
527 1.385660433987781 -0.6035736225367249 0
528 -0.6035736225367243 -1.385660433987781 0
529 1.71132653456082 1.191908702492102 0
530 -1.711326534560822 -1.191908702492103 0
531 -1.191908702492102 1.71132653456082 0
532 1.191908702492104 -1.711326534560822 0
533 -1.748461637012318 1.475956254798491 0
534 1.475956254798491 1.748461637012317 0
535 -1.475956254798492 -1.748461637012319 0
536 1.748461637012319 -1.475956254798492 0
537 2.069651634321467 -1.625117514154337 0
538 -1.625117514154337 -2.069651634321467 0
539 -2.069651634321466 1.625117514154338 0
540 1.624202563073472 2.069848725790997 0
541 0.5646393915520258 -2.318432104233787 0
542 -0.5648729785762849 2.318175161800168 0
543 -2.318206756132822 -0.5648783965657943 0
544 2.318206756132822 0.564878396565796 0
545 -2.501983603603465 0.7977879802379901 0
546 2.501821569663024 -0.7983244123810409 0
547 -0.798324412381041 -2.501821569663024 0
548 0.7983244123810417 2.501821569663023 0
549 1.499357532466911 -0.2889171235284306 0
550 -0.2889171235284308 -1.499357532466911 0
551 0.2889171235284294 1.49935753246691 0
552 -1.49935753246691 0.2889171235284297 0
553 0.8953590889454697 -1.231764337739292 0
554 -1.231764337739292 -0.8953590889454703 0
555 -0.8953590889454703 1.231764337739291 0
556 1.231764337739292 0.8953590889454695 0
557 -2.061560375560349 0.478338900464816 0
558 2.06156037556035 -0.4783389004648164 0
559 -0.4783389004648166 -2.061560375560351 0
560 0.4783389004648156 2.06156037556035 0
561 -1.446483112607029 1.466731355649054 0
562 1.466731355649055 1.446483112607029 0
563 1.44648311260703 -1.466731355649055 0
564 -1.466731355649055 -1.44648311260703 0
565 -1.464188110315041 2.211590595645086 0
566 1.464188110315041 -2.211590595645087 0
567 2.211590595645086 1.464188110315041 0
568 -2.211590595645087 -1.46418811031504 0
569 -1.710776310246804 -0.2608822417766299 0
570 -0.2608822417766312 1.710776310246805 0
571 1.710776310246805 0.2608822417766312 0
572 0.260882241776632 -1.710776310246805 0
573 -0.5713108175697629 1.640505896915903 0
574 1.640505896915902 0.571310817569762 0
575 -1.640505896915904 -0.5713108175697617 0
576 0.5713108175697615 -1.640505896915905 0
577 -2.646467796401877 0.2421018140128955 0
578 0.242101814012896 2.646467796401879 0
579 -0.2421018140128948 -2.646467796401878 0
580 2.646467796401878 -0.2421018140128946 0
581 0.8158120634441723 -2.195683402772105 0
582 -0.8158120634441716 2.195683402772106 0
583 -2.195683402772106 -0.8158120634441715 0
584 2.195683402772104 0.8158120634441721 0
585 0.5605460485785831 -1.942581593619205 0
586 -1.942581593619205 -0.5605460485785836 0
587 -0.5605460485785827 1.942581593619204 0
588 1.942581593619205 0.5605460485785817 0
589 -0.3751899544754038 2.048137605158704 0
590 2.048137605158705 0.3751899544754032 0
591 -2.048137605158704 -0.3751899544754041 0
592 0.3751899544754044 -2.048137605158703 0
593 -2.371059824182673 -1.183063707643998 0
594 2.371059824182674 1.183063707644001 0
595 -1.184317191913793 2.37041656403661 0
596 1.183063707644 -2.371059824182674 0
597 1.702104862632813 1.733824377179919 0
598 -1.733824377179919 1.702104862632815 0
599 -1.702104862632816 -1.733824377179918 0
600 1.733824377179919 -1.702104862632816 0
601 2.308678046586293 -0.7220858698773436 0
602 -0.7220858698773435 -2.308678046586293 0
603 0.722085869877345 2.308678046586294 0
604 -2.308678046586294 0.7220858698773465 0
605 1.600481985989846 -1.162233428833959 0
606 1.162233428833957 1.600481985989847 0
607 -1.162233428833959 -1.600481985989846 0
608 -1.600481985989847 1.162233428833956 0
609 -0.07432817772959921 1.921367948480762 0
610 -1.921367948480762 -0.07432817772959936 0
611 0.07432817772959996 -1.921367948480762 0
612 1.921367948480761 0.07432817772960057 0
613 -0.3856728834655987 1.388122361967636 0
614 0.3856728834655978 -1.388122361967636 0
615 -1.388122361967635 -0.3856728834655979 0
616 1.388122361967636 0.3856728834655974 0
617 0.2639508285018999 1.851287135106445 0
618 -1.851287135106445 0.2639508285019 0
619 -0.2639508285018997 -1.851287135106445 0
620 1.851287135106445 -0.2639508285018997 0
621 2.512545705642067 0.8823932736001932 0
622 0.8823932736001929 -2.512545705642067 0
623 -0.8823932736001933 2.512545705642067 0
624 -2.512545705642068 -0.8823932736001903 0
625 1.892318501274661 1.863380808764917 0
626 -1.892318501274663 -1.863380808764916 0
627 -1.863380808764916 1.892318501274661 0
628 1.863380808764916 -1.892318501274663 0
629 1.307373938884376 -1.147840640581326 0
630 -1.147840640581326 -1.307373938884376 0
631 -1.307373938884378 1.147840640581323 0
632 1.147840640581324 1.307373938884377 0
633 0.07014413022552406 -2.649974629088851 0
634 -0.07014413022552708 2.649974629088851 0
635 2.649974629088851 0.07014413022552651 0
636 -2.649974629088852 -0.07014413022552536 0
637 1.697117297490082 -0.831292980821692 0
638 -0.831292980821692 -1.697117297490082 0
639 0.8312929808216901 1.697117297490083 0
640 -1.697117297490082 0.8312929808216908 0
641 0.3940130452214894 1.70547258168559 0
642 -0.3940130452214885 -1.705472581685589 0
643 -1.705472581685589 0.3940130452214889 0
644 1.705472581685589 -0.3940130452214883 0
645 1.184161460412254 0.3019055491096737 0
646 -1.184161460412254 -0.3019055491096737 0
647 0.3019055491096738 -1.184161460412254 0
648 -0.3019055491096747 1.184161460412254 0
649 -1.160557485571873 2.066202985349547 0
650 2.066395993293055 1.161174338400622 0
651 -2.066202985349548 -1.160557485571872 0
652 1.160557485571873 -2.066202985349547 0
653 -1.120083662101943 -1.802733147134211 0
654 1.802733147134211 -1.120083662101943 0
655 -1.802733147134211 1.120083662101941 0
656 1.120083662101941 1.802733147134211 0
657 -1.532248422993014 -1.110784222629661 0
658 1.532248422993014 1.110784222629661 0
659 1.110784222629661 -1.532248422993015 0
660 -1.11078422262966 1.532248422993015 0
661 1.715011605707317 0.8337092697566549 0
662 0.8337092697566559 -1.715011605707318 0
663 -1.715011605707317 -0.8337092697566566 0
664 -0.8337092697566542 1.715011605707317 0
665 1.927940755738498 -0.5988567300675465 0
666 -0.5988567300675465 -1.927940755738498 0
667 0.5988567300675464 1.927940755738497 0
668 -1.927940755738498 0.5988567300675461 0
669 1.384243117342815 1.604484476190432 0
670 -1.604484476190434 1.384243117342816 0
671 -1.384243117342819 -1.604484476190433 0
672 1.604484476190434 -1.38424311734282 0
673 -2.624702377459526 -0.3953121926626167 0
674 0.3953121926626174 -2.624702377459526 0
675 2.624702377459526 0.3953121926626161 0
676 -0.3953121926626169 2.624702377459526 0
677 -1.509028200901287 1.857384204125194 0
678 1.857384204125194 1.509028200901286 0
679 1.509028200901288 -1.857384204125196 0
680 -1.857384204125197 -1.509028200901288 0
681 1.034027825036814 -1.001984911579359 0
682 -1.001984911579359 -1.034027825036814 0
683 1.001984911579359 1.034027825036814 0
684 -1.034027825036814 1.001984911579358 0
685 0.4391861776852546 1.377384130329099 0
686 -1.377384130329099 0.439186177685255 0
687 1.377384130329098 -0.4391861776852554 0
688 -0.4391861776852553 -1.377384130329098 0
689 -2.476446575547418 1.003040258537067 0
690 2.476596581572982 -1.002118327564639 0
691 -1.002118327564639 -2.476596581572982 0
692 1.003500057516826 2.476307689312754 0
693 -0.2799339898553585 2.385550041488701 0
694 -2.385550041488701 -0.2799339898553576 0
695 0.2799339898553595 -2.385550041488701 0
696 2.385550041488702 0.2799339898553572 0
697 0.8571984639029615 -0.8766287557024832 0
698 0.8766287557024837 0.8571984639029612 0
699 -0.8766287557024832 -0.8571984639029615 0
700 -0.8571984639029617 0.8766287557024836 0
701 -0.3427443725083569 -1.177196039967111 0
702 -1.177196039967111 0.3427443725083566 0
703 1.177196039967111 -0.3427443725083569 0
704 0.3427443725083562 1.177196039967111 0
705 0.1031963127262513 -1.215061261631289 0
706 -0.1031963127262517 1.215061261631289 0
707 -1.215061261631289 -0.1031963127262514 0
708 1.215061261631289 0.1031963127262511 0
709 -0.8277897550669098 -1.384393375098095 0
710 1.384393375098095 -0.8277897550669098 0
711 0.8277897550669091 1.384393375098094 0
712 -1.384393375098095 0.8277897550669091 0
713 -2.002881637552985 0.7438519453608967 0
714 -0.7438519453608964 -2.002881637552985 0
715 2.002881637552985 -0.7438519453608964 0
716 0.7438519453608962 2.002881637552985 0
717 -2.34036634483514 1.285331249813568 0
718 1.285331249813566 2.340366344835142 0
719 2.340366344835141 -1.285331249813567 0
720 -1.285331249813567 -2.340366344835141 0
721 -1.516685965117868 -2.203369753974076 0
722 2.203369753974076 -1.516685965117868 0
723 -2.203369753974074 1.516685965117867 0
724 1.516714318715661 2.203430951355264 0
725 1.536102207268726 -0.923369954841418 0
726 -0.923369954841418 -1.536102207268726 0
727 0.9233699548414167 1.536102207268726 0
728 -1.536102207268726 0.9233699548414168 0
729 0.130974444219368 2.391253713865673 0
730 -0.1309744442193668 -2.391253713865672 0
731 2.391253713865672 -0.130974444219367 0
732 -2.391253713865675 0.1309744442193677 0
733 -0.8509961717810947 1.41005700869085 0
734 1.41005700869085 0.8509961717810943 0
735 0.8509961717810945 -1.41005700869085 0
736 -1.41005700869085 -0.8509961717810948 0
737 -2.091023684642813 0.1351746882229345 0
738 -0.1351746882229333 -2.091023684642813 0
739 2.091023684642813 -0.1351746882229341 0
740 0.1351746882229344 2.091023684642813 0
741 -0.5737451753358231 -2.609753563289085 0
742 2.609753563289086 -0.5737451753358235 0
743 0.5737451753358231 2.609753563289085 0
744 -2.609753563289085 0.5737451753358253 0
745 2.028021771612793 1.736166002746963 0
746 -1.736166002746963 2.028021771612794 0
747 1.736166002746962 -2.028021771612794 0
748 -2.028021771612794 -1.736166002746962 0
749 2.218650834728337 -0.9881153101468644 0
750 -0.9881153101468644 -2.218650834728337 0
751 -2.218650834728338 0.9881153101468656 0
752 0.9881153101468638 2.218650834728338 0
753 -1.285001481722012 1.844174362746914 0
754 1.844174362746914 1.285001481722012 0
755 -1.844174362746916 -1.285001481722012 0
756 1.285001481722012 -1.844174362746916 0
757 0.6737925982995898 -2.178446070468747 0
758 2.178446070468745 0.6737925982995906 0
759 -0.6737925982995894 2.178446070468746 0
760 -2.178446070468746 -0.6737925982995897 0
761 0.08088004899161048 1.643642874593018 0
762 -1.643642874593017 0.08088004899161046 0
763 -0.08088004899161069 -1.643642874593018 0
764 1.643642874593019 -0.08088004899161104 0
765 -0.06438750148785369 1.382443923660533 0
766 0.06438750148785316 -1.382443923660534 0
767 -1.382443923660533 -0.06438750148785337 0
768 1.382443923660534 0.06438750148785281 0
769 -0.1913587100582936 -1.197202577941973 0
770 0.1913587100582933 1.197202577941973 0
771 -1.197202577941973 0.1913587100582937 0
772 1.197202577941973 -0.1913587100582938 0
773 -0.7333752696878981 0.9651701542848561 0
774 0.7333752696878981 -0.9651701542848562 0
775 0.9651701542848562 0.7333752696878979 0
776 -0.9651701542848559 -0.7333752696878982 0
777 -2.408389721145263 0.4530163522174304 0
778 2.408389721145261 -0.4530163522174296 0
779 -0.4530163522174297 -2.408389721145261 0
780 0.4530163522174296 2.408389721145262 0
781 -2.498581908750743 -0.07373655125073374 0
782 0.07373655125073128 -2.498581908750741 0
783 -0.07373655125073285 2.498581908750742 0
784 2.498581908750741 0.07373655125073347 0
785 2.236118014997845 1.10573093801823 0
786 1.10573093801823 -2.236118014997845 0
787 -1.10573093801823 2.236118014997846 0
788 -2.236118014997845 -1.105730938018229 0
789 1.100582816035951 0.5019200180764477 0
790 -1.10058281603595 -0.5019200180764479 0
791 0.5019200180764478 -1.10058281603595 0
792 -0.5019200180764475 1.10058281603595 0
793 -1.532614135659437 -0.9452732546352937 0
794 0.9452732546352922 -1.532614135659436 0
795 1.532614135659435 0.9452732546352931 0
796 -0.9452732546352927 1.532614135659435 0
797 -1.796888242918387 0.105027719409465 0
798 0.1050277194094652 1.796888242918387 0
799 1.796888242918387 -0.1050277194094656 0
800 -0.1050277194094656 -1.796888242918387 0
801 -1.009246465373401 1.988958298965895 0
802 -1.988958298965894 -1.009246465373399 0
803 1.989228510086806 1.010110059333651 0
804 1.010086093980729 -1.989121899562536 0
805 -1.869593209223271 1.569836225505085 0
806 1.569681193922607 1.869009857897701 0
807 -1.569681193922606 -1.869009857897701 0
808 1.869009857897701 -1.569681193922606 0
809 1.56785246523664 -0.6102804199822653 0
810 -0.6102804199822653 -1.56785246523664 0
811 -1.567852465236639 0.6102804199822641 0
812 0.6102804199822638 1.567852465236639 0
813 0.1445721819539576 1.395642391214063 0
814 -0.1445721819539579 -1.395642391214065 0
815 1.395642391214064 -0.1445721819539584 0
816 -1.395642391214063 0.1445721819539574 0
817 -1.097671449490502 1.277375462442802 0
818 1.277375462442802 1.097671449490502 0
819 1.0976714494905 -1.277375462442802 0
820 -1.277375462442802 -1.097671449490499 0
821 0.2297794034657544 2.246861307132634 0
822 -2.246861307132634 0.2297794034657541 0
823 -0.2297794034657525 -2.246861307132633 0
824 2.246861307132632 -0.2297794034657536 0
825 1.203954825588893 2.216413959606293 0
826 -1.203954825588895 -2.216413959606293 0
827 2.216413959606293 -1.203954825588895 0
828 -2.216413959606293 1.203954825588895 0
829 1.457459979952927 -1.121464668508624 0
830 -1.121464668508624 -1.457459979952927 0
831 1.121464668508623 1.457459979952929 0
832 -1.457459979952928 1.121464668508622 0
833 -0.4170925430589985 2.307483117289914 0
834 2.307483117289918 0.4170925430589982 0
835 -2.307483117289913 -0.4170925430589976 0
836 0.417092543058999 -2.307483117289912 0
837 -1.150926301521933 -0.7914933401273025 0
838 0.7914933401273022 -1.150926301521934 0
839 1.150926301521934 0.7914933401273022 0
840 -0.7914933401273029 1.150926301521934 0
841 -2.223775211720543 -0.04603738240435318 0
842 -0.04603738240435356 2.223775211720541 0
843 2.223775211720543 0.04603738240435284 0
844 0.04603738240435243 -2.223775211720542 0
845 -2.101947988691327 -1.357230219374117 0
846 -1.357230219374116 2.101947988691326 0
847 2.101947988691326 1.357230219374116 0
848 1.357230219374118 -2.101947988691327 0
849 -1.365660259005215 -1.867576476239239 0
850 -1.867576476239239 1.365660259005215 0
851 1.867576476239239 -1.365660259005215 0
852 1.365660259005214 1.867576476239239 0
853 -1.959186987911725 1.098566525490842 0
854 1.098566525490842 1.959186987911726 0
855 -1.098566525490842 -1.959186987911727 0
856 1.959186987911726 -1.098566525490842 0
857 1.229735560820142 0.6169222847165402 0
858 -0.6169222847165401 1.229735560820141 0
859 -1.229735560820141 -0.6169222847165399 0
860 0.6169222847165401 -1.229735560820141 0
861 -1.348761814824829 -2.07062169208321 0
862 2.07062169208321 -1.348761814824829 0
863 -2.070621692083209 1.34876181482483 0
864 1.348655070532063 2.070644686087987 0
865 0.7946201350159829 -1.87577043679292 0
866 -1.87577043679292 -0.7946201350159834 0
867 1.87577043679292 0.7946201350159822 0
868 -0.7946201350159812 1.875770436792919 0
869 1.713239087431581 1.578221777297354 0
870 1.578221777297354 -1.713239087431583 0
871 -1.713239087431583 -1.578221777297355 0
872 -1.578221777297354 1.713239087431581 0
873 -1.410229931845532 1.573243455049087 0
874 1.573243455049087 1.410229931845533 0
875 1.410229931845534 -1.573243455049087 0
876 -1.573243455049087 -1.410229931845535 0
877 -1.345637609593555 2.303174565190744 0
878 -2.303174565190744 -1.345637609593554 0
879 1.345637609593556 -2.303174565190744 0
880 2.303174565190745 1.345637609593555 0
881 -2.012737002123012 -0.2240613203607505 0
882 -0.2240613203607503 2.012737002123012 0
883 2.012737002123013 0.2240613203607529 0
884 0.2240613203607516 -2.012737002123012 0
885 0.9654813942992374 -0.7172338930585005 0
886 -0.9654813942992378 0.7172338930585004 0
887 0.7172338930585004 0.9654813942992377 0
888 -0.7172338930585005 -0.9654813942992374 0
889 -1.087667041708258 0.5133776410785454 0
890 0.5133776410785452 1.087667041708257 0
891 1.087667041708258 -0.5133776410785453 0
892 -0.5133776410785451 -1.087667041708258 0
893 2.691708742805066 -0.07759499124033603 0
894 0.07759499124033491 2.691708742805067 0
895 -2.691708742805065 0.0775949912403367 0
896 -0.07759499124033895 -2.691708742805065 0
897 2.04763592813122 -1.737876244000317 0
898 -1.737876244000317 -2.04763592813122 0
899 1.73777458276911 2.04765782718339 0
900 -2.04763592813122 1.737876244000318 0
901 2.62394460207905 0.5248263703868525 0
902 -0.5248068597734844 2.623962997842394 0
903 0.524806859773485 -2.623962997842394 0
904 -2.623944602079049 -0.5248263703868538 0
905 0.3180972460193598 2.000566109507401 0
906 -2.000566109507401 0.3180972460193598 0
907 2.000566109507402 -0.3180972460193601 0
908 -0.3180972460193597 -2.000566109507402 0
909 -1.030491357297782 1.802351034848545 0
910 -1.802351034848546 -1.030491357297782 0
911 1.802295027376901 1.03077036422023 0
912 1.030491357297784 -1.802351034848546 0
913 -2.361539860950286 0.01977790668992456 0
914 0.01977790668992548 2.361539860950282 0
915 2.361539860950283 -0.01977790668992473 0
916 -0.01977790668992577 -2.361539860950282 0
917 2.580051878230914 0.746916691338248 0
918 -0.7468939289559847 2.580073339954815 0
919 0.7468939289559837 -2.580073339954814 0
920 -2.580051878230913 -0.7469166913382467 0
921 0.7168203902268818 -1.425340750250714 0
922 -1.425340750250714 -0.7168203902268824 0
923 1.425340750250713 0.7168203902268809 0
924 -0.7168203902268812 1.425340750250713 0
925 -0.0672922976923295 1.593097173027989 0
926 0.06729229769232942 -1.593097173027989 0
927 -1.593097173027988 -0.06729229769232931 0
928 1.593097173027989 0.06729229769232924 0
929 2.506375447607131 -0.2390550986495251 0
930 -0.2390550986495245 -2.50637544760713 0
931 0.2390550986495272 2.506375447607132 0
932 -2.506375447607132 0.2390550986495273 0
933 1.906056629440223 0.3758586042132868 0
934 -0.3758586042132857 1.90605662944022 0
935 0.3758586042132864 -1.906056629440221 0
936 -1.906577835994048 -0.3759705122160754 0
937 -1.760691185204382 0.925634681401918 0
938 1.760691185204383 -0.9256346814019193 0
939 -0.9256346814019193 -1.760691185204383 0
940 0.9256346814019174 1.760691185204382 0
941 2.248397260352407 0.9480315173065971 0
942 -0.9480315173065984 2.248397260352408 0
943 0.9480315173065981 -2.248397260352407 0
944 -2.248397260352407 -0.9480315173065961 0
945 0.8297814757107272 2.212221389246555 0
946 -2.212221389246556 0.829781475710729 0
947 2.212221389246556 -0.8297814757107269 0
948 -0.829781475710727 -2.212221389246556 0
949 -0.5775378567914371 -2.318479359224879 0
950 0.5775378567914367 2.318479359224879 0
951 -2.318479359224878 0.5775378567914391 0
952 2.318479359224879 -0.577537856791437 0
953 -2.045917188451269 0.9719716473524319 0
954 2.04591718845127 -0.9719716473524315 0
955 -0.9719716473524315 -2.04591718845127 0
956 0.9719716473524309 2.045917188451269 0
957 0.1787262047596423 -2.210712060736624 0
958 -2.210712060736622 -0.1787262047596423 0
959 2.210712060736624 0.1787262047596424 0
960 -0.1787262047596413 2.210712060736622 0
961 1.132799958107568 0.9981281271459083 0
962 -0.9981281271459087 1.132799958107567 0
963 0.9981281271459087 -1.132799958107568 0
964 -1.132799958107567 -0.998128127145909 0
965 0.02566276407926106 2.058034944163709 0
966 2.058034944163708 -0.0256627640792607 0
967 -0.02566276407926038 -2.058034944163709 0
968 -2.058034944163709 0.02566276407926144 0
969 -1.146134816627675 1.424183814011878 0
970 1.424183814011878 1.146134816627675 0
971 -1.424183814011878 -1.146134816627672 0
972 1.146134816627672 -1.424183814011877 0
973 -1.993461465326295 -1.247475993274971 0
974 1.993482910653348 1.247544532478165 0
975 -1.24747599327497 1.993461465326293 0
976 1.247475993274971 -1.993461465326295 0
977 -0.6402690207377707 2.01575233442734 0
978 2.015752334427342 0.6402690207377708 0
979 0.6402690207377718 -2.015752334427342 0
980 -2.015752334427342 -0.6402690207377713 0
981 -0.6805182130180418 -1.689590112610622 0
982 1.689590112610622 -0.6805182130180418 0
983 -1.68959011261062 0.6805182130180405 0
984 0.6805182130180405 1.689590112610621 0
985 -1.655680788625992 -0.6882111000769126 0
986 0.688211100076912 -1.655680788625993 0
987 -0.6882111000769126 1.655680788625993 0
988 1.655680788625992 0.6882111000769117 0
989 1.795278802937794 0.1755425186305736 0
990 0.1755425186305737 -1.795278802937794 0
991 -1.795278802937794 -0.175542518630573 0
992 -0.175542518630573 1.795278802937794 0
993 0.7733851042580193 1.125729797529821 0
994 -1.125729797529821 0.7733851042580193 0
995 1.125729797529821 -0.7733851042580193 0
996 -0.7733851042580194 -1.125729797529821 0
997 0.6283476001344543 1.212658613133879 0
998 -1.212658613133879 0.6283476001344543 0
999 1.212658613133879 -0.6283476001344545 0
1000 -0.6283476001344543 -1.212658613133879 0
1001 1.454311088354328 0.2639935548709549 0
1002 0.2639935548709553 -1.454311088354327 0
1003 -0.2639935548709566 1.454311088354326 0
1004 -1.454311088354326 -0.2639935548709554 0
1005 -1.93104503953588 0.8438879692952632 0
1006 1.93104503953588 -0.8438879692952629 0
1007 -0.8438879692952629 -1.93104503953588 0
1008 0.8438879692952623 1.93104503953588 0
1009 1.399948045993642 2.298050682831681 0
1010 2.29805068283168 -1.399948045993644 0
1011 -1.399948045993643 -2.298050682831679 0
1012 -2.298050682831679 1.399948045993643 0
1013 2.048807792359195 0.88608817713678 0
1014 -0.8860881771367796 2.048807792359195 0
1015 -2.048807792359194 -0.8860881771367792 0
1016 0.8860881771367808 -2.048807792359195 0
1017 -0.1327070534975573 -1.552080107323 0
1018 0.1327070534975565 1.552080107323 0
1019 1.552080107323001 -0.1327070534975575 0
1020 -1.552080107322999 0.1327070534975567 0
1021 1.241428603023903 2.08300952786981 0
1022 -2.083006462002507 1.241442835596272 0
1023 -1.241442835596271 -2.083006462002507 0
1024 2.083006462002507 -1.241442835596271 0
1025 0.9067356327502077 2.544753768228094 0
1026 -2.544749764389332 0.906542146820057 0
1027 -0.9078444817730857 -2.543536936226645 0
1028 2.543536936226645 -0.9078444817730854 0
1029 -2.462991978186953 -1.107195374330114 0
1030 1.107195374330114 -2.462991978186954 0
1031 2.462991978186953 1.107195374330115 0
1032 -1.106942521160514 2.463186555466268 0
1033 0.6964136252800763 2.603953224553369 0
1034 2.60395322455337 -0.6964136252800766 0
1035 -2.60395322455337 0.6964136252800777 0
1036 -0.6964136252800768 -2.603953224553369 0
1037 -2.415828313570409 -0.63611978328373 0
1038 2.415828313570408 0.6361197832837308 0
1039 0.6360735308501685 -2.416288907629602 0
1040 -0.6360710213781353 2.415543964576521 0
1041 -2.686167787340512 0.3534586963306833 0
1042 2.686167787340512 -0.3534586963306827 0
1043 -0.3534586963306826 -2.686167787340512 0
1044 0.3534586963306837 2.686167787340512 0
1045 1.989642922675664 -0.1985642030748658 0
1046 -0.198564203074865 -1.989642922675664 0
1047 0.1985642030748659 1.989642922675664 0
1048 -1.989642922675664 0.1985642030748659 0
1049 1.37515587865318 -1.360928703034476 0
1050 -1.360928703034475 -1.375155878653179 0
1051 -1.375155878653181 1.360928703034472 0
1052 1.360928703034473 1.375155878653181 0
1053 2.717159482582483 0.2520106938091778 0
1054 -0.2520106938091787 2.717159482582483 0
1055 -2.717159482582484 -0.252010693809178 0
1056 0.2520106938091777 -2.717159482582484 0
1057 -1.27122843998551 1.032723135072534 0
1058 1.271228439985509 -1.032723135072537 0
1059 -1.032723135072536 -1.271228439985509 0
1060 1.032723135072535 1.271228439985509 0
1061 -2.206176627425091 -1.581793193894379 0
1062 -1.581793193894379 2.20617662742509 0
1063 1.581793193894378 -2.206176627425091 0
1064 2.20617662742509 1.58179319389438 0
1065 1.547440227927862 -1.025467194513634 0
1066 -1.025467194513634 -1.547440227927862 0
1067 -1.547440227927863 1.025467194513633 0
1068 1.025467194513634 1.547440227927864 0
1069 1.460768376041804 2.077436958748288 0
1070 -2.077161030690946 1.462049307555013 0
1071 -1.462049307555013 -2.077161030690949 0
1072 2.077161030690948 -1.462049307555013 0
1073 0.8828754641925679 -2.350201280178498 0
1074 2.350201280178498 0.882875464192569 0
1075 -0.8828754641925692 2.350201280178499 0
1076 -2.350201280178497 -0.8828754641925666 0
1077 -2.462394437005892 1.133028711880727 0
1078 2.462394437005893 -1.133028711880725 0
1079 -1.133028711880725 -2.462394437005893 0
1080 1.133028711880726 2.462394437005893 0
1081 1.970368142622447 1.508163389778338 0
1082 -1.508163389778338 1.970368142622448 0
1083 -1.97036814262245 -1.508163389778338 0
1084 1.508163389778338 -1.970368142622448 0
1085 0.1836262543436862 -2.459368569476436 0
1086 -2.459368569476437 -0.1836262543436851 0
1087 -0.1836262543436858 2.459368569476437 0
1088 2.459368569476437 0.1836262543436852 0
1089 0.3265714883612079 -2.504863603650714 0
1090 -2.504863603650715 -0.3265714883612069 0
1091 2.504863603650715 0.3265714883612063 0
1092 -0.3265714883612065 2.504863603650714 0
1093 -1.638850149831504 -1.28203443601774 0
1094 1.28203443601774 -1.638850149831504 0
1095 -1.282034436017737 1.638850149831502 0
1096 1.638850149831501 1.282034436017738 0
1097 0.4961043261430246 -1.361089449714577 0
1098 -1.361089449714576 -0.4961043261430246 0
1099 -0.4961043261430248 1.361089449714576 0
1100 1.361089449714577 0.4961043261430239 0
1101 2.180704671424795 0.4514984910689198 0
1102 -2.180704671424792 -0.4514984910689189 0
1103 -0.4514984910689195 2.180704671424794 0
1104 0.4514984910689189 -2.180704671424791 0
1105 -0.1423832277629009 1.669009455368157 0
1106 -1.669009455368156 -0.1423832277629002 0
1107 0.1423832277629012 -1.669009455368157 0
1108 1.669009455368157 0.142383227762901 0
1109 0.6352218913250951 -1.551314622919318 0
1110 -1.551314622919318 -0.6352218913250954 0
1111 1.551314622919316 0.6352218913250938 0
1112 -0.6352218913250947 1.551314622919316 0
1113 0.9091669153262665 1.304786598094366 0
1114 -1.304786598094366 0.9091669153262665 0
1115 -0.9091669153262669 -1.304786598094366 0
1116 1.304786598094366 -0.9091669153262671 0
1117 1.8134228143254 1.778177731278781 0
1118 -1.77817773127878 1.813422814325402 0
1119 1.778177731278779 -1.813422814325402 0
1120 -1.813422814325403 -1.778177731278779 0
1121 -1.873277974306262 -1.970102534481861 0
1122 -1.970102534481861 1.873277974306262 0
1123 1.970102534481861 -1.873277974306262 0
1124 1.873276898526037 1.970102766217863 0
1125 -0.7228550066041997 -1.41952283144267 0
1126 1.41952283144267 -0.7228550066041997 0
1127 0.7228550066041993 1.41952283144267 0
1128 -1.41952283144267 0.7228550066041993 0
1129 -2.52618537236823 -0.9819859823098933 0
1130 2.526185372368232 0.9819859823098958 0
1131 -0.9819859823098955 2.52618537236823 0
1132 0.9819859823098951 -2.526185372368232 0
1133 -1.704991667081182 1.587492188544921 0
1134 -1.587492188544922 -1.704991667081182 0
1135 1.704991667081183 -1.587492188544922 0
1136 1.587492188544919 1.70499166708118 0
1137 -1.395199689841402 1.841731409122849 0
1138 1.841731409122848 1.395199689841402 0
1139 -1.84173140912285 -1.395199689841404 0
1140 1.395199689841404 -1.84173140912285 0
1141 -1.483264792367014 -0.4601094700378755 0
1142 0.4601094700378755 -1.483264792367015 0
1143 1.483264792367014 0.4601094700378756 0
1144 -0.4601094700378764 1.483264792367014 0
1145 -1.097733544205205 -0.3922713905524549 0
1146 0.3922713905524549 -1.097733544205205 0
1147 1.097733544205205 0.3922713905524549 0
1148 -0.392271390552455 1.097733544205205 0
1149 -1.681277522000306 -0.3835573208457631 0
1150 -0.3835573208457645 1.681277522000306 0
1151 0.3835573208457647 -1.681277522000306 0
1152 1.681277522000306 0.383557320845764 0
1153 0.6209445890514186 -1.357961530589892 0
1154 -1.357961530589892 -0.6209445890514187 0
1155 -0.6209445890514187 1.357961530589892 0
1156 1.357961530589892 0.6209445890514187 0
1157 1.753667511164842 0.5610346742894123 0
1158 -0.5610346742894136 1.753667511164843 0
1159 -1.753667511164843 -0.5610346742894132 0
1160 0.5610346742894132 -1.753667511164844 0
1161 -0.8653400472728091 1.606433797028741 0
1162 1.606433797028741 0.8653400472728091 0
1163 0.8653400472728103 -1.606433797028742 0
1164 -1.606433797028742 -0.8653400472728108 0
1165 -0.2020110810480042 1.153798956608616 0
1166 1.153798956608616 0.2020110810480035 0
1167 -1.153798956608616 -0.2020110810480036 0
1168 0.2020110810480037 -1.153798956608616 0
1169 -0.3605667236243067 -2.22030977523864 0
1170 2.220309775238638 -0.3605667236243078 0
1171 0.3610990285868907 2.220793330401988 0
1172 -2.22030977523864 0.3605667236243074 0
1173 2.322846567390259 -1.004903729797087 0
1174 -1.004903729797087 -2.322846567390259 0
1175 -2.322581053920632 1.005949692669804 0
1176 1.005949692669803 2.322581053920632 0
1177 1.571615097622769 -1.270677239229424 0
1178 -1.270677239229423 -1.571615097622769 0
1179 -1.57161509762277 1.27067723922942 0
1180 1.27067723922942 1.571615097622769 0
1181 -0.4781267191425541 -2.674642193871943 0
1182 2.674642193871943 -0.4781267191425546 0
1183 0.4781267191425546 2.674642193871942 0
1184 -2.674642193871942 0.4781267191425566 0
1185 0.5306849514664778 1.828992089911581 0
1186 -1.828992089911581 0.5306849514664771 0
1187 -0.5306849514664764 -1.828992089911582 0
1188 1.828992089911582 -0.5306849514664764 0
1189 -0.05657362312742401 -1.14479375827994 0
1190 -1.14479375827994 0.05657362312742383 0
1191 1.14479375827994 -0.05657362312742416 0
1192 0.05657362312742404 1.14479375827994 0
1193 -0.5862955732603798 0.9813391646999684 0
1194 0.9813391646999684 0.5862955732603798 0
1195 -0.9813391646999681 -0.5862955732603797 0
1196 0.5862955732603798 -0.9813391646999682 0
1197 -0.06571847005320124 1.491518791008983 0
1198 1.491518791008984 0.06571847005320113 0
1199 -1.491518791008983 -0.06571847005320121 0
1200 0.06571847005320115 -1.491518791008984 0
1201 -1.597618184255965 -0.2992074152640642 0
1202 1.597618184255966 0.299207415264065 0
1203 -0.299207415264066 1.597618184255965 0
1204 0.2992074152640657 -1.597618184255965 0
1205 0.3660282850442145 1.589067944008375 0
1206 -1.589067944008375 0.3660282850442143 0
1207 1.589067944008375 -0.366028285044215 0
1208 -0.3660282850442154 -1.589067944008375 0
1209 0.5415099858411829 2.160896769293446 0
1210 -2.160896769293445 0.5415099858411843 0
1211 2.160896769293445 -0.5415099858411848 0
1212 -0.5415099858411849 -2.160896769293446 0
1213 1.805379892746716 0.3431080014147921 0
1214 -1.805429531466127 -0.3431186593198191 0
1215 -0.3431080014147919 1.805379892746715 0
1216 0.343108001414793 -1.805379892746715 0
1217 1.926560444090813 0.6569618365845866 0
1218 0.656961836584588 -1.926560444090813 0
1219 -1.926560444090814 -0.6569618365845883 0
1220 -0.6569618365845862 1.926560444090812 0
1221 -0.3564155019682926 -1.807590359134752 0
1222 1.807590359134752 -0.3564155019682927 0
1223 -1.807590359134752 0.3564155019682932 0
1224 0.3564155019682931 1.807590359134752 0
1225 1.219951074912467 1.835372253371399 0
1226 -1.835372253371398 1.219951074912468 0
1227 -1.21995107491247 -1.835372253371397 0
1228 1.835372253371397 -1.21995107491247 0
1229 -0.7822782163726794 -2.394193447472609 0
1230 2.394193447472607 -0.7822782163726794 0
1231 0.7822782163726807 2.394193447472609 0
1232 -2.39420887927646 0.7822271275971533 0
1233 -2.125927252332312 -1.679796230838425 0
1234 -1.679796230838425 2.125927252332313 0
1235 2.125927252332312 1.679796230838424 0
1236 1.679796230838425 -2.125927252332312 0
1237 -1.479846335499759 1.657445077843692 0
1238 1.657445077843692 1.479846335499758 0
1239 1.47984633549976 -1.657445077843693 0
1240 -1.657445077843694 -1.47984633549976 0
1241 -2.121719800073169 0.7625348334610306 0
1242 0.7625348334610297 2.121719800073167 0
1243 2.121719800073168 -0.7625348334610292 0
1244 -0.7625348334610293 -2.121719800073168 0
1245 -1.595478963380246 -1.19175516585003 0
1246 1.191755165850032 -1.595478963380246 0
1247 1.595478963380244 1.19175516585003 0
1248 -1.191755165850029 1.595478963380245 0
1249 -0.000962551640417504 -1.832645994829807 0
1250 1.832645994829807 -0.0009625516404177538 0
1251 -1.832645994829807 0.000962551640417434 0
1252 0.0009625516404178226 1.832645994829807 0
1253 0.3194913918173798 -1.292614516698125 0
1254 -0.3194913918173808 1.292614516698125 0
1255 1.292614516698125 0.3194913918173795 0
1256 -1.292614516698125 -0.3194913918173797 0
1257 -0.4757243399782728 2.016527220427597 0
1258 0.4757243399782728 -2.016527220427597 0
1259 -2.016535502073765 -0.4755951430339608 0
1260 2.016527220427598 0.4757243399782706 0
1261 -2.043859318610513 0.5869704654021981 0
1262 0.5869704654021978 2.043859318610513 0
1263 -0.5869704654021989 -2.043859318610513 0
1264 2.043859318610513 -0.5869704654021989 0
1265 -1.480577781977159 2.075545139547617 0
1266 2.075545139547616 1.48057778197716 0
1267 -2.07554513954762 -1.48057778197716 0
1268 1.48057778197716 -2.075545139547619 0
1269 2.482431517029128 -0.3327779852944459 0
1270 -0.3327779852944461 -2.482431517029128 0
1271 -2.482431517029129 0.3327779852944479 0
1272 0.332777985294448 2.482431517029129 0
1273 1.968752463691929 1.621414131044845 0
1274 1.621414131044845 -1.968752463691931 0
1275 -1.621414131044845 1.96875246369193 0
1276 -1.968752463691932 -1.621414131044846 0
1277 -1.755970056849662 -0.9278105940092196 0
1278 -0.9278105940092176 1.755970056849661 0
1279 0.9278105940092201 -1.755970056849663 0
1280 1.756239006678394 0.9272913943013541 0
1281 -0.3911641728758332 -1.47169284141218 0
1282 1.47169284141218 -0.3911641728758331 0
1283 -1.47169284141218 0.3911641728758323 0
1284 0.3911641728758321 1.47169284141218 0
1285 1.571628258931478 1.965145395521116 0
1286 -1.965682197595991 1.571863046255826 0
1287 1.965126624904971 -1.571715397129656 0
1288 -1.571715397129656 -1.965126624904971 0
1289 2.478375941234466 0.7287419948890664 0
1290 -2.478375941234466 -0.7287419948890653 0
1291 0.7287115641939322 -2.478450964712044 0
1292 -0.7287112853637078 2.478368193261703 0
1293 2.505720513370226 -0.5136358225754343 0
1294 0.5136358225754348 2.505720513370226 0
1295 -0.5136358225754344 -2.505720513370225 0
1296 -2.505720513370227 0.5136358225754363 0
1297 0.961965423565957 -0.9249922050496311 0
1298 -0.9249922050496308 -0.961965423565957 0
1299 0.9249922050496314 0.9619654235659567 0
1300 -0.9619654235659573 0.9249922050496308 0
1301 0.4119870748778099 1.270905419999534 0
1302 -1.270905419999534 0.4119870748778102 0
1303 1.270905419999533 -0.4119870748778108 0
1304 -0.4119870748778108 -1.270905419999533 0
1305 1.48635688669805 1.646488895529344 0
1306 -1.646488895529347 1.48635688669805 0
1307 -1.486356886698052 -1.646488895529347 0
1308 1.646488895529348 -1.486356886698052 0
1309 -2.165322746289001 0.04130542508277145 0
1310 2.165322746289001 -0.04130542508277125 0
1311 -0.04130542508277073 -2.165322746289001 0
1312 0.04130542508277032 2.165322746289 0
1313 1.22565014534202 -1.214060783592452 0
1314 -1.214060783592451 -1.225650145342019 0
1315 -1.225650145342022 1.214060783592449 0
1316 1.214060783592449 1.225650145342021 0
1317 0.4929943562323536 1.644650216681887 0
1318 -1.644650216681887 0.4929943562323532 0
1319 1.644650216681887 -0.4929943562323534 0
1320 -0.4929943562323535 -1.644650216681887 0
1321 1.83600220940804 -2.012358841986072 0
1322 2.01235884198607 1.836002209408042 0
1323 -2.012358841986072 -1.83600220940804 0
1324 -1.836002209408042 2.012358841986071 0
1325 -2.181868069355372 1.626337928838873 0
1326 -1.626337928838872 -2.181868069355373 0
1327 2.181868069355373 -1.626337928838872 0
1328 1.626278154112851 2.181945900301301 0
1329 -0.5245158939968197 2.51730774961 0
1330 2.517284243912394 0.5245408242250136 0
1331 -2.517284243912394 -0.5245408242250154 0
1332 0.524515893996822 -2.517307749610001 0
1333 -1.108461044347469 -1.696325373346876 0
1334 1.696325373346876 -1.108461044347468 0
1335 1.108461044347465 1.696325373346876 0
1336 -1.696325373346876 1.108461044347465 0
1337 -0.8472131584379058 1.955408310828185 0
1338 1.955408310828185 0.8472131584379068 0
1339 0.8472131584379073 -1.955408310828185 0
1340 -1.955408310828185 -0.8472131584379072 0
1341 2.656278386085764 0.6570753823948348 0
1342 -0.6570518457818819 2.656300577800275 0
1343 0.6570518457818819 -2.656300577800274 0
1344 -2.656278386085764 -0.6570753823948345 0
1345 -1.298812648602494 2.395678002179724 0
1346 -2.395739265050778 -1.298693269148228 0
1347 1.29869326914823 -2.395739265050779 0
1348 2.395739265050779 1.298693269148229 0
1349 -1.102537540713313 -2.241659668549097 0
1350 2.241659668549097 -1.102537540713313 0
1351 1.102637156225 2.241634381551991 0
1352 -2.241634381551991 1.102637156225001 0
1353 -0.6481851268402651 -1.809712553727201 0
1354 1.809712553727201 -0.6481851268402651 0
1355 -1.8097125537272 0.6481851268402652 0
1356 0.6481851268402653 1.8097125537272 0
1357 2.288382691590976 0.6720576461481198 0
1358 -2.288382691590977 -0.6720576461481186 0
1359 -0.672052486158109 2.288352601750355 0
1360 0.6720304787721817 -2.288448019415755 0
1361 0.1414233626525115 -2.730597330425367 0
1362 -0.1414233626525139 2.730597330425367 0
1363 -2.730597330425367 -0.1414233626525128 0
1364 2.730597330425367 0.1414233626525128 0
1365 -1.004541793926466 1.281931015760291 0
1366 1.281931015760291 1.004541793926466 0
1367 1.004541793926465 -1.281931015760291 0
1368 -1.281931015760292 -1.004541793926465 0
1369 0.7631156922801829 0.8608504992233355 0
1370 -0.8608504992233357 0.7631156922801827 0
1371 0.8608504992233353 -0.7631156922801826 0
1372 -0.7631156922801826 -0.8608504992233353 0
1373 -1.078809064941376 0.3994736900703575 0
1374 0.3994736900703573 1.078809064941375 0
1375 1.078809064941375 -0.3994736900703578 0
1376 -0.3994736900703577 -1.078809064941376 0
1377 -0.8328994209991984 1.31461086057748 0
1378 -1.314610860577479 -0.8328994209991979 0
1379 0.8328994209991977 -1.31461086057748 0
1380 1.314610860577479 0.8328994209991973 0
1381 -1.249027380595167 -1.340352319357923 0
1382 1.249027380595164 1.340352319357926 0
1383 1.340352319357924 -1.249027380595167 0
1384 -1.340352319357926 1.249027380595163 0
1385 0.1630997106777445 2.725869315860066 0
1386 -2.725869315860065 0.1630997106777452 0
1387 2.725869315860066 -0.1630997106777446 0
1388 -0.1630997106777458 -2.725869315860066 0
1389 2.325824093646889 -0.3908630921993995 0
1390 -0.3908630921993993 -2.325824093646889 0
1391 -2.32582409364689 0.390863092199399 0
1392 0.3902247319627778 2.32572334405457 0
1393 1.499797922879485 -1.369599335619881 0
1394 -1.369599335619881 -1.499797922879484 0
1395 -1.499797922879485 1.369599335619878 0
1396 1.369599335619879 1.499797922879484 0
1397 -1.417082775405064 -1.262489010730607 0
1398 1.262489010730608 -1.417082775405064 0
1399 1.417082775405063 1.26248901073061 0
1400 -1.262489010730609 1.417082775405062 0
1401 -1.486417568128057 0.5548803308050068 0
1402 -0.5548803308050064 -1.486417568128057 0
1403 1.486417568128057 -0.5548803308050066 0
1404 0.554880330805006 1.486417568128057 0
1405 1.13950798273038 -1.031288143787089 0
1406 1.031288143787088 1.13950798273038 0
1407 -1.031288143787089 -1.13950798273038 0
1408 -1.13950798273038 1.031288143787088 0
1409 -0.9227343151716774 -1.079244323841555 0
1410 1.079244323841555 -0.9227343151716778 0
1411 0.9227343151716774 1.079244323841555 0
1412 -1.079244323841555 0.9227343151716769 0
1413 0.5175032001694908 1.317994097516644 0
1414 -1.317994097516644 0.5175032001694914 0
1415 1.317994097516643 -0.5175032001694916 0
1416 -0.517503200169491 -1.317994097516643 0
1417 1.374664055029534 1.713396718230667 0
1418 -1.713396718230667 1.374664055029535 0
1419 -1.374664055029538 -1.713396718230666 0
1420 1.713396718230667 -1.374664055029538 0
1421 1.645769035291846 1.102684366894583 0
1422 1.102684366894584 -1.645769035291848 0
1423 -1.645769035291848 -1.102684366894584 0
1424 -1.102684366894582 1.645769035291847 0
1425 -2.417692143668042 -0.5369853766880479 0
1426 -0.5369765866743478 2.417659650598158 0
1427 2.41769214366804 0.5369853766880479 0
1428 0.5369509113907682 -2.417770971207792 0
1429 -0.9796680458029937 0.5871906320835899 0
1430 -0.5871906320835896 -0.9796680458029934 0
1431 0.5871906320835896 0.9796680458029934 0
1432 0.9796680458029934 -0.5871906320835898 0
1433 2.434056486391789 -1.249385665674417 0
1434 -1.249385665674417 -2.434056486391789 0
1435 1.248838822798919 2.436086509715402 0
1436 -2.434056486391788 1.249385665674418 0
1437 -0.1748444648431988 1.427565148643636 0
1438 0.1748444648431981 -1.427565148643636 0
1439 1.427565148643636 0.1748444648431973 0
1440 -1.427565148643636 -0.1748444648431977 0
1441 1.205836336718097 -0.8372722320693995 0
1442 -0.8372722320693994 -1.205836336718096 0
1443 0.8372722320693994 1.205836336718097 0
1444 -1.205836336718097 0.8372722320693992 0
1445 -1.308680557032789 0.6694318562146078 0
1446 1.308680557032789 -0.669431856214608 0
1447 0.669431856214608 1.308680557032789 0
1448 -0.6694318562146077 -1.308680557032789 0
1449 0.7573265672108023 -2.131836325546196 0
1450 -0.7573265672108003 2.131836325546196 0
1451 -2.131836325546196 -0.7573265672108017 0
1452 2.131836325546195 0.7573265672108023 0
1453 0.04073559101238917 1.381197067079789 0
1454 -0.04073559101238947 -1.38119706707979 0
1455 1.38119706707979 -0.04073559101238985 0
1456 -1.381197067079789 0.04073559101238888 0
1457 2.011823602243013 0.1337869288961384 0
1458 -2.011823602243014 -0.1337869288961352 0
1459 0.1337869288961363 -2.011823602243015 0
1460 -0.1337869288961351 2.011823602243015 0
1461 -0.4265487322647867 -2.147316097784688 0
1462 -2.147316097784687 0.4265487322647865 0
1463 0.426607877260628 2.147369826136169 0
1464 2.147316097784687 -0.4265487322647868 0
1465 0.184208430094119 1.299807567271254 0
1466 1.299807567271254 -0.1842084300941196 0
1467 -0.1842084300941191 -1.299807567271255 0
1468 -1.299807567271254 0.1842084300941191 0
1469 1.803427123741751 1.142018458923341 0
1470 -1.80343311985948 -1.141986732871607 0
1471 -1.141986732871607 1.803433119859479 0
1472 1.14198673287161 -1.803433119859481 0
1473 -0.2897818242791069 2.102512936839362 0
1474 -2.102512936839362 -0.2897818242791073 0
1475 0.289781824279108 -2.102512936839362 0
1476 2.102512936839362 0.2897818242791084 0
1477 0.0297504233544925 2.466182742227863 0
1478 -0.02975042335449339 -2.466182742227862 0
1479 -2.466182742227866 0.02975042335449133 0
1480 2.466182742227863 -0.02975042335449137 0
1481 -0.222605633824453 2.293496600623874 0
1482 -2.293496600623874 -0.2226056338244522 0
1483 2.293496600623876 0.2226056338244524 0
1484 0.2226056338244533 -2.293496600623875 0
1485 1.745346001411046 1.302917991713286 0
1486 -1.302917991713286 1.745346001411046 0
1487 1.302917991713288 -1.745346001411048 0
1488 -1.745346001411048 -1.302917991713289 0
1489 -0.5038125733348142 -1.956336404733326 0
1490 1.956336404733325 -0.5038125733348139 0
1491 0.503812573334814 1.956336404733324 0
1492 -1.956336404733324 0.5038125733348139 0
1493 1.267675017575121 -2.110470752018177 0
1494 -2.110470752018177 -1.26767501757512 0
1495 2.110491176139183 1.267740293006733 0
1496 -1.26767501757512 2.110470752018177 0
1497 -0.2392623909713661 -1.405878701811296 0
1498 1.405878701811296 -0.2392623909713664 0
1499 -1.405878701811296 0.2392623909713657 0
1500 0.2392623909713655 1.405878701811295 0
1501 -2.461743957383608 0.6995992919350724 0
1502 0.6996645720371362 2.461724238967577 0
1503 2.461724238967577 -0.6996645720371359 0
1504 -0.6996645720371362 -2.461724238967578 0
1505 -1.705797239546573 -2.125214088712701 0
1506 1.705653721274828 2.125253664908385 0
1507 2.125214088712701 -1.705797239546573 0
1508 -2.125214088712701 1.705797239546574 0
1509 1.087900980719107 -2.344974019488307 0
1510 -2.344974019488307 -1.087900980719106 0
1511 2.344974019488307 1.087900980719107 0
1512 -1.087996278919125 2.344931287786713 0
1513 2.208288709165116 0.5695527936309641 0
1514 -2.208288709165115 -0.5695527936309626 0
1515 0.569527443879562 -2.208316392586615 0
1516 -0.5695517862043423 2.208282834481948 0
1517 1.469354463773053 1.84619396211532 0
1518 -1.846749534806339 1.469502112899222 0
1519 -1.469354463773052 -1.846193962115319 0
1520 1.846676423559807 -1.469417336674133 0
1521 1.048693502397267 0.7584875033866956 0
1522 0.7584875033866956 -1.048693502397266 0
1523 -1.048693502397266 -0.7584875033866957 0
1524 -0.7584875033866957 1.048693502397266 0
1525 2.446318113897666 -0.8866742665309733 0
1526 -0.886674266530974 -2.446318113897666 0
1527 -2.446455923662268 0.8865667193199559 0
1528 0.8867045866342315 2.446421218313358 0
1529 -1.811316887936745 0.8239655968335962 0
1530 -0.8239655968335959 -1.811316887936744 0
1531 1.811316887936744 -0.8239655968335959 0
1532 0.8239655968335953 1.811316887936745 0
1533 1.544120638584002 -1.482723625959776 0
1534 -1.482723625959776 -1.544120638584001 0
1535 -1.544120638584002 1.482723625959775 0
1536 1.482723625959777 1.544120638583999 0
1537 -1.766525928890472 1.930672237759249 0
1538 1.930672237759247 1.766525928890474 0
1539 1.766525928890472 -1.93067223775925 0
1540 -1.93067223775925 -1.766525928890473 0
1541 -1.65199516924469 -1.818237223406529 0
1542 1.81823722340653 -1.65199516924469 0
1543 -1.818292780675632 1.652009934157308 0
1544 1.65199516924469 1.81823722340653 0
1545 0.8137893871760152 2.602508504811517 0
1546 -2.602523555297392 0.813719871169045 0
1547 2.602392616049476 -0.813894991844861 0
1548 -0.8138949918448611 -2.602392616049476 0
1549 0.8329402039568417 1.590759441527405 0
1550 -1.590759441527405 0.8329402039568419 0
1551 -0.8329402039568435 -1.590759441527405 0
1552 1.590759441527405 -0.8329402039568435 0
1553 0.54072578545981 -1.5453145776026 0
1554 -0.5407257854598112 1.545314577602598 0
1555 -1.545314577602599 -0.5407257854598095 0
1556 1.545314577602597 0.54072578545981 0
1557 1.979820136000994 -1.673725241951871 0
1558 1.673602603006287 1.9798465539052 0
1559 -1.673725241951871 -1.979820136000994 0
1560 -1.979881866299996 1.673741647410335 0
1561 -0.4450328819822821 -1.786015963019935 0
1562 1.786015963019934 -0.4450328819822821 0
1563 -1.786015963019934 0.4450328819822831 0
1564 0.4450328819822839 1.786015963019934 0
1565 -2.60450642581992 -0.8483000444579252 0
1566 0.8482978766119965 -2.604508469793625 0
1567 2.604506425819921 0.848300044457926 0
1568 -0.8482978766119967 2.604508469793625 0
1569 -1.125042197646285 0.2570237887324003 0
1570 -0.2570237887324001 -1.125042197646286 0
1571 1.125042197646285 -0.2570237887324004 0
1572 0.2570237887323999 1.125042197646285 0
1573 -0.8709930359673967 -0.7570398361846936 0
1574 -0.7570398361846935 0.8709930359673967 0
1575 0.7570398361846936 -0.870993035967397 0
1576 0.8709930359673971 0.7570398361846934 0
1577 2.249082702630665 -0.6368484401976178 0
1578 0.6368484401976185 2.249082702630667 0
1579 -2.249082702630667 0.6368484401976202 0
1580 -0.6368484401976179 -2.249082702630666 0
1581 -1.69058105140316 -0.4868647865430377 0
1582 -0.4868647865430388 1.69058105140316 0
1583 1.690581051403158 0.4868647865430379 0
1584 0.4868647865430382 -1.690581051403161 0
1585 0.1377985951555411 2.63053803013395 0
1586 2.630538030133948 -0.1377985951555402 0
1587 -2.630538030133947 0.1377985951555412 0
1588 -0.1377985951555414 -2.630538030133948 0
1589 2.004856155392094 -0.9073827851256441 0
1590 -0.9073827851256441 -2.004856155392094 0
1591 0.9073827851256439 2.004856155392095 0
1592 -2.004856155392095 0.9073827851256442 0
1593 1.766533181253698 1.66589362454462 0
1594 -1.766533181253702 -1.66589362454462 0
1595 1.665893624544619 -1.766533181253701 0
1596 -1.66589362454462 1.7665331812537 0
1597 -0.4607462969890164 2.707130845818082 0
1598 -2.707128801844376 -0.4607484648349451 0
1599 2.707128801844377 0.4607484648349442 0
1600 0.4607462969890156 -2.707130845818081 0
1601 2.298781298520465 1.501195131532571 0
1602 -1.501195131532571 2.298781298520465 0
1603 -2.298781298520465 -1.501195131532571 0
1604 1.501195131532571 -2.298781298520465 0
1605 1.986113738841121 1.092200576166531 0
1606 -1.091316420445323 1.985837094122093 0
1607 -1.985837094122094 -1.091316420445321 0
1608 1.092109403018911 -1.985991605796698 0
1609 -1.133111543508614 -0.9106557124723346 0
1610 1.133111543508615 0.9106557124723338 0
1611 0.9106557124723338 -1.133111543508614 0
1612 -0.9106557124723346 1.133111543508614 0
1613 -0.3570595252102771 2.715878839039505 0
1614 -2.715878611931315 -0.3570597660820453 0
1615 0.3570595252102756 -2.715878839039503 0
1616 2.715878611931313 0.3570597660820449 0
1617 1.591811788798283 -0.2378305841115322 0
1618 0.2378305841115313 1.591811788798283 0
1619 -1.591811788798282 0.2378305841115319 0
1620 -0.2378305841115322 -1.591811788798283 0
1621 1.769806941027433 -1.030102861520579 0
1622 -1.030102861520579 -1.769806941027433 0
1623 1.030102861520577 1.769806941027432 0
1624 -1.769806941027432 1.030102861520577 0
1625 -0.6907471026161224 -1.918504991392348 0
1626 1.918504991392348 -0.6907471026161224 0
1627 -1.918504991392349 0.6907471026161222 0
1628 0.690747102616122 1.918504991392349 0
1629 0.3889581833207727 2.064398928107808 0
1630 -0.3889502973213274 -2.064391764327612 0
1631 2.064391764327611 -0.3889502973213271 0
1632 -2.06439176432761 0.3889502973213272 0
1633 0.6549253970356393 1.497064413696997 0
1634 1.497064413696997 -0.6549253970356402 0
1635 -0.6549253970356399 -1.497064413696997 0
1636 -1.497064413696997 0.6549253970356396 0
1637 0.1249645509518837 -2.571122338619396 0
1638 2.571122338619397 0.1249645509518855 0
1639 -0.1249645509518859 2.571122338619398 0
1640 -2.5711223386194 -0.1249645509518845 0
1641 1.504112330308853 0.8551257272572763 0
1642 -0.855125727257276 1.504112330308852 0
1643 -1.504112330308853 -0.8551257272572774 0
1644 0.8551257272572769 -1.504112330308851 0
1645 1.849536123568081 0.5194155910762649 0
1646 -1.849545785488609 -0.5192648613079022 0
1647 -0.5194155910762654 1.84953612356808 0
1648 0.5194155910762652 -1.849536123568081 0
1649 -1.764070645987416 -1.490326248098674 0
1650 1.490326248098673 -1.764070645987417 0
1651 1.764070645987415 1.490326248098671 0
1652 -1.490326248098672 1.764070645987415 0
1653 0.2196275171078476 2.151535354172785 0
1654 -2.151535354172785 0.2196275171078472 0
1655 -0.219627517107846 -2.151535354172785 0
1656 2.151535354172784 -0.2196275171078472 0
1657 -2.579285280305554 0.3050007829576056 0
1658 -0.305000782957604 -2.579285280305553 0
1659 2.579285280305553 -0.3050007829576044 0
1660 0.305000782957606 2.579285280305555 0
1661 0.7806264094122199 -2.277937561464958 0
1662 2.27793030281776 0.7806294280095477 0
1663 -0.7806288546773238 2.277926959502137 0
1664 -2.27793030281776 -0.7806294280095464 0
1665 -2.295490538952776 0.1566043113715404 0
1666 2.294706067737629 -0.1564794951674437 0
1667 -0.1564794951674433 -2.294706067737628 0
1668 0.1564794951674441 2.294706067737629 0
1669 -1.013133756106424 1.906194480161318 0
1670 1.01331515734875 -1.906229825969235 0
1671 1.906249018868906 1.013358951284637 0
1672 -1.906194480161319 -1.013133756106424 0
1673 1.255996605577415 -2.308168972931044 0
1674 -2.308168972931042 -1.255996605577411 0
1675 2.308168972931044 1.255996605577415 0
1676 -1.256179654073953 2.308075036528761 0
1677 -1.782898325270426 0.1978231358132285 0
1678 0.1978231358132284 1.782898325270427 0
1679 -0.1978231358132289 -1.782898325270427 0
1680 1.782898325270427 -0.1978231358132281 0
1681 -0.04278762070258672 1.140295420472833 0
1682 -1.140295420472833 -0.04278762070258709 0
1683 1.140295420472833 0.04278762070258646 0
1684 0.04278762070258676 -1.140295420472833 0
1685 -1.089749882696147 2.14744251867111 0
1686 2.147689139932259 1.090538083532882 0
1687 1.090449573202253 -2.147578852501643 0
1688 -2.14744251867111 -1.089749882696145 0
1689 -0.7128778196409539 1.210015093575703 0
1690 -1.210015093575703 -0.7128778196409534 0
1691 1.210015093575704 0.7128778196409534 0
1692 0.7128778196409534 -1.210015093575703 0
1693 -2.734454345662969 0.2612521621539641 0
1694 2.734454345662971 -0.2612521621539626 0
1695 0.2612521621539633 2.734454345662971 0
1696 -0.2612521621539631 -2.734454345662971 0
1697 2.288763456302163 -1.507448862428161 0
1698 -1.50744886242816 -2.288763456302163 0
1699 1.507452432881215 2.288771162639054 0
1700 -2.288763456302163 1.50744886242816 0
1701 1.429856913185624 -0.9176937897508003 0
1702 -0.9176937897508003 -1.429856913185624 0
1703 0.9176937897507992 1.429856913185624 0
1704 -1.429856913185624 0.917693789750799 0
1705 -1.790217278788855 -0.765950944560477 0
1706 1.790217278788854 0.7659509445604751 0
1707 -0.7659509445604743 1.790217278788854 0
1708 0.7659509445604756 -1.790217278788854 0
1709 -1.341570374447128 -1.960068559291121 0
1710 1.960068559291121 -1.341570374447128 0
1711 -1.960068559291121 1.341570374447129 0
1712 1.341560208324007 1.960070749196338 0
1713 -1.482390654205495 -1.351817279313541 0
1714 1.351817279313541 -1.482390654205496 0
1715 1.482390654205495 1.351817279313541 0
1716 -1.35181727931354 1.482390654205494 0
1717 -0.1697924740898308 -1.878646757056401 0
1718 1.878646757056402 -0.1697924740898313 0
1719 -1.878646757056402 0.1697924740898314 0
1720 0.1697924740898315 1.878646757056401 0
1721 1.245817648421706 0.2181192404577277 0
1722 0.218119240457728 -1.245817648421706 0
1723 -1.245817648421706 -0.2181192404577282 0
1724 -0.2181192404577293 1.245817648421705 0
1725 0.01748111153789091 -2.731743838693196 0
1726 2.731743838693197 0.01748111153789375 0
1727 -0.01748111153789486 2.731743838693197 0
1728 -2.731743838693197 -0.01748111153789305 0
1729 -1.485185274069744 -0.3404880063619547 0
1730 0.3404880063619544 -1.485185274069745 0
1731 -0.3404880063619557 1.485185274069744 0
1732 1.485185274069744 0.3404880063619546 0
1733 2.19655307581991 1.363899602831301 0
1734 -1.363893386123528 2.196551130665528 0
1735 -2.196551130665529 -1.363893386123528 0
1736 1.363893386123529 -2.196551130665529 0
1737 -0.6346333655754618 -2.531211050054142 0
1738 -2.531213240989256 0.634626112230787 0
1739 2.531211050054142 -0.6346333655754606 0
1740 0.63463336557546 2.531211050054142 0
1741 -0.9115817347601537 -1.64275349672438 0
1742 1.64275349672438 -0.9115817347601537 0
1743 -1.64275349672438 0.9115817347601521 0
1744 0.9115817347601519 1.642753496724381 0
1745 -2.152050955196144 -0.9036904416426611 0
1746 0.9036904416426632 -2.152050955196144 0
1747 -0.903690441642663 2.152050955196145 0
1748 2.152050955196144 0.9036904416426627 0
1749 0.0171854662674182 1.9548449556074 0
1750 -1.9548449556074 0.01718546626741806 0
1751 -0.01718546626741747 -1.9548449556074 0
1752 1.9548449556074 -0.01718546626741757 0
1753 -2.124761600806383 0.9834757691161451 0
1754 2.124761600806383 -0.9834757691161441 0
1755 -0.9840165349834427 -2.125070213418938 0
1756 0.9834757691161432 2.124761600806383 0
1757 -1.496842623555326 -1.194329308933004 0
1758 1.194329308933005 -1.496842623555326 0
1759 1.496842623555326 1.194329308933005 0
1760 -1.194329308933004 1.496842623555326 0
1761 -0.3394864510010989 -1.378271239650137 0
1762 0.3394864510010976 1.378271239650136 0
1763 -1.378271239650137 0.339486451001098 0
1764 1.378271239650137 -0.3394864510010987 0
1765 0.8290700409334142 1.484115511943135 0
1766 1.484115511943136 -0.8290700409334159 0
1767 -0.8290700409334159 -1.484115511943136 0
1768 -1.484115511943135 0.8290700409334142 0
1769 2.565257929002759 0.01709285840151547 0
1770 -0.01709285840151484 2.56525792900276 0
1771 0.01709285840151284 -2.565257929002759 0
1772 -2.56525792900276 -0.01709285840151446 0
1773 1.055930461306903 1.876768396631231 0
1774 -1.87676839663123 1.055930461306903 0
1775 -1.055930461306904 -1.876768396631231 0
1776 1.876768396631231 -1.055930461306904 0
1777 -0.04070708725631527 -1.732092898844336 0
1778 1.732092898844336 -0.04070708725631573 0
1779 -1.732092898844334 0.04070708725631533 0
1780 0.04070708725631546 1.732092898844334 0
1781 -2.171191124791286 -1.182244067640412 0
1782 2.171242241827473 1.18240743754009 0
1783 1.18232181102998 -2.17120627299468 0
1784 -1.182244067640413 2.171191124791287 0
1785 1.666691526475197 -0.303705561921487 0
1786 -0.3037055619214872 -1.666691526475197 0
1787 0.3037055619214875 1.666691526475198 0
1788 -1.666691526475197 0.3037055619214875 0
1789 1.031833617719789 -1.467467442259682 0
1790 -1.031734660051303 1.467392006905713 0
1791 -1.467392006905713 -1.031734660051303 0
1792 1.467392006905713 1.031734660051303 0
1793 -1.674893497448606 1.210361911892398 0
1794 1.674893497448604 -1.210361911892402 0
1795 1.210361911892398 1.674893497448605 0
1796 -1.210361911892402 -1.674893497448603 0
1797 1.02464248624637 -1.57742637912794 0
1798 -1.577417997421944 -1.024631490949873 0
1799 1.577417997421943 1.024631490949872 0
1800 -1.024631490949872 1.577417997421943 0
1801 -0.2800760608424183 1.099181088719185 0
1802 1.099181088719185 0.280076060842418 0
1803 0.280076060842418 -1.099181088719185 0
1804 -1.099181088719185 -0.280076060842418 0
1805 0.03444435061805504 -1.293530790625678 0
1806 1.293530790625678 0.03444435061805465 0
1807 -0.03444435061805512 1.293530790625677 0
1808 -1.293530790625678 -0.03444435061805518 0
1809 0.1331410088113198 -1.312992454232195 0
1810 1.312992454232195 0.1331410088113194 0
1811 -1.312992454232195 -0.13314100881132 0
1812 -0.1331410088113207 1.312992454232195 0
1813 0.1872056808415608 -2.114581468593026 0
1814 2.114581468593026 0.1872056808415618 0
1815 -0.1872056808415592 2.114581468593025 0
1816 -2.114581468593025 -0.1872056808415597 0
1817 -1.220116421835935 1.114056172933568 0
1818 1.220116421835933 -1.114056172933571 0
1819 -1.114056172933569 -1.220116421835933 0
1820 1.114056172933568 1.220116421835933 0
1821 1.142232296538627 0.572399829522925 0
1822 -0.5723998295229243 1.142232296538627 0
1823 -1.142232296538626 -0.572399829522925 0
1824 0.572399829522925 -1.142232296538626 0
1825 -1.084702663723702 -1.377268722694053 0
1826 1.0847026637237 1.377268722694054 0
1827 1.377268722694052 -1.084702663723702 0
1828 -1.377268722694054 1.084702663723699 0
1829 1.505629383250067 -1.18911641604039 0
1830 -1.189116416040389 -1.505629383250068 0
1831 -1.505629383250068 1.189116416040387 0
1832 1.189116416040388 1.505629383250069 0
1833 -0.3144172627732226 1.985177542822676 0
1834 1.985177542822678 0.3144172627732235 0
1835 0.3144172627732236 -1.985177542822676 0
1836 -1.98523545466199 -0.3144296969957552 0
1837 0.8122724679978707 -0.9625910861497675 0
1838 -0.8122724679978708 0.962591086149768 0
1839 0.9625910861497682 0.8122724679978703 0
1840 -0.9625910861497674 -0.8122724679978708 0
1841 -0.2647287924159983 -1.233139222732028 0
1842 0.2647287924159976 1.233139222732028 0
1843 1.233139222732028 -0.2647287924159984 0
1844 -1.233139222732028 0.2647287924159982 0
1845 -2.473967424034291 -1.203605958295635 0
1846 2.473967424034291 1.203605958295637 0
1847 1.203605958295636 -2.473967424034292 0
1848 -1.203730403912798 2.473910763396757 0
1849 1.665894252103733 1.649644031641938 0
1850 -1.665894252103737 -1.649644031641938 0
1851 -1.649644031641938 1.665894252103735 0
1852 1.649644031641938 -1.665894252103736 0
1853 -0.4376122260958072 2.099506492286065 0
1854 2.099506492286066 0.4376122260958049 0
1855 -2.099507596505554 -0.4375949998365653 0
1856 0.4376122260958068 -2.099506492286063 0
1857 1.492804925974009 -1.559401279256378 0
1858 -1.492804925974007 1.559401279256378 0
1859 -1.559401279256379 -1.492804925974008 0
1860 1.559401279256379 1.492804925974005 0
1861 1.340052239017525 0.9220354909944083 0
1862 0.9221509416076431 -1.340140246930489 0
1863 -0.9220354909944091 1.340052239017524 0
1864 -1.340052239017526 -0.9220354909944083 0
1865 1.210270828818687 0.3979661503313817 0
1866 -1.210270828818687 -0.3979661503313815 0
1867 0.3979661503313818 -1.210270828818687 0
1868 -0.3979661503313823 1.210270828818687 0
1869 -1.064201291695233 1.192835554241149 0
1870 1.192835554241149 1.064201291695233 0
1871 1.064201291695233 -1.192835554241149 0
1872 -1.192835554241148 -1.064201291695233 0
1873 -1.74978884907743 0.7468683835484176 0
1874 0.7468683835484164 1.749788849077431 0
1875 -0.7468683835484176 -1.74978884907743 0
1876 1.74978884907743 -0.7468683835484176 0
1877 1.303511795290288 1.658748570650102 0
1878 -1.658748570650102 1.303511795290289 0
1879 -1.303511795290293 -1.658748570650101 0
1880 1.658748570650101 -1.303511795290294 0
1881 -0.6522331604044478 -2.371304425731685 0
1882 0.6522331604044478 2.371304425731686 0
1883 2.371304425731685 -0.6522331604044481 0
1884 -2.371307773371674 0.6522220776542026 0
1885 -0.161879694995134 1.912724116625959 0
1886 0.161879694995135 -1.912724116625959 0
1887 -1.912724116625958 -0.1618796949951342 0
1888 1.912724116625957 0.1618796949951353 0
1889 -0.5891982292360688 -1.139971724873591 0
1890 0.589198229236069 1.139971724873591 0
1891 1.139971724873591 -0.5891982292360688 0
1892 -1.139971724873591 0.5891982292360692 0
1893 -0.7276354551802608 -1.056996755145156 0
1894 0.7276354551802603 1.056996755145156 0
1895 1.056996755145155 -0.7276354551802604 0
1896 -1.056996755145156 0.7276354551802601 0
1897 -1.332558200039698 0.756910371619168 0
1898 1.332558200039698 -0.7569103716191677 0
1899 -0.756910371619168 -1.332558200039698 0
1900 0.7569103716191682 1.332558200039698 0
1901 0.7347958967450202 2.222561823454304 0
1902 -0.7347958967450187 -2.222561823454303 0
1903 -2.222561823454305 0.734795896745021 0
1904 2.222561823454303 -0.7347958967450182 0
1905 0.4124576968813735 -1.304795712913172 0
1906 -0.4124576968813741 1.304795712913172 0
1907 1.304795712913173 0.412457696881373 0
1908 -1.304795712913172 -0.4124576968813732 0
1909 -2.385424613256716 -0.3816185993630187 0
1910 0.3816185993630202 -2.385424613256715 0
1911 -0.381618599363019 2.385424613256714 0
1912 2.385424613256717 0.3816185993630176 0
1913 -1.905025717544701 0.3434247392627974 0
1914 0.3434247392627974 1.905025717544701 0
1915 1.905025717544701 -0.3434247392627975 0
1916 -0.3434247392627973 -1.905025717544701 0
1917 -0.4761177010390187 -1.452162346732458 0
1918 1.452162346732458 -0.4761177010390189 0
1919 -1.452162346732458 0.4761177010390191 0
1920 0.4761177010390181 1.452162346732458 0
1921 2.263192674768589 0.483688488889794 0
1922 -2.263192674768584 -0.4836884888897914 0
1923 -0.4836877749546665 2.263188511544607 0
1924 0.4836591161381064 -2.263220789382191 0
1925 2.017917388813113 -1.171097863670006 0
1926 -2.017917388813113 1.171097863670007 0
1927 -1.171097863670006 -2.017917388813113 0
1928 1.171096677622309 2.017917644302054 0
1929 1.044123806211569 0.9568932876117177 0
1930 0.9568932876117175 -1.044123806211568 0
1931 -0.9568932876117179 1.044123806211568 0
1932 -1.044123806211568 -0.9568932876117177 0
1933 1.834412222426588 0.09146965609785562 0
1934 0.09146965609785515 -1.834412222426588 0
1935 -0.09146965609785469 1.834412222426588 0
1936 -1.834412222426587 -0.09146965609785489 0
1937 -2.546966682561786 1.055839970029947 0
1938 1.055901276560582 2.546948164397164 0
1939 -1.05571704590029 -2.546986683365195 0
1940 2.546986683365195 -1.05571704590029 0
1941 -2.218341548196309 -1.029907600059814 0
1942 2.218374431031128 1.030012693504713 0
1943 1.030000892127297 -2.218359726040379 0
1944 -1.029907600059816 2.218341548196309 0
1945 1.285903628354011 2.251308989883599 0
1946 -2.251308989883598 1.285903628354013 0
1947 -1.285903628354013 -2.251308989883599 0
1948 2.251308989883599 -1.285903628354013 0
1949 -1.201050546148681 -2.298006365284683 0
1950 2.298006365284683 -1.201050546148681 0
1951 -2.298003555618338 1.201061614538868 0
1952 1.201061614538867 2.298003555618338 0
1953 -1.8039611090672 -1.888692432797046 0
1954 1.888692432797048 -1.803961109067199 0
1955 -1.888692432797048 1.8039611090672 0
1956 1.803960989536063 1.888692458545492 0
1957 -2.547684422480799 -0.440826097507128 0
1958 2.547684422480799 0.4408260975071258 0
1959 0.440820172061586 -2.54769000934226 0
1960 -0.4408201720615842 2.547690009342258 0
1961 0.5694844866939133 2.698462991828702 0
1962 -0.5694844866939126 -2.698462991828702 0
1963 2.698462991828703 -0.5694844866939138 0
1964 -2.698462991828701 0.5694844866939153 0
1965 0.93342296691631 -1.438986527387448 0
1966 -1.43874282548566 -0.9332699213163195 0
1967 -0.933269921316319 1.438742825485659 0
1968 1.438742825485659 0.9332699213163193 0
1969 0.8486367161216685 -1.801121183763446 0
1970 1.801157043740609 0.8485674894939527 0
1971 -0.8486367161216666 1.801121183763445 0
1972 -1.801121183763444 -0.8486367161216694 0
1973 0.6118263066378422 -1.853411266477482 0
1974 1.853411266477483 0.6118263066378413 0
1975 -1.853412340024208 -0.6118095588858022 0
1976 -0.6118263066378421 1.853411266477482 0
1977 -1.966113127284278 -1.919501796051132 0
1978 1.919501796051132 -1.966113127284279 0
1979 -1.919501796051133 1.966113127284276 0
1980 1.966112983846912 1.919501826949267 0
1981 -2.486591889142025 0.1479775460745219 0
1982 0.1479775460745224 2.486591889142023 0
1983 2.486591889142022 -0.1479775460745204 0
1984 -0.1479775460745197 -2.486591889142022 0
1985 2.440588521410271 0.8250895662030769 0
1986 -2.440588521410271 -0.8250895662030747 0
1987 0.825086185014728 -2.440596857352225 0
1988 -0.8250861540335934 2.440587660524409 0
1989 -2.441416328730757 -0.929849977510937 0
1990 0.9298496018233448 -2.44141725494653 0
1991 2.441416328730757 0.9298499775109406 0
1992 -0.9298495983809976 2.441416233076772 0
1993 -2.628105091352259 -0.2922969054684385 0
1994 0.2922968787049092 -2.628105116586501 0
1995 2.628105091352257 0.2922969054684386 0
1996 -0.2922968787049086 2.628105116586501 0
1997 -0.3318220982923799 2.302627241163353 0
1998 2.302627241163355 0.3318220982923787 0
1999 0.3318220982923799 -2.302627241163352 0
2000 -2.302627241163352 -0.3318220982923791 0
2001 1.439534921122808 2.15164210290064 0
2002 -2.151540892247972 1.439657603325923 0
2003 -1.439657603325925 -2.151540892247975 0
2004 2.151540892247975 -1.439657603325925 0
2005 -1.586059458427462 1.891926097815441 0
2006 1.891926097815441 1.586059458427461 0
2007 -1.891926097815444 -1.586059458427462 0
2008 1.586059458427461 -1.891926097815442 0
2009 2.263919862191116 -0.9057311924032191 0
2010 -0.9063620859150675 -2.264279910239096 0
2011 0.9058474105001871 2.263890360694492 0
2012 -2.263890360694492 0.9058474105001895 0
2013 -0.06375573670758843 2.41073654962269 0
2014 -2.410736549622691 -0.06375573670758944 0
2015 0.06375573670758751 -2.410736549622689 0
2016 2.41073654962269 0.06375573670758893 0
2017 0.778996314775556 -1.646230685691106 0
2018 -1.646230685691106 -0.7789963147755566 0
2019 1.646230685691105 0.778996314775555 0
2020 -0.7789963147755558 1.646230685691106 0
2021 -1.711272075956885 0.1346695958635541 0
2022 0.134669595863554 1.711272075956886 0
2023 -0.1346695958635547 -1.711272075956886 0
2024 1.711272075956887 -0.1346695958635546 0
2025 -0.4730467895938174 1.60215135954298 0
2026 0.4730467895938159 -1.602151359542981 0
2027 1.602151359542979 0.4730467895938164 0
2028 -1.602151359542981 -0.4730467895938159 0
2029 0.5419462732247627 -1.280320848598522 0
2030 1.280320848598523 0.5419462732247625 0
2031 -1.280320848598522 -0.5419462732247624 0
2032 -0.5419462732247624 1.280320848598521 0
2033 -1.177446130323503 -1.402313710932436 0
2034 1.402313710932436 -1.177446130323504 0
2035 1.177446130323501 1.402313710932438 0
2036 -1.402313710932438 1.1774461303235 0
2037 1.9003440487932 -1.150874664644683 0
2038 -1.150874664644683 -1.9003440487932 0
2039 -1.9003440487932 1.150874664644682 0
2040 1.150874532861604 1.90034407718086 0
2041 0.9315997629190593 -0.8239227533241842 0
2042 0.8239227533241846 0.931599762919059 0
2043 -0.8239227533241841 -0.9315997629190592 0
2044 -0.9315997629190594 0.8239227533241844 0
2045 1.166008448580734 -0.4331579087311315 0
2046 0.433157908731131 1.166008448580734 0
2047 -1.166008448580735 0.433157908731131 0
2048 -0.4331579087311314 -1.166008448580735 0
2049 -1.05080210046375 2.064245625405638 0
2050 1.051897313015461 -2.064540362722779 0
2051 2.065339941654813 1.05207705316238 0
2052 -2.064245625405637 -1.050802100463748 0
2053 -0.6130403483266724 2.106894408586462 0
2054 0.6130376436239192 -2.10689813726476 0
2055 2.106895061329037 0.6130404602629633 0
2056 -2.106895061329037 -0.6130404602629628 0
2057 -2.39379370735896 1.364463542878356 0
2058 2.393793707358961 -1.364463542878354 0
2059 -1.364463542878354 -2.393793707358961 0
2060 1.363359795064773 2.393812362155105 0
2061 -2.325694528506499 0.4945383539774582 0
2062 2.325694528506498 -0.4945383539774565 0
2063 0.4945383539774559 2.3256945285065 0
2064 -0.4945383539774572 -2.325694528506499 0
2065 -1.894533474160157 -1.214353032198262 0
2066 -1.214353032198262 1.894533474160154 0
2067 1.894535516572254 1.214359559741423 0
2068 1.214353032198263 -1.894533474160157 0
2069 2.104090850274681 1.771658541146791 0
2070 -1.771658541146792 2.10409085027468 0
2071 -2.10409085027468 -1.771658541146792 0
2072 1.771658541146792 -2.10409085027468 0
2073 1.028950874296593 1.465363642020876 0
2074 -1.465363642020876 1.028950874296592 0
2075 1.465363642020874 -1.028950874296593 0
2076 -1.028950874296593 -1.465363642020875 0
2077 -2.062593615372279 0.6784470444474048 0
2078 0.6784470444474046 2.062593615372278 0
2079 -0.6784470444474053 -2.062593615372279 0
2080 2.062593615372279 -0.6784470444474052 0
2081 1.849659154102153 -0.905503948726889 0
2082 -0.9055039487268891 -1.849659154102153 0
2083 0.905503948726888 1.849659154102153 0
2084 -1.849659154102153 0.9055039487268888 0
2085 1.291566497214912 -0.8188546618503899 0
2086 -0.8188546618503898 -1.291566497214913 0
2087 -1.291566497214912 0.8188546618503898 0
2088 0.8188546618503898 1.291566497214912 0
2089 -0.2331252467846262 -2.07181409609242 0
2090 -2.07181409609242 0.233125246784627 0
2091 0.2331252467846267 2.07181409609242 0
2092 2.071814096092419 -0.2331252467846273 0
2093 2.256126079688167 0.8636471595627633 0
2094 -0.8636471595627646 2.25612607968817 0
2095 0.8636471595627639 -2.256126079688167 0
2096 -2.256126079688168 -0.8636471595627628 0
2097 0.655365888049346 2.675349716642266 0
2098 -0.655365888049345 -2.675349716642266 0
2099 2.675349716642267 -0.655365888049347 0
2100 -2.675349716642268 0.6553658880493481 0
2101 -1.454144888026798 1.907448343692012 0
2102 1.907448343692012 1.454144888026798 0
2103 -1.907448343692013 -1.454144888026799 0
2104 1.454144888026799 -1.907448343692013 0
2105 -2.054218762998484 1.824153928474172 0
2106 -1.824153928474172 -2.054218762998484 0
2107 2.054218762998484 -1.82415392847417 0
2108 1.824142632781815 2.054221196226504 0
2109 -1.926449380431952 -0.4669635980612077 0
2110 0.468320165976484 -1.926362423147193 0
2111 -0.468320165976484 1.926362423147192 0
2112 1.926362423147195 0.4683201659764836 0
2113 -2.120440120885492 1.535946848636708 0
2114 -1.535946848636709 -2.120440120885496 0
2115 2.120440120885495 -1.535946848636708 0
2116 1.536202031016845 2.120990897316192 0
2117 2.020017190070337 1.331279706445359 0
2118 -1.331279706445359 2.020017190070339 0
2119 -2.02001719007034 -1.331279706445359 0
2120 1.33127970644536 -2.020017190070339 0
2121 0.8070486036078939 2.302394116486219 0
2122 -0.8070486036078928 -2.302394116486217 0
2123 2.302394116486217 -0.8070486036078929 0
2124 -2.302394116486219 0.8070486036078953 0
2125 -0.7918612111401973 1.240849099787762 0
2126 0.7918612111401967 -1.240849099787762 0
2127 -1.240849099787761 -0.791861211140197 0
2128 1.240849099787762 0.7918612111401965 0
2129 -0.7785304703959238 1.383112603239013 0
2130 -1.383112603239014 -0.7785304703959236 0
2131 1.383112603239013 0.7785304703959232 0
2132 0.7785304703959234 -1.383112603239013 0
2133 -0.1576152017472986 -1.12547342929687 0
2134 -1.12547342929687 0.1576152017472986 0
2135 1.125473429296869 -0.1576152017472986 0
2136 0.1576152017472985 1.125473429296869 0
2137 -0.9182752182443951 -0.6695471056336988 0
2138 0.6695471056336988 -0.9182752182443955 0
2139 -0.6695471056336988 0.9182752182443951 0
2140 0.9182752182443951 0.6695471056336987 0
2141 2.400958192902874 -0.9663906622281637 0
2142 -0.9663906622281638 -2.400958192902874 0
2143 0.9663906622281654 2.400958192902875 0
2144 -2.400958192902874 0.9663906622281648 0
2145 -1.05362542356287 -2.40074774576783 0
2146 2.40074774576783 -1.05362542356287 0
2147 1.051970175461447 2.400585199622438 0
2148 -2.400603717787058 1.051908868930813 0
2149 -0.6835058742243948 -1.596908876014601 0
2150 1.596908876014601 -0.6835058742243949 0
2151 -1.596908876014598 0.6835058742243927 0
2152 0.6835058742243927 1.5969088760146 0
2153 -0.2289772086555903 -2.426722298745771 0
2154 2.426722298745773 -0.2289772086555908 0
2155 -2.426722298745775 0.2289772086555921 0
2156 0.2289772086555923 2.426722298745774 0
2157 1.551998730824323 1.791846002265232 0
2158 -1.792005266436657 1.552041056907158 0
2159 -1.551998730824324 -1.791846002265232 0
2160 1.791910330457832 -1.552007113877801 0
2161 1.268083197429316 2.159372567851669 0
2162 -1.268096639303221 -2.159369672310328 0
2163 2.159369672310328 -1.268096639303221 0
2164 -2.159369672310328 1.268096639303222 0
2165 1.023792869940157 0.4891125677111284 0
2166 0.4891125677111283 -1.023792869940157 0
2167 -0.4891125677111282 1.023792869940157 0
2168 -1.023792869940156 -0.4891125677111282 0
2169 -2.266335677037981 -0.1242780329527608 0
2170 0.1242780329527592 -2.26633567703798 0
2171 -0.12427803295276 2.266335677037979 0
2172 2.266335677037981 0.12427803295276 0
2173 2.144447895797263 1.508275119320199 0
2174 -1.508275119320197 2.144447895797264 0
2175 1.508275119320198 -2.144447895797266 0
2176 -2.144447895797267 -1.508275119320198 0
2177 1.389506886556952 0.2853699061717712 0
2178 0.2853699061717717 -1.389506886556952 0
2179 -1.389506886556952 -0.2853699061717715 0
2180 -0.2853699061717726 1.389506886556952 0
2181 0.1817160607665974 -2.645285509652437 0
2182 2.645285506848633 0.1817160637403243 0
2183 -0.1817160607666004 2.645285509652438 0
2184 -2.645285506848635 -0.1817160637403245 0
2185 -0.09666463992505486 -2.012702424004126 0
2186 2.012702424004126 -0.09666463992505532 0
2187 -2.012702424004126 0.096664639925056 0
2188 0.09666463992505597 2.012702424004126 0
2189 0.02182239168493035 1.573735316146933 0
2190 -0.02182239168493035 -1.573735316146933 0
2191 1.573735316146933 -0.02182239168493065 0
2192 -1.573735316146932 0.02182239168493033 0
2193 -1.077279792024548 1.359816078960421 0
2194 1.359816078960421 1.077279792024548 0
2195 -1.359816078960421 -1.077279792024546 0
2196 1.077290787321045 -1.359824460666417 0
2197 0.2572180463530752 -1.804686780110452 0
2198 -0.257218046353074 1.804686780110452 0
2199 -1.804695053230354 -0.2572198226705782 0
2200 1.804686780110453 0.257218046353074 0
2201 -0.8235921435852751 -2.038506604540969 0
2202 2.038506604540969 -0.8235921435852751 0
2203 -2.03850660454097 0.8235921435852754 0
2204 0.823592143585275 2.03850660454097 0
2205 0.112938550100749 1.464285341837507 0
2206 -0.1129385501007495 -1.464285341837508 0
2207 1.464285341837508 -0.1129385501007497 0
2208 -1.464285341837507 0.1129385501007488 0
2209 -1.141478977180215 0.6842728848930644 0
2210 -0.6842728848930648 -1.141478977180215 0
2211 0.6842728848930645 1.141478977180215 0
2212 1.141478977180215 -0.6842728848930643 0
2213 -1.313363798062688 1.923923892330764 0
2214 -1.923923892330766 -1.313363798062688 0
2215 1.923926502079558 1.313372138812283 0
2216 1.313363798062689 -1.923923892330766 0
2217 1.634903175139774 -0.159492950529966 0
2218 -0.1594929505299658 -1.634903175139772 0
2219 -1.634903175139772 0.1594929505299653 0
2220 0.1594929505299651 1.634903175139773 0
2221 -0.4137710033702282 -1.982002312418779 0
2222 1.982002312418778 -0.4137710033702276 0
2223 0.4137718795923881 1.982003108394355 0
2224 -1.982002312418777 0.4137710033702275 0
2225 -0.8311927927942503 2.113690018845995 0
2226 0.831192792794252 -2.113690018845993 0
2227 2.113690018845993 0.8311927927942511 0
2228 -2.113690018845993 -0.8311927927942507 0
2229 2.290003574376128 -0.3028808899657232 0
2230 -0.3028808899657222 -2.290003574376128 0
2231 -2.29000357437613 0.3028808899657225 0
2232 0.3028691060463863 2.290046108328467 0
2233 2.253662110029492 -0.5442995405902953 0
2234 -2.253662110029492 0.5442995405902965 0
2235 -0.5442995405902961 -2.253662110029492 0
2236 0.5442995405902935 2.253662110029493 0
2237 0.6220159601757206 -1.703104992395233 0
2238 -0.6220159601757211 1.703104992395232 0
2239 -1.703104992395231 -0.6220159601757208 0
2240 1.703104992395231 0.6220159601757201 0
2241 1.086706105278604 1.058558272129943 0
2242 -1.058558272129943 1.086706105278604 0
2243 1.058558272129943 -1.086706105278605 0
2244 -1.086706105278605 -1.058558272129942 0
2245 0.2861554339369873 1.752869845181072 0
2246 -1.752869845181071 0.2861554339369874 0
2247 1.752869845181072 -0.2861554339369869 0
2248 -0.2861554339369874 -1.752869845181072 0
2249 1.458881992145466 0.7890104524836865 0
2250 -0.7890104524836867 1.458881992145465 0
2251 -1.458881992145467 -0.7890104524836874 0
2252 0.7890104524836872 -1.458881992145465 0
2253 -2.191823876655617 0.141928057137784 0
2254 0.1419141886706626 2.191736713187266 0
2255 2.191736713187266 -0.141914188670662 0
2256 -0.1419141886706607 -2.191736713187267 0
2257 2.478797043339587 -0.4201830277644268 0
2258 -2.47879704333959 0.420183027764429 0
2259 -0.4201830277644266 -2.478797043339587 0
2260 0.4201830277644285 2.478797043339589 0
2261 2.030836945892254 0.5606600936457568 0
2262 -2.030838050111742 -0.560642867386516 0
2263 0.5606597180938856 -2.030837356017016 0
2264 -0.5606600787209188 2.030836858859908 0
2265 1.796621938414152 1.224904189904049 0
2266 -1.224899089424729 1.796622465574902 0
2267 -1.796622465574903 -1.22489908942473 0
2268 1.224899089424731 -1.796622465574904 0
2269 -1.069376589022753 -1.609532498918081 0
2270 1.609532498918081 -1.069376589022754 0
2271 -1.609532498918082 1.069376589022752 0
2272 1.069376589022753 1.609532498918082 0
2273 2.358802831971987 1.419430499862688 0
2274 -1.419443764246496 2.358796024986315 0
2275 1.419430499862688 -2.358802831971987 0
2276 -2.358802831971987 -1.419430499862687 0
2277 1.397407363406345 1.795147118183049 0
2278 -1.397407363406346 -1.795147118183049 0
2279 -1.795221194541852 1.397427049956501 0
2280 1.795211446375647 -1.397415746459823 0
2281 -2.319260788527206 0.08448352489958434 0
2282 -0.08580403182264111 -2.321161400867999 0
2283 2.321161400868001 -0.0858040318226411 0
2284 0.08580403182264268 2.321161400867999 0
2285 0.1259315382107288 -1.126759177859219 0
2286 1.126759177859219 0.1259315382107285 0
2287 -0.1259315382107289 1.126759177859219 0
2288 -1.126759177859219 -0.1259315382107288 0
2289 -0.9389425622329133 2.588682855565037 0
2290 2.588682855565037 0.9389425622329124 0
2291 -2.588682855565037 -0.9389425622329118 0
2292 0.9389425622329139 -2.588682855565037 0
2293 0.7549800233792493 2.661444680652537 0
2294 2.661444680652537 -0.7549800233792493 0
2295 -2.661444680652538 0.7549800233792503 0
2296 -0.7549800233792493 -2.661444680652537 0
2297 0.5431156764497782 2.399731093475963 0
2298 2.399731093475962 -0.5431156764497788 0
2299 -0.5431156764497785 -2.399731093475963 0
2300 -2.399731093475963 0.54311567644978 0
2301 -1.183050261739556 -1.755697327782193 0
2302 1.755697327782193 -1.183050261739557 0
2303 1.183050261739554 1.755697327782195 0
2304 -1.755697327782195 1.183050261739554 0
2305 -0.3717612664501042 2.146423144634247 0
2306 2.146423144634249 0.3717612664501034 0
2307 -2.146423144634247 -0.3717612664501044 0
2308 0.3717612664501048 -2.146423144634245 0
2309 -2.25770022734479 1.582982102646029 0
2310 1.582985883125735 2.257708386995617 0
2311 2.257700227344791 -1.582982102646028 0
2312 -1.582982102646028 -2.257700227344791 0
2313 0.9385108079396469 -1.961124941797976 0
2314 -0.9383973601785729 1.961102836641913 0
2315 1.961138919956191 0.938518336749514 0
2316 -1.961102836641913 -0.9383973601785729 0
2317 1.673467753355246 0.9172822877339505 0
2318 0.9173515143616675 -1.673431893378083 0
2319 -1.673431893378082 -0.9173515143616677 0
2320 -0.9173515143616657 1.673431893378081 0
2321 1.731634873680215 1.091863227316139 0
2322 1.091821796252918 -1.731643140825466 0
2323 -1.731643140825466 -1.091821796252915 0
2324 -1.091821796252916 1.731643140825465 0
2325 -1.809350313182059 -1.584628047760263 0
2326 -1.584628047760261 1.809350313182056 0
2327 1.809350313182056 1.58462804776026 0
2328 1.584628047760261 -1.809350313182058 0
2329 1.662174959664011 0.017590473401908 0
2330 0.0175904734019084 -1.662174959664011 0
2331 -1.66217495966401 -0.01759047340190826 0
2332 -0.01759047340190846 1.662174959664011 0
2333 -2.273647716454741 0.02122975584292679 0
2334 2.273858895603717 -0.02137647883437751 0
2335 -0.02137647883437781 -2.273858895603716 0
2336 0.02137647883437691 2.273858895603714 0
2337 -0.7577133014026182 -1.642055250027058 0
2338 1.642055250027058 -0.7577133014026182 0
2339 -1.642055250027057 0.7577133014026169 0
2340 0.7577133014026166 1.642055250027058 0
2341 -2.537356503130392 -1.058852606593504 0
2342 -1.058818892837558 2.537382446767634 0
2343 1.058852606593504 -2.537356503130394 0
2344 2.537356503130393 1.058852606593505 0
2345 1.185522051354771 -2.267006917579528 0
2346 2.267010914116505 1.185531565411451 0
2347 -1.18568361664108 2.266918575751378 0
2348 -2.267005234445814 -1.185513413200374 0
2349 1.637928390595797 1.9082504633132 0
2350 -1.908411933055112 1.63800087435893 0
2351 1.908244438177153 -1.637956360881632 0
2352 -1.637956360881632 -1.908244438177153 0
2353 1.224321377895256 -0.1082238521414923 0
2354 -0.108223852141492 -1.224321377895257 0
2355 0.1082238521414919 1.224321377895256 0
2356 -1.224321377895257 0.1082238521414918 0
2357 -0.6667602743557082 1.018528463478083 0
2358 1.018528463478083 0.6667602743557084 0
2359 -1.018528463478083 -0.6667602743557084 0
2360 0.6667602743557084 -1.018528463478083 0
2361 -1.661073055591936 2.035544107047461 0
2362 1.661073055591937 -2.035544107047463 0
2363 2.035544107047461 1.661073055591936 0
2364 -2.035544107047463 -1.661073055591937 0
2365 1.598257648344644 -0.9794760451319302 0
2366 -0.9794760451319302 -1.598257648344644 0
2367 0.9794760451319291 1.598257648344645 0
2368 -1.598257648344644 0.9794760451319289 0
2369 -0.495725704813352 -2.588734612237667 0
2370 2.588734612237667 -0.4957257048133525 0
2371 -2.588734612237666 0.4957257048133545 0
2372 0.4957257048133526 2.588734612237667 0
2373 1.061100710298794 2.166471550788855 0
2374 -2.166471550788855 1.061100710298794 0
2375 -1.061159530346207 -2.166516070736809 0
2376 2.166474922388468 -1.061087428230567 0
2377 -1.875217412287608 0.0781296871652549 0
2378 -0.07812968716525517 -1.875217412287608 0
2379 0.07812968716525549 1.875217412287608 0
2380 1.875217412287608 -0.07812968716525594 0
2381 -1.320756791381166 -1.17312719531965 0
2382 1.320756791381165 1.173127195319654 0
2383 -1.173127195319653 1.320756791381164 0
2384 1.173128242490746 -1.320757589638879 0
2385 2.415397293358488 -0.3783563578877922 0
2386 -0.3783563578877922 -2.415397293358488 0
2387 0.3782712431895759 2.415383860079511 0
2388 -2.415397293358488 0.3783563578877918 0
2389 1.641562541418794 -0.6035670541596079 0
2390 -0.6035670541596079 -1.641562541418794 0
2391 -1.641562541418792 0.6035670541596061 0
2392 0.6035670541596064 1.641562541418793 0
2393 1.014262875715098 1.970104328602254 0
2394 -1.970104328602253 1.014262875715098 0
2395 -1.014262875715098 -1.970104328602254 0
2396 1.970104328602254 -1.014262875715098 0
2397 -0.004308827434255804 -1.216525401953656 0
2398 -1.216525401953656 0.004308827434255448 0
2399 1.216525401953656 -0.004308827434256339 0
2400 0.004308827434256293 1.216525401953655 0
2401 1.058746108852954 2.0359434595193 0
2402 -2.03594343113164 1.058746240636032 0
2403 2.03594343113164 -1.058746240636031 0
2404 -1.058806325732398 -2.035977721421924 0
2405 0.9130076974080789 2.184291506778956 0
2406 -2.184291506778956 0.9130076974080822 0
2407 2.184295440311839 -0.9129922016618184 0
2408 -0.9109228889727154 -2.184390498194428 0
2409 1.53339227009426 -1.103681614845718 0
2410 -1.103681614845718 -1.533392270094261 0
2411 -1.533392270094261 1.103681614845718 0
2412 1.103681614845718 1.533392270094263 0
2413 2.706476386051925 0.561519321841915 0
2414 -2.706476386051925 -0.5615193218419153 0
2415 0.5615132931656152 -2.706482070245466 0
2416 -0.5615132931656152 2.706482070245467 0
2417 2.299153751009586 1.00923987050466 0
2418 -2.299150097361272 -1.009228193455226 0
2419 1.009238559240503 -2.299152117121723 0
2420 -1.009238782144118 2.299145349394429 0
2421 -2.31488607728121 -0.05526249898701684 0
2422 2.314909541631096 0.05524619643241065 0
2423 -0.05524619643241157 2.314909541631094 0
2424 0.05524619643240943 -2.314909541631094 0
2425 0.5872034480977047 1.281830964211476 0
2426 -1.281830964211476 0.587203448097705 0
2427 1.281830964211476 -0.5872034480977052 0
2428 -0.5872034480977045 -1.281830964211475 0
2429 1.121981432356673 -0.8534864349552339 0
2430 -1.121981432356673 0.8534864349552334 0
2431 0.8534864349552336 1.121981432356673 0
2432 -0.8534864349552334 -1.121981432356672 0
2433 -2.173258426842588 -0.1099225442427516 0
2434 2.173258426842589 0.109922544242752 0
2435 0.1099225442427514 -2.173258426842589 0
2436 -0.1099225442427508 2.173258426842588 0
2437 1.066422034333086 0.5778431015405842 0
2438 -0.5778431015405837 1.066422034333085 0
2439 0.5778431015405837 -1.066422034333085 0
2440 -1.066422034333085 -0.577843101540584 0
2441 -0.5833970513099492 2.475812426822689 0
2442 2.475829123631197 0.5834449419079265 0
2443 -2.475829123631199 -0.5834449419079274 0
2444 0.5833931903413604 -2.475955137433143 0
2445 -1.970370247520044 -1.170097245093376 0
2446 1.970435999573599 1.170307388466217 0
2447 -1.170097245093376 1.970370247520042 0
2448 1.170202976103189 -1.970390849076658 0
2449 2.01704771790016 -1.270960094572878 0
2450 -1.270960094572878 -2.01704771790016 0
2451 -2.01704771790016 1.270960094572879 0
2452 1.270942450701418 2.017051518602325 0
2453 1.61066472166496 0.9512862387460329 0
2454 -1.610659940334673 -0.9512954689630625 0
2455 -0.9512954689630616 1.610659940334672 0
2456 0.9512969350025945 -1.610661057895472 0
2457 -0.0151837775372439 1.436193652297461 0
2458 1.436193652297463 0.01518377753724373 0
2459 0.01518377753724345 -1.436193652297463 0
2460 -1.436193652297461 -0.01518377753724406 0
2461 1.165485920036108 2.140849151059268 0
2462 -2.140848558973786 1.165488668654582 0
2463 -1.165484783372269 -2.140855207254267 0
2464 2.140851288363949 -1.165477916504113 0
2465 -2.352253767906321 -0.478238223602745 0
2466 2.352253767906322 0.478238223602746 0
2467 -0.4782365656095973 2.352246184503374 0
2468 0.4782045743735543 -2.352290689045688 0
2469 2.029202053940007 0.0526827576264194 0
2470 -0.05268275762641807 2.029202053940009 0
2471 0.05268275762641887 -2.029202053940009 0
2472 -2.029202053940009 -0.05268275762641796 0
2473 -1.183467111070396 -0.499852760810437 0
2474 0.4998527608104372 -1.183467111070396 0
2475 1.183467111070396 0.4998527608104368 0
2476 -0.4998527608104365 1.183467111070396 0
2477 -0.6555106529145953 -1.990698304196187 0
2478 1.990698304196187 -0.6555106529145953 0
2479 0.6555106529145944 1.990698304196187 0
2480 -1.990698304196187 0.6555106529145946 0
2481 -0.7360998858274385 1.96002508759258 0
2482 1.960025087592581 0.7360998858274393 0
2483 0.7360998858274408 -1.960025087592581 0
2484 -1.960025087592581 -0.7360998858274408 0
2485 -0.9852292559364035 -2.574102272665288 0
2486 2.574102272665288 -0.9852292559364035 0
2487 0.9852902041483499 2.574220862101714 0
2488 -2.574241315509783 0.9851949252896109 0
2489 -1.906022642086762 0.7678325597055787 0
2490 -0.7678325597055782 -1.906022642086761 0
2491 1.906022642086761 -0.7678325597055782 0
2492 0.7678325597055781 1.906022642086762 0
2493 -1.576694812870374 0.5412819067900835 0
2494 1.576694812870374 -0.5412819067900839 0
2495 -0.541281906790084 -1.576694812870374 0
2496 0.5412819067900829 1.576694812870374 0
2497 0.06286040884714664 2.762694192450136 0
2498 -2.762694192450135 0.06286040884714728 0
2499 2.762694192450136 -0.06286040884714704 0
2500 -0.06286040884714997 -2.762694192450135 0
2501 1.669793587034047 -2.20379977623905 0
2502 -2.20379977623905 -1.669793587034046 0
2503 -1.669793587034047 2.20379977623905 0
2504 2.20379977623905 1.669793587034048 0
2505 -1.831804062978704 0.9785878092186091 0
2506 -0.9785878092186102 -1.831804062978704 0
2507 1.831804062978704 -0.97858780921861 0
2508 0.9785878092186091 1.831804062978704 0
2509 0.2298590504090497 2.33883992212036 0
2510 -0.2298603597334204 -2.338835196125653 0
2511 2.338835196125653 -0.2298603597334211 0
2512 -2.338922359594006 0.2298742282005425 0
2513 0.802308840823901 -2.521231701996893 0
2514 2.521217453314609 0.8023166731054577 0
2515 -0.8023087995157208 2.521219439559807 0
2516 -2.52121745331461 -0.8023166731054567 0
2517 1.770367803272229 1.96990684598386 0
2518 -1.770394113403396 -1.969901178465099 0
2519 -1.96990803738721 1.770395936232114 0
2520 1.969901178465099 -1.770394113403395 0
2521 0.1973314261771142 1.486317074278799 0
2522 1.4863170742788 -0.1973314261771157 0
2523 -1.486317074278799 0.1973314261771151 0
2524 -0.1973314261771158 -1.486317074278801 0
2525 0.7648657469126048 -2.657997310781091 0
2526 -0.7648657469126047 2.657997310781091 0
2527 2.65799121779281 0.764872209158091 0
2528 -2.65799121779281 -0.7648722091580907 0
2529 1.825590724608487 -1.739293326111514 0
2530 -1.739293326111515 -1.825590724608486 0
2531 -1.825598132244369 1.739295294766531 0
2532 1.739293310174029 1.825590728041614 0
2533 -0.3257644018613522 -1.095675625532417 0
2534 0.3257644018613521 1.095675625532417 0
2535 1.095675625532417 -0.3257644018613525 0
2536 -1.095675625532417 0.3257644018613522 0
2537 -1.808526764603657 1.309346602130251 0
2538 1.309344414735788 1.808518533897123 0
2539 -1.30934441473579 -1.808518533897121 0
2540 1.808525681474077 -1.309345346186177 0
2541 -0.8037995646413116 0.812727731160658 0
2542 0.812727731160658 0.8037995646413115 0
2543 0.8037995646413115 -0.8127277311606579 0
2544 -0.8127277311606579 -0.8037995646413115 0
2545 -1.861745952111993 -0.7048961710785435 0
2546 1.861745832829024 0.7048980319398795 0
2547 0.7048980319398807 -1.861745832829024 0
2548 -0.7048980319398791 1.861745832829023 0
2549 -1.715755464375428 -0.7480757414144894 0
2550 0.7480757414144887 -1.715755464375428 0
2551 1.715755464375428 0.7480757414144878 0
2552 -0.7480757414144883 1.715755464375429 0
2553 0.1950362599558608 2.568580098864407 0
2554 -2.568580098864405 0.1950362599558608 0
2555 -0.1950362599558592 -2.568580098864406 0
2556 2.568580098864405 -0.1950362599558593 0
2557 -0.8993041276915653 0.6651652415124869 0
2558 0.8993041276915651 -0.6651652415124869 0
2559 -0.6651652415124868 -0.899304127691565 0
2560 0.6651652415124869 0.8993041276915652 0
2561 -1.010551746196357 0.4795589267346497 0
2562 1.010551746196357 -0.4795589267346497 0
2563 0.4795589267346495 1.010551746196356 0
2564 -0.4795589267346497 -1.010551746196357 0
2565 2.04167480808599 1.412860583841705 0
2566 -2.041674808085991 -1.412860583841706 0
2567 -1.412860583841705 2.041674808085991 0
2568 1.412860583841707 -2.041674808085991 0
2569 -0.2406655468576271 2.182592111042501 0
2570 -2.182592111042501 -0.2406655468576278 0
2571 2.182592111042503 0.2406655468576274 0
2572 0.2406655468576282 -2.182592111042503 0
2573 -0.203022538844543 2.376332308952367 0
2574 2.376332308952368 0.2030225388445409 0
2575 -2.376332308952368 -0.203022538844541 0
2576 0.2030225388445436 -2.376332308952367 0
2577 -1.368896163566633 1.654188784415431 0
2578 1.368896163566635 -1.654188784415433 0
2579 1.654188784415431 1.368896163566633 0
2580 -1.654188784415432 -1.368896163566636 0
2581 -0.5211103356715427 -1.400443439038575 0
2582 1.400443439038575 -0.5211103356715433 0
2583 0.521110335671543 1.400443439038576 0
2584 -1.400443439038576 0.5211103356715435 0
2585 2.132406888539642 1.429548870676128 0
2586 -1.429548179930818 2.132406672411378 0
2587 1.42954817993082 -2.132406672411379 0
2588 -2.13240667241138 -1.429548179930819 0
2589 0.2632265284681656 1.931016007897904 0
2590 -1.931016007897905 0.2632265284681656 0
2591 -0.263226528468165 -1.931016007897905 0
2592 1.931016007897905 -0.2632265284681659 0
2593 0.03668719470694397 -2.118846808095805 0
2594 2.118846808095805 0.03668719470694379 0
2595 -2.118846808095805 -0.03668719470694341 0
2596 -0.03668719470694393 2.118846808095805 0
2597 -2.537718847120996 0.7232851273766145 0
2598 0.7233755915895153 2.537692314617333 0
2599 2.537676862782397 -0.7233896722120285 0
2600 -0.7233896722120288 -2.537676862782397 0
2601 -0.7410420898707081 2.211054637507536 0
2602 -2.211059095261702 -0.7410428543136728 0
2603 2.211059095261701 0.7410428543136739 0
2604 0.7410388295172378 -2.211068773457965 0
2605 1.731841829113276 -0.4904259715950725 0
2606 -0.4904259715950727 -1.731841829113276 0
2607 0.4904259715950742 1.731841829113276 0
2608 -1.731841829113276 0.4904259715950731 0
2609 -1.427064966772913 -2.019531321277325 0
2610 2.019531321277325 -1.427064966772913 0
2611 1.426878587849035 2.019571469539636 0
2612 -2.019531321277324 1.427064966772914 0
2613 -1.521720022022519 -2.036397460761629 0
2614 2.036397460761629 -1.521720022022518 0
2615 1.521473997874076 2.036517762410075 0
2616 -2.03645919106063 1.521736427480981 0
2617 0.7030621632139987 -2.070814772273957 0
2618 2.07081443050332 0.7030624761738924 0
2619 -2.07081443050332 -0.7030624761738922 0
2620 -0.7030624637365257 2.070814357976367 0
2621 -1.141352589472635 1.224379765760918 0
2622 1.224379765760918 1.141352589472635 0
2623 -1.224379765760918 -1.141352589472633 0
2624 1.141352729095446 -1.224379872195281 0
2625 -0.2436132018253996 1.524365673069632 0
2626 -1.524365673069632 -0.2436132018253973 0
2627 0.2436132018253987 -1.524365673069633 0
2628 1.52400495445007 0.2445138713478753 0
2629 2.276531719638863 1.422272229272065 0
2630 -1.422273168962203 2.276530552686855 0
2631 -2.276531460284945 -1.422271400377695 0
2632 1.422271400377696 -2.276531460284945 0
2633 -0.9665571709538554 2.058269657684315 0
2634 0.9667847586116459 -2.058323040247631 0
2635 2.058425281093689 0.966808229090502 0
2636 -2.058269657684312 -0.9665571709538529 0
2637 1.444054757005496 2.228103452290688 0
2638 -2.228080770374588 1.444066858092465 0
2639 2.228080770374591 -1.444066858092469 0
2640 -1.444066858092468 -2.22808077037459 0
2641 -1.19823423311406 -0.9761634350132391 0
2642 0.9761634350132383 -1.198234233114059 0
2643 -0.9761634350132389 1.198234233114059 0
2644 1.198234233114059 0.9761634350132379 0
2645 -0.4047100957508226 1.976843705470952 0
2646 -1.976933619780829 -0.4045285727329213 0
2647 0.4047100957508229 -1.976843705470952 0
2648 1.976843705470955 0.4047100957508222 0
2649 1.195229681818947 2.376730364666844 0
2650 -1.195301118416989 -2.376460069512541 0
2651 2.376460069512541 -1.195301118416989 0
2652 -2.376459694890362 1.195302594202348 0
2653 1.965415642507031 1.694984063369279 0
2654 -1.965415642507033 -1.694984063369279 0
2655 1.694984063369279 -1.965415642507034 0
2656 -1.694984063369278 1.965415642507032 0
2657 0.285313534727224 2.199842251875761 0
2658 -0.2852441319214555 -2.199772106660336 0
2659 2.199772106660335 -0.2852441319214566 0
2660 -2.199772106660336 0.2852441319214565 0
2661 -0.8899819657945078 0.97157711550647 0
2662 0.8899819657945077 -0.9715771155064702 0
2663 -0.97157711550647 -0.8899819657945078 0
2664 0.9715771155064705 0.8899819657945075 0
2665 -0.3268397604064728 -1.27684185127125 0
2666 1.27684185127125 -0.3268397604064728 0
2667 -1.276841851271251 0.3268397604064722 0
2668 0.3268397604064716 1.27684185127125 0
2669 -1.776188198827678 -2.114041857491224 0
2670 2.114041857491223 -1.776188198827677 0
2671 -2.114041857491223 1.776188198827678 0
2672 1.77615400213497 2.11405037862134 0
2673 0.217446751616099 -1.612832088899379 0
2674 -0.2174467516160991 1.612832088899379 0
2675 -1.612832088899378 -0.2174467516160969 0
2676 1.613363571470928 0.2180368615204398 0
2677 -1.905721543986645 1.51370577572045 0
2678 1.905537227223626 -1.512970656939502 0
2679 -1.515381753065887 -1.904551960707763 0
2680 1.515367230032858 1.904555089143787 0
2681 2.631200305510975 -0.0371463022331765 0
2682 -0.03714630223317975 -2.631200305510975 0
2683 -2.631200305510975 0.03714630223317835 0
2684 0.03714630223317703 2.631200305510976 0
2685 -1.469825405032155 -0.6559411812409227 0
2686 0.655941181240922 -1.469825405032155 0
2687 1.469825405032153 0.6559411812409202 0
2688 -0.6559411812409205 1.469825405032153 0
2689 1.855191221918918 0.4369218428100693 0
2690 0.4369218428100695 -1.855191221918918 0
2691 -1.855280217182722 -0.4367372119066262 0
2692 -0.436921842810068 1.855191221918917 0
2693 1.334544553401408 -1.576058167551945 0
2694 -1.576058167551945 -1.334544553401408 0
2695 -1.334544553401405 1.576058167551943 0
2696 1.576058167551943 1.334544553401406 0
2697 -1.292276861210092 -1.88359765431665 0
2698 1.883598607326911 -1.292276985403477 0
2699 1.292275505727008 1.883597946304014 0
2700 -1.88359875174419 1.292277152862688 0
2701 2.237973684887228 0.3898288771033271 0
2702 -2.237973684887224 -0.3898288771033271 0
2703 0.3898256134642504 -2.23797680873318 0
2704 -0.3898287977772013 2.237973222306783 0
2705 2.450764912099261 1.024773637316331 0
2706 -2.450764912099261 -1.024773637316331 0
2707 1.024773595573265 -2.450765015012126 0
2708 -1.024752343110169 2.450784655828258 0
2709 1.320462085616049 -0.1054780085717533 0
2710 0.1054780085717528 1.320462085616048 0
2711 -1.320462085616048 0.1054780085717524 0
2712 -0.1054780085717528 -1.320462085616049 0
$EndNodes
$Elements
5424
1 1 2 5 1 1 9
2 1 2 5 1 9 10
3 1 2 5 1 10 11
4 1 2 5 1 11 12
5 1 2 5 1 12 13
6 1 2 5 1 13 14
7 1 2 5 1 14 15
8 1 2 5 1 15 16
9 1 2 5 1 16 17
10 1 2 5 1 17 18
11 1 2 5 1 18 19
12 1 2 5 1 19 20
13 1 2 5 1 20 21
14 1 2 5 1 21 22
15 1 2 5 1 22 23
16 1 2 5 1 23 24
17 1 2 5 1 24 25
18 1 2 5 1 25 26
19 1 2 5 1 26 27
20 1 2 5 1 27 28
21 1 2 5 1 28 29
22 1 2 5 1 29 30
23 1 2 5 1 30 31
24 1 2 5 1 31 32
25 1 2 5 1 32 33
26 1 2 5 1 33 34
27 1 2 5 1 34 35
28 1 2 5 1 35 36
29 1 2 5 1 36 37
30 1 2 5 1 37 38
31 1 2 5 1 38 39
32 1 2 5 1 39 40
33 1 2 5 1 40 41
34 1 2 5 1 41 42
35 1 2 5 1 42 43
36 1 2 5 1 43 44
37 1 2 5 1 44 45
38 1 2 5 1 45 46
39 1 2 5 1 46 47
40 1 2 5 1 47 48
41 1 2 5 1 48 49
42 1 2 5 1 49 2
43 1 2 5 2 2 50
44 1 2 5 2 50 51
45 1 2 5 2 51 52
46 1 2 5 2 52 53
47 1 2 5 2 53 54
48 1 2 5 2 54 55
49 1 2 5 2 55 56
50 1 2 5 2 56 57
51 1 2 5 2 57 58
52 1 2 5 2 58 59
53 1 2 5 2 59 60
54 1 2 5 2 60 61
55 1 2 5 2 61 62
56 1 2 5 2 62 63
57 1 2 5 2 63 64
58 1 2 5 2 64 65
59 1 2 5 2 65 66
60 1 2 5 2 66 67
61 1 2 5 2 67 68
62 1 2 5 2 68 69
63 1 2 5 2 69 70
64 1 2 5 2 70 71
65 1 2 5 2 71 72
66 1 2 5 2 72 73
67 1 2 5 2 73 74
68 1 2 5 2 74 75
69 1 2 5 2 75 76
70 1 2 5 2 76 77
71 1 2 5 2 77 78
72 1 2 5 2 78 79
73 1 2 5 2 79 80
74 1 2 5 2 80 81
75 1 2 5 2 81 82
76 1 2 5 2 82 83
77 1 2 5 2 83 84
78 1 2 5 2 84 85
79 1 2 5 2 85 86
80 1 2 5 2 86 87
81 1 2 5 2 87 88
82 1 2 5 2 88 89
83 1 2 5 2 89 90
84 1 2 5 2 90 3
85 1 2 5 3 3 91
86 1 2 5 3 91 92
87 1 2 5 3 92 93
88 1 2 5 3 93 94
89 1 2 5 3 94 95
90 1 2 5 3 95 96
91 1 2 5 3 96 97
92 1 2 5 3 97 98
93 1 2 5 3 98 99
94 1 2 5 3 99 100
95 1 2 5 3 100 101
96 1 2 5 3 101 102
97 1 2 5 3 102 103
98 1 2 5 3 103 104
99 1 2 5 3 104 105
100 1 2 5 3 105 106
101 1 2 5 3 106 107
102 1 2 5 3 107 108
103 1 2 5 3 108 109
104 1 2 5 3 109 110
105 1 2 5 3 110 111
106 1 2 5 3 111 112
107 1 2 5 3 112 113
108 1 2 5 3 113 114
109 1 2 5 3 114 115
110 1 2 5 3 115 116
111 1 2 5 3 116 117
112 1 2 5 3 117 118
113 1 2 5 3 118 119
114 1 2 5 3 119 120
115 1 2 5 3 120 121
116 1 2 5 3 121 122
117 1 2 5 3 122 123
118 1 2 5 3 123 124
119 1 2 5 3 124 125
120 1 2 5 3 125 126
121 1 2 5 3 126 127
122 1 2 5 3 127 128
123 1 2 5 3 128 129
124 1 2 5 3 129 130
125 1 2 5 3 130 131
126 1 2 5 3 131 4
127 1 2 5 4 4 132
128 1 2 5 4 132 133
129 1 2 5 4 133 134
130 1 2 5 4 134 135
131 1 2 5 4 135 136
132 1 2 5 4 136 137
133 1 2 5 4 137 138
134 1 2 5 4 138 139
135 1 2 5 4 139 140
136 1 2 5 4 140 141
137 1 2 5 4 141 142
138 1 2 5 4 142 143
139 1 2 5 4 143 144
140 1 2 5 4 144 145
141 1 2 5 4 145 146
142 1 2 5 4 146 147
143 1 2 5 4 147 148
144 1 2 5 4 148 149
145 1 2 5 4 149 150
146 1 2 5 4 150 151
147 1 2 5 4 151 152
148 1 2 5 4 152 153
149 1 2 5 4 153 154
150 1 2 5 4 154 155
151 1 2 5 4 155 156
152 1 2 5 4 156 157
153 1 2 5 4 157 158
154 1 2 5 4 158 159
155 1 2 5 4 159 160
156 1 2 5 4 160 161
157 1 2 5 4 161 162
158 1 2 5 4 162 163
159 1 2 5 4 163 164
160 1 2 5 4 164 165
161 1 2 5 4 165 166
162 1 2 5 4 166 167
163 1 2 5 4 167 168
164 1 2 5 4 168 169
165 1 2 5 4 169 170
166 1 2 5 4 170 171
167 1 2 5 4 171 172
168 1 2 5 4 172 1
169 1 2 6 5 5 173
170 1 2 6 5 173 174
171 1 2 6 5 174 175
172 1 2 6 5 175 176
173 1 2 6 5 176 177
174 1 2 6 5 177 178
175 1 2 6 5 178 179
176 1 2 6 5 179 180
177 1 2 6 5 180 181
178 1 2 6 5 181 182
179 1 2 6 5 182 183
180 1 2 6 5 183 184
181 1 2 6 5 184 185
182 1 2 6 5 185 186
183 1 2 6 5 186 187
184 1 2 6 5 187 6
185 1 2 6 6 6 188
186 1 2 6 6 188 189
187 1 2 6 6 189 190
188 1 2 6 6 190 191
189 1 2 6 6 191 192
190 1 2 6 6 192 193
191 1 2 6 6 193 194
192 1 2 6 6 194 195
193 1 2 6 6 195 196
194 1 2 6 6 196 197
195 1 2 6 6 197 198
196 1 2 6 6 198 199
197 1 2 6 6 199 200
198 1 2 6 6 200 201
199 1 2 6 6 201 202
200 1 2 6 6 202 7
201 1 2 6 7 7 203
202 1 2 6 7 203 204
203 1 2 6 7 204 205
204 1 2 6 7 205 206
205 1 2 6 7 206 207
206 1 2 6 7 207 208
207 1 2 6 7 208 209
208 1 2 6 7 209 210
209 1 2 6 7 210 211
210 1 2 6 7 211 212
211 1 2 6 7 212 213
212 1 2 6 7 213 214
213 1 2 6 7 214 215
214 1 2 6 7 215 216
215 1 2 6 7 216 217
216 1 2 6 7 217 8
217 1 2 6 8 8 218
218 1 2 6 8 218 219
219 1 2 6 8 219 220
220 1 2 6 8 220 221
221 1 2 6 8 221 222
222 1 2 6 8 222 223
223 1 2 6 8 223 224
224 1 2 6 8 224 225
225 1 2 6 8 225 226
226 1 2 6 8 226 227
227 1 2 6 8 227 228
228 1 2 6 8 228 229
229 1 2 6 8 229 230
230 1 2 6 8 230 231
231 1 2 6 8 231 232
232 1 2 6 8 232 5
233 2 2 7 11 486 926 1107
234 2 2 7 11 488 925 1105
235 2 2 7 11 485 928 1108
236 2 2 7 11 487 927 1106
237 2 2 7 11 356 837 1609
238 2 2 7 11 354 839 1610
239 2 2 7 11 355 838 1611
240 2 2 7 11 353 840 1612
241 2 2 7 11 554 1609 837
242 2 2 7 11 555 1612 840
243 2 2 7 11 553 1611 838
244 2 2 7 11 556 1610 839
245 2 2 7 11 98 1436 2057
246 2 2 7 11 16 1433 2058
247 2 2 7 11 139 1434 2059
248 2 2 7 11 57 1435 2060
249 2 2 7 11 393 2091 905
250 2 2 7 11 394 2090 906
251 2 2 7 11 396 2089 908
252 2 2 7 11 395 2092 907
253 2 2 7 11 407 2161 864
254 2 2 7 11 406 2163 862
255 2 2 7 11 405 2162 861
256 2 2 7 11 408 2164 863
257 2 2 7 11 782 1085 2015
258 2 2 7 11 783 1087 2013
259 2 2 7 11 784 1088 2016
260 2 2 7 11 781 1086 2014
261 2 2 7 11 928 2329 1108
262 2 2 7 11 926 2330 1107
263 2 2 7 11 927 2331 1106
264 2 2 7 11 925 2332 1105
265 2 2 7 11 2 50 1124
266 2 2 7 11 4 132 1121
267 2 2 7 11 3 91 1122
268 2 2 7 11 1 9 1123
269 2 2 7 11 658 970 1792
270 2 2 7 11 660 969 1790
271 2 2 7 11 659 972 1789
272 2 2 7 11 657 971 1791
273 2 2 7 11 411 924 2688
274 2 2 7 11 412 923 2687
275 2 2 7 11 410 921 2686
276 2 2 7 11 409 922 2685
277 2 2 7 11 415 1108 2329
278 2 2 7 11 416 1107 2330
279 2 2 7 11 414 1106 2331
280 2 2 7 11 413 1105 2332
281 2 2 7 11 673 1957 1090
282 2 2 7 11 674 1959 1089
283 2 2 7 11 676 1960 1092
284 2 2 7 11 675 1958 1091
285 2 2 7 11 505 901 1341
286 2 2 7 11 506 902 1342
287 2 2 7 11 508 903 1343
288 2 2 7 11 507 904 1344
289 2 2 7 11 256 1239 870
290 2 2 7 11 253 1238 869
291 2 2 7 11 254 1237 872
292 2 2 7 11 255 1240 871
293 2 2 7 11 107 1041 1184
294 2 2 7 11 25 1042 1182
295 2 2 7 11 66 1044 1183
296 2 2 7 11 148 1043 1181
297 2 2 7 11 406 862 2004
298 2 2 7 11 407 864 2001
299 2 2 7 11 405 861 2003
300 2 2 7 11 408 863 2002
301 2 2 7 11 288 859 1154
302 2 2 7 11 287 860 1153
303 2 2 7 11 285 858 1155
304 2 2 7 11 286 857 1156
305 2 2 7 11 673 1090 1993
306 2 2 7 11 676 1092 1996
307 2 2 7 11 674 1089 1994
308 2 2 7 11 675 1091 1995
309 2 2 7 11 511 981 1353
310 2 2 7 11 512 982 1354
311 2 2 7 11 510 983 1355
312 2 2 7 11 509 984 1356
313 2 2 7 11 1076 2418 944
314 2 2 7 11 1073 2419 943
315 2 2 7 11 1075 2420 942
316 2 2 7 11 1074 2417 941
317 2 2 7 11 1076 434 2418
318 2 2 7 11 1073 433 2419
319 2 2 7 11 1075 436 2420
320 2 2 7 11 1074 435 2417
321 2 2 7 11 411 2688 1112
322 2 2 7 11 412 2687 1111
323 2 2 7 11 410 2686 1109
324 2 2 7 11 409 2685 1110
325 2 2 7 11 474 1691 839
326 2 2 7 11 475 1692 838
327 2 2 7 11 476 1690 837
328 2 2 7 11 473 1689 840
329 2 2 7 11 781 1640 1086
330 2 2 7 11 782 1637 1085
331 2 2 7 11 783 1639 1087
332 2 2 7 11 784 1638 1088
333 2 2 7 11 474 839 1521
334 2 2 7 11 475 838 1522
335 2 2 7 11 476 837 1523
336 2 2 7 11 473 840 1524
337 2 2 7 11 726 1702 2076
338 2 2 7 11 727 1703 2073
339 2 2 7 11 725 1701 2075
340 2 2 7 11 728 1704 2074
341 2 2 7 11 134 135 1326
342 2 2 7 11 11 12 1327
343 2 2 7 11 52 53 1328
344 2 2 7 11 93 94 1325
345 2 2 7 11 269 2015 1085
346 2 2 7 11 271 2013 1087
347 2 2 7 11 272 2016 1088
348 2 2 7 11 270 2014 1086
349 2 2 7 11 134 1326 1505
350 2 2 7 11 11 1327 1507
351 2 2 7 11 52 1328 1506
352 2 2 7 11 93 1325 1508
353 2 2 7 11 125 2276 1346
354 2 2 7 11 84 2274 1345
355 2 2 7 11 43 2273 1348
356 2 2 7 11 166 2275 1347
357 2 2 7 11 2 1124 1980
358 2 2 7 11 4 1121 1977
359 2 2 7 11 1 1123 1978
360 2 2 7 11 3 1122 1979
361 2 2 7 11 572 1107 990
362 2 2 7 11 570 1105 992
363 2 2 7 11 569 1106 991
364 2 2 7 11 571 1108 989
365 2 2 7 11 414 991 1106
366 2 2 7 11 413 992 1105
367 2 2 7 11 415 989 1108
368 2 2 7 11 416 990 1107
369 2 2 7 11 519 1430 888
370 2 2 7 11 520 1432 885
371 2 2 7 11 518 1429 886
372 2 2 7 11 517 1431 887
373 2 2 7 11 519 892 1430
374 2 2 7 11 520 891 1432
375 2 2 7 11 518 889 1429
376 2 2 7 11 517 890 1431
377 2 2 7 11 48 1322 2069
378 2 2 7 11 89 1324 2070
379 2 2 7 11 130 1323 2071
380 2 2 7 11 171 1321 2072
381 2 2 7 11 474 857 1691
382 2 2 7 11 473 858 1689
383 2 2 7 11 475 860 1692
384 2 2 7 11 476 859 1690
385 2 2 7 11 753 1137 1486
386 2 2 7 11 754 1138 1485
387 2 2 7 11 756 1140 1487
388 2 2 7 11 755 1139 1488
389 2 2 7 11 1067 728 2074
390 2 2 7 11 1068 727 2073
391 2 2 7 11 1065 725 2075
392 2 2 7 11 1066 726 2076
393 2 2 7 11 474 1821 857
394 2 2 7 11 476 1823 859
395 2 2 7 11 473 1822 858
396 2 2 7 11 475 1824 860
397 2 2 7 11 970 2194 1792
398 2 2 7 11 972 2196 1789
399 2 2 7 11 969 2193 1790
400 2 2 7 11 971 2195 1791
401 2 2 7 11 597 1544 1136
402 2 2 7 11 598 1543 1133
403 2 2 7 11 600 1542 1135
404 2 2 7 11 599 1541 1134
405 2 2 7 11 524 1408 1057
406 2 2 7 11 521 1405 1058
407 2 2 7 11 523 1406 1060
408 2 2 7 11 522 1407 1059
409 2 2 7 11 573 987 1112
410 2 2 7 11 574 988 1111
411 2 2 7 11 576 986 1109
412 2 2 7 11 575 985 1110
413 2 2 7 11 411 1112 987
414 2 2 7 11 412 1111 988
415 2 2 7 11 410 1109 986
416 2 2 7 11 409 1110 985
417 2 2 7 11 550 1497 1761
418 2 2 7 11 549 1498 1764
419 2 2 7 11 551 1500 1762
420 2 2 7 11 552 1499 1763
421 2 2 7 11 453 1486 1137
422 2 2 7 11 454 1485 1138
423 2 2 7 11 456 1487 1140
424 2 2 7 11 455 1488 1139
425 2 2 7 11 260 1201 1149
426 2 2 7 11 259 1202 1152
427 2 2 7 11 258 1204 1151
428 2 2 7 11 257 1203 1150
429 2 2 7 11 521 1058 1116
430 2 2 7 11 522 1059 1115
431 2 2 7 11 524 1057 1114
432 2 2 7 11 523 1060 1113
433 2 2 7 11 572 1151 1204
434 2 2 7 11 569 1149 1201
435 2 2 7 11 571 1152 1202
436 2 2 7 11 570 1150 1203
437 2 2 7 11 1047 905 2091
438 2 2 7 11 1046 908 2089
439 2 2 7 11 1048 906 2090
440 2 2 7 11 1045 907 2092
441 2 2 7 11 740 1312 965
442 2 2 7 11 737 1309 968
443 2 2 7 11 738 1311 967
444 2 2 7 11 739 1310 966
445 2 2 7 11 373 1116 1058
446 2 2 7 11 376 1113 1060
447 2 2 7 11 374 1115 1059
448 2 2 7 11 375 1114 1057
449 2 2 7 11 550 1761 1281
450 2 2 7 11 549 1764 1282
451 2 2 7 11 551 1762 1284
452 2 2 7 11 552 1763 1283
453 2 2 7 11 668 1355 1627
454 2 2 7 11 667 1356 1628
455 2 2 7 11 666 1353 1625
456 2 2 7 11 665 1354 1626
457 2 2 7 11 153 1361 1725
458 2 2 7 11 112 1363 1728
459 2 2 7 11 30 1364 1726
460 2 2 7 11 71 1362 1727
461 2 2 7 11 694 1086 1090
462 2 2 7 11 693 1087 1092
463 2 2 7 11 695 1085 1089
464 2 2 7 11 696 1088 1091
465 2 2 7 11 441 1090 1086
466 2 2 7 11 444 1089 1085
467 2 2 7 11 442 1091 1088
468 2 2 7 11 443 1092 1087
469 2 2 7 11 48 49 1322
470 2 2 7 11 89 90 1324
471 2 2 7 11 130 131 1323
472 2 2 7 11 171 172 1321
473 2 2 7 11 354 1521 839
474 2 2 7 11 356 1523 837
475 2 2 7 11 355 1522 838
476 2 2 7 11 353 1524 840
477 2 2 7 11 268 1317 1205
478 2 2 7 11 267 1318 1206
479 2 2 7 11 265 1319 1207
480 2 2 7 11 266 1320 1208
481 2 2 7 11 732 1479 913
482 2 2 7 11 729 1477 914
483 2 2 7 11 731 1480 915
484 2 2 7 11 730 1478 916
485 2 2 7 11 669 1396 1536
486 2 2 7 11 670 1395 1535
487 2 2 7 11 671 1394 1534
488 2 2 7 11 672 1393 1533
489 2 2 7 11 640 1743 937
490 2 2 7 11 639 1744 940
491 2 2 7 11 638 1741 939
492 2 2 7 11 637 1742 938
493 2 2 7 11 233 937 1743
494 2 2 7 11 236 939 1741
495 2 2 7 11 235 938 1742
496 2 2 7 11 234 940 1744
497 2 2 7 11 641 1205 1317
498 2 2 7 11 643 1206 1318
499 2 2 7 11 644 1207 1319
500 2 2 7 11 642 1208 1320
501 2 2 7 11 288 1154 922
502 2 2 7 11 287 1153 921
503 2 2 7 11 285 1155 924
504 2 2 7 11 286 1156 923
505 2 2 7 11 492 1156 1100
506 2 2 7 11 491 1155 1099
507 2 2 7 11 489 1154 1098
508 2 2 7 11 490 1153 1097
509 2 2 7 11 555 840 2125
510 2 2 7 11 553 838 2126
511 2 2 7 11 554 837 2127
512 2 2 7 11 556 839 2128
513 2 2 7 11 86 87 1062
514 2 2 7 11 168 169 1063
515 2 2 7 11 45 46 1064
516 2 2 7 11 127 128 1061
517 2 2 7 11 301 1709 849
518 2 2 7 11 304 1712 852
519 2 2 7 11 302 1710 851
520 2 2 7 11 303 1711 850
521 2 2 7 11 397 1669 1606
522 2 2 7 11 399 1672 1607
523 2 2 7 11 398 1671 1605
524 2 2 7 11 400 1670 1608
525 2 2 7 11 1136 1544 2157
526 2 2 7 11 1133 1543 2158
527 2 2 7 11 1135 1542 2160
528 2 2 7 11 1134 1541 2159
529 2 2 7 11 319 1049 1393
530 2 2 7 11 318 1050 1394
531 2 2 7 11 317 1051 1395
532 2 2 7 11 320 1052 1396
533 2 2 7 11 441 1086 1640
534 2 2 7 11 444 1085 1637
535 2 2 7 11 443 1087 1639
536 2 2 7 11 442 1088 1638
537 2 2 7 11 1049 563 1393
538 2 2 7 11 1051 561 1395
539 2 2 7 11 1050 564 1394
540 2 2 7 11 1052 562 1396
541 2 2 7 11 256 870 1852
542 2 2 7 11 255 871 1850
543 2 2 7 11 254 872 1851
544 2 2 7 11 253 869 1849
545 2 2 7 11 561 1716 873
546 2 2 7 11 564 1713 876
547 2 2 7 11 562 1715 874
548 2 2 7 11 563 1714 875
549 2 2 7 11 321 1074 1662
550 2 2 7 11 322 1073 1661
551 2 2 7 11 324 1075 1663
552 2 2 7 11 323 1076 1664
553 2 2 7 11 864 2161 1021
554 2 2 7 11 863 2164 1022
555 2 2 7 11 861 2162 1023
556 2 2 7 11 862 2163 1024
557 2 2 7 11 312 933 1213
558 2 2 7 11 310 934 1215
559 2 2 7 11 309 936 1214
560 2 2 7 11 311 935 1216
561 2 2 7 11 1028 1525 690
562 2 2 7 11 692 1025 1528
563 2 2 7 11 1027 1526 691
564 2 2 7 11 1026 1527 689
565 2 2 7 11 596 1509 1030
566 2 2 7 11 593 1510 1029
567 2 2 7 11 594 1511 1031
568 2 2 7 11 1032 595 1512
569 2 2 7 11 357 1497 1467
570 2 2 7 11 358 1498 1466
571 2 2 7 11 360 1499 1468
572 2 2 7 11 359 1500 1465
573 2 2 7 11 822 1665 2253
574 2 2 7 11 823 1667 2256
575 2 2 7 11 821 1668 2254
576 2 2 7 11 824 1666 2255
577 2 2 7 11 165 1347 1847
578 2 2 7 11 124 1346 1845
579 2 2 7 11 83 1345 1848
580 2 2 7 11 42 1348 1846
581 2 2 7 11 814 1467 1497
582 2 2 7 11 815 1466 1498
583 2 2 7 11 816 1468 1499
584 2 2 7 11 813 1465 1500
585 2 2 7 11 495 865 1339
586 2 2 7 11 494 868 1337
587 2 2 7 11 496 867 1338
588 2 2 7 11 493 866 1340
589 2 2 7 11 561 873 1858
590 2 2 7 11 562 874 1860
591 2 2 7 11 564 876 1859
592 2 2 7 11 563 875 1857
593 2 2 7 11 287 1692 860
594 2 2 7 11 288 1690 859
595 2 2 7 11 285 1689 858
596 2 2 7 11 286 1691 857
597 2 2 7 11 407 1009 1945
598 2 2 7 11 408 1012 1946
599 2 2 7 11 405 1011 1947
600 2 2 7 11 406 1010 1948
601 2 2 7 11 718 1945 1009
602 2 2 7 11 717 1946 1012
603 2 2 7 11 720 1947 1011
604 2 2 7 11 719 1948 1010
605 2 2 7 11 278 1756 2401
606 2 2 7 11 279 1754 2403
607 2 2 7 11 277 1753 2402
608 2 2 7 11 280 1755 2404
609 2 2 7 11 650 1495 974
610 2 2 7 11 649 1496 975
611 2 2 7 11 651 1494 973
612 2 2 7 11 652 1493 976
613 2 2 7 11 312 1888 883
614 2 2 7 11 309 1887 881
615 2 2 7 11 310 1885 882
616 2 2 7 11 311 1886 884
617 2 2 7 11 520 885 1895
618 2 2 7 11 518 886 1896
619 2 2 7 11 519 888 1893
620 2 2 7 11 517 887 1894
621 2 2 7 11 517 1890 890
622 2 2 7 11 520 1891 891
623 2 2 7 11 519 1889 892
624 2 2 7 11 518 1892 889
625 2 2 7 11 448 2393 1591
626 2 2 7 11 447 2394 1592
627 2 2 7 11 446 2396 1589
628 2 2 7 11 445 2395 1590
629 2 2 7 11 506 1342 918
630 2 2 7 11 505 1341 917
631 2 2 7 11 508 1343 919
632 2 2 7 11 507 1344 920
633 2 2 7 11 1074 2093 1662
634 2 2 7 11 1075 2094 1663
635 2 2 7 11 1073 2095 1661
636 2 2 7 11 1076 2096 1664
637 2 2 7 11 40 1846 1031
638 2 2 7 11 81 1848 1032
639 2 2 7 11 122 1845 1029
640 2 2 7 11 163 1847 1030
641 2 2 7 11 1030 1509 2707
642 2 2 7 11 1031 1511 2705
643 2 2 7 11 1032 1512 2708
644 2 2 7 11 1029 1510 2706
645 2 2 7 11 301 849 1519
646 2 2 7 11 302 851 1520
647 2 2 7 11 303 850 1518
648 2 2 7 11 304 852 1517
649 2 2 7 11 878 1346 2276
650 2 2 7 11 877 1345 2274
651 2 2 7 11 880 1348 2273
652 2 2 7 11 879 1347 2275
653 2 2 7 11 1057 1408 1817
654 2 2 7 11 1058 1405 1818
655 2 2 7 11 1060 1406 1820
656 2 2 7 11 1059 1407 1819
657 2 2 7 11 448 1591 1008
658 2 2 7 11 447 1592 1005
659 2 2 7 11 446 1589 1006
660 2 2 7 11 445 1590 1007
661 2 2 7 11 237 1278 909
662 2 2 7 11 239 1279 912
663 2 2 7 11 240 1280 911
664 2 2 7 11 238 1277 910
665 2 2 7 11 1007 2490 1530
666 2 2 7 11 1006 2491 1531
667 2 2 7 11 1005 2489 1529
668 2 2 7 11 1008 2492 1532
669 2 2 7 11 495 912 1279
670 2 2 7 11 494 909 1278
671 2 2 7 11 493 910 1277
672 2 2 7 11 496 911 1280
673 2 2 7 11 387 877 1734
674 2 2 7 11 386 879 1736
675 2 2 7 11 388 878 1735
676 2 2 7 11 385 880 1733
677 2 2 7 11 972 1398 2384
678 2 2 7 11 971 1397 2381
679 2 2 7 11 970 1399 2382
680 2 2 7 11 969 1400 2383
681 2 2 7 11 284 2189 1197
682 2 2 7 11 283 2192 1199
683 2 2 7 11 281 2191 1198
684 2 2 7 11 282 2190 1200
685 2 2 7 11 925 1197 2189
686 2 2 7 11 927 1199 2192
687 2 2 7 11 928 1198 2191
688 2 2 7 11 926 1200 2190
689 2 2 7 11 312 883 1834
690 2 2 7 11 310 882 1833
691 2 2 7 11 309 881 1836
692 2 2 7 11 311 884 1835
693 2 2 7 11 511 2390 981
694 2 2 7 11 512 2389 982
695 2 2 7 11 510 2391 983
696 2 2 7 11 509 2392 984
697 2 2 7 11 488 1197 925
698 2 2 7 11 486 1200 926
699 2 2 7 11 487 1199 927
700 2 2 7 11 485 1198 928
701 2 2 7 11 956 2401 1756
702 2 2 7 11 954 2403 1754
703 2 2 7 11 955 2404 1755
704 2 2 7 11 953 2402 1753
705 2 2 7 11 433 2707 1509
706 2 2 7 11 435 2705 1511
707 2 2 7 11 434 2706 1510
708 2 2 7 11 436 2708 1512
709 2 2 7 11 513 2384 1398
710 2 2 7 11 514 2381 1397
711 2 2 7 11 516 2382 1399
712 2 2 7 11 515 2383 1400
713 2 2 7 11 956 1591 2393
714 2 2 7 11 953 1592 2394
715 2 2 7 11 955 1590 2395
716 2 2 7 11 954 1589 2396
717 2 2 7 11 676 902 1960
718 2 2 7 11 673 904 1957
719 2 2 7 11 674 903 1959
720 2 2 7 11 675 901 1958
721 2 2 7 11 516 1382 1316
722 2 2 7 11 514 1381 1314
723 2 2 7 11 515 1384 1315
724 2 2 7 11 513 1383 1313
725 2 2 7 11 337 1530 2490
726 2 2 7 11 338 1531 2491
727 2 2 7 11 340 1529 2489
728 2 2 7 11 339 1532 2492
729 2 2 7 11 449 2570 1482
730 2 2 7 11 450 2569 1481
731 2 2 7 11 452 2571 1483
732 2 2 7 11 451 2572 1484
733 2 2 7 11 55 2060 1009
734 2 2 7 11 14 2058 1010
735 2 2 7 11 137 2059 1011
736 2 2 7 11 96 2057 1012
737 2 2 7 11 505 1330 901
738 2 2 7 11 506 1329 902
739 2 2 7 11 508 1332 903
740 2 2 7 11 507 1331 904
741 2 2 7 11 801 1606 1669
742 2 2 7 11 803 1605 1671
743 2 2 7 11 802 1607 1672
744 2 2 7 11 804 1608 1670
745 2 2 7 11 86 1062 1602
746 2 2 7 11 45 1064 1601
747 2 2 7 11 127 1061 1603
748 2 2 7 11 168 1063 1604
749 2 2 7 11 247 1104 1515
750 2 2 7 11 245 1102 1514
751 2 2 7 11 246 1103 1516
752 2 2 7 11 248 1101 1513
753 2 2 7 11 495 1969 865
754 2 2 7 11 494 1971 868
755 2 2 7 11 496 1970 867
756 2 2 7 11 493 1972 866
757 2 2 7 11 668 1186 1355
758 2 2 7 11 667 1185 1356
759 2 2 7 11 666 1187 1353
760 2 2 7 11 665 1188 1354
761 2 2 7 11 425 887 2042
762 2 2 7 11 426 885 2041
763 2 2 7 11 427 886 2044
764 2 2 7 11 428 888 2043
765 2 2 7 11 429 2046 890
766 2 2 7 11 430 2047 889
767 2 2 7 11 432 2045 891
768 2 2 7 11 431 2048 892
769 2 2 7 11 505 917 1289
770 2 2 7 11 506 918 1292
771 2 2 7 11 507 920 1290
772 2 2 7 11 508 919 1291
773 2 2 7 11 388 1674 878
774 2 2 7 11 387 1676 877
775 2 2 7 11 386 1673 879
776 2 2 7 11 385 1675 880
777 2 2 7 11 593 2348 1510
778 2 2 7 11 595 2347 1512
779 2 2 7 11 594 2346 1511
780 2 2 7 11 596 2345 1509
781 2 2 7 11 288 922 2130
782 2 2 7 11 287 921 2132
783 2 2 7 11 285 924 2129
784 2 2 7 11 286 923 2131
785 2 2 7 11 717 2057 1436
786 2 2 7 11 720 2059 1434
787 2 2 7 11 719 2058 1433
788 2 2 7 11 718 2060 1435
789 2 2 7 11 399 910 1672
790 2 2 7 11 397 909 1669
791 2 2 7 11 398 911 1671
792 2 2 7 11 400 912 1670
793 2 2 7 11 396 1461 1169
794 2 2 7 11 395 1464 1170
795 2 2 7 11 394 1462 1172
796 2 2 7 11 393 1463 1171
797 2 2 7 11 741 1295 1737
798 2 2 7 11 742 1293 1739
799 2 2 7 11 743 1294 1740
800 2 2 7 11 744 1296 1738
801 2 2 7 11 732 913 2281
802 2 2 7 11 729 914 2284
803 2 2 7 11 731 915 2283
804 2 2 7 11 730 916 2282
805 2 2 7 11 464 948 1244
806 2 2 7 11 463 947 1243
807 2 2 7 11 461 946 1241
808 2 2 7 11 462 945 1242
809 2 2 7 11 280 2375 1755
810 2 2 7 11 279 2376 1754
811 2 2 7 11 278 2373 1756
812 2 2 7 11 277 2374 1753
813 2 2 7 11 588 978 1217
814 2 2 7 11 585 979 1218
815 2 2 7 11 586 980 1219
816 2 2 7 11 587 977 1220
817 2 2 7 11 107 108 1041
818 2 2 7 11 66 67 1044
819 2 2 7 11 148 149 1043
820 2 2 7 11 25 26 1042
821 2 2 7 11 468 1063 1236
822 2 2 7 11 467 1061 1233
823 2 2 7 11 466 1062 1234
824 2 2 7 11 465 1064 1235
825 2 2 7 11 425 1894 887
826 2 2 7 11 426 1895 885
827 2 2 7 11 427 1896 886
828 2 2 7 11 428 1893 888
829 2 2 7 11 429 890 1890
830 2 2 7 11 430 889 1892
831 2 2 7 11 432 891 1891
832 2 2 7 11 431 892 1889
833 2 2 7 11 709 1115 1702
834 2 2 7 11 710 1116 1701
835 2 2 7 11 712 1114 1704
836 2 2 7 11 711 1113 1703
837 2 2 7 11 374 1702 1115
838 2 2 7 11 373 1701 1116
839 2 2 7 11 376 1703 1113
840 2 2 7 11 375 1704 1114
841 2 2 7 11 608 1179 1793
842 2 2 7 11 605 1177 1794
843 2 2 7 11 606 1180 1795
844 2 2 7 11 607 1178 1796
845 2 2 7 11 409 2251 922
846 2 2 7 11 410 2252 921
847 2 2 7 11 412 2249 923
848 2 2 7 11 411 2250 924
849 2 2 7 11 293 1270 2153
850 2 2 7 11 294 1269 2154
851 2 2 7 11 295 1271 2155
852 2 2 7 11 296 1272 2156
853 2 2 7 11 437 2253 1665
854 2 2 7 11 439 2255 1666
855 2 2 7 11 438 2256 1667
856 2 2 7 11 440 2254 1668
857 2 2 7 11 1270 930 2153
858 2 2 7 11 1269 929 2154
859 2 2 7 11 1272 931 2156
860 2 2 7 11 1271 932 2155
861 2 2 7 11 481 1184 1041
862 2 2 7 11 482 1182 1042
863 2 2 7 11 483 1181 1043
864 2 2 7 11 484 1183 1044
865 2 2 7 11 1071 2003 861
866 2 2 7 11 1072 2004 862
867 2 2 7 11 1069 2001 864
868 2 2 7 11 1070 2002 863
869 2 2 7 11 587 2264 977
870 2 2 7 11 585 2263 979
871 2 2 7 11 586 2262 980
872 2 2 7 11 588 2261 978
873 2 2 7 11 1179 1878 1793
874 2 2 7 11 1180 1877 1795
875 2 2 7 11 1177 1880 1794
876 2 2 7 11 1178 1879 1796
877 2 2 7 11 690 1525 2141
878 2 2 7 11 692 1528 2143
879 2 2 7 11 691 1526 2142
880 2 2 7 11 689 1527 2144
881 2 2 7 11 540 899 1506
882 2 2 7 11 537 897 1507
883 2 2 7 11 539 900 1508
884 2 2 7 11 538 898 1505
885 2 2 7 11 571 1213 1152
886 2 2 7 11 572 1216 1151
887 2 2 7 11 570 1215 1150
888 2 2 7 11 569 1214 1149
889 2 2 7 11 480 1152 1213
890 2 2 7 11 479 1150 1215
891 2 2 7 11 477 1149 1214
892 2 2 7 11 478 1151 1216
893 2 2 7 11 632 1316 1382
894 2 2 7 11 630 1314 1381
895 2 2 7 11 629 1313 1383
896 2 2 7 11 631 1315 1384
897 2 2 7 11 603 1231 1882
898 2 2 7 11 604 1232 1884
899 2 2 7 11 602 1229 1881
900 2 2 7 11 601 1230 1883
901 2 2 7 11 540 1558 899
902 2 2 7 11 537 1557 897
903 2 2 7 11 538 1559 898
904 2 2 7 11 539 1560 900
905 2 2 7 11 751 1352 1175
906 2 2 7 11 750 1349 1174
907 2 2 7 11 749 1350 1173
908 2 2 7 11 752 1351 1176
909 2 2 7 11 106 107 1184
910 2 2 7 11 24 25 1182
911 2 2 7 11 65 66 1183
912 2 2 7 11 147 148 1181
913 2 2 7 11 1037 1358 543
914 2 2 7 11 1038 1357 544
915 2 2 7 11 1040 1359 542
916 2 2 7 11 541 1039 1360
917 2 2 7 11 58 59 1080
918 2 2 7 11 99 100 1077
919 2 2 7 11 140 141 1079
920 2 2 7 11 17 18 1078
921 2 2 7 11 459 1174 1349
922 2 2 7 11 460 1173 1350
923 2 2 7 11 458 1175 1352
924 2 2 7 11 457 1176 1351
925 2 2 7 11 321 1357 1038
926 2 2 7 11 322 1360 1039
927 2 2 7 11 323 1358 1037
928 2 2 7 11 324 1359 1040
929 2 2 7 11 676 1597 902
930 2 2 7 11 673 1598 904
931 2 2 7 11 674 1600 903
932 2 2 7 11 675 1599 901
933 2 2 7 11 1035 2597 1546
934 2 2 7 11 1033 2598 1545
935 2 2 7 11 1036 2600 1548
936 2 2 7 11 1034 2599 1547
937 2 2 7 11 760 1514 1358
938 2 2 7 11 757 1515 1360
939 2 2 7 11 758 1513 1357
940 2 2 7 11 759 1516 1359
941 2 2 7 11 124 125 1346
942 2 2 7 11 83 84 1345
943 2 2 7 11 42 43 1348
944 2 2 7 11 165 166 1347
945 2 2 7 11 393 905 1629
946 2 2 7 11 394 906 1632
947 2 2 7 11 395 907 1631
948 2 2 7 11 396 908 1630
949 2 2 7 11 543 1358 1514
950 2 2 7 11 544 1357 1513
951 2 2 7 11 541 1360 1515
952 2 2 7 11 542 1359 1516
953 2 2 7 11 548 1545 2598
954 2 2 7 11 545 1546 2597
955 2 2 7 11 547 1548 2600
956 2 2 7 11 546 1547 2599
957 2 2 7 11 40 41 1846
958 2 2 7 11 81 82 1848
959 2 2 7 11 122 123 1845
960 2 2 7 11 163 164 1847
961 2 2 7 11 1232 1501 1884
962 2 2 7 11 1231 1502 1882
963 2 2 7 11 1229 1504 1881
964 2 2 7 11 1230 1503 1883
965 2 2 7 11 399 1470 910
966 2 2 7 11 397 1471 909
967 2 2 7 11 398 1469 911
968 2 2 7 11 400 1472 912
969 2 2 7 11 1146 1867 2474
970 2 2 7 11 1147 1865 2475
971 2 2 7 11 1145 1866 2473
972 2 2 7 11 1148 1868 2476
973 2 2 7 11 790 1145 2473
974 2 2 7 11 791 1146 2474
975 2 2 7 11 789 1147 2475
976 2 2 7 11 792 1148 2476
977 2 2 7 11 1102 1922 1514
978 2 2 7 11 1104 1924 1515
979 2 2 7 11 1103 1923 1516
980 2 2 7 11 1101 1921 1513
981 2 2 7 11 72 73 1054
982 2 2 7 11 31 32 1053
983 2 2 7 11 113 114 1055
984 2 2 7 11 154 155 1056
985 2 2 7 11 614 1142 1097
986 2 2 7 11 613 1144 1099
987 2 2 7 11 615 1141 1098
988 2 2 7 11 616 1143 1100
989 2 2 7 11 490 1097 1142
990 2 2 7 11 491 1099 1144
991 2 2 7 11 489 1098 1141
992 2 2 7 11 492 1100 1143
993 2 2 7 11 314 1185 1491
994 2 2 7 11 313 1186 1492
995 2 2 7 11 315 1187 1489
996 2 2 7 11 316 1188 1490
997 2 2 7 11 667 1491 1185
998 2 2 7 11 668 1492 1186
999 2 2 7 11 665 1490 1188
1000 2 2 7 11 666 1489 1187
1001 2 2 7 11 528 1448 1125
1002 2 2 7 11 527 1446 1126
1003 2 2 7 11 525 1445 1128
1004 2 2 7 11 526 1447 1127
1005 2 2 7 11 560 1262 1209
1006 2 2 7 11 559 1263 1212
1007 2 2 7 11 558 1264 1211
1008 2 2 7 11 557 1261 1210
1009 2 2 7 11 982 1876 1354
1010 2 2 7 11 981 1875 1353
1011 2 2 7 11 983 1873 1355
1012 2 2 7 11 984 1874 1356
1013 2 2 7 11 738 967 2185
1014 2 2 7 11 739 966 2186
1015 2 2 7 11 740 965 2188
1016 2 2 7 11 737 968 2187
1017 2 2 7 11 252 1209 1262
1018 2 2 7 11 251 1210 1261
1019 2 2 7 11 250 1212 1263
1020 2 2 7 11 249 1211 1264
1021 2 2 7 11 251 1579 1210
1022 2 2 7 11 252 1578 1209
1023 2 2 7 11 250 1580 1212
1024 2 2 7 11 249 1577 1211
1025 2 2 7 11 239 912 2322
1026 2 2 7 11 237 909 2324
1027 2 2 7 11 240 911 2321
1028 2 2 7 11 238 910 2323
1029 2 2 7 11 562 1536 1396
1030 2 2 7 11 561 1535 1395
1031 2 2 7 11 564 1534 1394
1032 2 2 7 11 563 1533 1393
1033 2 2 7 11 495 1670 912
1034 2 2 7 11 494 1669 909
1035 2 2 7 11 493 1672 910
1036 2 2 7 11 496 1671 911
1037 2 2 7 11 348 1737 1295
1038 2 2 7 11 347 1739 1293
1039 2 2 7 11 346 1740 1294
1040 2 2 7 11 345 1738 1296
1041 2 2 7 11 123 124 1845
1042 2 2 7 11 164 165 1847
1043 2 2 7 11 82 83 1848
1044 2 2 7 11 41 42 1846
1045 2 2 7 11 706 1812 1724
1046 2 2 7 11 707 1811 1723
1047 2 2 7 11 705 1809 1722
1048 2 2 7 11 708 1810 1721
1049 2 2 7 11 534 1417 1305
1050 2 2 7 11 533 1418 1306
1051 2 2 7 11 535 1419 1307
1052 2 2 7 11 536 1420 1308
1053 2 2 7 11 958 1482 2570
1054 2 2 7 11 960 1481 2569
1055 2 2 7 11 957 1484 2572
1056 2 2 7 11 959 1483 2571
1057 2 2 7 11 425 1299 1411
1058 2 2 7 11 428 1298 1409
1059 2 2 7 11 426 1297 1410
1060 2 2 7 11 427 1300 1412
1061 2 2 7 11 429 1413 1301
1062 2 2 7 11 430 1414 1302
1063 2 2 7 11 432 1415 1303
1064 2 2 7 11 431 1416 1304
1065 2 2 7 11 310 992 1885
1066 2 2 7 11 309 991 1887
1067 2 2 7 11 311 990 1886
1068 2 2 7 11 312 989 1888
1069 2 2 7 11 683 1411 1299
1070 2 2 7 11 682 1409 1298
1071 2 2 7 11 681 1410 1297
1072 2 2 7 11 684 1412 1300
1073 2 2 7 11 686 1302 1414
1074 2 2 7 11 687 1303 1415
1075 2 2 7 11 685 1301 1413
1076 2 2 7 11 688 1304 1416
1077 2 2 7 11 522 1115 1442
1078 2 2 7 11 521 1116 1441
1079 2 2 7 11 524 1114 1444
1080 2 2 7 11 523 1113 1443
1081 2 2 7 11 328 2468 1910
1082 2 2 7 11 325 2467 1911
1083 2 2 7 11 326 2466 1912
1084 2 2 7 11 327 2465 1909
1085 2 2 7 11 864 1021 2452
1086 2 2 7 11 863 1022 2451
1087 2 2 7 11 861 1023 2450
1088 2 2 7 11 862 1024 2449
1089 2 2 7 11 55 56 2060
1090 2 2 7 11 14 15 2058
1091 2 2 7 11 137 138 2059
1092 2 2 7 11 96 97 2057
1093 2 2 7 11 669 1305 1417
1094 2 2 7 11 670 1306 1418
1095 2 2 7 11 671 1307 1419
1096 2 2 7 11 672 1308 1420
1097 2 2 7 11 657 1423 1245
1098 2 2 7 11 659 1422 1246
1099 2 2 7 11 660 1424 1248
1100 2 2 7 11 658 1421 1247
1101 2 2 7 11 396 1630 1461
1102 2 2 7 11 395 1631 1464
1103 2 2 7 11 394 1632 1462
1104 2 2 7 11 393 1629 1463
1105 2 2 7 11 449 1482 2000
1106 2 2 7 11 451 1484 1999
1107 2 2 7 11 452 1483 1998
1108 2 2 7 11 450 1481 1997
1109 2 2 7 11 884 1459 1813
1110 2 2 7 11 883 1457 1814
1111 2 2 7 11 882 1460 1815
1112 2 2 7 11 881 1458 1816
1113 2 2 7 11 417 1813 1459
1114 2 2 7 11 420 1814 1457
1115 2 2 7 11 418 1815 1460
1116 2 2 7 11 419 1816 1458
1117 2 2 7 11 990 1934 1886
1118 2 2 7 11 992 1935 1885
1119 2 2 7 11 991 1936 1887
1120 2 2 7 11 989 1933 1888
1121 2 2 7 11 706 1724 1165
1122 2 2 7 11 707 1723 1167
1123 2 2 7 11 705 1722 1168
1124 2 2 7 11 708 1721 1166
1125 2 2 7 11 506 1292 1040
1126 2 2 7 11 1038 505 1289
1127 2 2 7 11 508 1291 1039
1128 2 2 7 11 1037 507 1290
1129 2 2 7 11 61 1545 1025
1130 2 2 7 11 20 1547 1028
1131 2 2 7 11 143 1548 1027
1132 2 2 7 11 102 1546 1026
1133 2 2 7 11 1045 2592 907
1134 2 2 7 11 1046 2591 908
1135 2 2 7 11 1048 2590 906
1136 2 2 7 11 1047 2589 905
1137 2 2 7 11 282 1017 2190
1138 2 2 7 11 281 1019 2191
1139 2 2 7 11 284 1018 2189
1140 2 2 7 11 283 1020 2192
1141 2 2 7 11 274 1745 944
1142 2 2 7 11 273 1747 942
1143 2 2 7 11 276 1746 943
1144 2 2 7 11 275 1748 941
1145 2 2 7 11 763 2190 1017
1146 2 2 7 11 764 2191 1019
1147 2 2 7 11 762 2192 1020
1148 2 2 7 11 761 2189 1018
1149 2 2 7 11 550 1208 1620
1150 2 2 7 11 549 1207 1617
1151 2 2 7 11 551 1205 1618
1152 2 2 7 11 552 1206 1619
1153 2 2 7 11 243 1717 1046
1154 2 2 7 11 244 1720 1047
1155 2 2 7 11 242 1718 1045
1156 2 2 7 11 241 1719 1048
1157 2 2 7 11 312 1834 933
1158 2 2 7 11 310 1833 934
1159 2 2 7 11 311 1835 935
1160 2 2 7 11 309 1836 936
1161 2 2 7 11 422 1014 1337
1162 2 2 7 11 421 1013 1338
1163 2 2 7 11 423 1015 1340
1164 2 2 7 11 424 1016 1339
1165 2 2 7 11 573 2238 987
1166 2 2 7 11 576 2237 986
1167 2 2 7 11 575 2239 985
1168 2 2 7 11 574 2240 988
1169 2 2 7 11 788 1510 2348
1170 2 2 7 11 787 1512 2347
1171 2 2 7 11 785 1511 2346
1172 2 2 7 11 786 1509 2345
1173 2 2 7 11 1210 1579 2234
1174 2 2 7 11 1209 1578 2236
1175 2 2 7 11 1211 1577 2233
1176 2 2 7 11 1212 1580 2235
1177 2 2 7 11 184 1147 2165
1178 2 2 7 11 229 1146 2166
1179 2 2 7 11 214 1145 2168
1180 2 2 7 11 199 1148 2167
1181 2 2 7 11 341 1538 1117
1182 2 2 7 11 342 1537 1118
1183 2 2 7 11 344 1539 1119
1184 2 2 7 11 343 1540 1120
1185 2 2 7 11 628 1119 1539
1186 2 2 7 11 627 1118 1537
1187 2 2 7 11 625 1117 1538
1188 2 2 7 11 626 1120 1540
1189 2 2 7 11 709 1767 1125
1190 2 2 7 11 710 1766 1126
1191 2 2 7 11 712 1768 1128
1192 2 2 7 11 711 1765 1127
1193 2 2 7 11 366 1125 1767
1194 2 2 7 11 365 1126 1766
1195 2 2 7 11 367 1128 1768
1196 2 2 7 11 368 1127 1765
1197 2 2 7 11 1255 1907 1865
1198 2 2 7 11 1254 1906 1868
1199 2 2 7 11 1253 1905 1867
1200 2 2 7 11 1256 1908 1866
1201 2 2 7 11 260 1729 1201
1202 2 2 7 11 259 1732 1202
1203 2 2 7 11 257 1731 1203
1204 2 2 7 11 258 1730 1204
1205 2 2 7 11 324 1040 1292
1206 2 2 7 11 321 1038 1289
1207 2 2 7 11 322 1039 1291
1208 2 2 7 11 323 1037 1290
1209 2 2 7 11 514 1050 1381
1210 2 2 7 11 513 1049 1383
1211 2 2 7 11 515 1051 1384
1212 2 2 7 11 516 1052 1382
1213 2 2 7 11 884 1475 1835
1214 2 2 7 11 881 1474 1836
1215 2 2 7 11 882 1473 1833
1216 2 2 7 11 883 1476 1834
1217 2 2 7 11 591 1836 1474
1218 2 2 7 11 592 1835 1475
1219 2 2 7 11 589 1833 1473
1220 2 2 7 11 590 1834 1476
1221 2 2 7 11 713 1005 2203
1222 2 2 7 11 714 1007 2201
1223 2 2 7 11 715 1006 2202
1224 2 2 7 11 716 1008 2204
1225 2 2 7 11 688 1761 1304
1226 2 2 7 11 687 1764 1303
1227 2 2 7 11 686 1763 1302
1228 2 2 7 11 685 1762 1301
1229 2 2 7 11 462 2405 945
1230 2 2 7 11 463 2407 947
1231 2 2 7 11 464 2408 948
1232 2 2 7 11 461 2406 946
1233 2 2 7 11 300 2212 995
1234 2 2 7 11 297 2209 994
1235 2 2 7 11 298 2211 993
1236 2 2 7 11 299 2210 996
1237 2 2 7 11 300 999 2212
1238 2 2 7 11 297 998 2209
1239 2 2 7 11 298 997 2211
1240 2 2 7 11 299 1000 2210
1241 2 2 7 11 228 1146 229
1242 2 2 7 11 183 1147 184
1243 2 2 7 11 213 1145 214
1244 2 2 7 11 198 1148 199
1245 2 2 7 11 312 2200 989
1246 2 2 7 11 309 2199 991
1247 2 2 7 11 310 2198 992
1248 2 2 7 11 311 2197 990
1249 2 2 7 11 666 1263 1489
1250 2 2 7 11 665 1264 1490
1251 2 2 7 11 668 1261 1492
1252 2 2 7 11 667 1262 1491
1253 2 2 7 11 633 1725 1361
1254 2 2 7 11 636 1728 1363
1255 2 2 7 11 635 1726 1364
1256 2 2 7 11 634 1727 1362
1257 2 2 7 11 558 1490 1264
1258 2 2 7 11 559 1489 1263
1259 2 2 7 11 557 1492 1261
1260 2 2 7 11 560 1491 1262
1261 2 2 7 11 327 1090 1957
1262 2 2 7 11 328 1089 1959
1263 2 2 7 11 326 1091 1958
1264 2 2 7 11 325 1092 1960
1265 2 2 7 11 1062 565 1602
1266 2 2 7 11 1064 567 1601
1267 2 2 7 11 1061 568 1603
1268 2 2 7 11 1063 566 1604
1269 2 2 7 11 1045 1718 2592
1270 2 2 7 11 1046 1717 2591
1271 2 2 7 11 1047 1720 2589
1272 2 2 7 11 1048 1719 2590
1273 2 2 7 11 848 1493 1736
1274 2 2 7 11 847 1495 1733
1275 2 2 7 11 845 1494 1735
1276 2 2 7 11 846 1496 1734
1277 2 2 7 11 386 1736 1493
1278 2 2 7 11 385 1733 1495
1279 2 2 7 11 388 1735 1494
1280 2 2 7 11 387 1734 1496
1281 2 2 7 11 274 944 1941
1282 2 2 7 11 273 942 1944
1283 2 2 7 11 275 941 1942
1284 2 2 7 11 276 943 1943
1285 2 2 7 11 485 2628 1439
1286 2 2 7 11 488 2625 1437
1287 2 2 7 11 486 2627 1438
1288 2 2 7 11 487 2626 1440
1289 2 2 7 11 335 1245 1093
1290 2 2 7 11 333 1248 1095
1291 2 2 7 11 336 1246 1094
1292 2 2 7 11 334 1247 1096
1293 2 2 7 11 1082 1265 466
1294 2 2 7 11 1081 1266 465
1295 2 2 7 11 1083 1267 467
1296 2 2 7 11 1084 1268 468
1297 2 2 7 11 639 940 1532
1298 2 2 7 11 640 937 1529
1299 2 2 7 11 638 939 1530
1300 2 2 7 11 637 938 1531
1301 2 2 7 11 340 1627 1355
1302 2 2 7 11 339 1628 1356
1303 2 2 7 11 337 1625 1353
1304 2 2 7 11 338 1626 1354
1305 2 2 7 11 1006 1531 2081
1306 2 2 7 11 1007 1530 2082
1307 2 2 7 11 1005 1529 2084
1308 2 2 7 11 1008 1532 2083
1309 2 2 7 11 732 1981 1479
1310 2 2 7 11 729 1982 1477
1311 2 2 7 11 731 1983 1480
1312 2 2 7 11 730 1984 1478
1313 2 2 7 11 551 1284 1205
1314 2 2 7 11 552 1283 1206
1315 2 2 7 11 550 1281 1208
1316 2 2 7 11 549 1282 1207
1317 2 2 7 11 268 1205 1284
1318 2 2 7 11 267 1206 1283
1319 2 2 7 11 266 1208 1281
1320 2 2 7 11 265 1207 1282
1321 2 2 7 11 530 1093 1245
1322 2 2 7 11 532 1094 1246
1323 2 2 7 11 529 1096 1247
1324 2 2 7 11 531 1095 1248
1325 2 2 7 11 942 1747 2094
1326 2 2 7 11 941 1748 2093
1327 2 2 7 11 944 1745 2096
1328 2 2 7 11 943 1746 2095
1329 2 2 7 11 154 1056 1361
1330 2 2 7 11 113 1055 1363
1331 2 2 7 11 72 1054 1362
1332 2 2 7 11 31 1053 1364
1333 2 2 7 11 633 2682 1725
1334 2 2 7 11 636 2683 1728
1335 2 2 7 11 635 2681 1726
1336 2 2 7 11 634 2684 1727
1337 2 2 7 11 1082 466 1275
1338 2 2 7 11 1081 465 1273
1339 2 2 7 11 1084 468 1274
1340 2 2 7 11 1083 467 1276
1341 2 2 7 11 279 1925 2464
1342 2 2 7 11 277 1926 2462
1343 2 2 7 11 278 1928 2461
1344 2 2 7 11 280 1927 2463
1345 2 2 7 11 657 1798 1423
1346 2 2 7 11 659 1797 1422
1347 2 2 7 11 660 1800 1424
1348 2 2 7 11 658 1799 1421
1349 2 2 7 11 645 1255 1865
1350 2 2 7 11 648 1254 1868
1351 2 2 7 11 647 1253 1867
1352 2 2 7 11 646 1256 1866
1353 2 2 7 11 1304 1761 2665
1354 2 2 7 11 1303 1764 2666
1355 2 2 7 11 1302 1763 2667
1356 2 2 7 11 1301 1762 2668
1357 2 2 7 11 236 1622 939
1358 2 2 7 11 235 1621 938
1359 2 2 7 11 234 1623 940
1360 2 2 7 11 233 1624 937
1361 2 2 7 11 980 2619 2484
1362 2 2 7 11 979 2617 2483
1363 2 2 7 11 978 2618 2482
1364 2 2 7 11 977 2620 2481
1365 2 2 7 11 441 1993 1090
1366 2 2 7 11 444 1994 1089
1367 2 2 7 11 443 1996 1092
1368 2 2 7 11 442 1995 1091
1369 2 2 7 11 952 1577 1883
1370 2 2 7 11 949 1580 1881
1371 2 2 7 11 950 1578 1882
1372 2 2 7 11 951 1579 1884
1373 2 2 7 11 601 1883 1577
1374 2 2 7 11 602 1881 1580
1375 2 2 7 11 603 1882 1578
1376 2 2 7 11 604 1884 1579
1377 2 2 7 11 582 2094 1747
1378 2 2 7 11 584 2093 1748
1379 2 2 7 11 583 2096 1745
1380 2 2 7 11 581 2095 1746
1381 2 2 7 11 1100 1156 2030
1382 2 2 7 11 1099 1155 2032
1383 2 2 7 11 1098 1154 2031
1384 2 2 7 11 1097 1153 2029
1385 2 2 7 11 300 995 1441
1386 2 2 7 11 297 994 1444
1387 2 2 7 11 298 993 1443
1388 2 2 7 11 299 996 1442
1389 2 2 7 11 297 1445 998
1390 2 2 7 11 298 1447 997
1391 2 2 7 11 300 1446 999
1392 2 2 7 11 299 1448 1000
1393 2 2 7 11 182 2286 1166
1394 2 2 7 11 197 2287 1165
1395 2 2 7 11 212 2288 1167
1396 2 2 7 11 227 2285 1168
1397 2 2 7 11 463 1589 954
1398 2 2 7 11 464 1590 955
1399 2 2 7 11 461 1592 953
1400 2 2 7 11 462 1591 956
1401 2 2 7 11 351 1437 2180
1402 2 2 7 11 350 1439 2177
1403 2 2 7 11 352 1440 2179
1404 2 2 7 11 349 1438 2178
1405 2 2 7 11 649 975 2447
1406 2 2 7 11 651 973 2445
1407 2 2 7 11 652 976 2448
1408 2 2 7 11 650 974 2446
1409 2 2 7 11 488 1437 1197
1410 2 2 7 11 486 1438 1200
1411 2 2 7 11 485 1439 1198
1412 2 2 7 11 487 1440 1199
1413 2 2 7 11 1001 2177 1439
1414 2 2 7 11 1003 2180 1437
1415 2 2 7 11 1004 2179 1440
1416 2 2 7 11 1002 2178 1438
1417 2 2 7 11 328 1428 2468
1418 2 2 7 11 325 1426 2467
1419 2 2 7 11 326 1427 2466
1420 2 2 7 11 327 1425 2465
1421 2 2 7 11 980 2484 1219
1422 2 2 7 11 979 2483 1218
1423 2 2 7 11 978 2482 1217
1424 2 2 7 11 977 2481 1220
1425 2 2 7 11 641 1224 2245
1426 2 2 7 11 644 1222 2247
1427 2 2 7 11 643 1223 2246
1428 2 2 7 11 642 1221 2248
1429 2 2 7 11 425 993 1894
1430 2 2 7 11 427 994 1896
1431 2 2 7 11 426 995 1895
1432 2 2 7 11 428 996 1893
1433 2 2 7 11 430 1892 998
1434 2 2 7 11 429 1890 997
1435 2 2 7 11 432 1891 999
1436 2 2 7 11 431 1889 1000
1437 2 2 7 11 100 1937 1077
1438 2 2 7 11 59 1938 1080
1439 2 2 7 11 18 1940 1078
1440 2 2 7 11 141 1939 1079
1441 2 2 7 11 970 1759 1399
1442 2 2 7 11 969 1760 1400
1443 2 2 7 11 971 1757 1397
1444 2 2 7 11 972 1758 1398
1445 2 2 7 11 508 1039 2444
1446 2 2 7 11 1037 2443 507
1447 2 2 7 11 1038 2442 505
1448 2 2 7 11 506 1040 2441
1449 2 2 7 11 1208 1786 1620
1450 2 2 7 11 1207 1785 1617
1451 2 2 7 11 1205 1787 1618
1452 2 2 7 11 1206 1788 1619
1453 2 2 7 11 1201 1729 2626
1454 2 2 7 11 1202 1732 2628
1455 2 2 7 11 1203 1731 2625
1456 2 2 7 11 1204 1730 2627
1457 2 2 7 11 464 955 1755
1458 2 2 7 11 463 954 1754
1459 2 2 7 11 462 956 1756
1460 2 2 7 11 461 953 1753
1461 2 2 7 11 789 2165 1147
1462 2 2 7 11 791 2166 1146
1463 2 2 7 11 790 2168 1145
1464 2 2 7 11 792 2167 1148
1465 2 2 7 11 1026 545 1527
1466 2 2 7 11 547 1526 1027
1467 2 2 7 11 548 1528 1025
1468 2 2 7 11 546 1525 1028
1469 2 2 7 11 97 98 2057
1470 2 2 7 11 15 16 2058
1471 2 2 7 11 138 139 2059
1472 2 2 7 11 56 57 2060
1473 2 2 7 11 1069 864 2611
1474 2 2 7 11 1072 862 2610
1475 2 2 7 11 1071 861 2609
1476 2 2 7 11 1070 863 2612
1477 2 2 7 11 858 2476 2032
1478 2 2 7 11 857 2475 2030
1479 2 2 7 11 860 2474 2029
1480 2 2 7 11 859 2473 2031
1481 2 2 7 11 620 2592 1718
1482 2 2 7 11 619 2591 1717
1483 2 2 7 11 617 2589 1720
1484 2 2 7 11 618 2590 1719
1485 2 2 7 11 58 1080 1435
1486 2 2 7 11 99 1077 1436
1487 2 2 7 11 17 1078 1433
1488 2 2 7 11 140 1079 1434
1489 2 2 7 11 1024 2464 1925
1490 2 2 7 11 1022 2462 1926
1491 2 2 7 11 1023 2463 1927
1492 2 2 7 11 1021 2461 1928
1493 2 2 7 11 694 1090 1909
1494 2 2 7 11 695 1089 1910
1495 2 2 7 11 693 1092 1911
1496 2 2 7 11 696 1091 1912
1497 2 2 7 11 660 1760 969
1498 2 2 7 11 658 1759 970
1499 2 2 7 11 659 1758 972
1500 2 2 7 11 657 1757 971
1501 2 2 7 11 325 1911 1092
1502 2 2 7 11 327 1909 1090
1503 2 2 7 11 328 1910 1089
1504 2 2 7 11 326 1912 1091
1505 2 2 7 11 284 2205 1018
1506 2 2 7 11 282 2206 1017
1507 2 2 7 11 283 2208 1020
1508 2 2 7 11 281 2207 1019
1509 2 2 7 11 455 1139 1649
1510 2 2 7 11 456 1140 1650
1511 2 2 7 11 453 1137 1652
1512 2 2 7 11 454 1138 1651
1513 2 2 7 11 40 1031 2344
1514 2 2 7 11 122 1029 2341
1515 2 2 7 11 81 1032 2342
1516 2 2 7 11 163 1030 2343
1517 2 2 7 11 318 1381 1050
1518 2 2 7 11 319 1383 1049
1519 2 2 7 11 317 1384 1051
1520 2 2 7 11 320 1382 1052
1521 2 2 7 11 641 2245 1787
1522 2 2 7 11 644 2247 1785
1523 2 2 7 11 643 2246 1788
1524 2 2 7 11 642 2248 1786
1525 2 2 7 11 680 1649 1139
1526 2 2 7 11 679 1650 1140
1527 2 2 7 11 677 1652 1137
1528 2 2 7 11 678 1651 1138
1529 2 2 7 11 181 2286 182
1530 2 2 7 11 211 2288 212
1531 2 2 7 11 196 2287 197
1532 2 2 7 11 226 2285 227
1533 2 2 7 11 974 1495 2117
1534 2 2 7 11 975 1496 2118
1535 2 2 7 11 973 1494 2119
1536 2 2 7 11 976 1493 2120
1537 2 2 7 11 445 1007 2082
1538 2 2 7 11 446 1006 2081
1539 2 2 7 11 448 1008 2083
1540 2 2 7 11 447 1005 2084
1541 2 2 7 11 682 1407 1409
1542 2 2 7 11 681 1405 1410
1543 2 2 7 11 684 1408 1412
1544 2 2 7 11 683 1406 1411
1545 2 2 7 11 522 1409 1407
1546 2 2 7 11 521 1410 1405
1547 2 2 7 11 524 1412 1408
1548 2 2 7 11 523 1411 1406
1549 2 2 7 11 1034 1547 2294
1550 2 2 7 11 1036 1548 2296
1551 2 2 7 11 1035 1546 2295
1552 2 2 7 11 1033 1545 2293
1553 2 2 7 11 713 1241 2077
1554 2 2 7 11 714 1244 2079
1555 2 2 7 11 715 1243 2080
1556 2 2 7 11 716 1242 2078
1557 2 2 7 11 1037 543 1425
1558 2 2 7 11 1038 544 1427
1559 2 2 7 11 541 1428 1039
1560 2 2 7 11 1040 542 1426
1561 2 2 7 11 1417 2277 2538
1562 2 2 7 11 1418 2279 2537
1563 2 2 7 11 1420 2280 2540
1564 2 2 7 11 1419 2278 2539
1565 2 2 7 11 826 1949 1349
1566 2 2 7 11 827 1950 1350
1567 2 2 7 11 828 1951 1352
1568 2 2 7 11 825 1952 1351
1569 2 2 7 11 1003 1437 2625
1570 2 2 7 11 1001 1439 2628
1571 2 2 7 11 1002 1438 2627
1572 2 2 7 11 1004 1440 2626
1573 2 2 7 11 460 1350 1950
1574 2 2 7 11 459 1349 1949
1575 2 2 7 11 457 1351 1952
1576 2 2 7 11 458 1352 1951
1577 2 2 7 11 514 1397 1050
1578 2 2 7 11 513 1398 1049
1579 2 2 7 11 516 1399 1052
1580 2 2 7 11 515 1400 1051
1581 2 2 7 11 713 2489 1005
1582 2 2 7 11 716 2492 1008
1583 2 2 7 11 714 2490 1007
1584 2 2 7 11 715 2491 1006
1585 2 2 7 11 87 2503 1062
1586 2 2 7 11 128 2502 1061
1587 2 2 7 11 169 2501 1063
1588 2 2 7 11 46 2504 1064
1589 2 2 7 11 2065 2267 1470
1590 2 2 7 11 2066 2266 1471
1591 2 2 7 11 2067 2265 1469
1592 2 2 7 11 2068 2268 1472
1593 2 2 7 11 410 986 2017
1594 2 2 7 11 412 988 2019
1595 2 2 7 11 411 987 2020
1596 2 2 7 11 409 985 2018
1597 2 2 7 11 609 1749 2470
1598 2 2 7 11 611 1751 2471
1599 2 2 7 11 610 1750 2472
1600 2 2 7 11 612 1752 2469
1601 2 2 7 11 763 1017 2218
1602 2 2 7 11 762 1020 2219
1603 2 2 7 11 764 1019 2217
1604 2 2 7 11 761 1018 2220
1605 2 2 7 11 1051 1716 561
1606 2 2 7 11 1052 1715 562
1607 2 2 7 11 1049 1714 563
1608 2 2 7 11 1050 1713 564
1609 2 2 7 11 745 2069 1322
1610 2 2 7 11 746 2070 1324
1611 2 2 7 11 748 2071 1323
1612 2 2 7 11 747 2072 1321
1613 2 2 7 11 374 1059 1825
1614 2 2 7 11 375 1057 1828
1615 2 2 7 11 376 1060 1826
1616 2 2 7 11 373 1058 1827
1617 2 2 7 11 1059 630 1825
1618 2 2 7 11 1057 631 1828
1619 2 2 7 11 1060 632 1826
1620 2 2 7 11 1058 629 1827
1621 2 2 7 11 1125 1448 1899
1622 2 2 7 11 1128 1445 1897
1623 2 2 7 11 1126 1446 1898
1624 2 2 7 11 1127 1447 1900
1625 2 2 7 11 1082 2005 677
1626 2 2 7 11 1084 2008 679
1627 2 2 7 11 1081 2006 678
1628 2 2 7 11 1083 2007 680
1629 2 2 7 11 765 1437 1812
1630 2 2 7 11 768 1439 1810
1631 2 2 7 11 766 1438 1809
1632 2 2 7 11 767 1440 1811
1633 2 2 7 11 362 1417 2538
1634 2 2 7 11 361 1418 2537
1635 2 2 7 11 363 1420 2540
1636 2 2 7 11 364 1419 2539
1637 2 2 7 11 717 1012 2057
1638 2 2 7 11 719 1010 2058
1639 2 2 7 11 720 1011 2059
1640 2 2 7 11 718 1009 2060
1641 2 2 7 11 260 2028 1141
1642 2 2 7 11 257 2025 1144
1643 2 2 7 11 258 2026 1142
1644 2 2 7 11 259 2027 1143
1645 2 2 7 11 110 2498 1386
1646 2 2 7 11 28 2499 1387
1647 2 2 7 11 69 2497 1385
1648 2 2 7 11 151 2500 1388
1649 2 2 7 11 14 1010 1697
1650 2 2 7 11 137 1011 1698
1651 2 2 7 11 96 1012 1700
1652 2 2 7 11 55 1009 1699
1653 2 2 7 11 109 110 1386
1654 2 2 7 11 68 69 1385
1655 2 2 7 11 27 28 1387
1656 2 2 7 11 150 151 1388
1657 2 2 7 11 534 1305 1136
1658 2 2 7 11 535 1307 1134
1659 2 2 7 11 533 1306 1133
1660 2 2 7 11 536 1308 1135
1661 2 2 7 11 152 153 1725
1662 2 2 7 11 111 112 1728
1663 2 2 7 11 29 30 1726
1664 2 2 7 11 70 71 1727
1665 2 2 7 11 306 2549 985
1666 2 2 7 11 308 2551 988
1667 2 2 7 11 305 2550 986
1668 2 2 7 11 307 2552 987
1669 2 2 7 11 1063 2501 1236
1670 2 2 7 11 1061 2502 1233
1671 2 2 7 11 1062 2503 1234
1672 2 2 7 11 1064 2504 1235
1673 2 2 7 11 306 985 2239
1674 2 2 7 11 305 986 2237
1675 2 2 7 11 308 988 2240
1676 2 2 7 11 307 987 2238
1677 2 2 7 11 414 1936 991
1678 2 2 7 11 415 1933 989
1679 2 2 7 11 413 1935 992
1680 2 2 7 11 416 1934 990
1681 2 2 7 11 572 990 2197
1682 2 2 7 11 570 992 2198
1683 2 2 7 11 571 989 2200
1684 2 2 7 11 569 991 2199
1685 2 2 7 11 242 1045 2186
1686 2 2 7 11 241 1048 2187
1687 2 2 7 11 243 1046 2185
1688 2 2 7 11 244 1047 2188
1689 2 2 7 11 669 1536 1305
1690 2 2 7 11 670 1535 1306
1691 2 2 7 11 671 1534 1307
1692 2 2 7 11 672 1533 1308
1693 2 2 7 11 1045 739 2186
1694 2 2 7 11 1046 738 2185
1695 2 2 7 11 1047 740 2188
1696 2 2 7 11 1048 737 2187
1697 2 2 7 11 427 2430 994
1698 2 2 7 11 425 2431 993
1699 2 2 7 11 428 2432 996
1700 2 2 7 11 426 2429 995
1701 2 2 7 11 429 997 2425
1702 2 2 7 11 430 998 2426
1703 2 2 7 11 432 999 2427
1704 2 2 7 11 431 1000 2428
1705 2 2 7 11 483 1043 1658
1706 2 2 7 11 482 1042 1659
1707 2 2 7 11 481 1041 1657
1708 2 2 7 11 484 1044 1660
1709 2 2 7 11 1042 580 1659
1710 2 2 7 11 1043 579 1658
1711 2 2 7 11 1041 577 1657
1712 2 2 7 11 1044 578 1660
1713 2 2 7 11 895 1728 2683
1714 2 2 7 11 896 1725 2682
1715 2 2 7 11 894 1727 2684
1716 2 2 7 11 893 1726 2681
1717 2 2 7 11 609 2470 1460
1718 2 2 7 11 611 2471 1459
1719 2 2 7 11 610 2472 1458
1720 2 2 7 11 612 2469 1457
1721 2 2 7 11 611 1249 1751
1722 2 2 7 11 610 1251 1750
1723 2 2 7 11 612 1250 1752
1724 2 2 7 11 609 1252 1749
1725 2 2 7 11 422 2225 1014
1726 2 2 7 11 424 2226 1016
1727 2 2 7 11 421 2227 1013
1728 2 2 7 11 423 2228 1015
1729 2 2 7 11 290 2565 1081
1730 2 2 7 11 289 2567 1082
1731 2 2 7 11 291 2566 1083
1732 2 2 7 11 292 2568 1084
1733 2 2 7 11 407 2637 1009
1734 2 2 7 11 408 2638 1012
1735 2 2 7 11 406 2639 1010
1736 2 2 7 11 405 2640 1011
1737 2 2 7 11 921 1153 2686
1738 2 2 7 11 922 1154 2685
1739 2 2 7 11 923 1156 2687
1740 2 2 7 11 924 1155 2688
1741 2 2 7 11 256 1135 1308
1742 2 2 7 11 254 1133 1306
1743 2 2 7 11 255 1134 1307
1744 2 2 7 11 253 1136 1305
1745 2 2 7 11 399 2065 1470
1746 2 2 7 11 398 2067 1469
1747 2 2 7 11 397 2066 1471
1748 2 2 7 11 400 2068 1472
1749 2 2 7 11 740 2254 1312
1750 2 2 7 11 737 2253 1309
1751 2 2 7 11 739 2255 1310
1752 2 2 7 11 738 2256 1311
1753 2 2 7 11 714 2201 1244
1754 2 2 7 11 715 2202 1243
1755 2 2 7 11 713 2203 1241
1756 2 2 7 11 716 2204 1242
1757 2 2 7 11 597 1593 1117
1758 2 2 7 11 599 1594 1120
1759 2 2 7 11 598 1596 1118
1760 2 2 7 11 600 1595 1119
1761 2 2 7 11 272 1088 2574
1762 2 2 7 11 270 1086 2575
1763 2 2 7 11 271 1087 2573
1764 2 2 7 11 269 1085 2576
1765 2 2 7 11 341 1117 1593
1766 2 2 7 11 343 1120 1594
1767 2 2 7 11 342 1118 1596
1768 2 2 7 11 344 1119 1595
1769 2 2 7 11 611 1886 1934
1770 2 2 7 11 610 1887 1936
1771 2 2 7 11 609 1885 1935
1772 2 2 7 11 612 1888 1933
1773 2 2 7 11 1026 1546 545
1774 2 2 7 11 547 1027 1548
1775 2 2 7 11 546 1028 1547
1776 2 2 7 11 548 1025 1545
1777 2 2 7 11 901 2413 1341
1778 2 2 7 11 904 2414 1344
1779 2 2 7 11 902 2416 1342
1780 2 2 7 11 903 2415 1343
1781 2 2 7 11 315 2221 1916
1782 2 2 7 11 313 2224 1913
1783 2 2 7 11 314 2223 1914
1784 2 2 7 11 316 2222 1915
1785 2 2 7 11 805 1518 2158
1786 2 2 7 11 807 1519 2159
1787 2 2 7 11 808 1520 2160
1788 2 2 7 11 806 1517 2157
1789 2 2 7 11 67 1695 1044
1790 2 2 7 11 149 1696 1043
1791 2 2 7 11 26 1694 1042
1792 2 2 7 11 108 1693 1041
1793 2 2 7 11 1077 1937 689
1794 2 2 7 11 1080 1938 692
1795 2 2 7 11 1079 1939 691
1796 2 2 7 11 1078 1940 690
1797 2 2 7 11 490 2686 1153
1798 2 2 7 11 489 2685 1154
1799 2 2 7 11 492 2687 1156
1800 2 2 7 11 491 2688 1155
1801 2 2 7 11 263 1817 1408
1802 2 2 7 11 264 1818 1405
1803 2 2 7 11 262 1819 1407
1804 2 2 7 11 261 1820 1406
1805 2 2 7 11 525 1128 1636
1806 2 2 7 11 526 1127 1633
1807 2 2 7 11 528 1125 1635
1808 2 2 7 11 527 1126 1634
1809 2 2 7 11 224 1189 225
1810 2 2 7 11 209 1190 210
1811 2 2 7 11 179 1191 180
1812 2 2 7 11 194 1192 195
1813 2 2 7 11 200 1193 201
1814 2 2 7 11 185 1194 186
1815 2 2 7 11 215 1195 216
1816 2 2 7 11 230 1196 231
1817 2 2 7 11 1349 2375 2463
1818 2 2 7 11 1351 2373 2461
1819 2 2 7 11 1350 2376 2464
1820 2 2 7 11 1352 2374 2462
1821 2 2 7 11 752 1176 2011
1822 2 2 7 11 749 1173 2009
1823 2 2 7 11 750 1174 2010
1824 2 2 7 11 751 1175 2012
1825 2 2 7 11 613 2180 1731
1826 2 2 7 11 616 2177 1732
1827 2 2 7 11 615 2179 1729
1828 2 2 7 11 614 2178 1730
1829 2 2 7 11 329 2011 1176
1830 2 2 7 11 332 2009 1173
1831 2 2 7 11 331 2010 1174
1832 2 2 7 11 330 2012 1175
1833 2 2 7 11 759 2620 2053
1834 2 2 7 11 757 2617 2054
1835 2 2 7 11 758 2618 2055
1836 2 2 7 11 760 2619 2056
1837 2 2 7 11 1003 1731 2180
1838 2 2 7 11 1001 1732 2177
1839 2 2 7 11 1004 1729 2179
1840 2 2 7 11 1002 1730 2178
1841 2 2 7 11 822 2253 1654
1842 2 2 7 11 821 2254 1653
1843 2 2 7 11 823 2256 1655
1844 2 2 7 11 824 2255 1656
1845 2 2 7 11 1314 2623 2381
1846 2 2 7 11 1315 2621 2383
1847 2 2 7 11 1316 2622 2382
1848 2 2 7 11 1313 2624 2384
1849 2 2 7 11 1250 2380 1752
1850 2 2 7 11 1249 2378 1751
1851 2 2 7 11 1251 2377 1750
1852 2 2 7 11 1252 2379 1749
1853 2 2 7 11 765 1197 1437
1854 2 2 7 11 766 1200 1438
1855 2 2 7 11 767 1199 1440
1856 2 2 7 11 768 1198 1439
1857 2 2 7 11 1320 2495 2390
1858 2 2 7 11 1319 2494 2389
1859 2 2 7 11 1317 2496 2392
1860 2 2 7 11 1318 2493 2391
1861 2 2 7 11 325 1329 1426
1862 2 2 7 11 328 1332 1428
1863 2 2 7 11 326 1330 1427
1864 2 2 7 11 327 1331 1425
1865 2 2 7 11 489 1555 1110
1866 2 2 7 11 490 1553 1109
1867 2 2 7 11 492 1556 1111
1868 2 2 7 11 491 1554 1112
1869 2 2 7 11 575 1110 1555
1870 2 2 7 11 576 1109 1553
1871 2 2 7 11 573 1112 1554
1872 2 2 7 11 574 1111 1556
1873 2 2 7 11 257 1150 2025
1874 2 2 7 11 259 1152 2027
1875 2 2 7 11 260 1149 2028
1876 2 2 7 11 258 1151 2026
1877 2 2 7 11 73 1613 1054
1878 2 2 7 11 155 1615 1056
1879 2 2 7 11 32 1616 1053
1880 2 2 7 11 114 1614 1055
1881 2 2 7 11 692 2487 1025
1882 2 2 7 11 1026 689 2488
1883 2 2 7 11 1028 690 2486
1884 2 2 7 11 1027 691 2485
1885 2 2 7 11 335 1093 2694
1886 2 2 7 11 336 1094 2693
1887 2 2 7 11 333 1095 2695
1888 2 2 7 11 334 1096 2696
1889 2 2 7 11 280 2463 2375
1890 2 2 7 11 279 2464 2376
1891 2 2 7 11 277 2462 2374
1892 2 2 7 11 278 2461 2373
1893 2 2 7 11 759 1450 2620
1894 2 2 7 11 757 1449 2617
1895 2 2 7 11 760 1451 2619
1896 2 2 7 11 758 1452 2618
1897 2 2 7 11 808 2678 1520
1898 2 2 7 11 807 2679 1519
1899 2 2 7 11 805 2677 1518
1900 2 2 7 11 806 2680 1517
1901 2 2 7 11 351 1812 1437
1902 2 2 7 11 349 1809 1438
1903 2 2 7 11 350 1810 1439
1904 2 2 7 11 352 1811 1440
1905 2 2 7 11 902 1329 1960
1906 2 2 7 11 901 1330 1958
1907 2 2 7 11 903 1332 1959
1908 2 2 7 11 904 1331 1957
1909 2 2 7 11 885 1432 2558
1910 2 2 7 11 888 1430 2559
1911 2 2 7 11 887 1431 2560
1912 2 2 7 11 886 1429 2557
1913 2 2 7 11 892 2564 1430
1914 2 2 7 11 889 2561 1429
1915 2 2 7 11 890 2563 1431
1916 2 2 7 11 891 2562 1432
1917 2 2 7 11 370 1789 2196
1918 2 2 7 11 372 1790 2193
1919 2 2 7 11 371 1792 2194
1920 2 2 7 11 369 1791 2195
1921 2 2 7 11 514 1314 2381
1922 2 2 7 11 515 1315 2383
1923 2 2 7 11 516 1316 2382
1924 2 2 7 11 513 1313 2384
1925 2 2 7 11 530 1488 1093
1926 2 2 7 11 529 1485 1096
1927 2 2 7 11 531 1486 1095
1928 2 2 7 11 532 1487 1094
1929 2 2 7 11 511 1353 1187
1930 2 2 7 11 512 1354 1188
1931 2 2 7 11 510 1355 1186
1932 2 2 7 11 509 1356 1185
1933 2 2 7 11 1272 1660 931
1934 2 2 7 11 1270 1658 930
1935 2 2 7 11 1269 1659 929
1936 2 2 7 11 1271 1657 932
1937 2 2 7 11 1116 2085 1441
1938 2 2 7 11 1115 2086 1442
1939 2 2 7 11 1114 2087 1444
1940 2 2 7 11 1113 2088 1443
1941 2 2 7 11 500 1928 2040
1942 2 2 7 11 499 1926 2039
1943 2 2 7 11 498 1927 2038
1944 2 2 7 11 497 1925 2037
1945 2 2 7 11 869 1593 1849
1946 2 2 7 11 870 1595 1852
1947 2 2 7 11 872 1596 1851
1948 2 2 7 11 871 1594 1850
1949 2 2 7 11 278 2401 1928
1950 2 2 7 11 277 2402 1926
1951 2 2 7 11 280 2404 1927
1952 2 2 7 11 279 2403 1925
1953 2 2 7 11 61 1025 2487
1954 2 2 7 11 143 1027 2485
1955 2 2 7 11 20 1028 2486
1956 2 2 7 11 102 1026 2488
1957 2 2 7 11 842 2596 1312
1958 2 2 7 11 841 2595 1309
1959 2 2 7 11 843 2594 1310
1960 2 2 7 11 844 2593 1311
1961 2 2 7 11 597 1849 1593
1962 2 2 7 11 600 1852 1595
1963 2 2 7 11 598 1851 1596
1964 2 2 7 11 599 1850 1594
1965 2 2 7 11 1036 741 1737
1966 2 2 7 11 1033 743 1740
1967 2 2 7 11 1034 742 1739
1968 2 2 7 11 1035 744 1738
1969 2 2 7 11 596 1030 1847
1970 2 2 7 11 594 1031 1846
1971 2 2 7 11 593 1029 1845
1972 2 2 7 11 1032 1848 595
1973 2 2 7 11 61 62 1545
1974 2 2 7 11 20 21 1547
1975 2 2 7 11 143 144 1548
1976 2 2 7 11 102 103 1546
1977 2 2 7 11 284 1453 2205
1978 2 2 7 11 281 1455 2207
1979 2 2 7 11 282 1454 2206
1980 2 2 7 11 283 1456 2208
1981 2 2 7 11 841 2433 2595
1982 2 2 7 11 843 2434 2594
1983 2 2 7 11 842 2436 2596
1984 2 2 7 11 844 2435 2593
1985 2 2 7 11 1042 1694 580
1986 2 2 7 11 1043 1696 579
1987 2 2 7 11 1044 1695 578
1988 2 2 7 11 1041 1693 577
1989 2 2 7 11 318 1394 1178
1990 2 2 7 11 319 1393 1177
1991 2 2 7 11 317 1395 1179
1992 2 2 7 11 320 1396 1180
1993 2 2 7 11 512 1319 2389
1994 2 2 7 11 511 1320 2390
1995 2 2 7 11 509 1317 2392
1996 2 2 7 11 510 1318 2391
1997 2 2 7 11 883 1888 1457
1998 2 2 7 11 881 1887 1458
1999 2 2 7 11 884 1886 1459
2000 2 2 7 11 882 1885 1460
2001 2 2 7 11 671 1178 1394
2002 2 2 7 11 670 1179 1395
2003 2 2 7 11 669 1180 1396
2004 2 2 7 11 672 1177 1393
2005 2 2 7 11 7 1370 203
2006 2 2 7 11 6 1369 188
2007 2 2 7 11 5 1371 173
2008 2 2 7 11 8 1372 218
2009 2 2 7 11 206 1373 207
2010 2 2 7 11 176 1375 177
2011 2 2 7 11 221 1376 222
2012 2 2 7 11 191 1374 192
2013 2 2 7 11 1141 2028 1555
2014 2 2 7 11 1142 2026 1553
2015 2 2 7 11 1144 2025 1554
2016 2 2 7 11 1143 2027 1556
2017 2 2 7 11 1067 2368 728
2018 2 2 7 11 1068 2367 727
2019 2 2 7 11 1065 2365 725
2020 2 2 7 11 1066 2366 726
2021 2 2 7 11 628 1954 1119
2022 2 2 7 11 627 1955 1118
2023 2 2 7 11 626 1953 1120
2024 2 2 7 11 625 1956 1117
2025 2 2 7 11 487 1106 2675
2026 2 2 7 11 485 1108 2676
2027 2 2 7 11 488 1105 2674
2028 2 2 7 11 486 1107 2673
2029 2 2 7 11 1033 2097 743
2030 2 2 7 11 1036 2098 741
2031 2 2 7 11 1034 2099 742
2032 2 2 7 11 1035 2100 744
2033 2 2 7 11 477 1214 2691
2034 2 2 7 11 480 1213 2689
2035 2 2 7 11 478 1216 2690
2036 2 2 7 11 479 1215 2692
2037 2 2 7 11 936 2691 1214
2038 2 2 7 11 933 2689 1213
2039 2 2 7 11 935 2690 1216
2040 2 2 7 11 934 2692 1215
2041 2 2 7 11 489 1110 2685
2042 2 2 7 11 492 1111 2687
2043 2 2 7 11 491 1112 2688
2044 2 2 7 11 490 1109 2686
2045 2 2 7 11 222 1570 223
2046 2 2 7 11 207 1569 208
2047 2 2 7 11 192 1572 193
2048 2 2 7 11 177 1571 178
2049 2 2 7 11 6 187 1576
2050 2 2 7 11 8 217 1573
2051 2 2 7 11 5 232 1575
2052 2 2 7 11 7 202 1574
2053 2 2 7 11 930 1658 2555
2054 2 2 7 11 931 1660 2553
2055 2 2 7 11 929 1659 2556
2056 2 2 7 11 932 1657 2554
2057 2 2 7 11 501 1389 1170
2058 2 2 7 11 502 1390 1169
2059 2 2 7 11 504 1391 1172
2060 2 2 7 11 503 1392 1171
2061 2 2 7 11 306 1159 1975
2062 2 2 7 11 308 1157 1974
2063 2 2 7 11 307 1158 1976
2064 2 2 7 11 305 1160 1973
2065 2 2 7 11 1084 1274 2008
2066 2 2 7 11 1082 1275 2005
2067 2 2 7 11 1081 1273 2006
2068 2 2 7 11 1083 1276 2007
2069 2 2 7 11 683 1299 1929
2070 2 2 7 11 681 1297 1930
2071 2 2 7 11 682 1298 1932
2072 2 2 7 11 684 1300 1931
2073 2 2 7 11 1081 2565 1266
2074 2 2 7 11 1082 2567 1265
2075 2 2 7 11 1083 2566 1267
2076 2 2 7 11 1084 2568 1268
2077 2 2 7 11 222 2533 1570
2078 2 2 7 11 207 2536 1569
2079 2 2 7 11 192 2534 1572
2080 2 2 7 11 177 2535 1571
2081 2 2 7 11 6 1576 2542
2082 2 2 7 11 8 1573 2544
2083 2 2 7 11 5 1575 2543
2084 2 2 7 11 7 1574 2541
2085 2 2 7 11 628 1978 1123
2086 2 2 7 11 626 1977 1121
2087 2 2 7 11 625 1980 1124
2088 2 2 7 11 627 1979 1122
2089 2 2 7 11 381 1981 2554
2090 2 2 7 11 384 1982 2553
2091 2 2 7 11 383 1983 2556
2092 2 2 7 11 382 1984 2555
2093 2 2 7 11 1045 2092 739
2094 2 2 7 11 1046 2089 738
2095 2 2 7 11 1047 2091 740
2096 2 2 7 11 1048 2090 737
2097 2 2 7 11 656 1773 1623
2098 2 2 7 11 655 1774 1624
2099 2 2 7 11 653 1775 1622
2100 2 2 7 11 654 1776 1621
2101 2 2 7 11 2134 2356 1190
2102 2 2 7 11 2133 2354 1189
2103 2 2 7 11 2136 2355 1192
2104 2 2 7 11 2135 2353 1191
2105 2 2 7 11 2140 1194 2358
2106 2 2 7 11 2139 1193 2357
2107 2 2 7 11 2137 1195 2359
2108 2 2 7 11 2138 1196 2360
2109 2 2 7 11 908 1916 2221
2110 2 2 7 11 905 1914 2223
2111 2 2 7 11 907 1915 2222
2112 2 2 7 11 906 1913 2224
2113 2 2 7 11 381 2554 1587
2114 2 2 7 11 384 2553 1585
2115 2 2 7 11 383 2556 1586
2116 2 2 7 11 382 2555 1588
2117 2 2 7 11 561 1858 1535
2118 2 2 7 11 564 1859 1534
2119 2 2 7 11 562 1860 1536
2120 2 2 7 11 563 1857 1533
2121 2 2 7 11 1061 2176 568
2122 2 2 7 11 1064 2173 567
2123 2 2 7 11 1062 2174 565
2124 2 2 7 11 1063 2175 566
2125 2 2 7 11 545 1232 1527
2126 2 2 7 11 547 1229 1526
2127 2 2 7 11 546 1230 1525
2128 2 2 7 11 548 1231 1528
2129 2 2 7 11 301 2613 2609
2130 2 2 7 11 302 2614 2610
2131 2 2 7 11 304 2615 2611
2132 2 2 7 11 303 2616 2612
2133 2 2 7 11 468 2175 1063
2134 2 2 7 11 466 2174 1062
2135 2 2 7 11 467 2176 1061
2136 2 2 7 11 465 2173 1064
2137 2 2 7 11 742 2370 1293
2138 2 2 7 11 741 2369 1295
2139 2 2 7 11 743 2372 1294
2140 2 2 7 11 744 2371 1296
2141 2 2 7 11 858 1822 2476
2142 2 2 7 11 857 1821 2475
2143 2 2 7 11 859 1823 2473
2144 2 2 7 11 860 1824 2474
2145 2 2 7 11 209 2134 1190
2146 2 2 7 11 179 2135 1191
2147 2 2 7 11 224 2133 1189
2148 2 2 7 11 194 2136 1192
2149 2 2 7 11 231 1196 2138
2150 2 2 7 11 216 1195 2137
2151 2 2 7 11 201 1193 2139
2152 2 2 7 11 186 1194 2140
2153 2 2 7 11 1005 1592 2203
2154 2 2 7 11 1008 1591 2204
2155 2 2 7 11 1007 1590 2201
2156 2 2 7 11 1006 1589 2202
2157 2 2 7 11 230 2166 1196
2158 2 2 7 11 185 2165 1194
2159 2 2 7 11 200 2167 1193
2160 2 2 7 11 215 2168 1195
2161 2 2 7 11 71 72 1362
2162 2 2 7 11 112 113 1363
2163 2 2 7 11 153 154 1361
2164 2 2 7 11 30 31 1364
2165 2 2 7 11 887 1369 2042
2166 2 2 7 11 886 1370 2044
2167 2 2 7 11 885 1371 2041
2168 2 2 7 11 888 1372 2043
2169 2 2 7 11 889 2047 1373
2170 2 2 7 11 890 2046 1374
2171 2 2 7 11 892 2048 1376
2172 2 2 7 11 891 2045 1375
2173 2 2 7 11 1058 1818 629
2174 2 2 7 11 1057 1817 631
2175 2 2 7 11 1059 1819 630
2176 2 2 7 11 1060 1820 632
2177 2 2 7 11 783 1477 1770
2178 2 2 7 11 782 1478 1771
2179 2 2 7 11 781 1479 1772
2180 2 2 7 11 784 1480 1769
2181 2 2 7 11 384 1770 1477
2182 2 2 7 11 382 1771 1478
2183 2 2 7 11 383 1769 1480
2184 2 2 7 11 381 1772 1479
2185 2 2 7 11 1013 2635 2315
2186 2 2 7 11 1014 2633 2314
2187 2 2 7 11 1015 2636 2316
2188 2 2 7 11 1016 2634 2313
2189 2 2 7 11 1623 1773 2508
2190 2 2 7 11 1624 1774 2505
2191 2 2 7 11 1622 1775 2506
2192 2 2 7 11 1621 1776 2507
2193 2 2 7 11 893 1387 2499
2194 2 2 7 11 894 1385 2497
2195 2 2 7 11 895 1386 2498
2196 2 2 7 11 896 1388 2500
2197 2 2 7 11 504 1172 1462
2198 2 2 7 11 501 1170 1464
2199 2 2 7 11 503 1171 1463
2200 2 2 7 11 502 1169 1461
2201 2 2 7 11 596 1847 1347
2202 2 2 7 11 593 1845 1346
2203 2 2 7 11 595 1848 1345
2204 2 2 7 11 594 1846 1348
2205 2 2 7 11 785 2417 1511
2206 2 2 7 11 788 2418 1510
2207 2 2 7 11 787 2420 1512
2208 2 2 7 11 786 2419 1509
2209 2 2 7 11 532 1246 1422
2210 2 2 7 11 529 1247 1421
2211 2 2 7 11 530 1245 1423
2212 2 2 7 11 531 1248 1424
2213 2 2 7 11 785 1942 2417
2214 2 2 7 11 788 1941 2418
2215 2 2 7 11 787 1944 2420
2216 2 2 7 11 786 1943 2419
2217 2 2 7 11 139 140 1434
2218 2 2 7 11 16 17 1433
2219 2 2 7 11 98 99 1436
2220 2 2 7 11 57 58 1435
2221 2 2 7 11 755 2214 1139
2222 2 2 7 11 756 2216 1140
2223 2 2 7 11 754 2215 1138
2224 2 2 7 11 753 2213 1137
2225 2 2 7 11 614 1730 1142
2226 2 2 7 11 613 1731 1144
2227 2 2 7 11 616 1732 1143
2228 2 2 7 11 615 1729 1141
2229 2 2 7 11 260 1141 1729
2230 2 2 7 11 258 1142 1730
2231 2 2 7 11 257 1144 1731
2232 2 2 7 11 259 1143 1732
2233 2 2 7 11 320 1832 2035
2234 2 2 7 11 317 1831 2036
2235 2 2 7 11 318 1830 2033
2236 2 2 7 11 319 1829 2034
2237 2 2 7 11 525 1636 1401
2238 2 2 7 11 526 1633 1404
2239 2 2 7 11 528 1635 1402
2240 2 2 7 11 527 1634 1403
2241 2 2 7 11 384 1477 1982
2242 2 2 7 11 381 1479 1981
2243 2 2 7 11 383 1480 1983
2244 2 2 7 11 382 1478 1984
2245 2 2 7 11 366 1635 1125
2246 2 2 7 11 365 1634 1126
2247 2 2 7 11 368 1633 1127
2248 2 2 7 11 367 1636 1128
2249 2 2 7 11 503 1463 1209
2250 2 2 7 11 501 1464 1211
2251 2 2 7 11 504 1462 1210
2252 2 2 7 11 502 1461 1212
2253 2 2 7 11 389 2030 2475
2254 2 2 7 11 392 2032 2476
2255 2 2 7 11 390 2029 2474
2256 2 2 7 11 391 2031 2473
2257 2 2 7 11 1056 1994 2181
2258 2 2 7 11 1053 1995 2182
2259 2 2 7 11 1055 1993 2184
2260 2 2 7 11 1054 1996 2183
2261 2 2 7 11 251 1241 1903
2262 2 2 7 11 252 1242 1901
2263 2 2 7 11 250 1244 1902
2264 2 2 7 11 249 1243 1904
2265 2 2 7 11 559 1212 1461
2266 2 2 7 11 558 1211 1464
2267 2 2 7 11 560 1209 1463
2268 2 2 7 11 557 1210 1462
2269 2 2 7 11 198 1801 1148
2270 2 2 7 11 213 1804 1145
2271 2 2 7 11 228 1803 1146
2272 2 2 7 11 183 1802 1147
2273 2 2 7 11 444 2181 1994
2274 2 2 7 11 442 2182 1995
2275 2 2 7 11 441 2184 1993
2276 2 2 7 11 443 2183 1996
2277 2 2 7 11 648 1148 1801
2278 2 2 7 11 645 1147 1802
2279 2 2 7 11 647 1146 1803
2280 2 2 7 11 646 1145 1804
2281 2 2 7 11 512 1188 2605
2282 2 2 7 11 510 1186 2608
2283 2 2 7 11 509 1185 2607
2284 2 2 7 11 511 1187 2606
2285 2 2 7 11 117 118 1344
2286 2 2 7 11 158 159 1343
2287 2 2 7 11 35 36 1341
2288 2 2 7 11 76 77 1342
2289 2 2 7 11 1015 2316 1340
2290 2 2 7 11 1014 2314 1337
2291 2 2 7 11 1013 2315 1338
2292 2 2 7 11 1016 2313 1339
2293 2 2 7 11 876 1713 2694
2294 2 2 7 11 875 1714 2693
2295 2 2 7 11 873 1716 2695
2296 2 2 7 11 874 1715 2696
2297 2 2 7 11 391 1908 1098
2298 2 2 7 11 390 1905 1097
2299 2 2 7 11 389 1907 1100
2300 2 2 7 11 392 1906 1099
2301 2 2 7 11 1075 942 2094
2302 2 2 7 11 1073 943 2095
2303 2 2 7 11 1074 941 2093
2304 2 2 7 11 1076 944 2096
2305 2 2 7 11 597 1117 2532
2306 2 2 7 11 598 1118 2531
2307 2 2 7 11 600 1119 2529
2308 2 2 7 11 599 1120 2530
2309 2 2 7 11 918 1342 2526
2310 2 2 7 11 917 1341 2527
2311 2 2 7 11 919 1343 2525
2312 2 2 7 11 920 1344 2528
2313 2 2 7 11 614 1097 1905
2314 2 2 7 11 615 1098 1908
2315 2 2 7 11 613 1099 1906
2316 2 2 7 11 616 1100 1907
2317 2 2 7 11 1078 2146 460
2318 2 2 7 11 1079 2145 459
2319 2 2 7 11 1080 2147 457
2320 2 2 7 11 1077 2148 458
2321 2 2 7 11 1077 689 2148
2322 2 2 7 11 1079 691 2145
2323 2 2 7 11 1078 690 2146
2324 2 2 7 11 1080 692 2147
2325 2 2 7 11 376 2073 1703
2326 2 2 7 11 374 2076 1702
2327 2 2 7 11 375 2074 1704
2328 2 2 7 11 373 2075 1701
2329 2 2 7 11 1152 1583 2027
2330 2 2 7 11 1150 1582 2025
2331 2 2 7 11 1149 1581 2028
2332 2 2 7 11 1151 1584 2026
2333 2 2 7 11 321 1985 1074
2334 2 2 7 11 324 1988 1075
2335 2 2 7 11 322 1987 1073
2336 2 2 7 11 323 1986 1076
2337 2 2 7 11 572 2673 1107
2338 2 2 7 11 570 2674 1105
2339 2 2 7 11 571 2676 1108
2340 2 2 7 11 569 2675 1106
2341 2 2 7 11 1073 1990 433
2342 2 2 7 11 1076 1989 434
2343 2 2 7 11 1074 1991 435
2344 2 2 7 11 1075 1992 436
2345 2 2 7 11 477 1581 1149
2346 2 2 7 11 479 1582 1150
2347 2 2 7 11 480 1583 1152
2348 2 2 7 11 478 1584 1151
2349 2 2 7 11 853 2039 1926
2350 2 2 7 11 854 2040 1928
2351 2 2 7 11 855 2038 1927
2352 2 2 7 11 856 2037 1925
2353 2 2 7 11 1079 459 2650
2354 2 2 7 11 1078 460 2651
2355 2 2 7 11 1077 458 2652
2356 2 2 7 11 1080 457 2649
2357 2 2 7 11 1082 677 2101
2358 2 2 7 11 1081 678 2102
2359 2 2 7 11 1083 680 2103
2360 2 2 7 11 1084 679 2104
2361 2 2 7 11 291 1139 2214
2362 2 2 7 11 290 1138 2215
2363 2 2 7 11 289 1137 2213
2364 2 2 7 11 292 1140 2216
2365 2 2 7 11 642 1561 1221
2366 2 2 7 11 641 1564 1224
2367 2 2 7 11 643 1563 1223
2368 2 2 7 11 644 1562 1222
2369 2 2 7 11 246 2053 2264
2370 2 2 7 11 247 2054 2263
2371 2 2 7 11 245 2056 2262
2372 2 2 7 11 248 2055 2261
2373 2 2 7 11 333 1400 1760
2374 2 2 7 11 334 1399 1759
2375 2 2 7 11 335 1397 1757
2376 2 2 7 11 336 1398 1758
2377 2 2 7 11 290 1081 2102
2378 2 2 7 11 289 1082 2101
2379 2 2 7 11 291 1083 2103
2380 2 2 7 11 292 1084 2104
2381 2 2 7 11 314 1224 1564
2382 2 2 7 11 313 1223 1563
2383 2 2 7 11 315 1221 1561
2384 2 2 7 11 316 1222 1562
2385 2 2 7 11 694 2575 1086
2386 2 2 7 11 693 2573 1087
2387 2 2 7 11 695 2576 1085
2388 2 2 7 11 696 2574 1088
2389 2 2 7 11 344 1595 2328
2390 2 2 7 11 341 1593 2327
2391 2 2 7 11 342 1596 2326
2392 2 2 7 11 343 1594 2325
2393 2 2 7 11 477 1159 1581
2394 2 2 7 11 480 1157 1583
2395 2 2 7 11 479 1158 1582
2396 2 2 7 11 478 1160 1584
2397 2 2 7 11 535 2159 1519
2398 2 2 7 11 536 2160 1520
2399 2 2 7 11 533 2158 1518
2400 2 2 7 11 534 2157 1517
2401 2 2 7 11 248 1854 1101
2402 2 2 7 11 246 1853 1103
2403 2 2 7 11 247 1856 1104
2404 2 2 7 11 245 1855 1102
2405 2 2 7 11 593 1674 2348
2406 2 2 7 11 595 1676 2347
2407 2 2 7 11 594 1675 2346
2408 2 2 7 11 596 1673 2345
2409 2 2 7 11 712 2087 1114
2410 2 2 7 11 711 2088 1113
2411 2 2 7 11 709 2086 1115
2412 2 2 7 11 710 2085 1116
2413 2 2 7 11 251 2077 1241
2414 2 2 7 11 252 2078 1242
2415 2 2 7 11 249 2080 1243
2416 2 2 7 11 250 2079 1244
2417 2 2 7 11 813 2205 1453
2418 2 2 7 11 815 2207 1455
2419 2 2 7 11 816 2208 1456
2420 2 2 7 11 814 2206 1454
2421 2 2 7 11 470 1455 1806
2422 2 2 7 11 471 1453 1807
2423 2 2 7 11 469 1454 1805
2424 2 2 7 11 472 1456 1808
2425 2 2 7 11 1052 1399 1715
2426 2 2 7 11 1051 1400 1716
2427 2 2 7 11 1049 1398 1714
2428 2 2 7 11 1050 1397 1713
2429 2 2 7 11 768 1806 1455
2430 2 2 7 11 766 1805 1454
2431 2 2 7 11 765 1807 1453
2432 2 2 7 11 767 1808 1456
2433 2 2 7 11 873 2577 1237
2434 2 2 7 11 874 2579 1238
2435 2 2 7 11 875 2578 1239
2436 2 2 7 11 876 2580 1240
2437 2 2 7 11 453 1237 2577
2438 2 2 7 11 454 1238 2579
2439 2 2 7 11 456 1239 2578
2440 2 2 7 11 455 1240 2580
2441 2 2 7 11 351 1724 1812
2442 2 2 7 11 349 1722 1809
2443 2 2 7 11 350 1721 1810
2444 2 2 7 11 352 1723 1811
2445 2 2 7 11 301 1288 2613
2446 2 2 7 11 302 1287 2614
2447 2 2 7 11 304 1285 2615
2448 2 2 7 11 303 1286 2616
2449 2 2 7 11 620 2247 1222
2450 2 2 7 11 619 2248 1221
2451 2 2 7 11 618 2246 1223
2452 2 2 7 11 617 2245 1224
2453 2 2 7 11 841 1309 2333
2454 2 2 7 11 843 1310 2334
2455 2 2 7 11 844 1311 2335
2456 2 2 7 11 842 1312 2336
2457 2 2 7 11 949 1881 2299
2458 2 2 7 11 950 1882 2297
2459 2 2 7 11 951 1884 2300
2460 2 2 7 11 952 1883 2298
2461 2 2 7 11 547 1504 1229
2462 2 2 7 11 546 1503 1230
2463 2 2 7 11 545 1501 1232
2464 2 2 7 11 548 1502 1231
2465 2 2 7 11 437 2333 1309
2466 2 2 7 11 439 2334 1310
2467 2 2 7 11 438 2335 1311
2468 2 2 7 11 440 2336 1312
2469 2 2 7 11 489 1141 1555
2470 2 2 7 11 490 1142 1553
2471 2 2 7 11 492 1143 1556
2472 2 2 7 11 491 1144 1554
2473 2 2 7 11 344 2328 2008
2474 2 2 7 11 341 2327 2006
2475 2 2 7 11 342 2326 2005
2476 2 2 7 11 343 2325 2007
2477 2 2 7 11 624 1129 1989
2478 2 2 7 11 621 1130 1991
2479 2 2 7 11 622 1132 1990
2480 2 2 7 11 623 1131 1992
2481 2 2 7 11 645 1721 1255
2482 2 2 7 11 647 1722 1253
2483 2 2 7 11 648 1724 1254
2484 2 2 7 11 646 1723 1256
2485 2 2 7 11 335 1757 1245
2486 2 2 7 11 336 1758 1246
2487 2 2 7 11 333 1760 1248
2488 2 2 7 11 334 1759 1247
2489 2 2 7 11 350 1255 1721
2490 2 2 7 11 349 1253 1722
2491 2 2 7 11 352 1256 1723
2492 2 2 7 11 351 1254 1724
2493 2 2 7 11 180 1683 181
2494 2 2 7 11 195 1681 196
2495 2 2 7 11 225 1684 226
2496 2 2 7 11 210 1682 211
2497 2 2 7 11 253 1860 1238
2498 2 2 7 11 256 1857 1239
2499 2 2 7 11 254 1858 1237
2500 2 2 7 11 255 1859 1240
2501 2 2 7 11 500 2040 1225
2502 2 2 7 11 499 2039 1226
2503 2 2 7 11 498 2038 1227
2504 2 2 7 11 497 2037 1228
2505 2 2 7 11 659 1246 1758
2506 2 2 7 11 657 1245 1757
2507 2 2 7 11 660 1248 1760
2508 2 2 7 11 658 1247 1759
2509 2 2 7 11 410 1163 1644
2510 2 2 7 11 409 1164 1643
2511 2 2 7 11 411 1161 1642
2512 2 2 7 11 412 1162 1641
2513 2 2 7 11 340 1355 1873
2514 2 2 7 11 337 1353 1875
2515 2 2 7 11 338 1354 1876
2516 2 2 7 11 339 1356 1874
2517 2 2 7 11 796 1642 1161
2518 2 2 7 11 793 1643 1164
2519 2 2 7 11 794 1644 1163
2520 2 2 7 11 795 1641 1162
2521 2 2 7 11 1194 2165 2437
2522 2 2 7 11 1193 2167 2438
2523 2 2 7 11 1195 2168 2440
2524 2 2 7 11 1196 2166 2439
2525 2 2 7 11 473 1524 2357
2526 2 2 7 11 474 1521 2358
2527 2 2 7 11 475 1522 2360
2528 2 2 7 11 476 1523 2359
2529 2 2 7 11 825 1351 2461
2530 2 2 7 11 828 1352 2462
2531 2 2 7 11 826 1349 2463
2532 2 2 7 11 827 1350 2464
2533 2 2 7 11 733 1863 1377
2534 2 2 7 11 734 1861 1380
2535 2 2 7 11 736 1864 1378
2536 2 2 7 11 735 1862 1379
2537 2 2 7 11 624 2291 1129
2538 2 2 7 11 623 2289 1131
2539 2 2 7 11 621 2290 1130
2540 2 2 7 11 622 2292 1132
2541 2 2 7 11 1299 2664 1929
2542 2 2 7 11 1297 2662 1930
2543 2 2 7 11 1300 2661 1931
2544 2 2 7 11 1298 2663 1932
2545 2 2 7 11 574 1583 1157
2546 2 2 7 11 573 1582 1158
2547 2 2 7 11 575 1581 1159
2548 2 2 7 11 576 1584 1160
2549 2 2 7 11 49 1980 1322
2550 2 2 7 11 90 1979 1324
2551 2 2 7 11 131 1977 1323
2552 2 2 7 11 172 1978 1321
2553 2 2 7 11 332 1525 1230
2554 2 2 7 11 331 1526 1229
2555 2 2 7 11 330 1527 1232
2556 2 2 7 11 329 1528 1231
2557 2 2 7 11 1071 2609 2613
2558 2 2 7 11 1072 2610 2614
2559 2 2 7 11 1069 2611 2615
2560 2 2 7 11 1070 2612 2616
2561 2 2 7 11 313 1563 1186
2562 2 2 7 11 314 1564 1185
2563 2 2 7 11 316 1562 1188
2564 2 2 7 11 315 1561 1187
2565 2 2 7 11 145 2098 2296
2566 2 2 7 11 63 2097 2293
2567 2 2 7 11 22 2099 2294
2568 2 2 7 11 104 2100 2295
2569 2 2 7 11 834 1912 2466
2570 2 2 7 11 836 1910 2468
2571 2 2 7 11 833 1911 2467
2572 2 2 7 11 835 1909 2465
2573 2 2 7 11 772 1843 1466
2574 2 2 7 11 771 1844 1468
2575 2 2 7 11 769 1841 1467
2576 2 2 7 11 770 1842 1465
2577 2 2 7 11 236 1333 1622
2578 2 2 7 11 235 1334 1621
2579 2 2 7 11 234 1335 1623
2580 2 2 7 11 233 1336 1624
2581 2 2 7 11 357 1467 1841
2582 2 2 7 11 358 1466 1843
2583 2 2 7 11 360 1468 1844
2584 2 2 7 11 359 1465 1842
2585 2 2 7 11 423 2484 2619
2586 2 2 7 11 424 2483 2617
2587 2 2 7 11 421 2482 2618
2588 2 2 7 11 422 2481 2620
2589 2 2 7 11 331 2122 2010
2590 2 2 7 11 332 2123 2009
2591 2 2 7 11 330 2124 2012
2592 2 2 7 11 329 2121 2011
2593 2 2 7 11 653 1622 1333
2594 2 2 7 11 654 1621 1334
2595 2 2 7 11 656 1623 1335
2596 2 2 7 11 655 1624 1336
2597 2 2 7 11 878 1674 1346
2598 2 2 7 11 877 1676 1345
2599 2 2 7 11 880 1675 1348
2600 2 2 7 11 879 1673 1347
2601 2 2 7 11 818 1366 2194
2602 2 2 7 11 817 1365 2193
2603 2 2 7 11 820 1368 2195
2604 2 2 7 11 819 1367 2196
2605 2 2 7 11 371 2194 1366
2606 2 2 7 11 372 2193 1365
2607 2 2 7 11 370 2196 1367
2608 2 2 7 11 369 2195 1368
2609 2 2 7 11 554 1864 1368
2610 2 2 7 11 553 1862 1367
2611 2 2 7 11 556 1861 1366
2612 2 2 7 11 555 1863 1365
2613 2 2 7 11 390 1097 2029
2614 2 2 7 11 391 1098 2031
2615 2 2 7 11 389 1100 2030
2616 2 2 7 11 392 1099 2032
2617 2 2 7 11 554 1378 1864
2618 2 2 7 11 555 1377 1863
2619 2 2 7 11 553 1379 1862
2620 2 2 7 11 556 1380 1861
2621 2 2 7 11 204 1429 205
2622 2 2 7 11 174 1432 175
2623 2 2 7 11 189 1431 190
2624 2 2 7 11 219 1430 220
2625 2 2 7 11 877 2630 1734
2626 2 2 7 11 880 2629 1733
2627 2 2 7 11 879 2632 1736
2628 2 2 7 11 878 2631 1735
2629 2 2 7 11 522 2432 1409
2630 2 2 7 11 521 2429 1410
2631 2 2 7 11 523 2431 1411
2632 2 2 7 11 524 2430 1412
2633 2 2 7 11 413 1780 1252
2634 2 2 7 11 415 1778 1250
2635 2 2 7 11 414 1779 1251
2636 2 2 7 11 416 1777 1249
2637 2 2 7 11 526 1413 2425
2638 2 2 7 11 528 1416 2428
2639 2 2 7 11 525 1414 2426
2640 2 2 7 11 527 1415 2427
2641 2 2 7 11 798 1252 1780
2642 2 2 7 11 797 1251 1779
2643 2 2 7 11 800 1249 1777
2644 2 2 7 11 799 1250 1778
2645 2 2 7 11 757 1360 2604
2646 2 2 7 11 760 1358 2602
2647 2 2 7 11 758 1357 2603
2648 2 2 7 11 759 1359 2601
2649 2 2 7 11 239 1422 1797
2650 2 2 7 11 238 1423 1798
2651 2 2 7 11 240 1421 1799
2652 2 2 7 11 237 1424 1800
2653 2 2 7 11 554 2127 1378
2654 2 2 7 11 555 2125 1377
2655 2 2 7 11 553 2126 1379
2656 2 2 7 11 556 2128 1380
2657 2 2 7 11 263 2242 1869
2658 2 2 7 11 261 2241 1870
2659 2 2 7 11 264 2243 1871
2660 2 2 7 11 262 2244 1872
2661 2 2 7 11 977 2264 2053
2662 2 2 7 11 979 2263 2054
2663 2 2 7 11 980 2262 2056
2664 2 2 7 11 978 2261 2055
2665 2 2 7 11 859 2031 1154
2666 2 2 7 11 858 2032 1155
2667 2 2 7 11 857 2030 1156
2668 2 2 7 11 860 2029 1153
2669 2 2 7 11 479 1647 1158
2670 2 2 7 11 477 1646 1159
2671 2 2 7 11 480 1645 1157
2672 2 2 7 11 478 1648 1160
2673 2 2 7 11 234 2367 2272
2674 2 2 7 11 233 2368 2271
2675 2 2 7 11 235 2365 2270
2676 2 2 7 11 236 2366 2269
2677 2 2 7 11 1070 2113 2002
2678 2 2 7 11 1071 2114 2003
2679 2 2 7 11 1072 2115 2004
2680 2 2 7 11 1069 2116 2001
2681 2 2 7 11 869 1238 1651
2682 2 2 7 11 872 1237 1652
2683 2 2 7 11 870 1239 1650
2684 2 2 7 11 871 1240 1649
2685 2 2 7 11 389 1865 1907
2686 2 2 7 11 390 1867 1905
2687 2 2 7 11 392 1868 1906
2688 2 2 7 11 391 1866 1908
2689 2 2 7 11 346 2297 1882
2690 2 2 7 11 348 2299 1881
2691 2 2 7 11 345 2300 1884
2692 2 2 7 11 347 2298 1883
2693 2 2 7 11 723 2002 2113
2694 2 2 7 11 721 2003 2114
2695 2 2 7 11 722 2004 2115
2696 2 2 7 11 724 2001 2116
2697 2 2 7 11 121 1129 2291
2698 2 2 7 11 80 1131 2289
2699 2 2 7 11 39 1130 2290
2700 2 2 7 11 162 1132 2292
2701 2 2 7 11 580 2556 1659
2702 2 2 7 11 578 2553 1660
2703 2 2 7 11 579 2555 1658
2704 2 2 7 11 577 2554 1657
2705 2 2 7 11 831 2035 1832
2706 2 2 7 11 832 2036 1831
2707 2 2 7 11 830 2033 1830
2708 2 2 7 11 829 2034 1829
2709 2 2 7 11 1157 1645 1974
2710 2 2 7 11 1159 1646 1975
2711 2 2 7 11 1158 1647 1976
2712 2 2 7 11 1160 1648 1973
2713 2 2 7 11 311 1216 2197
2714 2 2 7 11 310 1215 2198
2715 2 2 7 11 309 1214 2199
2716 2 2 7 11 312 1213 2200
2717 2 2 7 11 2 1980 49
2718 2 2 7 11 3 1979 90
2719 2 2 7 11 4 1977 131
2720 2 2 7 11 1 1978 172
2721 2 2 7 11 522 1442 2432
2722 2 2 7 11 521 1441 2429
2723 2 2 7 11 523 1443 2431
2724 2 2 7 11 524 1444 2430
2725 2 2 7 11 528 2428 1448
2726 2 2 7 11 525 2426 1445
2727 2 2 7 11 527 2427 1446
2728 2 2 7 11 526 2425 1447
2729 2 2 7 11 304 2611 1712
2730 2 2 7 11 302 2610 1710
2731 2 2 7 11 301 2609 1709
2732 2 2 7 11 303 2612 1711
2733 2 2 7 11 733 1967 1863
2734 2 2 7 11 734 1968 1861
2735 2 2 7 11 735 1965 1862
2736 2 2 7 11 736 1966 1864
2737 2 2 7 11 212 1167 1804
2738 2 2 7 11 197 1165 1801
2739 2 2 7 11 182 1166 1802
2740 2 2 7 11 227 1168 1803
2741 2 2 7 11 537 1507 1327
2742 2 2 7 11 538 1505 1326
2743 2 2 7 11 540 1506 1328
2744 2 2 7 11 539 1508 1325
2745 2 2 7 11 647 1803 1168
2746 2 2 7 11 648 1801 1165
2747 2 2 7 11 645 1802 1166
2748 2 2 7 11 646 1804 1167
2749 2 2 7 11 1094 1487 2578
2750 2 2 7 11 1093 1488 2580
2751 2 2 7 11 1096 1485 2579
2752 2 2 7 11 1095 1486 2577
2753 2 2 7 11 456 2578 1487
2754 2 2 7 11 455 2580 1488
2755 2 2 7 11 454 2579 1485
2756 2 2 7 11 453 2577 1486
2757 2 2 7 11 1036 2296 2098
2758 2 2 7 11 1033 2293 2097
2759 2 2 7 11 1034 2294 2099
2760 2 2 7 11 1035 2295 2100
2761 2 2 7 11 569 1201 2675
2762 2 2 7 11 572 1204 2673
2763 2 2 7 11 571 1202 2676
2764 2 2 7 11 570 1203 2674
2765 2 2 7 11 962 2242 1931
2766 2 2 7 11 963 2243 1930
2767 2 2 7 11 964 2244 1932
2768 2 2 7 11 961 2241 1929
2769 2 2 7 11 945 2011 2121
2770 2 2 7 11 947 2009 2123
2771 2 2 7 11 948 2010 2122
2772 2 2 7 11 946 2012 2124
2773 2 2 7 11 109 1386 1693
2774 2 2 7 11 68 1385 1695
2775 2 2 7 11 150 1388 1696
2776 2 2 7 11 27 1387 1694
2777 2 2 7 11 256 1852 1135
2778 2 2 7 11 255 1850 1134
2779 2 2 7 11 254 1851 1133
2780 2 2 7 11 253 1849 1136
2781 2 2 7 11 694 2000 1482
2782 2 2 7 11 693 1997 1481
2783 2 2 7 11 695 1999 1484
2784 2 2 7 11 696 1998 1483
2785 2 2 7 11 540 1285 1558
2786 2 2 7 11 537 1287 1557
2787 2 2 7 11 539 1286 1560
2788 2 2 7 11 538 1288 1559
2789 2 2 7 11 645 1166 1721
2790 2 2 7 11 646 1167 1723
2791 2 2 7 11 647 1168 1722
2792 2 2 7 11 648 1165 1724
2793 2 2 7 11 306 2239 1159
2794 2 2 7 11 308 2240 1157
2795 2 2 7 11 307 2238 1158
2796 2 2 7 11 305 2237 1160
2797 2 2 7 11 598 1133 1851
2798 2 2 7 11 600 1135 1852
2799 2 2 7 11 599 1134 1850
2800 2 2 7 11 597 1136 1849
2801 2 2 7 11 709 1125 1899
2802 2 2 7 11 710 1126 1898
2803 2 2 7 11 712 1128 1897
2804 2 2 7 11 711 1127 1900
2805 2 2 7 11 936 1836 2646
2806 2 2 7 11 934 1833 2645
2807 2 2 7 11 933 1834 2648
2808 2 2 7 11 935 1835 2647
2809 2 2 7 11 805 2158 1543
2810 2 2 7 11 806 2157 1544
2811 2 2 7 11 808 2160 1542
2812 2 2 7 11 807 2159 1541
2813 2 2 7 11 319 1177 1829
2814 2 2 7 11 318 1178 1830
2815 2 2 7 11 317 1179 1831
2816 2 2 7 11 320 1180 1832
2817 2 2 7 11 205 1429 2561
2818 2 2 7 11 175 1432 2562
2819 2 2 7 11 190 1431 2563
2820 2 2 7 11 220 1430 2564
2821 2 2 7 11 204 2557 1429
2822 2 2 7 11 174 2558 1432
2823 2 2 7 11 189 2560 1431
2824 2 2 7 11 219 2559 1430
2825 2 2 7 11 605 1829 1177
2826 2 2 7 11 607 1830 1178
2827 2 2 7 11 608 1831 1179
2828 2 2 7 11 606 1832 1180
2829 2 2 7 11 225 1189 1684
2830 2 2 7 11 195 1192 1681
2831 2 2 7 11 180 1191 1683
2832 2 2 7 11 210 1190 1682
2833 2 2 7 11 651 2052 1688
2834 2 2 7 11 649 2049 1685
2835 2 2 7 11 650 2051 1686
2836 2 2 7 11 652 2050 1687
2837 2 2 7 11 422 1337 2481
2838 2 2 7 11 421 1338 2482
2839 2 2 7 11 423 1340 2484
2840 2 2 7 11 424 1339 2483
2841 2 2 7 11 628 1123 1954
2842 2 2 7 11 626 1121 1953
2843 2 2 7 11 625 1124 1956
2844 2 2 7 11 627 1122 1955
2845 2 2 7 11 1188 1562 2605
2846 2 2 7 11 1186 1563 2608
2847 2 2 7 11 1185 1564 2607
2848 2 2 7 11 1187 1561 2606
2849 2 2 7 11 745 1322 1538
2850 2 2 7 11 748 1323 1540
2851 2 2 7 11 746 1324 1537
2852 2 2 7 11 747 1321 1539
2853 2 2 7 11 962 1869 2242
2854 2 2 7 11 961 1870 2241
2855 2 2 7 11 963 1871 2243
2856 2 2 7 11 964 1872 2244
2857 2 2 7 11 1068 2272 2367
2858 2 2 7 11 1067 2271 2368
2859 2 2 7 11 1065 2270 2365
2860 2 2 7 11 1066 2269 2366
2861 2 2 7 11 1329 2441 1426
2862 2 2 7 11 1332 2444 1428
2863 2 2 7 11 1330 2442 1427
2864 2 2 7 11 1331 2443 1425
2865 2 2 7 11 256 1308 1533
2866 2 2 7 11 255 1307 1534
2867 2 2 7 11 254 1306 1535
2868 2 2 7 11 253 1305 1536
2869 2 2 7 11 108 109 1693
2870 2 2 7 11 67 68 1695
2871 2 2 7 11 149 150 1696
2872 2 2 7 11 26 27 1694
2873 2 2 7 11 868 2481 1337
2874 2 2 7 11 867 2482 1338
2875 2 2 7 11 865 2483 1339
2876 2 2 7 11 866 2484 1340
2877 2 2 7 11 651 1607 2052
2878 2 2 7 11 649 1606 2049
2879 2 2 7 11 650 1605 2051
2880 2 2 7 11 652 1608 2050
2881 2 2 7 11 628 1539 1321
2882 2 2 7 11 627 1537 1324
2883 2 2 7 11 626 1540 1323
2884 2 2 7 11 625 1538 1322
2885 2 2 7 11 662 2318 1163
2886 2 2 7 11 664 2320 1161
2887 2 2 7 11 661 2317 1162
2888 2 2 7 11 663 2319 1164
2889 2 2 7 11 455 1649 1240
2890 2 2 7 11 453 1652 1237
2891 2 2 7 11 456 1650 1239
2892 2 2 7 11 454 1651 1238
2893 2 2 7 11 777 1391 2061
2894 2 2 7 11 779 1390 2064
2895 2 2 7 11 780 1392 2063
2896 2 2 7 11 778 1389 2062
2897 2 2 7 11 251 1903 1579
2898 2 2 7 11 252 1901 1578
2899 2 2 7 11 250 1902 1580
2900 2 2 7 11 249 1904 1577
2901 2 2 7 11 121 2341 1129
2902 2 2 7 11 80 2342 1131
2903 2 2 7 11 162 2343 1132
2904 2 2 7 11 39 2344 1130
2905 2 2 7 11 50 2108 1124
2906 2 2 7 11 132 2106 1121
2907 2 2 7 11 91 2105 1122
2908 2 2 7 11 9 2107 1123
2909 2 2 7 11 7 2541 1370
2910 2 2 7 11 6 2542 1369
2911 2 2 7 11 5 2543 1371
2912 2 2 7 11 8 2544 1372
2913 2 2 7 11 207 1373 2536
2914 2 2 7 11 177 1375 2535
2915 2 2 7 11 222 1376 2533
2916 2 2 7 11 192 1374 2534
2917 2 2 7 11 639 1874 2340
2918 2 2 7 11 640 1873 2339
2919 2 2 7 11 638 1875 2337
2920 2 2 7 11 637 1876 2338
2921 2 2 7 11 410 2017 1163
2922 2 2 7 11 412 2019 1162
2923 2 2 7 11 409 2018 1164
2924 2 2 7 11 411 2020 1161
2925 2 2 7 11 662 1163 2017
2926 2 2 7 11 661 1162 2019
2927 2 2 7 11 664 1161 2020
2928 2 2 7 11 663 1164 2018
2929 2 2 7 11 393 1171 2657
2930 2 2 7 11 396 1169 2658
2931 2 2 7 11 394 1172 2660
2932 2 2 7 11 395 1170 2659
2933 2 2 7 11 2134 771 2356
2934 2 2 7 11 2133 769 2354
2935 2 2 7 11 2136 770 2355
2936 2 2 7 11 2135 772 2353
2937 2 2 7 11 2140 2358 775
2938 2 2 7 11 2139 2357 773
2939 2 2 7 11 2138 2360 774
2940 2 2 7 11 2137 2359 776
2941 2 2 7 11 170 2072 1236
2942 2 2 7 11 129 2071 1233
2943 2 2 7 11 88 2070 1234
2944 2 2 7 11 47 2069 1235
2945 2 2 7 11 504 2061 1391
2946 2 2 7 11 502 2064 1390
2947 2 2 7 11 501 2062 1389
2948 2 2 7 11 503 2063 1392
2949 2 2 7 11 571 2200 1213
2950 2 2 7 11 569 2199 1214
2951 2 2 7 11 572 2197 1216
2952 2 2 7 11 570 2198 1215
2953 2 2 7 11 776 1523 1840
2954 2 2 7 11 774 1522 1837
2955 2 2 7 11 773 1524 1838
2956 2 2 7 11 775 1521 1839
2957 2 2 7 11 324 1292 1988
2958 2 2 7 11 321 1289 1985
2959 2 2 7 11 322 1291 1987
2960 2 2 7 11 323 1290 1986
2961 2 2 7 11 356 1840 1523
2962 2 2 7 11 355 1837 1522
2963 2 2 7 11 353 1838 1524
2964 2 2 7 11 354 1839 1521
2965 2 2 7 11 33 34 1599
2966 2 2 7 11 156 157 1600
2967 2 2 7 11 115 116 1598
2968 2 2 7 11 74 75 1597
2969 2 2 7 11 1360 1661 2604
2970 2 2 7 11 1357 1662 2603
2971 2 2 7 11 1358 1664 2602
2972 2 2 7 11 1359 1663 2601
2973 2 2 7 11 648 1868 1148
2974 2 2 7 11 645 1865 1147
2975 2 2 7 11 647 1867 1146
2976 2 2 7 11 646 1866 1145
2977 2 2 7 11 820 1872 1368
2978 2 2 7 11 818 1870 1366
2979 2 2 7 11 819 1871 1367
2980 2 2 7 11 817 1869 1365
2981 2 2 7 11 580 1387 1586
2982 2 2 7 11 577 1386 1587
2983 2 2 7 11 579 1388 1588
2984 2 2 7 11 578 1385 1585
2985 2 2 7 11 895 1587 1386
2986 2 2 7 11 893 1586 1387
2987 2 2 7 11 894 1585 1385
2988 2 2 7 11 896 1588 1388
2989 2 2 7 11 274 2636 1745
2990 2 2 7 11 276 2634 1746
2991 2 2 7 11 275 2635 1748
2992 2 2 7 11 273 2633 1747
2993 2 2 7 11 727 1744 1549
2994 2 2 7 11 726 1741 1551
2995 2 2 7 11 725 1742 1552
2996 2 2 7 11 728 1743 1550
2997 2 2 7 11 281 2458 1455
2998 2 2 7 11 282 2459 1454
2999 2 2 7 11 283 2460 1456
3000 2 2 7 11 284 2457 1453
3001 2 2 7 11 634 1362 2183
3002 2 2 7 11 636 1363 2184
3003 2 2 7 11 635 1364 2182
3004 2 2 7 11 633 1361 2181
3005 2 2 7 11 814 1497 2524
3006 2 2 7 11 816 1499 2523
3007 2 2 7 11 815 1498 2522
3008 2 2 7 11 813 1500 2521
3009 2 2 7 11 481 1657 1271
3010 2 2 7 11 482 1659 1269
3011 2 2 7 11 484 1660 1272
3012 2 2 7 11 483 1658 1270
3013 2 2 7 11 644 1785 1207
3014 2 2 7 11 642 1786 1208
3015 2 2 7 11 641 1787 1205
3016 2 2 7 11 643 1788 1206
3017 2 2 7 11 464 1244 2201
3018 2 2 7 11 463 1243 2202
3019 2 2 7 11 461 1241 2203
3020 2 2 7 11 462 1242 2204
3021 2 2 7 11 810 2390 2495
3022 2 2 7 11 809 2389 2494
3023 2 2 7 11 812 2392 2496
3024 2 2 7 11 811 2391 2493
3025 2 2 7 11 535 1134 2159
3026 2 2 7 11 534 1136 2157
3027 2 2 7 11 533 1133 2158
3028 2 2 7 11 536 1135 2160
3029 2 2 7 11 656 1225 2040
3030 2 2 7 11 655 1226 2039
3031 2 2 7 11 654 1228 2037
3032 2 2 7 11 653 1227 2038
3033 2 2 7 11 129 1233 2502
3034 2 2 7 11 170 1236 2501
3035 2 2 7 11 88 1234 2503
3036 2 2 7 11 47 1235 2504
3037 2 2 7 11 684 1931 2242
3038 2 2 7 11 681 1930 2243
3039 2 2 7 11 682 1932 2244
3040 2 2 7 11 683 1929 2241
3041 2 2 7 11 2105 2519 1122
3042 2 2 7 11 2107 2520 1123
3043 2 2 7 11 2106 2518 1121
3044 2 2 7 11 2108 2517 1124
3045 2 2 7 11 357 1761 1497
3046 2 2 7 11 358 1764 1498
3047 2 2 7 11 360 1763 1499
3048 2 2 7 11 359 1762 1500
3049 2 2 7 11 290 2102 1138
3050 2 2 7 11 289 2101 1137
3051 2 2 7 11 291 2103 1139
3052 2 2 7 11 292 2104 1140
3053 2 2 7 11 242 1752 2380
3054 2 2 7 11 243 1751 2378
3055 2 2 7 11 241 1750 2377
3056 2 2 7 11 244 1749 2379
3057 2 2 7 11 677 1137 2101
3058 2 2 7 11 678 1138 2102
3059 2 2 7 11 679 1140 2104
3060 2 2 7 11 680 1139 2103
3061 2 2 7 11 814 2524 2206
3062 2 2 7 11 815 2522 2207
3063 2 2 7 11 816 2523 2208
3064 2 2 7 11 813 2521 2205
3065 2 2 7 11 78 79 1568
3066 2 2 7 11 160 161 1566
3067 2 2 7 11 119 120 1565
3068 2 2 7 11 37 38 1567
3069 2 2 7 11 900 2519 2105
3070 2 2 7 11 897 2520 2107
3071 2 2 7 11 898 2518 2106
3072 2 2 7 11 899 2517 2108
3073 2 2 7 11 244 2188 1749
3074 2 2 7 11 242 2186 1752
3075 2 2 7 11 241 2187 1750
3076 2 2 7 11 243 2185 1751
3077 2 2 7 11 965 1749 2188
3078 2 2 7 11 968 1750 2187
3079 2 2 7 11 966 1752 2186
3080 2 2 7 11 967 1751 2185
3081 2 2 7 11 670 1878 1179
3082 2 2 7 11 671 1879 1178
3083 2 2 7 11 672 1880 1177
3084 2 2 7 11 669 1877 1180
3085 2 2 7 11 239 2322 1422
3086 2 2 7 11 237 2324 1424
3087 2 2 7 11 240 2321 1421
3088 2 2 7 11 238 2323 1423
3089 2 2 7 11 1054 1613 1996
3090 2 2 7 11 1053 1616 1995
3091 2 2 7 11 1056 1615 1994
3092 2 2 7 11 1055 1614 1993
3093 2 2 7 11 847 2117 1495
3094 2 2 7 11 845 2119 1494
3095 2 2 7 11 848 2120 1493
3096 2 2 7 11 846 2118 1496
3097 2 2 7 11 466 1265 2174
3098 2 2 7 11 467 1267 2176
3099 2 2 7 11 468 1268 2175
3100 2 2 7 11 465 1266 2173
3101 2 2 7 11 248 1260 1854
3102 2 2 7 11 246 1257 1853
3103 2 2 7 11 245 1259 1855
3104 2 2 7 11 247 1258 1856
3105 2 2 7 11 246 2264 1257
3106 2 2 7 11 248 2261 1260
3107 2 2 7 11 245 2262 1259
3108 2 2 7 11 247 2263 1258
3109 2 2 7 11 585 1218 1973
3110 2 2 7 11 588 1217 1974
3111 2 2 7 11 586 1219 1975
3112 2 2 7 11 587 1220 1976
3113 2 2 7 11 1119 1954 2529
3114 2 2 7 11 1118 1955 2531
3115 2 2 7 11 1120 1953 2530
3116 2 2 7 11 1117 1956 2532
3117 2 2 7 11 633 1771 2682
3118 2 2 7 11 636 1772 2683
3119 2 2 7 11 634 1770 2684
3120 2 2 7 11 635 1769 2681
3121 2 2 7 11 783 1770 1639
3122 2 2 7 11 784 1769 1638
3123 2 2 7 11 782 1771 1637
3124 2 2 7 11 781 1772 1640
3125 2 2 7 11 106 1184 1964
3126 2 2 7 11 24 1182 1963
3127 2 2 7 11 65 1183 1961
3128 2 2 7 11 147 1181 1962
3129 2 2 7 11 315 1489 2221
3130 2 2 7 11 316 1490 2222
3131 2 2 7 11 314 1491 2223
3132 2 2 7 11 313 1492 2224
3133 2 2 7 11 635 1638 1769
3134 2 2 7 11 633 1637 1771
3135 2 2 7 11 634 1639 1770
3136 2 2 7 11 636 1640 1772
3137 2 2 7 11 656 1335 2303
3138 2 2 7 11 655 1336 2304
3139 2 2 7 11 654 1334 2302
3140 2 2 7 11 653 1333 2301
3141 2 2 7 11 686 1919 1283
3142 2 2 7 11 688 1917 1281
3143 2 2 7 11 687 1918 1282
3144 2 2 7 11 685 1920 1284
3145 2 2 7 11 741 1962 1181
3146 2 2 7 11 743 1961 1183
3147 2 2 7 11 742 1963 1182
3148 2 2 7 11 744 1964 1184
3149 2 2 7 11 345 1501 1738
3150 2 2 7 11 347 1503 1739
3151 2 2 7 11 346 1502 1740
3152 2 2 7 11 348 1504 1737
3153 2 2 7 11 188 1369 2560
3154 2 2 7 11 173 1371 2558
3155 2 2 7 11 218 1372 2559
3156 2 2 7 11 203 1370 2557
3157 2 2 7 11 206 2561 1373
3158 2 2 7 11 191 2563 1374
3159 2 2 7 11 176 2562 1375
3160 2 2 7 11 221 2564 1376
3161 2 2 7 11 529 1421 2321
3162 2 2 7 11 530 1423 2323
3163 2 2 7 11 531 1424 2324
3164 2 2 7 11 532 1422 2322
3165 2 2 7 11 440 1312 2254
3166 2 2 7 11 437 1309 2253
3167 2 2 7 11 439 1310 2255
3168 2 2 7 11 438 1311 2256
3169 2 2 7 11 267 1283 1919
3170 2 2 7 11 266 1281 1917
3171 2 2 7 11 265 1282 1918
3172 2 2 7 11 268 1284 1920
3173 2 2 7 11 1015 1745 2636
3174 2 2 7 11 1013 1748 2635
3175 2 2 7 11 1016 1746 2634
3176 2 2 7 11 1014 1747 2633
3177 2 2 7 11 885 2558 1371
3178 2 2 7 11 887 2560 1369
3179 2 2 7 11 888 2559 1372
3180 2 2 7 11 886 2557 1370
3181 2 2 7 11 889 1373 2561
3182 2 2 7 11 890 1374 2563
3183 2 2 7 11 892 1376 2564
3184 2 2 7 11 891 1375 2562
3185 2 2 7 11 363 1794 1880
3186 2 2 7 11 361 1793 1878
3187 2 2 7 11 364 1796 1879
3188 2 2 7 11 362 1795 1877
3189 2 2 7 11 331 1229 2122
3190 2 2 7 11 332 1230 2123
3191 2 2 7 11 329 1231 2121
3192 2 2 7 11 330 1232 2124
3193 2 2 7 11 34 2413 1599
3194 2 2 7 11 116 2414 1598
3195 2 2 7 11 157 2415 1600
3196 2 2 7 11 75 2416 1597
3197 2 2 7 11 317 2036 1384
3198 2 2 7 11 320 2035 1382
3199 2 2 7 11 318 2033 1381
3200 2 2 7 11 319 2034 1383
3201 2 2 7 11 818 2382 2622
3202 2 2 7 11 820 2381 2623
3203 2 2 7 11 817 2383 2621
3204 2 2 7 11 819 2384 2624
3205 2 2 7 11 777 2300 1296
3206 2 2 7 11 778 2298 1293
3207 2 2 7 11 780 2297 1294
3208 2 2 7 11 779 2299 1295
3209 2 2 7 11 731 1666 2511
3210 2 2 7 11 730 1667 2510
3211 2 2 7 11 732 1665 2512
3212 2 2 7 11 729 1668 2509
3213 2 2 7 11 347 1293 2298
3214 2 2 7 11 346 1294 2297
3215 2 2 7 11 348 1295 2299
3216 2 2 7 11 345 1296 2300
3217 2 2 7 11 619 1679 2248
3218 2 2 7 11 620 1680 2247
3219 2 2 7 11 618 1677 2246
3220 2 2 7 11 617 1678 2245
3221 2 2 7 11 873 1237 1858
3222 2 2 7 11 875 1239 1857
3223 2 2 7 11 876 1240 1859
3224 2 2 7 11 874 1238 1860
3225 2 2 7 11 796 1161 2455
3226 2 2 7 11 795 1162 2453
3227 2 2 7 11 793 1164 2454
3228 2 2 7 11 794 1163 2456
3229 2 2 7 11 984 2340 1874
3230 2 2 7 11 983 2339 1873
3231 2 2 7 11 981 2337 1875
3232 2 2 7 11 982 2338 1876
3233 2 2 7 11 155 156 1615
3234 2 2 7 11 32 33 1616
3235 2 2 7 11 114 115 1614
3236 2 2 7 11 73 74 1613
3237 2 2 7 11 773 1838 1574
3238 2 2 7 11 774 1837 1575
3239 2 2 7 11 775 1839 1576
3240 2 2 7 11 776 1840 1573
3241 2 2 7 11 700 1574 1838
3242 2 2 7 11 698 1576 1839
3243 2 2 7 11 697 1575 1837
3244 2 2 7 11 699 1573 1840
3245 2 2 7 11 771 1569 1844
3246 2 2 7 11 772 1571 1843
3247 2 2 7 11 770 1572 1842
3248 2 2 7 11 769 1570 1841
3249 2 2 7 11 704 1842 1572
3250 2 2 7 11 703 1843 1571
3251 2 2 7 11 701 1841 1570
3252 2 2 7 11 702 1844 1569
3253 2 2 7 11 697 1297 2041
3254 2 2 7 11 699 1298 2043
3255 2 2 7 11 700 1300 2044
3256 2 2 7 11 698 1299 2042
3257 2 2 7 11 704 2046 1301
3258 2 2 7 11 701 2048 1304
3259 2 2 7 11 703 2045 1303
3260 2 2 7 11 702 2047 1302
3261 2 2 7 11 13 14 1697
3262 2 2 7 11 136 137 1698
3263 2 2 7 11 95 96 1700
3264 2 2 7 11 54 55 1699
3265 2 2 7 11 426 2041 1297
3266 2 2 7 11 428 2043 1298
3267 2 2 7 11 425 2042 1299
3268 2 2 7 11 427 2044 1300
3269 2 2 7 11 429 1301 2046
3270 2 2 7 11 432 1303 2045
3271 2 2 7 11 430 1302 2047
3272 2 2 7 11 431 1304 2048
3273 2 2 7 11 688 1281 1761
3274 2 2 7 11 687 1282 1764
3275 2 2 7 11 686 1283 1763
3276 2 2 7 11 685 1284 1762
3277 2 2 7 11 705 1168 2285
3278 2 2 7 11 707 1167 2288
3279 2 2 7 11 708 1166 2286
3280 2 2 7 11 706 1165 2287
3281 2 2 7 11 574 1157 2240
3282 2 2 7 11 573 1158 2238
3283 2 2 7 11 576 1160 2237
3284 2 2 7 11 575 1159 2239
3285 2 2 7 11 118 2528 1344
3286 2 2 7 11 159 2525 1343
3287 2 2 7 11 77 2526 1342
3288 2 2 7 11 36 2527 1341
3289 2 2 7 11 803 2315 2635
3290 2 2 7 11 801 2314 2633
3291 2 2 7 11 804 2313 2634
3292 2 2 7 11 802 2316 2636
3293 2 2 7 11 158 1343 2415
3294 2 2 7 11 117 1344 2414
3295 2 2 7 11 76 1342 2416
3296 2 2 7 11 35 1341 2413
3297 2 2 7 11 620 1222 1915
3298 2 2 7 11 619 1221 1916
3299 2 2 7 11 618 1223 1913
3300 2 2 7 11 617 1224 1914
3301 2 2 7 11 316 1915 1222
3302 2 2 7 11 313 1913 1223
3303 2 2 7 11 314 1914 1224
3304 2 2 7 11 315 1916 1221
3305 2 2 7 11 329 1176 2143
3306 2 2 7 11 332 1173 2141
3307 2 2 7 11 331 1174 2142
3308 2 2 7 11 330 1175 2144
3309 2 2 7 11 662 1279 2318
3310 2 2 7 11 664 1278 2320
3311 2 2 7 11 661 1280 2317
3312 2 2 7 11 663 1277 2319
3313 2 2 7 11 460 2146 1173
3314 2 2 7 11 459 2145 1174
3315 2 2 7 11 458 2148 1175
3316 2 2 7 11 457 2147 1176
3317 2 2 7 11 598 2531 1543
3318 2 2 7 11 597 2532 1544
3319 2 2 7 11 599 2530 1541
3320 2 2 7 11 600 2529 1542
3321 2 2 7 11 947 1904 1243
3322 2 2 7 11 945 1901 1242
3323 2 2 7 11 946 1903 1241
3324 2 2 7 11 948 1902 1244
3325 2 2 7 11 589 1853 1257
3326 2 2 7 11 591 1855 1259
3327 2 2 7 11 592 1856 1258
3328 2 2 7 11 590 1854 1260
3329 2 2 7 11 529 2321 1469
3330 2 2 7 11 530 2323 1470
3331 2 2 7 11 531 2324 1471
3332 2 2 7 11 532 2322 1472
3333 2 2 7 11 731 2511 2154
3334 2 2 7 11 730 2510 2153
3335 2 2 7 11 732 2512 2155
3336 2 2 7 11 729 2509 2156
3337 2 2 7 11 866 1972 1705
3338 2 2 7 11 867 1970 1706
3339 2 2 7 11 868 1971 1707
3340 2 2 7 11 865 1969 1708
3341 2 2 7 11 299 1899 1448
3342 2 2 7 11 297 1897 1445
3343 2 2 7 11 298 1900 1447
3344 2 2 7 11 300 1898 1446
3345 2 2 7 11 596 1347 1673
3346 2 2 7 11 594 1348 1675
3347 2 2 7 11 593 1346 1674
3348 2 2 7 11 595 1345 1676
3349 2 2 7 11 481 2371 1184
3350 2 2 7 11 482 2370 1182
3351 2 2 7 11 483 2369 1181
3352 2 2 7 11 484 2372 1183
3353 2 2 7 11 281 1198 2458
3354 2 2 7 11 282 1200 2459
3355 2 2 7 11 283 1199 2460
3356 2 2 7 11 284 1197 2457
3357 2 2 7 11 741 1181 2369
3358 2 2 7 11 743 1183 2372
3359 2 2 7 11 742 1182 2370
3360 2 2 7 11 744 1184 2371
3361 2 2 7 11 85 86 1602
3362 2 2 7 11 167 168 1604
3363 2 2 7 11 126 127 1603
3364 2 2 7 11 44 45 1601
3365 2 2 7 11 322 1661 1360
3366 2 2 7 11 321 1662 1357
3367 2 2 7 11 323 1664 1358
3368 2 2 7 11 324 1663 1359
3369 2 2 7 11 415 1250 1933
3370 2 2 7 11 413 1252 1935
3371 2 2 7 11 416 1249 1934
3372 2 2 7 11 414 1251 1936
3373 2 2 7 11 1171 2232 2657
3374 2 2 7 11 1170 2229 2659
3375 2 2 7 11 1172 2231 2660
3376 2 2 7 11 1169 2230 2658
3377 2 2 7 11 853 1926 2402
3378 2 2 7 11 854 1928 2401
3379 2 2 7 11 855 1927 2404
3380 2 2 7 11 856 1925 2403
3381 2 2 7 11 768 2458 1198
3382 2 2 7 11 765 2457 1197
3383 2 2 7 11 767 2460 1199
3384 2 2 7 11 766 2459 1200
3385 2 2 7 11 614 1905 1253
3386 2 2 7 11 613 1906 1254
3387 2 2 7 11 616 1907 1255
3388 2 2 7 11 615 1908 1256
3389 2 2 7 11 809 1403 1634
3390 2 2 7 11 812 1404 1633
3391 2 2 7 11 810 1402 1635
3392 2 2 7 11 811 1401 1636
3393 2 2 7 11 676 1996 1613
3394 2 2 7 11 673 1993 1614
3395 2 2 7 11 675 1995 1616
3396 2 2 7 11 674 1994 1615
3397 2 2 7 11 362 1225 2303
3398 2 2 7 11 361 1226 2304
3399 2 2 7 11 364 1227 2301
3400 2 2 7 11 363 1228 2302
3401 2 2 7 11 755 2267 2065
3402 2 2 7 11 756 2268 2068
3403 2 2 7 11 753 2266 2066
3404 2 2 7 11 754 2265 2067
3405 2 2 7 11 263 1315 1817
3406 2 2 7 11 261 1316 1820
3407 2 2 7 11 264 1313 1818
3408 2 2 7 11 262 1314 1819
3409 2 2 7 11 422 1450 2225
3410 2 2 7 11 424 1449 2226
3411 2 2 7 11 421 1452 2227
3412 2 2 7 11 423 1451 2228
3413 2 2 7 11 614 1253 2178
3414 2 2 7 11 616 1255 2177
3415 2 2 7 11 613 1254 2180
3416 2 2 7 11 615 1256 2179
3417 2 2 7 11 821 2657 2232
3418 2 2 7 11 824 2659 2229
3419 2 2 7 11 822 2660 2231
3420 2 2 7 11 823 2658 2230
3421 2 2 7 11 1004 2626 1729
3422 2 2 7 11 1001 2628 1732
3423 2 2 7 11 1003 2625 1731
3424 2 2 7 11 1002 2627 1730
3425 2 2 7 11 632 1820 1316
3426 2 2 7 11 630 1819 1314
3427 2 2 7 11 629 1818 1313
3428 2 2 7 11 631 1817 1315
3429 2 2 7 11 368 1765 1549
3430 2 2 7 11 367 1768 1550
3431 2 2 7 11 366 1767 1551
3432 2 2 7 11 365 1766 1552
3433 2 2 7 11 947 2123 1904
3434 2 2 7 11 945 2121 1901
3435 2 2 7 11 948 2122 1902
3436 2 2 7 11 946 2124 1903
3437 2 2 7 11 727 1549 1765
3438 2 2 7 11 728 1550 1768
3439 2 2 7 11 725 1552 1766
3440 2 2 7 11 726 1551 1767
3441 2 2 7 11 559 1461 1630
3442 2 2 7 11 557 1462 1632
3443 2 2 7 11 558 1464 1631
3444 2 2 7 11 560 1463 1629
3445 2 2 7 11 612 1933 1250
3446 2 2 7 11 611 1934 1249
3447 2 2 7 11 610 1936 1251
3448 2 2 7 11 609 1935 1252
3449 2 2 7 11 662 1969 1279
3450 2 2 7 11 664 1971 1278
3451 2 2 7 11 661 1970 1280
3452 2 2 7 11 663 1972 1277
3453 2 2 7 11 494 1278 1971
3454 2 2 7 11 495 1279 1969
3455 2 2 7 11 496 1280 1970
3456 2 2 7 11 493 1277 1972
3457 2 2 7 11 601 1904 2123
3458 2 2 7 11 603 1901 2121
3459 2 2 7 11 602 1902 2122
3460 2 2 7 11 604 1903 2124
3461 2 2 7 11 362 2538 1225
3462 2 2 7 11 361 2537 1226
3463 2 2 7 11 364 2539 1227
3464 2 2 7 11 363 2540 1228
3465 2 2 7 11 551 1618 2521
3466 2 2 7 11 549 1617 2522
3467 2 2 7 11 550 1620 2524
3468 2 2 7 11 552 1619 2523
3469 2 2 7 11 1018 2521 1618
3470 2 2 7 11 1020 2523 1619
3471 2 2 7 11 1019 2522 1617
3472 2 2 7 11 1017 2524 1620
3473 2 2 7 11 181 1683 2286
3474 2 2 7 11 226 1684 2285
3475 2 2 7 11 196 1681 2287
3476 2 2 7 11 211 1682 2288
3477 2 2 7 11 366 2149 1635
3478 2 2 7 11 365 2150 1634
3479 2 2 7 11 368 2152 1633
3480 2 2 7 11 367 2151 1636
3481 2 2 7 11 577 1693 1386
3482 2 2 7 11 579 1696 1388
3483 2 2 7 11 578 1695 1385
3484 2 2 7 11 580 1694 1387
3485 2 2 7 11 901 1599 2413
3486 2 2 7 11 904 1598 2414
3487 2 2 7 11 903 1600 2415
3488 2 2 7 11 902 1597 2416
3489 2 2 7 11 745 1235 2069
3490 2 2 7 11 746 1234 2070
3491 2 2 7 11 748 1233 2071
3492 2 2 7 11 747 1236 2072
3493 2 2 7 11 468 1236 2362
3494 2 2 7 11 466 1234 2361
3495 2 2 7 11 467 1233 2364
3496 2 2 7 11 465 1235 2363
3497 2 2 7 11 746 2361 1234
3498 2 2 7 11 745 2363 1235
3499 2 2 7 11 748 2364 1233
3500 2 2 7 11 747 2362 1236
3501 2 2 7 11 605 1794 1334
3502 2 2 7 11 608 1793 1336
3503 2 2 7 11 607 1796 1333
3504 2 2 7 11 606 1795 1335
3505 2 2 7 11 335 1713 1397
3506 2 2 7 11 336 1714 1398
3507 2 2 7 11 334 1715 1399
3508 2 2 7 11 333 1716 1400
3509 2 2 7 11 602 2122 1229
3510 2 2 7 11 601 2123 1230
3511 2 2 7 11 603 2121 1231
3512 2 2 7 11 604 2124 1232
3513 2 2 7 11 501 1211 2233
3514 2 2 7 11 502 1212 2235
3515 2 2 7 11 504 1210 2234
3516 2 2 7 11 503 1209 2236
3517 2 2 7 11 700 2661 1300
3518 2 2 7 11 697 2662 1297
3519 2 2 7 11 699 2663 1298
3520 2 2 7 11 698 2664 1299
3521 2 2 7 11 704 1301 2668
3522 2 2 7 11 701 1304 2665
3523 2 2 7 11 702 1302 2667
3524 2 2 7 11 703 1303 2666
3525 2 2 7 11 500 1225 2699
3526 2 2 7 11 497 1228 2698
3527 2 2 7 11 498 1227 2697
3528 2 2 7 11 499 1226 2700
3529 2 2 7 11 634 2183 1639
3530 2 2 7 11 636 2184 1640
3531 2 2 7 11 635 2182 1638
3532 2 2 7 11 633 2181 1637
3533 2 2 7 11 656 2303 1225
3534 2 2 7 11 655 2304 1226
3535 2 2 7 11 654 2302 1228
3536 2 2 7 11 653 2301 1227
3537 2 2 7 11 170 171 2072
3538 2 2 7 11 129 130 2071
3539 2 2 7 11 88 89 2070
3540 2 2 7 11 47 48 2069
3541 2 2 7 11 425 1411 2431
3542 2 2 7 11 427 1412 2430
3543 2 2 7 11 426 1410 2429
3544 2 2 7 11 428 1409 2432
3545 2 2 7 11 429 2425 1413
3546 2 2 7 11 430 2426 1414
3547 2 2 7 11 432 2427 1415
3548 2 2 7 11 431 2428 1416
3549 2 2 7 11 519 2210 1889
3550 2 2 7 11 520 2212 1891
3551 2 2 7 11 517 2211 1890
3552 2 2 7 11 518 2209 1892
3553 2 2 7 11 145 146 2098
3554 2 2 7 11 63 64 2097
3555 2 2 7 11 22 23 2099
3556 2 2 7 11 104 105 2100
3557 2 2 7 11 519 1893 2210
3558 2 2 7 11 517 1894 2211
3559 2 2 7 11 518 1896 2209
3560 2 2 7 11 520 1895 2212
3561 2 2 7 11 341 2006 1273
3562 2 2 7 11 342 2005 1275
3563 2 2 7 11 343 2007 1276
3564 2 2 7 11 344 2008 1274
3565 2 2 7 11 1000 1889 2210
3566 2 2 7 11 997 1890 2211
3567 2 2 7 11 999 1891 2212
3568 2 2 7 11 998 1892 2209
3569 2 2 7 11 994 2209 1896
3570 2 2 7 11 993 2211 1894
3571 2 2 7 11 996 2210 1893
3572 2 2 7 11 995 2212 1895
3573 2 2 7 11 540 1328 2116
3574 2 2 7 11 537 1327 2115
3575 2 2 7 11 539 1325 2113
3576 2 2 7 11 538 1326 2114
3577 2 2 7 11 723 2113 1325
3578 2 2 7 11 724 2116 1328
3579 2 2 7 11 722 2115 1327
3580 2 2 7 11 721 2114 1326
3581 2 2 7 11 236 2269 1333
3582 2 2 7 11 235 2270 1334
3583 2 2 7 11 234 2272 1335
3584 2 2 7 11 233 2271 1336
3585 2 2 7 11 156 1600 1615
3586 2 2 7 11 115 1598 1614
3587 2 2 7 11 33 1599 1616
3588 2 2 7 11 74 1597 1613
3589 2 2 7 11 1466 2709 2353
3590 2 2 7 11 1465 2710 2355
3591 2 2 7 11 1467 2712 2354
3592 2 2 7 11 1468 2711 2356
3593 2 2 7 11 872 1652 2326
3594 2 2 7 11 869 1651 2327
3595 2 2 7 11 871 1649 2325
3596 2 2 7 11 870 1650 2328
3597 2 2 7 11 482 1269 2257
3598 2 2 7 11 483 1270 2259
3599 2 2 7 11 481 1271 2258
3600 2 2 7 11 484 1272 2260
3601 2 2 7 11 78 1568 2526
3602 2 2 7 11 160 1566 2525
3603 2 2 7 11 37 1567 2527
3604 2 2 7 11 119 1565 2528
3605 2 2 7 11 586 2109 1259
3606 2 2 7 11 585 2110 1258
3607 2 2 7 11 588 2112 1260
3608 2 2 7 11 587 2111 1257
3609 2 2 7 11 734 1641 1968
3610 2 2 7 11 733 1642 1967
3611 2 2 7 11 736 1643 1966
3612 2 2 7 11 735 1644 1965
3613 2 2 7 11 251 1261 2077
3614 2 2 7 11 252 1262 2078
3615 2 2 7 11 249 1264 2080
3616 2 2 7 11 250 1263 2079
3617 2 2 7 11 589 1257 2645
3618 2 2 7 11 591 1259 2646
3619 2 2 7 11 592 1258 2647
3620 2 2 7 11 590 1260 2648
3621 2 2 7 11 796 1967 1642
3622 2 2 7 11 795 1968 1641
3623 2 2 7 11 793 1966 1643
3624 2 2 7 11 794 1965 1644
3625 2 2 7 11 12 2311 1327
3626 2 2 7 11 135 2312 1326
3627 2 2 7 11 94 2309 1325
3628 2 2 7 11 53 2310 1328
3629 2 2 7 11 805 2350 1286
3630 2 2 7 11 807 2352 1288
3631 2 2 7 11 806 2349 1285
3632 2 2 7 11 808 2351 1287
3633 2 2 7 11 377 1618 1787
3634 2 2 7 11 378 1619 1788
3635 2 2 7 11 380 1617 1785
3636 2 2 7 11 379 1620 1786
3637 2 2 7 11 142 143 2485
3638 2 2 7 11 19 20 2486
3639 2 2 7 11 101 102 2488
3640 2 2 7 11 60 61 2487
3641 2 2 7 11 349 2178 1253
3642 2 2 7 11 350 2177 1255
3643 2 2 7 11 351 2180 1254
3644 2 2 7 11 352 2179 1256
3645 2 2 7 11 128 129 2502
3646 2 2 7 11 169 170 2501
3647 2 2 7 11 87 88 2503
3648 2 2 7 11 46 47 2504
3649 2 2 7 11 639 1532 1874
3650 2 2 7 11 637 1531 1876
3651 2 2 7 11 638 1530 1875
3652 2 2 7 11 640 1529 1873
3653 2 2 7 11 882 1815 1473
3654 2 2 7 11 881 1816 1474
3655 2 2 7 11 884 1813 1475
3656 2 2 7 11 883 1814 1476
3657 2 2 7 11 652 1783 1493
3658 2 2 7 11 650 1782 1495
3659 2 2 7 11 651 1781 1494
3660 2 2 7 11 649 1784 1496
3661 2 2 7 11 692 1938 2487
3662 2 2 7 11 689 1937 2488
3663 2 2 7 11 690 1940 2486
3664 2 2 7 11 691 1939 2485
3665 2 2 7 11 800 2378 1249
3666 2 2 7 11 797 2377 1251
3667 2 2 7 11 799 2380 1250
3668 2 2 7 11 798 2379 1252
3669 2 2 7 11 288 2130 1378
3670 2 2 7 11 287 2132 1379
3671 2 2 7 11 285 2129 1377
3672 2 2 7 11 286 2131 1380
3673 2 2 7 11 588 1260 2261
3674 2 2 7 11 586 1259 2262
3675 2 2 7 11 585 1258 2263
3676 2 2 7 11 587 1257 2264
3677 2 2 7 11 622 1566 2292
3678 2 2 7 11 623 1568 2289
3679 2 2 7 11 624 1565 2291
3680 2 2 7 11 621 1567 2290
3681 2 2 7 11 666 2477 1263
3682 2 2 7 11 665 2478 1264
3683 2 2 7 11 667 2479 1262
3684 2 2 7 11 668 2480 1261
3685 2 2 7 11 673 1614 1598
3686 2 2 7 11 676 1613 1597
3687 2 2 7 11 674 1615 1600
3688 2 2 7 11 675 1616 1599
3689 2 2 7 11 736 1378 2130
3690 2 2 7 11 734 1380 2131
3691 2 2 7 11 735 1379 2132
3692 2 2 7 11 733 1377 2129
3693 2 2 7 11 482 2257 1293
3694 2 2 7 11 483 2259 1295
3695 2 2 7 11 481 2258 1296
3696 2 2 7 11 484 2260 1294
3697 2 2 7 11 371 1366 1861
3698 2 2 7 11 370 1367 1862
3699 2 2 7 11 372 1365 1863
3700 2 2 7 11 369 1368 1864
3701 2 2 7 11 641 1317 2607
3702 2 2 7 11 642 1320 2606
3703 2 2 7 11 643 1318 2608
3704 2 2 7 11 644 1319 2605
3705 2 2 7 11 38 39 2290
3706 2 2 7 11 79 80 2289
3707 2 2 7 11 120 121 2291
3708 2 2 7 11 161 162 2292
3709 2 2 7 11 919 2525 1566
3710 2 2 7 11 918 2526 1568
3711 2 2 7 11 920 2528 1565
3712 2 2 7 11 917 2527 1567
3713 2 2 7 11 591 2646 1836
3714 2 2 7 11 589 2645 1833
3715 2 2 7 11 592 2647 1835
3716 2 2 7 11 590 2648 1834
3717 2 2 7 11 328 1959 1332
3718 2 2 7 11 326 1958 1330
3719 2 2 7 11 325 1960 1329
3720 2 2 7 11 327 1957 1331
3721 2 2 7 11 628 1321 1978
3722 2 2 7 11 626 1323 1977
3723 2 2 7 11 627 1324 1979
3724 2 2 7 11 625 1322 1980
3725 2 2 7 11 197 1801 198
3726 2 2 7 11 182 1802 183
3727 2 2 7 11 212 1804 213
3728 2 2 7 11 227 1803 228
3729 2 2 7 11 810 1635 2149
3730 2 2 7 11 809 1634 2150
3731 2 2 7 11 812 1633 2152
3732 2 2 7 11 811 1636 2151
3733 2 2 7 11 591 1474 2307
3734 2 2 7 11 590 1476 2306
3735 2 2 7 11 589 1473 2305
3736 2 2 7 11 592 1475 2308
3737 2 2 7 11 301 2679 1288
3738 2 2 7 11 302 2678 1287
3739 2 2 7 11 303 2677 1286
3740 2 2 7 11 304 2680 1285
3741 2 2 7 11 805 1286 2677
3742 2 2 7 11 807 1288 2679
3743 2 2 7 11 808 1287 2678
3744 2 2 7 11 806 1285 2680
3745 2 2 7 11 295 2388 1271
3746 2 2 7 11 293 2386 1270
3747 2 2 7 11 294 2385 1269
3748 2 2 7 11 296 2387 1272
3749 2 2 7 11 306 1705 2549
3750 2 2 7 11 308 1706 2551
3751 2 2 7 11 305 1708 2550
3752 2 2 7 11 307 1707 2552
3753 2 2 7 11 834 1921 2701
3754 2 2 7 11 833 1923 2704
3755 2 2 7 11 836 1924 2703
3756 2 2 7 11 835 1922 2702
3757 2 2 7 11 377 1678 2022
3758 2 2 7 11 378 1677 2021
3759 2 2 7 11 379 1679 2023
3760 2 2 7 11 380 1680 2024
3761 2 2 7 11 798 2022 1678
3762 2 2 7 11 797 2021 1677
3763 2 2 7 11 800 2023 1679
3764 2 2 7 11 799 2024 1680
3765 2 2 7 11 274 1941 1688
3766 2 2 7 11 275 1942 1686
3767 2 2 7 11 273 1944 1685
3768 2 2 7 11 276 1943 1687
3769 2 2 7 11 788 1688 1941
3770 2 2 7 11 785 1686 1942
3771 2 2 7 11 787 1685 1944
3772 2 2 7 11 786 1687 1943
3773 2 2 7 11 341 1273 2653
3774 2 2 7 11 343 1276 2654
3775 2 2 7 11 344 1274 2655
3776 2 2 7 11 342 1275 2656
3777 2 2 7 11 677 2326 1652
3778 2 2 7 11 680 2325 1649
3779 2 2 7 11 678 2327 1651
3780 2 2 7 11 679 2328 1650
3781 2 2 7 11 238 2319 1277
3782 2 2 7 11 239 2318 1279
3783 2 2 7 11 237 2320 1278
3784 2 2 7 11 240 2317 1280
3785 2 2 7 11 366 1551 2337
3786 2 2 7 11 365 1552 2338
3787 2 2 7 11 368 1549 2340
3788 2 2 7 11 367 1550 2339
3789 2 2 7 11 1101 2701 1921
3790 2 2 7 11 1103 2704 1923
3791 2 2 7 11 1104 2703 1924
3792 2 2 7 11 1102 2702 1922
3793 2 2 7 11 963 1930 1611
3794 2 2 7 11 964 1932 1609
3795 2 2 7 11 962 1931 1612
3796 2 2 7 11 961 1929 1610
3797 2 2 7 11 465 2363 1273
3798 2 2 7 11 466 2361 1275
3799 2 2 7 11 468 2362 1274
3800 2 2 7 11 467 2364 1276
3801 2 2 7 11 717 1436 2652
3802 2 2 7 11 718 1435 2649
3803 2 2 7 11 720 1434 2650
3804 2 2 7 11 719 1433 2651
3805 2 2 7 11 723 1325 2309
3806 2 2 7 11 724 1328 2310
3807 2 2 7 11 722 1327 2311
3808 2 2 7 11 721 1326 2312
3809 2 2 7 11 852 2538 2277
3810 2 2 7 11 850 2537 2279
3811 2 2 7 11 849 2539 2278
3812 2 2 7 11 851 2540 2280
3813 2 2 7 11 621 2514 1567
3814 2 2 7 11 622 2513 1566
3815 2 2 7 11 623 2515 1568
3816 2 2 7 11 624 2516 1565
3817 2 2 7 11 919 1566 2513
3818 2 2 7 11 917 1567 2514
3819 2 2 7 11 920 1565 2516
3820 2 2 7 11 918 1568 2515
3821 2 2 7 11 470 2353 2709
3822 2 2 7 11 471 2355 2710
3823 2 2 7 11 469 2354 2712
3824 2 2 7 11 472 2356 2711
3825 2 2 7 11 793 1798 1791
3826 2 2 7 11 796 1800 1790
3827 2 2 7 11 795 1799 1792
3828 2 2 7 11 794 1797 1789
3829 2 2 7 11 660 1790 1800
3830 2 2 7 11 658 1792 1799
3831 2 2 7 11 657 1791 1798
3832 2 2 7 11 659 1789 1797
3833 2 2 7 11 727 2367 1744
3834 2 2 7 11 725 2365 1742
3835 2 2 7 11 726 2366 1741
3836 2 2 7 11 728 2368 1743
3837 2 2 7 11 1073 1987 1990
3838 2 2 7 11 1074 1985 1991
3839 2 2 7 11 1076 1986 1989
3840 2 2 7 11 1075 1988 1992
3841 2 2 7 11 1170 1389 2229
3842 2 2 7 11 1392 2232 1171
3843 2 2 7 11 1172 1391 2231
3844 2 2 7 11 1169 1390 2230
3845 2 2 7 11 621 1991 1985
3846 2 2 7 11 623 1992 1988
3847 2 2 7 11 622 1990 1987
3848 2 2 7 11 624 1989 1986
3849 2 2 7 11 669 1417 1877
3850 2 2 7 11 670 1418 1878
3851 2 2 7 11 671 1419 1879
3852 2 2 7 11 672 1420 1880
3853 2 2 7 11 362 1877 1417
3854 2 2 7 11 363 1880 1420
3855 2 2 7 11 361 1878 1418
3856 2 2 7 11 364 1879 1419
3857 2 2 7 11 1056 2181 1361
3858 2 2 7 11 1053 2182 1364
3859 2 2 7 11 1055 2184 1363
3860 2 2 7 11 1054 2183 1362
3861 2 2 7 11 777 1296 2258
3862 2 2 7 11 779 1295 2259
3863 2 2 7 11 780 1294 2260
3864 2 2 7 11 778 1293 2257
3865 2 2 7 11 540 2615 1285
3866 2 2 7 11 537 2614 1287
3867 2 2 7 11 539 2616 1286
3868 2 2 7 11 538 2613 1288
3869 2 2 7 11 268 1920 1404
3870 2 2 7 11 266 1917 1402
3871 2 2 7 11 267 1919 1401
3872 2 2 7 11 265 1918 1403
3873 2 2 7 11 920 2516 1290
3874 2 2 7 11 917 2514 1289
3875 2 2 7 11 919 2513 1291
3876 2 2 7 11 918 2515 1292
3877 2 2 7 11 1335 1795 2303
3878 2 2 7 11 1336 1793 2304
3879 2 2 7 11 1334 1794 2302
3880 2 2 7 11 1333 1796 2301
3881 2 2 7 11 386 1493 1783
3882 2 2 7 11 388 1494 1781
3883 2 2 7 11 385 1495 1782
3884 2 2 7 11 387 1496 1784
3885 2 2 7 11 94 95 2309
3886 2 2 7 11 12 13 2311
3887 2 2 7 11 135 136 2312
3888 2 2 7 11 53 54 2310
3889 2 2 7 11 246 1516 2053
3890 2 2 7 11 247 1515 2054
3891 2 2 7 11 248 1513 2055
3892 2 2 7 11 245 1514 2056
3893 2 2 7 11 757 2054 1515
3894 2 2 7 11 759 2053 1516
3895 2 2 7 11 760 2056 1514
3896 2 2 7 11 758 2055 1513
3897 2 2 7 11 10 11 2670
3898 2 2 7 11 51 52 2672
3899 2 2 7 11 92 93 2671
3900 2 2 7 11 133 134 2669
3901 2 2 7 11 482 1293 2370
3902 2 2 7 11 483 1295 2369
3903 2 2 7 11 481 1296 2371
3904 2 2 7 11 484 1294 2372
3905 2 2 7 11 473 2357 2438
3906 2 2 7 11 475 2360 2439
3907 2 2 7 11 476 2359 2440
3908 2 2 7 11 474 2358 2437
3909 2 2 7 11 1196 2439 2360
3910 2 2 7 11 1193 2438 2357
3911 2 2 7 11 1195 2440 2359
3912 2 2 7 11 1194 2437 2358
3913 2 2 7 11 960 2171 1481
3914 2 2 7 11 959 2172 1483
3915 2 2 7 11 957 2170 1484
3916 2 2 7 11 958 2169 1482
3917 2 2 7 11 588 1645 2112
3918 2 2 7 11 586 1646 2109
3919 2 2 7 11 585 1648 2110
3920 2 2 7 11 587 1647 2111
3921 2 2 7 11 269 1484 2170
3922 2 2 7 11 271 1481 2171
3923 2 2 7 11 272 1483 2172
3924 2 2 7 11 270 1482 2169
3925 2 2 7 11 939 2082 1530
3926 2 2 7 11 938 2081 1531
3927 2 2 7 11 937 2084 1529
3928 2 2 7 11 940 2083 1532
3929 2 2 7 11 700 2044 1370
3930 2 2 7 11 698 2042 1369
3931 2 2 7 11 699 2043 1372
3932 2 2 7 11 697 2041 1371
3933 2 2 7 11 703 1375 2045
3934 2 2 7 11 701 1376 2048
3935 2 2 7 11 704 1374 2046
3936 2 2 7 11 702 1373 2047
3937 2 2 7 11 964 1609 2641
3938 2 2 7 11 963 1611 2642
3939 2 2 7 11 962 1612 2643
3940 2 2 7 11 961 1610 2644
3941 2 2 7 11 554 2641 1609
3942 2 2 7 11 553 2642 1611
3943 2 2 7 11 555 2643 1612
3944 2 2 7 11 556 2644 1610
3945 2 2 7 11 779 2386 1390
3946 2 2 7 11 778 2385 1389
3947 2 2 7 11 777 2388 1391
3948 2 2 7 11 780 2387 1392
3949 2 2 7 11 639 1549 1744
3950 2 2 7 11 640 1550 1743
3951 2 2 7 11 637 1552 1742
3952 2 2 7 11 638 1551 1741
3953 2 2 7 11 167 1604 2275
3954 2 2 7 11 44 1601 2273
3955 2 2 7 11 85 1602 2274
3956 2 2 7 11 126 1603 2276
3957 2 2 7 11 732 2155 1981
3958 2 2 7 11 729 2156 1982
3959 2 2 7 11 730 2153 1984
3960 2 2 7 11 731 2154 1983
3961 2 2 7 11 930 1984 2153
3962 2 2 7 11 932 1981 2155
3963 2 2 7 11 929 1983 2154
3964 2 2 7 11 931 1982 2156
3965 2 2 7 11 797 1677 1719
3966 2 2 7 11 798 1678 1720
3967 2 2 7 11 799 1680 1718
3968 2 2 7 11 800 1679 1717
3969 2 2 7 11 630 1381 2033
3970 2 2 7 11 632 1382 2035
3971 2 2 7 11 629 1383 2034
3972 2 2 7 11 631 1384 2036
3973 2 2 7 11 527 1403 2582
3974 2 2 7 11 528 1402 2581
3975 2 2 7 11 525 1401 2584
3976 2 2 7 11 526 1404 2583
3977 2 2 7 11 650 1686 1782
3978 2 2 7 11 652 1687 1783
3979 2 2 7 11 649 1685 1784
3980 2 2 7 11 651 1688 1781
3981 2 2 7 11 267 1401 2493
3982 2 2 7 11 268 1404 2496
3983 2 2 7 11 265 1403 2494
3984 2 2 7 11 266 1402 2495
3985 2 2 7 11 809 2494 1403
3986 2 2 7 11 812 2496 1404
3987 2 2 7 11 810 2495 1402
3988 2 2 7 11 811 2493 1401
3989 2 2 7 11 105 106 1964
3990 2 2 7 11 23 24 1963
3991 2 2 7 11 146 147 1962
3992 2 2 7 11 64 65 1961
3993 2 2 7 11 1080 2649 1435
3994 2 2 7 11 1079 2650 1434
3995 2 2 7 11 1078 2651 1433
3996 2 2 7 11 1077 2652 1436
3997 2 2 7 11 710 1701 1766
3998 2 2 7 11 709 1702 1767
3999 2 2 7 11 711 1703 1765
4000 2 2 7 11 712 1704 1768
4001 2 2 7 11 100 101 1937
4002 2 2 7 11 59 60 1938
4003 2 2 7 11 141 142 1939
4004 2 2 7 11 18 19 1940
4005 2 2 7 11 728 1768 1704
4006 2 2 7 11 727 1765 1703
4007 2 2 7 11 725 1766 1701
4008 2 2 7 11 726 1767 1702
4009 2 2 7 11 1190 2356 2398
4010 2 2 7 11 1189 2354 2397
4011 2 2 7 11 1191 2353 2399
4012 2 2 7 11 1192 2355 2400
4013 2 2 7 11 914 1477 2013
4014 2 2 7 11 916 1478 2015
4015 2 2 7 11 913 1479 2014
4016 2 2 7 11 915 1480 2016
4017 2 2 7 11 770 1465 2355
4018 2 2 7 11 772 1466 2353
4019 2 2 7 11 771 1468 2356
4020 2 2 7 11 769 1467 2354
4021 2 2 7 11 263 1408 2242
4022 2 2 7 11 261 1406 2241
4023 2 2 7 11 264 1405 2243
4024 2 2 7 11 262 1407 2244
4025 2 2 7 11 472 2398 2356
4026 2 2 7 11 469 2397 2354
4027 2 2 7 11 470 2399 2353
4028 2 2 7 11 471 2400 2355
4029 2 2 7 11 335 2694 1713
4030 2 2 7 11 336 2693 1714
4031 2 2 7 11 333 2695 1716
4032 2 2 7 11 334 2696 1715
4033 2 2 7 11 782 2015 1478
4034 2 2 7 11 781 2014 1479
4035 2 2 7 11 784 2016 1480
4036 2 2 7 11 783 2013 1477
4037 2 2 7 11 299 1442 2086
4038 2 2 7 11 300 1441 2085
4039 2 2 7 11 297 1444 2087
4040 2 2 7 11 298 1443 2088
4041 2 2 7 11 358 2666 1764
4042 2 2 7 11 357 2665 1761
4043 2 2 7 11 359 2668 1762
4044 2 2 7 11 360 2667 1763
4045 2 2 7 11 836 1999 1910
4046 2 2 7 11 835 2000 1909
4047 2 2 7 11 834 1998 1912
4048 2 2 7 11 833 1997 1911
4049 2 2 7 11 293 1390 2386
4050 2 2 7 11 294 1389 2385
4051 2 2 7 11 295 1391 2388
4052 2 2 7 11 296 1392 2387
4053 2 2 7 11 695 1910 1999
4054 2 2 7 11 694 1909 2000
4055 2 2 7 11 693 1911 1997
4056 2 2 7 11 696 1912 1998
4057 2 2 7 11 612 1457 1888
4058 2 2 7 11 611 1459 1886
4059 2 2 7 11 610 1458 1887
4060 2 2 7 11 609 1460 1885
4061 2 2 7 11 370 1862 1965
4062 2 2 7 11 372 1863 1967
4063 2 2 7 11 371 1861 1968
4064 2 2 7 11 369 1864 1966
4065 2 2 7 11 346 1882 1502
4066 2 2 7 11 348 1881 1504
4067 2 2 7 11 345 1884 1501
4068 2 2 7 11 347 1883 1503
4069 2 2 7 11 573 1554 2025
4070 2 2 7 11 576 1553 2026
4071 2 2 7 11 574 1556 2027
4072 2 2 7 11 575 1555 2028
4073 2 2 7 11 567 1733 2629
4074 2 2 7 11 565 1734 2630
4075 2 2 7 11 566 1736 2632
4076 2 2 7 11 568 1735 2631
4077 2 2 7 11 391 2473 1866
4078 2 2 7 11 390 2474 1867
4079 2 2 7 11 389 2475 1865
4080 2 2 7 11 392 2476 1868
4081 2 2 7 11 967 1311 2593
4082 2 2 7 11 968 1309 2595
4083 2 2 7 11 965 1312 2596
4084 2 2 7 11 966 1310 2594
4085 2 2 7 11 576 2026 1584
4086 2 2 7 11 573 2025 1582
4087 2 2 7 11 574 2027 1583
4088 2 2 7 11 575 2028 1581
4089 2 2 7 11 420 2434 1814
4090 2 2 7 11 417 2435 1813
4091 2 2 7 11 418 2436 1815
4092 2 2 7 11 419 2433 1816
4093 2 2 7 11 686 1414 2584
4094 2 2 7 11 685 1413 2583
4095 2 2 7 11 687 1415 2582
4096 2 2 7 11 688 1416 2581
4097 2 2 7 11 959 1814 2434
4098 2 2 7 11 957 1813 2435
4099 2 2 7 11 960 1815 2436
4100 2 2 7 11 958 1816 2433
4101 2 2 7 11 789 2437 2165
4102 2 2 7 11 790 2440 2168
4103 2 2 7 11 792 2438 2167
4104 2 2 7 11 791 2439 2166
4105 2 2 7 11 763 2023 1777
4106 2 2 7 11 764 2024 1778
4107 2 2 7 11 762 2021 1779
4108 2 2 7 11 761 2022 1780
4109 2 2 7 11 800 1777 2023
4110 2 2 7 11 797 1779 2021
4111 2 2 7 11 799 1778 2024
4112 2 2 7 11 798 1780 2022
4113 2 2 7 11 263 2621 1315
4114 2 2 7 11 264 2624 1313
4115 2 2 7 11 261 2622 1316
4116 2 2 7 11 262 2623 1314
4117 2 2 7 11 372 1967 1790
4118 2 2 7 11 370 1965 1789
4119 2 2 7 11 371 1968 1792
4120 2 2 7 11 369 1966 1791
4121 2 2 7 11 620 1718 1680
4122 2 2 7 11 619 1717 1679
4123 2 2 7 11 618 1719 1677
4124 2 2 7 11 617 1720 1678
4125 2 2 7 11 605 1334 2270
4126 2 2 7 11 607 1333 2269
4127 2 2 7 11 608 1336 2271
4128 2 2 7 11 606 1335 2272
4129 2 2 7 11 796 1790 1967
4130 2 2 7 11 795 1792 1968
4131 2 2 7 11 793 1791 1966
4132 2 2 7 11 794 1789 1965
4133 2 2 7 11 268 2496 1317
4134 2 2 7 11 267 2493 1318
4135 2 2 7 11 265 2494 1319
4136 2 2 7 11 266 2495 1320
4137 2 2 7 11 134 1505 2669
4138 2 2 7 11 93 1508 2671
4139 2 2 7 11 11 1507 2670
4140 2 2 7 11 52 1506 2672
4141 2 2 7 11 512 2605 1319
4142 2 2 7 11 511 2606 1320
4143 2 2 7 11 509 2607 1317
4144 2 2 7 11 510 2608 1318
4145 2 2 7 11 861 1709 2609
4146 2 2 7 11 864 1712 2611
4147 2 2 7 11 862 1710 2610
4148 2 2 7 11 863 1711 2612
4149 2 2 7 11 288 1378 2127
4150 2 2 7 11 285 1377 2125
4151 2 2 7 11 287 1379 2126
4152 2 2 7 11 286 1380 2128
4153 2 2 7 11 80 81 2342
4154 2 2 7 11 121 122 2341
4155 2 2 7 11 162 163 2343
4156 2 2 7 11 39 40 2344
4157 2 2 7 11 773 2357 1524
4158 2 2 7 11 776 2359 1523
4159 2 2 7 11 774 2360 1522
4160 2 2 7 11 775 2358 1521
4161 2 2 7 11 495 1339 2313
4162 2 2 7 11 494 1337 2314
4163 2 2 7 11 496 1338 2315
4164 2 2 7 11 493 1340 2316
4165 2 2 7 11 1368 1872 2641
4166 2 2 7 11 1367 1871 2642
4167 2 2 7 11 1366 1870 2644
4168 2 2 7 11 1365 1869 2643
4169 2 2 7 11 506 2441 1329
4170 2 2 7 11 505 2442 1330
4171 2 2 7 11 508 2444 1332
4172 2 2 7 11 507 2443 1331
4173 2 2 7 11 700 1370 2541
4174 2 2 7 11 698 1369 2542
4175 2 2 7 11 697 1371 2543
4176 2 2 7 11 699 1372 2544
4177 2 2 7 11 704 2534 1374
4178 2 2 7 11 703 2535 1375
4179 2 2 7 11 702 2536 1373
4180 2 2 7 11 701 2533 1376
4181 2 2 7 11 831 2412 2073
4182 2 2 7 11 830 2410 2076
4183 2 2 7 11 829 2409 2075
4184 2 2 7 11 832 2411 2074
4185 2 2 7 11 1068 2073 2412
4186 2 2 7 11 1067 2074 2411
4187 2 2 7 11 1066 2076 2410
4188 2 2 7 11 1065 2075 2409
4189 2 2 7 11 366 2337 2149
4190 2 2 7 11 365 2338 2150
4191 2 2 7 11 368 2340 2152
4192 2 2 7 11 367 2339 2151
4193 2 2 7 11 256 1533 1857
4194 2 2 7 11 255 1534 1859
4195 2 2 7 11 254 1535 1858
4196 2 2 7 11 253 1536 1860
4197 2 2 7 11 2144 1175 2148
4198 2 2 7 11 2143 1176 2147
4199 2 2 7 11 2142 1174 2145
4200 2 2 7 11 2141 1173 2146
4201 2 2 7 11 403 2517 1558
4202 2 2 7 11 401 2518 1559
4203 2 2 7 11 402 2520 1557
4204 2 2 7 11 404 2519 1560
4205 2 2 7 11 2144 2148 689
4206 2 2 7 11 2143 2147 692
4207 2 2 7 11 2142 2145 691
4208 2 2 7 11 2141 2146 690
4209 2 2 7 11 899 1558 2517
4210 2 2 7 11 898 1559 2518
4211 2 2 7 11 897 1557 2520
4212 2 2 7 11 900 1560 2519
4213 2 2 7 11 9 10 2107
4214 2 2 7 11 132 133 2106
4215 2 2 7 11 50 51 2108
4216 2 2 7 11 91 92 2105
4217 2 2 7 11 712 1897 2087
4218 2 2 7 11 711 1900 2088
4219 2 2 7 11 710 1898 2085
4220 2 2 7 11 709 1899 2086
4221 2 2 7 11 752 2373 1351
4222 2 2 7 11 750 2375 1349
4223 2 2 7 11 749 2376 1350
4224 2 2 7 11 751 2374 1352
4225 2 2 7 11 543 1514 1922
4226 2 2 7 11 542 1516 1923
4227 2 2 7 11 541 1515 1924
4228 2 2 7 11 544 1513 1921
4229 2 2 7 11 787 1784 1685
4230 2 2 7 11 788 1781 1688
4231 2 2 7 11 785 1782 1686
4232 2 2 7 11 786 1783 1687
4233 2 2 7 11 340 1873 1529
4234 2 2 7 11 337 1875 1530
4235 2 2 7 11 338 1876 1531
4236 2 2 7 11 339 1874 1532
4237 2 2 7 11 1129 2706 1989
4238 2 2 7 11 1131 2708 1992
4239 2 2 7 11 1132 2707 1990
4240 2 2 7 11 1130 2705 1991
4241 2 2 7 11 1039 1428 2444
4242 2 2 7 11 1040 1426 2441
4243 2 2 7 11 1038 1427 2442
4244 2 2 7 11 1037 1425 2443
4245 2 2 7 11 557 2224 1492
4246 2 2 7 11 560 2223 1491
4247 2 2 7 11 558 2222 1490
4248 2 2 7 11 559 2221 1489
4249 2 2 7 11 293 2230 1390
4250 2 2 7 11 294 2229 1389
4251 2 2 7 11 295 2231 1391
4252 2 2 7 11 296 2232 1392
4253 2 2 7 11 590 2306 1854
4254 2 2 7 11 591 2307 1855
4255 2 2 7 11 589 2305 1853
4256 2 2 7 11 592 2308 1856
4257 2 2 7 11 373 1827 2075
4258 2 2 7 11 376 1826 2073
4259 2 2 7 11 374 1825 2076
4260 2 2 7 11 375 1828 2074
4261 2 2 7 11 829 2075 1827
4262 2 2 7 11 831 2073 1826
4263 2 2 7 11 830 2076 1825
4264 2 2 7 11 832 2074 1828
4265 2 2 7 11 654 2037 1776
4266 2 2 7 11 653 2038 1775
4267 2 2 7 11 655 2039 1774
4268 2 2 7 11 656 2040 1773
4269 2 2 7 11 555 1365 2643
4270 2 2 7 11 553 1367 2642
4271 2 2 7 11 556 1366 2644
4272 2 2 7 11 554 1368 2641
4273 2 2 7 11 706 1681 2400
4274 2 2 7 11 708 1683 2399
4275 2 2 7 11 705 1684 2397
4276 2 2 7 11 707 1682 2398
4277 2 2 7 11 223 2133 224
4278 2 2 7 11 208 2134 209
4279 2 2 7 11 193 2136 194
4280 2 2 7 11 178 2135 179
4281 2 2 7 11 231 2138 232
4282 2 2 7 11 216 2137 217
4283 2 2 7 11 201 2139 202
4284 2 2 7 11 186 2140 187
4285 2 2 7 11 603 1578 1901
4286 2 2 7 11 601 1577 1904
4287 2 2 7 11 602 1580 1902
4288 2 2 7 11 604 1579 1903
4289 2 2 7 11 581 2226 1449
4290 2 2 7 11 582 2225 1450
4291 2 2 7 11 583 2228 1451
4292 2 2 7 11 584 2227 1452
4293 2 2 7 11 807 1541 2352
4294 2 2 7 11 808 1542 2351
4295 2 2 7 11 805 1543 2350
4296 2 2 7 11 806 1544 2349
4297 2 2 7 11 401 2352 1541
4298 2 2 7 11 402 2351 1542
4299 2 2 7 11 403 2349 1544
4300 2 2 7 11 404 2350 1543
4301 2 2 7 11 588 1974 1645
4302 2 2 7 11 587 1976 1647
4303 2 2 7 11 585 1973 1648
4304 2 2 7 11 586 1975 1646
4305 2 2 7 11 682 2244 1407
4306 2 2 7 11 684 2242 1408
4307 2 2 7 11 683 2241 1406
4308 2 2 7 11 681 2243 1405
4309 2 2 7 11 530 2267 1488
4310 2 2 7 11 529 2265 1485
4311 2 2 7 11 531 2266 1486
4312 2 2 7 11 532 2268 1487
4313 2 2 7 11 705 1805 1809
4314 2 2 7 11 707 1808 1811
4315 2 2 7 11 706 1807 1812
4316 2 2 7 11 708 1806 1810
4317 2 2 7 11 950 2236 1578
4318 2 2 7 11 951 2234 1579
4319 2 2 7 11 952 2233 1577
4320 2 2 7 11 949 2235 1580
4321 2 2 7 11 765 1812 1807
4322 2 2 7 11 766 1809 1805
4323 2 2 7 11 768 1810 1806
4324 2 2 7 11 767 1811 1808
4325 2 2 7 11 582 1663 2094
4326 2 2 7 11 581 1661 2095
4327 2 2 7 11 583 1664 2096
4328 2 2 7 11 584 1662 2093
4329 2 2 7 11 641 2607 1564
4330 2 2 7 11 644 2605 1562
4331 2 2 7 11 642 2606 1561
4332 2 2 7 11 643 2608 1563
4333 2 2 7 11 229 2166 230
4334 2 2 7 11 184 2165 185
4335 2 2 7 11 199 2167 200
4336 2 2 7 11 214 2168 215
4337 2 2 7 11 965 2470 1749
4338 2 2 7 11 967 2471 1751
4339 2 2 7 11 968 2472 1750
4340 2 2 7 11 966 2469 1752
4341 2 2 7 11 332 2141 1525
4342 2 2 7 11 331 2142 1526
4343 2 2 7 11 329 2143 1528
4344 2 2 7 11 330 2144 1527
4345 2 2 7 11 694 1482 2575
4346 2 2 7 11 696 1483 2574
4347 2 2 7 11 693 1481 2573
4348 2 2 7 11 695 1484 2576
4349 2 2 7 11 534 2277 1417
4350 2 2 7 11 533 2279 1418
4351 2 2 7 11 536 2280 1420
4352 2 2 7 11 535 2278 1419
4353 2 2 7 11 1292 2515 1988
4354 2 2 7 11 1290 2516 1986
4355 2 2 7 11 1289 2514 1985
4356 2 2 7 11 1291 2513 1987
4357 2 2 7 11 379 2218 1620
4358 2 2 7 11 378 2219 1619
4359 2 2 7 11 377 2220 1618
4360 2 2 7 11 380 2217 1617
4361 2 2 7 11 208 1569 2134
4362 2 2 7 11 223 1570 2133
4363 2 2 7 11 178 1571 2135
4364 2 2 7 11 193 1572 2136
4365 2 2 7 11 217 2137 1573
4366 2 2 7 11 232 2138 1575
4367 2 2 7 11 202 2139 1574
4368 2 2 7 11 187 2140 1576
4369 2 2 7 11 650 2446 1605
4370 2 2 7 11 651 2445 1607
4371 2 2 7 11 649 2447 1606
4372 2 2 7 11 652 2448 1608
4373 2 2 7 11 771 2134 1569
4374 2 2 7 11 772 2135 1571
4375 2 2 7 11 769 2133 1570
4376 2 2 7 11 770 2136 1572
4377 2 2 7 11 776 1573 2137
4378 2 2 7 11 774 1575 2138
4379 2 2 7 11 773 1574 2139
4380 2 2 7 11 775 1576 2140
4381 2 2 7 11 1501 2597 1738
4382 2 2 7 11 1503 2599 1739
4383 2 2 7 11 1502 2598 1740
4384 2 2 7 11 1504 2600 1737
4385 2 2 7 11 753 2066 2213
4386 2 2 7 11 755 2065 2214
4387 2 2 7 11 754 2067 2215
4388 2 2 7 11 756 2068 2216
4389 2 2 7 11 974 2215 2067
4390 2 2 7 11 975 2213 2066
4391 2 2 7 11 976 2216 2068
4392 2 2 7 11 973 2214 2065
4393 2 2 7 11 706 2400 1807
4394 2 2 7 11 708 2399 1806
4395 2 2 7 11 705 2397 1805
4396 2 2 7 11 707 2398 1808
4397 2 2 7 11 353 1612 1931
4398 2 2 7 11 354 1610 1929
4399 2 2 7 11 356 1609 1932
4400 2 2 7 11 355 1611 1930
4401 2 2 7 11 451 2308 1475
4402 2 2 7 11 450 2305 1473
4403 2 2 7 11 449 2307 1474
4404 2 2 7 11 452 2306 1476
4405 2 2 7 11 406 2004 2639
4406 2 2 7 11 405 2003 2640
4407 2 2 7 11 407 2001 2637
4408 2 2 7 11 408 2002 2638
4409 2 2 7 11 125 126 2276
4410 2 2 7 11 166 167 2275
4411 2 2 7 11 43 44 2273
4412 2 2 7 11 84 85 2274
4413 2 2 7 11 697 1837 2662
4414 2 2 7 11 699 1840 2663
4415 2 2 7 11 698 1839 2664
4416 2 2 7 11 700 1838 2661
4417 2 2 7 11 701 2665 1841
4418 2 2 7 11 702 2667 1844
4419 2 2 7 11 703 2666 1843
4420 2 2 7 11 704 2668 1842
4421 2 2 7 11 420 2594 2434
4422 2 2 7 11 417 2593 2435
4423 2 2 7 11 419 2595 2433
4424 2 2 7 11 418 2596 2436
4425 2 2 7 11 21 22 2294
4426 2 2 7 11 144 145 2296
4427 2 2 7 11 62 63 2293
4428 2 2 7 11 103 104 2295
4429 2 2 7 11 754 1485 2265
4430 2 2 7 11 755 1488 2267
4431 2 2 7 11 753 1486 2266
4432 2 2 7 11 756 1487 2268
4433 2 2 7 11 1286 2350 1560
4434 2 2 7 11 1287 2351 1557
4435 2 2 7 11 1285 2349 1558
4436 2 2 7 11 1288 2352 1559
4437 2 2 7 11 716 2479 1628
4438 2 2 7 11 713 2480 1627
4439 2 2 7 11 715 2478 1626
4440 2 2 7 11 714 2477 1625
4441 2 2 7 11 979 2054 2617
4442 2 2 7 11 980 2056 2619
4443 2 2 7 11 978 2055 2618
4444 2 2 7 11 977 2053 2620
4445 2 2 7 11 151 152 2500
4446 2 2 7 11 110 111 2498
4447 2 2 7 11 69 70 2497
4448 2 2 7 11 28 29 2499
4449 2 2 7 11 717 2652 1951
4450 2 2 7 11 718 2649 1952
4451 2 2 7 11 720 2650 1949
4452 2 2 7 11 719 2651 1950
4453 2 2 7 11 768 1455 2458
4454 2 2 7 11 766 1454 2459
4455 2 2 7 11 765 1453 2457
4456 2 2 7 11 767 1456 2460
4457 2 2 7 11 526 2583 1413
4458 2 2 7 11 528 2581 1416
4459 2 2 7 11 525 2584 1414
4460 2 2 7 11 527 2582 1415
4461 2 2 7 11 504 2234 2061
4462 2 2 7 11 502 2235 2064
4463 2 2 7 11 501 2233 2062
4464 2 2 7 11 503 2236 2063
4465 2 2 7 11 949 2064 2235
4466 2 2 7 11 951 2061 2234
4467 2 2 7 11 952 2062 2233
4468 2 2 7 11 950 2063 2236
4469 2 2 7 11 840 1689 2125
4470 2 2 7 11 839 1691 2128
4471 2 2 7 11 838 1692 2126
4472 2 2 7 11 837 1690 2127
4473 2 2 7 11 288 2127 1690
4474 2 2 7 11 287 2126 1692
4475 2 2 7 11 285 2125 1689
4476 2 2 7 11 286 2128 1691
4477 2 2 7 11 273 1685 2049
4478 2 2 7 11 274 1688 2052
4479 2 2 7 11 276 1687 2050
4480 2 2 7 11 275 1686 2051
4481 2 2 7 11 34 35 2413
4482 2 2 7 11 116 117 2414
4483 2 2 7 11 75 76 2416
4484 2 2 7 11 157 158 2415
4485 2 2 7 11 629 2034 1827
4486 2 2 7 11 630 2033 1825
4487 2 2 7 11 631 2036 1828
4488 2 2 7 11 632 2035 1826
4489 2 2 7 11 1602 2630 2274
4490 2 2 7 11 1601 2629 2273
4491 2 2 7 11 1603 2631 2276
4492 2 2 7 11 1604 2632 2275
4493 2 2 7 11 829 1827 2034
4494 2 2 7 11 830 1825 2033
4495 2 2 7 11 831 1826 2035
4496 2 2 7 11 832 1828 2036
4497 2 2 7 11 543 2465 1425
4498 2 2 7 11 544 2466 1427
4499 2 2 7 11 542 2467 1426
4500 2 2 7 11 541 2468 1428
4501 2 2 7 11 2118 2213 975
4502 2 2 7 11 2120 2216 976
4503 2 2 7 11 2119 2214 973
4504 2 2 7 11 2117 2215 974
4505 2 2 7 11 289 2213 2118
4506 2 2 7 11 292 2216 2120
4507 2 2 7 11 290 2215 2117
4508 2 2 7 11 291 2214 2119
4509 2 2 7 11 529 1469 2265
4510 2 2 7 11 530 1470 2267
4511 2 2 7 11 532 1472 2268
4512 2 2 7 11 531 1471 2266
4513 2 2 7 11 498 1709 2450
4514 2 2 7 11 497 1710 2449
4515 2 2 7 11 499 1711 2451
4516 2 2 7 11 500 1712 2452
4517 2 2 7 11 861 2450 1709
4518 2 2 7 11 863 2451 1711
4519 2 2 7 11 862 2449 1710
4520 2 2 7 11 864 2452 1712
4521 2 2 7 11 761 2332 2189
4522 2 2 7 11 763 2330 2190
4523 2 2 7 11 762 2331 2192
4524 2 2 7 11 764 2329 2191
4525 2 2 7 11 661 1706 1970
4526 2 2 7 11 664 1707 1971
4527 2 2 7 11 662 1708 1969
4528 2 2 7 11 663 1705 1972
4529 2 2 7 11 77 78 2526
4530 2 2 7 11 36 37 2527
4531 2 2 7 11 159 160 2525
4532 2 2 7 11 118 119 2528
4533 2 2 7 11 742 2099 1963
4534 2 2 7 11 744 2100 1964
4535 2 2 7 11 743 2097 1961
4536 2 2 7 11 741 2098 1962
4537 2 2 7 11 384 1585 2684
4538 2 2 7 11 383 1586 2681
4539 2 2 7 11 381 1587 2683
4540 2 2 7 11 382 1588 2682
4541 2 2 7 11 203 2557 204
4542 2 2 7 11 218 2559 219
4543 2 2 7 11 173 2558 174
4544 2 2 7 11 188 2560 189
4545 2 2 7 11 205 2561 206
4546 2 2 7 11 175 2562 176
4547 2 2 7 11 220 2564 221
4548 2 2 7 11 190 2563 191
4549 2 2 7 11 801 2049 1606
4550 2 2 7 11 803 2051 1605
4551 2 2 7 11 804 2050 1608
4552 2 2 7 11 802 2052 1607
4553 2 2 7 11 893 2681 1586
4554 2 2 7 11 894 2684 1585
4555 2 2 7 11 895 2683 1587
4556 2 2 7 11 896 2682 1588
4557 2 2 7 11 558 1631 2222
4558 2 2 7 11 557 1632 2224
4559 2 2 7 11 560 1629 2223
4560 2 2 7 11 559 1630 2221
4561 2 2 7 11 995 2429 1441
4562 2 2 7 11 993 2431 1443
4563 2 2 7 11 996 2432 1442
4564 2 2 7 11 994 2430 1444
4565 2 2 7 11 377 1787 2245
4566 2 2 7 11 379 1786 2248
4567 2 2 7 11 378 1788 2246
4568 2 2 7 11 380 1785 2247
4569 2 2 7 11 999 1446 2427
4570 2 2 7 11 997 1447 2425
4571 2 2 7 11 1000 1448 2428
4572 2 2 7 11 998 1445 2426
4573 2 2 7 11 910 1470 2323
4574 2 2 7 11 912 1472 2322
4575 2 2 7 11 909 1471 2324
4576 2 2 7 11 911 1469 2321
4577 2 2 7 11 582 1450 2601
4578 2 2 7 11 581 1449 2604
4579 2 2 7 11 583 1451 2602
4580 2 2 7 11 584 1452 2603
4581 2 2 7 11 845 2588 2566
4582 2 2 7 11 848 2587 2568
4583 2 2 7 11 847 2585 2565
4584 2 2 7 11 846 2586 2567
4585 2 2 7 11 269 2424 2015
4586 2 2 7 11 271 2423 2013
4587 2 2 7 11 270 2421 2014
4588 2 2 7 11 272 2422 2016
4589 2 2 7 11 471 2710 1453
4590 2 2 7 11 469 2712 1454
4591 2 2 7 11 470 2709 1455
4592 2 2 7 11 472 2711 1456
4593 2 2 7 11 2112 1645 2689
4594 2 2 7 11 2109 1646 2691
4595 2 2 7 11 2110 1648 2690
4596 2 2 7 11 2111 1647 2692
4597 2 2 7 11 813 1453 2710
4598 2 2 7 11 816 1456 2711
4599 2 2 7 11 814 1454 2712
4600 2 2 7 11 815 1455 2709
4601 2 2 7 11 451 2703 2308
4602 2 2 7 11 450 2704 2305
4603 2 2 7 11 452 2701 2306
4604 2 2 7 11 449 2702 2307
4605 2 2 7 11 1267 2566 2588
4606 2 2 7 11 1268 2568 2587
4607 2 2 7 11 1265 2567 2586
4608 2 2 7 11 1266 2565 2585
4609 2 2 7 11 715 1626 2491
4610 2 2 7 11 714 1625 2490
4611 2 2 7 11 716 1628 2492
4612 2 2 7 11 713 1627 2489
4613 2 2 7 11 424 2617 1449
4614 2 2 7 11 422 2620 1450
4615 2 2 7 11 423 2619 1451
4616 2 2 7 11 421 2618 1452
4617 2 2 7 11 914 2013 2423
4618 2 2 7 11 913 2014 2421
4619 2 2 7 11 916 2015 2424
4620 2 2 7 11 915 2016 2422
4621 2 2 7 11 757 2604 1449
4622 2 2 7 11 760 2602 1451
4623 2 2 7 11 758 2603 1452
4624 2 2 7 11 759 2601 1450
4625 2 2 7 11 448 1773 2393
4626 2 2 7 11 445 1775 2395
4627 2 2 7 11 446 1776 2396
4628 2 2 7 11 447 1774 2394
4629 2 2 7 11 420 1457 2469
4630 2 2 7 11 419 1458 2472
4631 2 2 7 11 418 1460 2470
4632 2 2 7 11 417 1459 2471
4633 2 2 7 11 723 2309 1700
4634 2 2 7 11 724 2310 1699
4635 2 2 7 11 722 2311 1697
4636 2 2 7 11 721 2312 1698
4637 2 2 7 11 853 2394 1774
4638 2 2 7 11 855 2395 1775
4639 2 2 7 11 856 2396 1776
4640 2 2 7 11 854 2393 1773
4641 2 2 7 11 534 1517 2277
4642 2 2 7 11 535 1519 2278
4643 2 2 7 11 536 1520 2280
4644 2 2 7 11 533 1518 2279
4645 2 2 7 11 828 1946 1951
4646 2 2 7 11 826 1947 1949
4647 2 2 7 11 827 1948 1950
4648 2 2 7 11 825 1945 1952
4649 2 2 7 11 717 1951 1946
4650 2 2 7 11 718 1952 1945
4651 2 2 7 11 720 1949 1947
4652 2 2 7 11 719 1950 1948
4653 2 2 7 11 852 2277 1517
4654 2 2 7 11 849 2278 1519
4655 2 2 7 11 851 2280 1520
4656 2 2 7 11 850 2279 1518
4657 2 2 7 11 738 2089 1655
4658 2 2 7 11 737 2090 1654
4659 2 2 7 11 739 2092 1656
4660 2 2 7 11 740 2091 1653
4661 2 2 7 11 452 1476 2571
4662 2 2 7 11 450 1473 2569
4663 2 2 7 11 451 1475 2572
4664 2 2 7 11 449 1474 2570
4665 2 2 7 11 379 2023 2218
4666 2 2 7 11 378 2021 2219
4667 2 2 7 11 377 2022 2220
4668 2 2 7 11 380 2024 2217
4669 2 2 7 11 103 2295 1546
4670 2 2 7 11 62 2293 1545
4671 2 2 7 11 144 2296 1548
4672 2 2 7 11 21 2294 1547
4673 2 2 7 11 397 1606 2447
4674 2 2 7 11 399 1607 2445
4675 2 2 7 11 400 1608 2448
4676 2 2 7 11 398 1605 2446
4677 2 2 7 11 813 2710 1465
4678 2 2 7 11 814 2712 1467
4679 2 2 7 11 815 2709 1466
4680 2 2 7 11 816 2711 1468
4681 2 2 7 11 271 2573 1481
4682 2 2 7 11 269 2576 1484
4683 2 2 7 11 272 2574 1483
4684 2 2 7 11 270 2575 1482
4685 2 2 7 11 730 2282 1667
4686 2 2 7 11 732 2281 1665
4687 2 2 7 11 731 2283 1666
4688 2 2 7 11 729 2284 1668
4689 2 2 7 11 364 2301 1796
4690 2 2 7 11 363 2302 1794
4691 2 2 7 11 362 2303 1795
4692 2 2 7 11 361 2304 1793
4693 2 2 7 11 410 1644 2252
4694 2 2 7 11 411 1642 2250
4695 2 2 7 11 412 1641 2249
4696 2 2 7 11 409 1643 2251
4697 2 2 7 11 703 1571 2535
4698 2 2 7 11 702 1569 2536
4699 2 2 7 11 704 1572 2534
4700 2 2 7 11 701 1570 2533
4701 2 2 7 11 697 2543 1575
4702 2 2 7 11 698 2542 1576
4703 2 2 7 11 699 2544 1573
4704 2 2 7 11 700 2541 1574
4705 2 2 7 11 855 1775 2038
4706 2 2 7 11 856 1776 2037
4707 2 2 7 11 853 1774 2039
4708 2 2 7 11 854 1773 2040
4709 2 2 7 11 950 2297 2063
4710 2 2 7 11 951 2300 2061
4711 2 2 7 11 949 2299 2064
4712 2 2 7 11 952 2298 2062
4713 2 2 7 11 396 1655 2089
4714 2 2 7 11 394 1654 2090
4715 2 2 7 11 393 1653 2091
4716 2 2 7 11 395 1656 2092
4717 2 2 7 11 930 2555 1984
4718 2 2 7 11 931 2553 1982
4719 2 2 7 11 929 2556 1983
4720 2 2 7 11 932 2554 1981
4721 2 2 7 11 1403 1918 2582
4722 2 2 7 11 1402 1917 2581
4723 2 2 7 11 1401 1919 2584
4724 2 2 7 11 1404 1920 2583
4725 2 2 7 11 1104 2308 2703
4726 2 2 7 11 1101 2306 2701
4727 2 2 7 11 1103 2305 2704
4728 2 2 7 11 1102 2307 2702
4729 2 2 7 11 433 1509 2419
4730 2 2 7 11 434 1510 2418
4731 2 2 7 11 435 1511 2417
4732 2 2 7 11 436 1512 2420
4733 2 2 7 11 752 1756 2373
4734 2 2 7 11 751 1753 2374
4735 2 2 7 11 750 1755 2375
4736 2 2 7 11 749 1754 2376
4737 2 2 7 11 925 2189 2332
4738 2 2 7 11 927 2192 2331
4739 2 2 7 11 926 2190 2330
4740 2 2 7 11 928 2191 2329
4741 2 2 7 11 464 2201 1590
4742 2 2 7 11 463 2202 1589
4743 2 2 7 11 461 2203 1592
4744 2 2 7 11 462 2204 1591
4745 2 2 7 11 868 2548 2481
4746 2 2 7 11 865 2547 2483
4747 2 2 7 11 866 2545 2484
4748 2 2 7 11 867 2546 2482
4749 2 2 7 11 1220 2481 2548
4750 2 2 7 11 1218 2483 2547
4751 2 2 7 11 1219 2484 2545
4752 2 2 7 11 1217 2482 2546
4753 2 2 7 11 869 2327 1593
4754 2 2 7 11 870 2328 1595
4755 2 2 7 11 872 2326 1596
4756 2 2 7 11 871 2325 1594
4757 2 2 7 11 1019 1617 2217
4758 2 2 7 11 1020 1619 2219
4759 2 2 7 11 1018 1618 2220
4760 2 2 7 11 1017 1620 2218
4761 2 2 7 11 495 2313 1670
4762 2 2 7 11 496 2315 1671
4763 2 2 7 11 494 2314 1669
4764 2 2 7 11 493 2316 1672
4765 2 2 7 11 344 2655 1539
4766 2 2 7 11 343 2654 1540
4767 2 2 7 11 341 2653 1538
4768 2 2 7 11 342 2656 1537
4769 2 2 7 11 804 1670 2313
4770 2 2 7 11 803 1671 2315
4771 2 2 7 11 801 1669 2314
4772 2 2 7 11 802 1672 2316
4773 2 2 7 11 545 2597 1501
4774 2 2 7 11 546 2599 1503
4775 2 2 7 11 547 2600 1504
4776 2 2 7 11 548 2598 1502
4777 2 2 7 11 797 1719 2377
4778 2 2 7 11 798 1720 2379
4779 2 2 7 11 800 1717 2378
4780 2 2 7 11 799 1718 2380
4781 2 2 7 11 551 2521 1500
4782 2 2 7 11 550 2524 1497
4783 2 2 7 11 549 2522 1498
4784 2 2 7 11 552 2523 1499
4785 2 2 7 11 354 1929 2664
4786 2 2 7 11 355 1930 2662
4787 2 2 7 11 356 1932 2663
4788 2 2 7 11 353 1931 2661
4789 2 2 7 11 497 2449 1925
4790 2 2 7 11 499 2451 1926
4791 2 2 7 11 498 2450 1927
4792 2 2 7 11 500 2452 1928
4793 2 2 7 11 306 2545 1705
4794 2 2 7 11 308 2546 1706
4795 2 2 7 11 307 2548 1707
4796 2 2 7 11 305 2547 1708
4797 2 2 7 11 1024 1925 2449
4798 2 2 7 11 1021 1928 2452
4799 2 2 7 11 1023 1927 2450
4800 2 2 7 11 1022 1926 2451
4801 2 2 7 11 867 1706 2546
4802 2 2 7 11 866 1705 2545
4803 2 2 7 11 868 1707 2548
4804 2 2 7 11 865 1708 2547
4805 2 2 7 11 161 2292 1566
4806 2 2 7 11 120 2291 1565
4807 2 2 7 11 79 2289 1568
4808 2 2 7 11 38 2290 1567
4809 2 2 7 11 583 1745 2228
4810 2 2 7 11 581 1746 2226
4811 2 2 7 11 584 1748 2227
4812 2 2 7 11 582 1747 2225
4813 2 2 7 11 448 2508 1773
4814 2 2 7 11 447 2505 1774
4815 2 2 7 11 445 2506 1775
4816 2 2 7 11 446 2507 1776
4817 2 2 7 11 716 2078 2479
4818 2 2 7 11 713 2077 2480
4819 2 2 7 11 714 2079 2477
4820 2 2 7 11 715 2080 2478
4821 2 2 7 11 639 2340 1549
4822 2 2 7 11 637 2338 1552
4823 2 2 7 11 638 2337 1551
4824 2 2 7 11 640 2339 1550
4825 2 2 7 11 946 2406 2012
4826 2 2 7 11 948 2408 2010
4827 2 2 7 11 947 2407 2009
4828 2 2 7 11 945 2405 2011
4829 2 2 7 11 686 2584 1919
4830 2 2 7 11 687 2582 1918
4831 2 2 7 11 688 2581 1917
4832 2 2 7 11 685 2583 1920
4833 2 2 7 11 444 1637 2181
4834 2 2 7 11 442 1638 2182
4835 2 2 7 11 441 1640 2184
4836 2 2 7 11 443 1639 2183
4837 2 2 7 11 708 2286 1683
4838 2 2 7 11 706 2287 1681
4839 2 2 7 11 705 2285 1684
4840 2 2 7 11 707 2288 1682
4841 2 2 7 11 403 1558 2349
4842 2 2 7 11 402 1557 2351
4843 2 2 7 11 401 1559 2352
4844 2 2 7 11 404 1560 2350
4845 2 2 7 11 401 2530 1953
4846 2 2 7 11 402 2529 1954
4847 2 2 7 11 403 2532 1956
4848 2 2 7 11 404 2531 1955
4849 2 2 7 11 752 2405 1756
4850 2 2 7 11 749 2407 1754
4851 2 2 7 11 750 2408 1755
4852 2 2 7 11 751 2406 1753
4853 2 2 7 11 825 2161 1945
4854 2 2 7 11 826 2162 1947
4855 2 2 7 11 827 2163 1948
4856 2 2 7 11 828 2164 1946
4857 2 2 7 11 407 1945 2161
4858 2 2 7 11 405 1947 2162
4859 2 2 7 11 406 1948 2163
4860 2 2 7 11 408 1946 2164
4861 2 2 7 11 822 2512 1665
4862 2 2 7 11 824 2511 1666
4863 2 2 7 11 821 2509 1668
4864 2 2 7 11 823 2510 1667
4865 2 2 7 11 1022 2164 2462
4866 2 2 7 11 1023 2162 2463
4867 2 2 7 11 1024 2163 2464
4868 2 2 7 11 1021 2161 2461
4869 2 2 7 11 828 2462 2164
4870 2 2 7 11 826 2463 2162
4871 2 2 7 11 827 2464 2163
4872 2 2 7 11 825 2461 2161
4873 2 2 7 11 908 2221 1630
4874 2 2 7 11 905 2223 1629
4875 2 2 7 11 907 2222 1631
4876 2 2 7 11 906 2224 1632
4877 2 2 7 11 898 2669 1505
4878 2 2 7 11 897 2670 1507
4879 2 2 7 11 900 2671 1508
4880 2 2 7 11 899 2672 1506
4881 2 2 7 11 764 1778 2329
4882 2 2 7 11 763 1777 2330
4883 2 2 7 11 762 1779 2331
4884 2 2 7 11 761 1780 2332
4885 2 2 7 11 745 1538 2653
4886 2 2 7 11 748 1540 2654
4887 2 2 7 11 746 1537 2656
4888 2 2 7 11 747 1539 2655
4889 2 2 7 11 810 2149 2390
4890 2 2 7 11 809 2150 2389
4891 2 2 7 11 812 2152 2392
4892 2 2 7 11 811 2151 2391
4893 2 2 7 11 302 1520 2678
4894 2 2 7 11 303 1518 2677
4895 2 2 7 11 301 1519 2679
4896 2 2 7 11 304 1517 2680
4897 2 2 7 11 983 2391 2151
4898 2 2 7 11 982 2389 2150
4899 2 2 7 11 981 2390 2149
4900 2 2 7 11 984 2392 2152
4901 2 2 7 11 734 2249 1641
4902 2 2 7 11 736 2251 1643
4903 2 2 7 11 735 2252 1644
4904 2 2 7 11 733 2250 1642
4905 2 2 7 11 241 2377 1719
4906 2 2 7 11 244 2379 1720
4907 2 2 7 11 243 2378 1717
4908 2 2 7 11 242 2380 1718
4909 2 2 7 11 738 1655 2256
4910 2 2 7 11 737 1654 2253
4911 2 2 7 11 739 1656 2255
4912 2 2 7 11 740 1653 2254
4913 2 2 7 11 723 1700 2638
4914 2 2 7 11 724 1699 2637
4915 2 2 7 11 721 1698 2640
4916 2 2 7 11 722 1697 2639
4917 2 2 7 11 1009 2637 1699
4918 2 2 7 11 1012 2638 1700
4919 2 2 7 11 1011 2640 1698
4920 2 2 7 11 1010 2639 1697
4921 2 2 7 11 434 1989 2706
4922 2 2 7 11 433 1990 2707
4923 2 2 7 11 436 1992 2708
4924 2 2 7 11 435 1991 2705
4925 2 2 7 11 377 2245 1678
4926 2 2 7 11 378 2246 1677
4927 2 2 7 11 379 2248 1679
4928 2 2 7 11 380 2247 1680
4929 2 2 7 11 401 1541 2530
4930 2 2 7 11 402 1542 2529
4931 2 2 7 11 403 1544 2532
4932 2 2 7 11 404 1543 2531
4933 2 2 7 11 437 1665 2281
4934 2 2 7 11 438 1667 2282
4935 2 2 7 11 439 1666 2283
4936 2 2 7 11 440 1668 2284
4937 2 2 7 11 1031 2705 2344
4938 2 2 7 11 1032 2708 2342
4939 2 2 7 11 1029 2706 2341
4940 2 2 7 11 1030 2707 2343
4941 2 2 7 11 1130 2344 2705
4942 2 2 7 11 1131 2342 2708
4943 2 2 7 11 1129 2341 2706
4944 2 2 7 11 1132 2343 2707
4945 2 2 7 11 299 2086 1899
4946 2 2 7 11 300 2085 1898
4947 2 2 7 11 297 2087 1897
4948 2 2 7 11 298 2088 1900
4949 2 2 7 11 1013 2227 1748
4950 2 2 7 11 1014 2225 1747
4951 2 2 7 11 1016 2226 1746
4952 2 2 7 11 1015 2228 1745
4953 2 2 7 11 2131 923 2249
4954 2 2 7 11 2130 922 2251
4955 2 2 7 11 2129 924 2250
4956 2 2 7 11 2132 921 2252
4957 2 2 7 11 2130 2251 736
4958 2 2 7 11 2131 2249 734
4959 2 2 7 11 2132 2252 735
4960 2 2 7 11 2129 2250 733
4961 2 2 7 11 830 1830 2410
4962 2 2 7 11 829 1829 2409
4963 2 2 7 11 831 1832 2412
4964 2 2 7 11 832 1831 2411
4965 2 2 7 11 605 2409 1829
4966 2 2 7 11 607 2410 1830
4967 2 2 7 11 608 2411 1831
4968 2 2 7 11 606 2412 1832
4969 2 2 7 11 847 1733 2585
4970 2 2 7 11 848 1736 2587
4971 2 2 7 11 845 1735 2588
4972 2 2 7 11 846 1734 2586
4973 2 2 7 11 567 2585 1733
4974 2 2 7 11 565 2586 1734
4975 2 2 7 11 566 2587 1736
4976 2 2 7 11 568 2588 1735
4977 2 2 7 11 961 2644 1870
4978 2 2 7 11 963 2642 1871
4979 2 2 7 11 962 2643 1869
4980 2 2 7 11 964 2641 1872
4981 2 2 7 11 95 1700 2309
4982 2 2 7 11 136 1698 2312
4983 2 2 7 11 13 1697 2311
4984 2 2 7 11 54 1699 2310
4985 2 2 7 11 236 1741 2366
4986 2 2 7 11 235 1742 2365
4987 2 2 7 11 233 1743 2368
4988 2 2 7 11 234 1744 2367
4989 2 2 7 11 386 2345 1673
4990 2 2 7 11 387 2347 1676
4991 2 2 7 11 385 2346 1675
4992 2 2 7 11 388 2348 1674
4993 2 2 7 11 23 1963 2099
4994 2 2 7 11 146 1962 2098
4995 2 2 7 11 64 1961 2097
4996 2 2 7 11 105 1964 2100
4997 2 2 7 11 818 2194 2382
4998 2 2 7 11 820 2195 2381
4999 2 2 7 11 817 2193 2383
5000 2 2 7 11 819 2196 2384
5001 2 2 7 11 578 1585 2553
5002 2 2 7 11 580 1586 2556
5003 2 2 7 11 577 1587 2554
5004 2 2 7 11 579 1588 2555
5005 2 2 7 11 969 2383 2193
5006 2 2 7 11 970 2382 2194
5007 2 2 7 11 972 2384 2196
5008 2 2 7 11 971 2381 2195
5009 2 2 7 11 752 2011 2405
5010 2 2 7 11 751 2012 2406
5011 2 2 7 11 750 2010 2408
5012 2 2 7 11 749 2009 2407
5013 2 2 7 11 1476 1814 2571
5014 2 2 7 11 1474 1816 2570
5015 2 2 7 11 1473 1815 2569
5016 2 2 7 11 1475 1813 2572
5017 2 2 7 11 582 2601 1663
5018 2 2 7 11 581 2604 1661
5019 2 2 7 11 583 2602 1664
5020 2 2 7 11 584 2603 1662
5021 2 2 7 11 958 2433 2169
5022 2 2 7 11 960 2436 2171
5023 2 2 7 11 957 2435 2170
5024 2 2 7 11 959 2434 2172
5025 2 2 7 11 841 2169 2433
5026 2 2 7 11 843 2172 2434
5027 2 2 7 11 842 2171 2436
5028 2 2 7 11 844 2170 2435
5029 2 2 7 11 1190 2398 1682
5030 2 2 7 11 1189 2397 1684
5031 2 2 7 11 1192 2400 1681
5032 2 2 7 11 1191 2399 1683
5033 2 2 7 11 306 1975 2545
5034 2 2 7 11 305 1973 2547
5035 2 2 7 11 308 1974 2546
5036 2 2 7 11 307 1976 2548
5037 2 2 7 11 1218 2547 1973
5038 2 2 7 11 1219 2545 1975
5039 2 2 7 11 1217 2546 1974
5040 2 2 7 11 1220 2548 1976
5041 2 2 7 11 852 1712 2699
5042 2 2 7 11 851 1710 2698
5043 2 2 7 11 849 1709 2697
5044 2 2 7 11 850 1711 2700
5045 2 2 7 11 498 2697 1709
5046 2 2 7 11 497 2698 1710
5047 2 2 7 11 500 2699 1712
5048 2 2 7 11 499 2700 1711
5049 2 2 7 11 152 1725 2500
5050 2 2 7 11 111 1728 2498
5051 2 2 7 11 70 1727 2497
5052 2 2 7 11 29 1726 2499
5053 2 2 7 11 666 1625 2477
5054 2 2 7 11 665 1626 2478
5055 2 2 7 11 668 1627 2480
5056 2 2 7 11 667 1628 2479
5057 2 2 7 11 1020 2208 2523
5058 2 2 7 11 1017 2206 2524
5059 2 2 7 11 1019 2207 2522
5060 2 2 7 11 1018 2205 2521
5061 2 2 7 11 939 1622 2506
5062 2 2 7 11 938 1621 2507
5063 2 2 7 11 937 1624 2505
5064 2 2 7 11 940 1623 2508
5065 2 2 7 11 567 2629 1601
5066 2 2 7 11 565 2630 1602
5067 2 2 7 11 568 2631 1603
5068 2 2 7 11 566 2632 1604
5069 2 2 7 11 786 2345 1783
5070 2 2 7 11 787 2347 1784
5071 2 2 7 11 788 2348 1781
5072 2 2 7 11 785 2346 1782
5073 2 2 7 11 340 2489 1627
5074 2 2 7 11 337 2490 1625
5075 2 2 7 11 338 2491 1626
5076 2 2 7 11 339 2492 1628
5077 2 2 7 11 415 2329 1778
5078 2 2 7 11 416 2330 1777
5079 2 2 7 11 414 2331 1779
5080 2 2 7 11 413 2332 1780
5081 2 2 7 11 386 1783 2345
5082 2 2 7 11 385 1782 2346
5083 2 2 7 11 388 1781 2348
5084 2 2 7 11 387 1784 2347
5085 2 2 7 11 479 2692 1647
5086 2 2 7 11 477 2691 1646
5087 2 2 7 11 478 2690 1648
5088 2 2 7 11 480 2689 1645
5089 2 2 7 11 621 1985 2514
5090 2 2 7 11 623 1988 2515
5091 2 2 7 11 624 1986 2516
5092 2 2 7 11 622 1987 2513
5093 2 2 7 11 462 1756 2405
5094 2 2 7 11 464 1755 2408
5095 2 2 7 11 463 1754 2407
5096 2 2 7 11 461 1753 2406
5097 2 2 7 11 1122 2519 1955
5098 2 2 7 11 1121 2518 1953
5099 2 2 7 11 1123 2520 1954
5100 2 2 7 11 1124 2517 1956
5101 2 2 7 11 1103 1853 2305
5102 2 2 7 11 1101 1854 2306
5103 2 2 7 11 1104 1856 2308
5104 2 2 7 11 1102 1855 2307
5105 2 2 7 11 620 1915 2592
5106 2 2 7 11 619 1916 2591
5107 2 2 7 11 618 1913 2590
5108 2 2 7 11 617 1914 2589
5109 2 2 7 11 397 2447 2066
5110 2 2 7 11 400 2448 2068
5111 2 2 7 11 399 2445 2065
5112 2 2 7 11 398 2446 2067
5113 2 2 7 11 908 2591 1916
5114 2 2 7 11 905 2589 1914
5115 2 2 7 11 906 2590 1913
5116 2 2 7 11 907 2592 1915
5117 2 2 7 11 940 2508 2083
5118 2 2 7 11 939 2506 2082
5119 2 2 7 11 938 2507 2081
5120 2 2 7 11 937 2505 2084
5121 2 2 7 11 448 2083 2508
5122 2 2 7 11 445 2082 2506
5123 2 2 7 11 446 2081 2507
5124 2 2 7 11 447 2084 2505
5125 2 2 7 11 486 2673 2627
5126 2 2 7 11 488 2674 2625
5127 2 2 7 11 487 2675 2626
5128 2 2 7 11 485 2676 2628
5129 2 2 7 11 1201 2626 2675
5130 2 2 7 11 1204 2627 2673
5131 2 2 7 11 1203 2625 2674
5132 2 2 7 11 1202 2628 2676
5133 2 2 7 11 396 2658 1655
5134 2 2 7 11 393 2657 1653
5135 2 2 7 11 394 2660 1654
5136 2 2 7 11 395 2659 1656
5137 2 2 7 11 821 1653 2657
5138 2 2 7 11 824 1656 2659
5139 2 2 7 11 822 1654 2660
5140 2 2 7 11 823 1655 2658
5141 2 2 7 11 471 1807 2400
5142 2 2 7 11 470 1806 2399
5143 2 2 7 11 469 1805 2397
5144 2 2 7 11 472 1808 2398
5145 2 2 7 11 473 2438 1822
5146 2 2 7 11 474 2437 1821
5147 2 2 7 11 475 2439 1824
5148 2 2 7 11 476 2440 1823
5149 2 2 7 11 763 2218 2023
5150 2 2 7 11 764 2217 2024
5151 2 2 7 11 762 2219 2021
5152 2 2 7 11 761 2220 2022
5153 2 2 7 11 239 1797 2456
5154 2 2 7 11 238 1798 2454
5155 2 2 7 11 240 1799 2453
5156 2 2 7 11 237 1800 2455
5157 2 2 7 11 942 2420 1944
5158 2 2 7 11 943 2419 1943
5159 2 2 7 11 941 2417 1942
5160 2 2 7 11 944 2418 1941
5161 2 2 7 11 661 2551 1706
5162 2 2 7 11 663 2549 1705
5163 2 2 7 11 662 2550 1708
5164 2 2 7 11 664 2552 1707
5165 2 2 7 11 793 2454 1798
5166 2 2 7 11 795 2453 1799
5167 2 2 7 11 796 2455 1800
5168 2 2 7 11 794 2456 1797
5169 2 2 7 11 894 2497 1727
5170 2 2 7 11 893 2499 1726
5171 2 2 7 11 895 2498 1728
5172 2 2 7 11 896 2500 1725
5173 2 2 7 11 543 1922 2465
5174 2 2 7 11 541 1924 2468
5175 2 2 7 11 542 1923 2467
5176 2 2 7 11 544 1921 2466
5177 2 2 7 11 789 1821 2437
5178 2 2 7 11 792 1822 2438
5179 2 2 7 11 790 1823 2440
5180 2 2 7 11 791 1824 2439
5181 2 2 7 11 835 2465 1922
5182 2 2 7 11 836 2468 1924
5183 2 2 7 11 834 2466 1921
5184 2 2 7 11 833 2467 1923
5185 2 2 7 11 1035 1738 2597
5186 2 2 7 11 1033 1740 2598
5187 2 2 7 11 1034 1739 2599
5188 2 2 7 11 1036 1737 2600
5189 2 2 7 11 983 2151 2339
5190 2 2 7 11 981 2149 2337
5191 2 2 7 11 982 2150 2338
5192 2 2 7 11 984 2152 2340
5193 2 2 7 11 274 2052 2636
5194 2 2 7 11 273 2049 2633
5195 2 2 7 11 276 2050 2634
5196 2 2 7 11 275 2051 2635
5197 2 2 7 11 1273 2363 2653
5198 2 2 7 11 1276 2364 2654
5199 2 2 7 11 1275 2361 2656
5200 2 2 7 11 1274 2362 2655
5201 2 2 7 11 745 2653 2363
5202 2 2 7 11 746 2656 2361
5203 2 2 7 11 748 2654 2364
5204 2 2 7 11 747 2655 2362
5205 2 2 7 11 677 2005 2326
5206 2 2 7 11 680 2007 2325
5207 2 2 7 11 678 2006 2327
5208 2 2 7 11 679 2008 2328
5209 2 2 7 11 821 2232 2509
5210 2 2 7 11 822 2231 2512
5211 2 2 7 11 824 2229 2511
5212 2 2 7 11 823 2230 2510
5213 2 2 7 11 789 2475 1821
5214 2 2 7 11 790 2473 1823
5215 2 2 7 11 791 2474 1824
5216 2 2 7 11 792 2476 1822
5217 2 2 7 11 384 2684 1770
5218 2 2 7 11 383 2681 1769
5219 2 2 7 11 381 2683 1772
5220 2 2 7 11 382 2682 1771
5221 2 2 7 11 957 2572 1813
5222 2 2 7 11 959 2571 1814
5223 2 2 7 11 958 2570 1816
5224 2 2 7 11 960 2569 1815
5225 2 2 7 11 777 2061 2300
5226 2 2 7 11 780 2063 2297
5227 2 2 7 11 779 2064 2299
5228 2 2 7 11 778 2062 2298
5229 2 2 7 11 263 1869 2621
5230 2 2 7 11 261 1870 2622
5231 2 2 7 11 264 1871 2624
5232 2 2 7 11 262 1872 2623
5233 2 2 7 11 440 2284 2336
5234 2 2 7 11 437 2281 2333
5235 2 2 7 11 439 2283 2334
5236 2 2 7 11 438 2282 2335
5237 2 2 7 11 914 2336 2284
5238 2 2 7 11 913 2333 2281
5239 2 2 7 11 915 2334 2283
5240 2 2 7 11 916 2335 2282
5241 2 2 7 11 1267 2588 2176
5242 2 2 7 11 1265 2586 2174
5243 2 2 7 11 1266 2585 2173
5244 2 2 7 11 1268 2587 2175
5245 2 2 7 11 356 2663 1840
5246 2 2 7 11 353 2661 1838
5247 2 2 7 11 354 2664 1839
5248 2 2 7 11 355 2662 1837
5249 2 2 7 11 568 2176 2588
5250 2 2 7 11 565 2174 2586
5251 2 2 7 11 567 2173 2585
5252 2 2 7 11 566 2175 2587
5253 2 2 7 11 357 1841 2665
5254 2 2 7 11 358 1843 2666
5255 2 2 7 11 360 1844 2667
5256 2 2 7 11 359 1842 2668
5257 2 2 7 11 537 2115 2614
5258 2 2 7 11 539 2113 2616
5259 2 2 7 11 2116 2615 540
5260 2 2 7 11 538 2114 2613
5261 2 2 7 11 777 2258 2388
5262 2 2 7 11 780 2260 2387
5263 2 2 7 11 779 2259 2386
5264 2 2 7 11 778 2257 2385
5265 2 2 7 11 1271 2388 2258
5266 2 2 7 11 1272 2387 2260
5267 2 2 7 11 1269 2385 2257
5268 2 2 7 11 1270 2386 2259
5269 2 2 7 11 60 2487 1938
5270 2 2 7 11 101 2488 1937
5271 2 2 7 11 142 2485 1939
5272 2 2 7 11 19 2486 1940
5273 2 2 7 11 985 2549 2018
5274 2 2 7 11 987 2552 2020
5275 2 2 7 11 986 2550 2017
5276 2 2 7 11 988 2551 2019
5277 2 2 7 11 661 2019 2551
5278 2 2 7 11 664 2020 2552
5279 2 2 7 11 663 2018 2549
5280 2 2 7 11 662 2017 2550
5281 2 2 7 11 817 2621 1869
5282 2 2 7 11 818 2622 1870
5283 2 2 7 11 820 2623 1872
5284 2 2 7 11 819 2624 1871
5285 2 2 7 11 401 1953 2518
5286 2 2 7 11 403 1956 2517
5287 2 2 7 11 402 1954 2520
5288 2 2 7 11 404 1955 2519
5289 2 2 7 11 269 2170 2424
5290 2 2 7 11 272 2172 2422
5291 2 2 7 11 270 2169 2421
5292 2 2 7 11 271 2171 2423
5293 2 2 7 11 975 2066 2447
5294 2 2 7 11 974 2067 2446
5295 2 2 7 11 976 2068 2448
5296 2 2 7 11 973 2065 2445
5297 2 2 7 11 877 2274 2630
5298 2 2 7 11 880 2273 2629
5299 2 2 7 11 879 2275 2632
5300 2 2 7 11 878 2276 2631
5301 2 2 7 11 841 2333 2421
5302 2 2 7 11 843 2334 2422
5303 2 2 7 11 842 2336 2423
5304 2 2 7 11 844 2335 2424
5305 2 2 7 11 914 2423 2336
5306 2 2 7 11 913 2421 2333
5307 2 2 7 11 915 2422 2334
5308 2 2 7 11 916 2424 2335
5309 2 2 7 11 836 2703 1999
5310 2 2 7 11 835 2702 2000
5311 2 2 7 11 834 2701 1998
5312 2 2 7 11 833 2704 1997
5313 2 2 7 11 459 1949 2650
5314 2 2 7 11 460 1950 2651
5315 2 2 7 11 457 1952 2649
5316 2 2 7 11 458 1951 2652
5317 2 2 7 11 1095 2577 2695
5318 2 2 7 11 1096 2579 2696
5319 2 2 7 11 1093 2580 2694
5320 2 2 7 11 1094 2578 2693
5321 2 2 7 11 874 2696 2579
5322 2 2 7 11 873 2695 2577
5323 2 2 7 11 875 2693 2578
5324 2 2 7 11 876 2694 2580
5325 2 2 7 11 841 2421 2169
5326 2 2 7 11 843 2422 2172
5327 2 2 7 11 844 2424 2170
5328 2 2 7 11 842 2423 2171
5329 2 2 7 11 723 2638 2002
5330 2 2 7 11 724 2637 2001
5331 2 2 7 11 722 2639 2004
5332 2 2 7 11 721 2640 2003
5333 2 2 7 11 2120 848 2568
5334 2 2 7 11 2118 846 2567
5335 2 2 7 11 2117 847 2565
5336 2 2 7 11 2119 845 2566
5337 2 2 7 11 1065 2409 2270
5338 2 2 7 11 1066 2410 2269
5339 2 2 7 11 1068 2412 2272
5340 2 2 7 11 1067 2411 2271
5341 2 2 7 11 605 2270 2409
5342 2 2 7 11 607 2269 2410
5343 2 2 7 11 608 2271 2411
5344 2 2 7 11 606 2272 2412
5345 2 2 7 11 1264 2478 2080
5346 2 2 7 11 1263 2477 2079
5347 2 2 7 11 1262 2479 2078
5348 2 2 7 11 1261 2480 2077
5349 2 2 7 11 452 1998 2701
5350 2 2 7 11 449 2000 2702
5351 2 2 7 11 450 1997 2704
5352 2 2 7 11 451 1999 2703
5353 2 2 7 11 294 2154 2511
5354 2 2 7 11 293 2153 2510
5355 2 2 7 11 296 2156 2509
5356 2 2 7 11 295 2155 2512
5357 2 2 7 11 1161 2320 2455
5358 2 2 7 11 1162 2317 2453
5359 2 2 7 11 1164 2319 2454
5360 2 2 7 11 1163 2318 2456
5361 2 2 7 11 853 2402 2394
5362 2 2 7 11 855 2404 2395
5363 2 2 7 11 856 2403 2396
5364 2 2 7 11 854 2401 2393
5365 2 2 7 11 954 2396 2403
5366 2 2 7 11 953 2394 2402
5367 2 2 7 11 955 2395 2404
5368 2 2 7 11 956 2393 2401
5369 2 2 7 11 801 2633 2049
5370 2 2 7 11 2050 804 2634
5371 2 2 7 11 2051 803 2635
5372 2 2 7 11 802 2636 2052
5373 2 2 7 11 239 2456 2318
5374 2 2 7 11 240 2453 2317
5375 2 2 7 11 238 2454 2319
5376 2 2 7 11 237 2455 2320
5377 2 2 7 11 900 2105 2671
5378 2 2 7 11 898 2106 2669
5379 2 2 7 11 899 2108 2672
5380 2 2 7 11 897 2107 2670
5381 2 2 7 11 92 2671 2105
5382 2 2 7 11 133 2669 2106
5383 2 2 7 11 10 2670 2107
5384 2 2 7 11 51 2672 2108
5385 2 2 7 11 292 2120 2568
5386 2 2 7 11 289 2118 2567
5387 2 2 7 11 291 2119 2566
5388 2 2 7 11 290 2117 2565
5389 2 2 7 11 2111 2645 1257
5390 2 2 7 11 2110 2647 1258
5391 2 2 7 11 2109 2646 1259
5392 2 2 7 11 2112 2648 1260
5393 2 2 7 11 1071 2613 2114
5394 2 2 7 11 1072 2614 2115
5395 2 2 7 11 2116 1069 2615
5396 2 2 7 11 1070 2616 2113
5397 2 2 7 11 936 2646 2109
5398 2 2 7 11 2111 934 2645
5399 2 2 7 11 2112 933 2648
5400 2 2 7 11 2110 935 2647
5401 2 2 7 11 293 2510 2230
5402 2 2 7 11 296 2509 2232
5403 2 2 7 11 294 2511 2229
5404 2 2 7 11 295 2512 2231
5405 2 2 7 11 936 2109 2691
5406 2 2 7 11 2110 2690 935
5407 2 2 7 11 2111 2692 934
5408 2 2 7 11 2112 2689 933
5409 2 2 7 11 1226 2537 2700
5410 2 2 7 11 1227 2539 2697
5411 2 2 7 11 1225 2538 2699
5412 2 2 7 11 1228 2540 2698
5413 2 2 7 11 966 2594 2469
5414 2 2 7 11 967 2593 2471
5415 2 2 7 11 968 2595 2472
5416 2 2 7 11 965 2596 2470
5417 2 2 7 11 420 2469 2594
5418 2 2 7 11 417 2471 2593
5419 2 2 7 11 419 2472 2595
5420 2 2 7 11 418 2470 2596
5421 2 2 7 11 852 2699 2538
5422 2 2 7 11 849 2697 2539
5423 2 2 7 11 850 2700 2537
5424 2 2 7 11 851 2698 2540
$EndElements


Node-path: tests/tri.geo
Node-kind: file
Node-action: change
Text-content-length: 428
Text-content-md5: 928e17b2d0bfda0102a17dd3d34939cb
Text-content-sha1: 58c008198741388e44da22fada13560f496abbdd
Content-length: 428

msh = 10;
cl = 1.5;

l = 1;

Point(1) = {+l, -l, 0, cl};
Point(2) = {+l, +l, 0, cl};
Point(3) = {-l, +l, 0, cl};
Point(4) = {-l, -l, 0, cl};

Line(1) = {1, 2};
Line(2) = {2, 3};
Line(3) = {3, 4};
Line(4) = {4, 1};

Line Loop(1) = {1, 2, 3, 4};

Plane Surface(1) = {1};

Transfinite Line {1, 2, 3, 4} = msh Using Progression 1;
Transfinite Surface {1};

Physical Line(5) = {3};
Physical Line(6) = {1};
Physical Surface(7) = {1};


Node-path: tests/tri.msh
Node-kind: file
Node-action: change
Text-content-length: 7372
Text-content-md5: 1836a442e5238cc1a73cba045c050ac2
Text-content-sha1: 800fdad1c9feda1578be36d901227e940fe02dd5
Content-length: 7372

$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
100
1 1 -1 0
2 1 1 0
3 -1 1 0
4 -1 -1 0
5 1 -0.7777777777783945 0
6 1 -0.5555555555567891 0
7 1 -0.3333333333349524 0
8 1 -0.1111111111130386 0
9 1 0.1111111111091836 0
10 1 0.3333333333317141 0
11 1 0.5555555555543217 0
12 1 0.7777777777771608 0
13 0.7777777777783945 1 0
14 0.5555555555567891 1 0
15 0.3333333333349524 1 0
16 0.1111111111130386 1 0
17 -0.1111111111091836 1 0
18 -0.3333333333317141 1 0
19 -0.5555555555543217 1 0
20 -0.7777777777771608 1 0
21 -1 0.7777777777783945 0
22 -1 0.5555555555567891 0
23 -1 0.3333333333349524 0
24 -1 0.1111111111130386 0
25 -1 -0.1111111111091836 0
26 -1 -0.3333333333317141 0
27 -1 -0.5555555555543217 0
28 -1 -0.7777777777771608 0
29 -0.7777777777783945 -1 0
30 -0.5555555555567891 -1 0
31 -0.3333333333349524 -1 0
32 -0.1111111111130386 -1 0
33 0.1111111111091836 -1 0
34 0.3333333333317141 -1 0
35 0.5555555555543217 -1 0
36 0.7777777777771608 -1 0
37 0.7777777777772978 -0.7777777777782575 0
38 0.5555555555545958 -0.7777777777781202 0
39 0.333333333332074 -0.7777777777779833 0
40 0.1111111111096119 -0.7777777777778461 0
41 -0.1111111111126103 -0.7777777777777093 0
42 -0.3333333333345926 -0.7777777777775721 0
43 -0.555555555556515 -0.7777777777774351 0
44 -0.7777777777782575 -0.7777777777772981 0
45 0.7777777777774348 -0.5555555555565149 0
46 0.5555555555548701 -0.5555555555562408 0
47 0.3333333333324336 -0.5555555555559666 0
48 0.1111111111100402 -0.5555555555556926 0
49 -0.111111111112182 -0.5555555555554184 0
50 -0.3333333333342328 -0.555555555555144 0
51 -0.5555555555562408 -0.5555555555548699 0
52 -0.7777777777781204 -0.5555555555545959 0
53 0.7777777777775721 -0.3333333333345926 0
54 0.5555555555551441 -0.3333333333342328 0
55 0.3333333333327936 -0.333333333333873 0
56 0.1111111111104686 -0.3333333333335131 0
57 -0.1111111111117536 -0.3333333333331534 0
58 -0.333333333333873 -0.3333333333327936 0
59 -0.5555555555559666 -0.3333333333324338 0
60 -0.7777777777779833 -0.333333333332074 0
61 0.7777777777777091 -0.1111111111126103 0
62 0.5555555555554181 -0.111111111112182 0
63 0.3333333333331534 -0.1111111111117536 0
64 0.1111111111108969 -0.1111111111113253 0
65 -0.1111111111113253 -0.1111111111108969 0
66 -0.3333333333335132 -0.1111111111104686 0
67 -0.5555555555556926 -0.1111111111100402 0
68 -0.7777777777778461 -0.1111111111096119 0
69 0.7777777777778463 0.1111111111096119 0
70 0.5555555555556926 0.1111111111100403 0
71 0.3333333333335132 0.1111111111104686 0
72 0.1111111111113252 0.1111111111108969 0
73 -0.1111111111108969 0.1111111111113252 0
74 -0.3333333333331534 0.1111111111117536 0
75 -0.5555555555554184 0.1111111111121819 0
76 -0.7777777777777093 0.1111111111126102 0
77 0.7777777777779833 0.3333333333320739 0
78 0.5555555555559666 0.3333333333324337 0
79 0.3333333333338729 0.3333333333327935 0
80 0.1111111111117536 0.3333333333331535 0
81 -0.1111111111104686 0.3333333333335131 0
82 -0.3333333333327936 0.333333333333873 0
83 -0.5555555555551441 0.3333333333342328 0
84 -0.7777777777775721 0.3333333333345926 0
85 0.7777777777781203 0.5555555555545957 0
86 0.5555555555562407 0.5555555555548699 0
87 0.3333333333342327 0.5555555555551441 0
88 0.111111111112182 0.5555555555554184 0
89 -0.1111111111100402 0.5555555555556926 0
90 -0.3333333333324338 0.5555555555559666 0
91 -0.5555555555548701 0.5555555555562408 0
92 -0.7777777777774351 0.555555555556515 0
93 0.7777777777782575 0.7777777777772978 0
94 0.5555555555565149 0.777777777777435 0
95 0.3333333333345927 0.7777777777775721 0
96 0.1111111111126103 0.7777777777777093 0
97 -0.1111111111096119 0.7777777777778462 0
98 -0.3333333333320739 0.7777777777779833 0
99 -0.5555555555545959 0.7777777777781203 0
100 -0.7777777777772981 0.7777777777782573 0
$EndNodes
$Elements
180
1 1 2 6 1 1 5
2 1 2 6 1 5 6
3 1 2 6 1 6 7
4 1 2 6 1 7 8
5 1 2 6 1 8 9
6 1 2 6 1 9 10
7 1 2 6 1 10 11
8 1 2 6 1 11 12
9 1 2 6 1 12 2
10 1 2 5 3 3 21
11 1 2 5 3 21 22
12 1 2 5 3 22 23
13 1 2 5 3 23 24
14 1 2 5 3 24 25
15 1 2 5 3 25 26
16 1 2 5 3 26 27
17 1 2 5 3 27 28
18 1 2 5 3 28 4
19 2 2 7 1 1 5 36
20 2 2 7 1 36 5 37
21 2 2 7 1 36 37 35
22 2 2 7 1 35 37 38
23 2 2 7 1 35 38 34
24 2 2 7 1 34 38 39
25 2 2 7 1 34 39 33
26 2 2 7 1 33 39 40
27 2 2 7 1 33 40 32
28 2 2 7 1 32 40 41
29 2 2 7 1 32 41 31
30 2 2 7 1 31 41 42
31 2 2 7 1 31 42 30
32 2 2 7 1 30 42 43
33 2 2 7 1 30 43 29
34 2 2 7 1 29 43 44
35 2 2 7 1 29 44 4
36 2 2 7 1 4 44 28
37 2 2 7 1 5 6 37
38 2 2 7 1 37 6 45
39 2 2 7 1 37 45 38
40 2 2 7 1 38 45 46
41 2 2 7 1 38 46 39
42 2 2 7 1 39 46 47
43 2 2 7 1 39 47 40
44 2 2 7 1 40 47 48
45 2 2 7 1 40 48 41
46 2 2 7 1 41 48 49
47 2 2 7 1 41 49 42
48 2 2 7 1 42 49 50
49 2 2 7 1 42 50 43
50 2 2 7 1 43 50 51
51 2 2 7 1 43 51 44
52 2 2 7 1 44 51 52
53 2 2 7 1 44 52 28
54 2 2 7 1 28 52 27
55 2 2 7 1 6 7 45
56 2 2 7 1 45 7 53
57 2 2 7 1 45 53 46
58 2 2 7 1 46 53 54
59 2 2 7 1 46 54 47
60 2 2 7 1 47 54 55
61 2 2 7 1 47 55 48
62 2 2 7 1 48 55 56
63 2 2 7 1 48 56 49
64 2 2 7 1 49 56 57
65 2 2 7 1 49 57 50
66 2 2 7 1 50 57 58
67 2 2 7 1 50 58 51
68 2 2 7 1 51 58 59
69 2 2 7 1 51 59 52
70 2 2 7 1 52 59 60
71 2 2 7 1 52 60 27
72 2 2 7 1 27 60 26
73 2 2 7 1 7 8 53
74 2 2 7 1 53 8 61
75 2 2 7 1 53 61 54
76 2 2 7 1 54 61 62
77 2 2 7 1 54 62 55
78 2 2 7 1 55 62 63
79 2 2 7 1 55 63 56
80 2 2 7 1 56 63 64
81 2 2 7 1 56 64 57
82 2 2 7 1 57 64 65
83 2 2 7 1 57 65 58
84 2 2 7 1 58 65 66
85 2 2 7 1 58 66 59
86 2 2 7 1 59 66 67
87 2 2 7 1 59 67 60
88 2 2 7 1 60 67 68
89 2 2 7 1 60 68 26
90 2 2 7 1 26 68 25
91 2 2 7 1 8 9 61
92 2 2 7 1 61 9 69
93 2 2 7 1 61 69 62
94 2 2 7 1 62 69 70
95 2 2 7 1 62 70 63
96 2 2 7 1 63 70 71
97 2 2 7 1 63 71 64
98 2 2 7 1 64 71 72
99 2 2 7 1 64 72 65
100 2 2 7 1 65 72 73
101 2 2 7 1 65 73 66
102 2 2 7 1 66 73 74
103 2 2 7 1 66 74 67
104 2 2 7 1 67 74 75
105 2 2 7 1 67 75 68
106 2 2 7 1 68 75 76
107 2 2 7 1 68 76 25
108 2 2 7 1 25 76 24
109 2 2 7 1 9 10 69
110 2 2 7 1 69 10 77
111 2 2 7 1 69 77 70
112 2 2 7 1 70 77 78
113 2 2 7 1 70 78 71
114 2 2 7 1 71 78 79
115 2 2 7 1 71 79 72
116 2 2 7 1 72 79 80
117 2 2 7 1 72 80 73
118 2 2 7 1 73 80 81
119 2 2 7 1 73 81 74
120 2 2 7 1 74 81 82
121 2 2 7 1 74 82 75
122 2 2 7 1 75 82 83
123 2 2 7 1 75 83 76
124 2 2 7 1 76 83 84
125 2 2 7 1 76 84 24
126 2 2 7 1 24 84 23
127 2 2 7 1 10 11 77
128 2 2 7 1 77 11 85
129 2 2 7 1 77 85 78
130 2 2 7 1 78 85 86
131 2 2 7 1 78 86 79
132 2 2 7 1 79 86 87
133 2 2 7 1 79 87 80
134 2 2 7 1 80 87 88
135 2 2 7 1 80 88 81
136 2 2 7 1 81 88 89
137 2 2 7 1 81 89 82
138 2 2 7 1 82 89 90
139 2 2 7 1 82 90 83
140 2 2 7 1 83 90 91
141 2 2 7 1 83 91 84
142 2 2 7 1 84 91 92
143 2 2 7 1 84 92 23
144 2 2 7 1 23 92 22
145 2 2 7 1 11 12 85
146 2 2 7 1 85 12 93
147 2 2 7 1 85 93 86
148 2 2 7 1 86 93 94
149 2 2 7 1 86 94 87
150 2 2 7 1 87 94 95
151 2 2 7 1 87 95 88
152 2 2 7 1 88 95 96
153 2 2 7 1 88 96 89
154 2 2 7 1 89 96 97
155 2 2 7 1 89 97 90
156 2 2 7 1 90 97 98
157 2 2 7 1 90 98 91
158 2 2 7 1 91 98 99
159 2 2 7 1 91 99 92
160 2 2 7 1 92 99 100
161 2 2 7 1 92 100 22
162 2 2 7 1 22 100 21
163 2 2 7 1 12 2 93
164 2 2 7 1 93 2 13
165 2 2 7 1 93 13 94
166 2 2 7 1 94 13 14
167 2 2 7 1 94 14 95
168 2 2 7 1 95 14 15
169 2 2 7 1 95 15 96
170 2 2 7 1 96 15 16
171 2 2 7 1 96 16 97
172 2 2 7 1 97 16 17
173 2 2 7 1 97 17 98
174 2 2 7 1 98 17 18
175 2 2 7 1 98 18 99
176 2 2 7 1 99 18 19
177 2 2 7 1 99 19 100
178 2 2 7 1 100 19 20
179 2 2 7 1 100 20 21
180 2 2 7 1 21 20 3
$EndElements


Revision-number: 8
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-03T18:39:11.446981Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 774
Text-content-md5: 4464658b1938e717cce45d9f7c6e7cd8
Text-content-sha1: fc51ee78e0067c98b073b1bc6905b31d4d514cdd
Content-length: 774

cmake_minimum_required(VERSION 2.6)
project(SmallFem)

find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)

macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)



add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
add_subdirectory(postprocessing)
add_subdirectory(solver)


list(APPEND sources Main.cpp)

include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)


add_definitions(-pedantic -Wall)
add_executable(sf ${sources}) 

target_link_libraries(sf cblas lapack)

Revision-number: 9
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-04T08:29:39.734675Z
PROPS-END

Node-path: doc
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: doc/Doxyfile
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 77777
Text-content-md5: 2c427381e69694098eb145e6611a9307
Text-content-sha1: 2a2c064f7224620f50bba2650ac6f7ec2184ab0b
Content-length: 77787

PROPS-END
# Doxyfile 1.7.6.1

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = YES

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = YES

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = NO

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = YES

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = YES

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = YES

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = YES

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = NO

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = NO

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = YES

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = YES

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = YES

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = YES

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = NO

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = NO

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to the 
# mathjax.org site, so you can quickly see the result without installing 
# MathJax, but it is strongly recommended to install a local copy of MathJax 
# before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. 
# Optionally an initial location of the external documentation 
# can be added for each tagfile. The format of a tag file without 
# this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths or 
# URLs. If a location is present for each tag, the installdox tool 
# does not have to be run to correct the links. 
# Note that each tag file must have a unique name 
# (where the name does NOT include the path) 
# If a tag file is not located in the directory in which doxygen 
# is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = NO

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = NO

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = NO

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = YES

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = YES

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = png

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Revision-number: 10
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-04T08:48:27.385027Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 1044
Text-content-md5: 7acc046dd866456f50af8fc5d63e48d6
Text-content-sha1: d390a83b2c9995d41b6a439a6865a1d80b4fbddb
Content-length: 1044

cmake_minimum_required(VERSION 2.6)
project(SmallFem)

## Add Source Macro
macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)

## Look for Packages
find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)
find_package(Doxygen)

## Add Sources
add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
add_subdirectory(postprocessing)
add_subdirectory(solver)

## Add Main
list(APPEND sources Main.cpp)

## Include Path
include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)

## Build Documentation
if(DOXYGEN_FOUND)
  add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile)
endif(DOXYGEN_FOUND)

## Build
add_definitions(-pedantic -Wall)
add_executable(sf ${sources}) 

## Link
target_link_libraries(sf cblas lapack)

Revision-number: 11
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-04T12:36:07.457110Z
PROPS-END

Node-path: assembler/Dof.h
Node-kind: file
Node-action: change
Text-content-length: 1803
Text-content-md5: 93c3801682a147651ce85e2b5496f46b
Text-content-sha1: f8b24a37d76f43054f209762e6c18bfbf4add8ab
Content-length: 1803

#ifndef _DOF_H_
#define _DOF_H_

#include <string>

/**
   @class Dof
   @brief This class represents degrees of freedom (@c DOF)
 
   This class represents degrees of freedom (@c DOF).@n
   These are the terms that will be assembled in the system.

   A @c DOF is defined by a pair of to integers called (entity, type).@n
   By themselfs, these integers have no meaning.

   @note
   Note that users are not allowed to instanciate @c DOFs.@n
   This is the DofManager's responsability.

   @fn int Dof::getEntity(void) const
   @return Returns the associated @a entity of the @c DOF

   @fn int Dof::getType(void) const
   @return Returns the associated @a type of the @c DOF

   @fn bool Dof::operator<(const Dof& other) const
   @return Returns @c true if 

  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

*/


class DofManager;

class Dof{
 private:
  int entity;
  int type;

  friend class DofManager;

 private:
   Dof(const int entity, const int type);
  ~Dof(void);

 public:
  int getEntity(void) const;
  int getType(void) const;

  bool operator<(const Dof& other) const;
  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

  std::string toString(void) const;
};

inline Dof::~Dof(void){
}

inline int Dof::getEntity(void) const{
  return entity;
}

inline int Dof::getType(void) const{
  return type;
}

inline bool Dof::operator<(const Dof& other) const{
  return (entity < other.entity) ||
    ((entity == other.entity) && (type < other.type));
}

inline bool Dof::operator>(const Dof& other) const{
  return (entity > other.entity) ||
    ((entity == other.entity) && (type > other.type));
}

inline bool Dof::operator==(const Dof& other) const{
  return (entity == other.entity) && (type == other.type);
}

#endif


Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 77770
Text-content-md5: 93951da829423841260f9180574accc9
Text-content-sha1: be41dad9e06b8b507e86c0611676a313c642a1db
Content-length: 77770

# Doxyfile 1.7.6.1

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = NO

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = NO

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = NO

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = YES

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = YES

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = YES

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = NO

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = NO

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to the 
# mathjax.org site, so you can quickly see the result without installing 
# MathJax, but it is strongly recommended to install a local copy of MathJax 
# before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. 
# Optionally an initial location of the external documentation 
# can be added for each tagfile. The format of a tag file without 
# this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths or 
# URLs. If a location is present for each tag, the installdox tool 
# does not have to be run to correct the links. 
# Note that each tag file must have a unique name 
# (where the name does NOT include the path) 
# If a tag file is not located in the directory in which doxygen 
# is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = NO

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = NO

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = NO

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = YES

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = YES

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = png

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1274
Text-content-md5: 9d6827c12d8fb43bc4b839bba64b58a7
Text-content-sha1: 10afbcbf8c65ca0f93de8f47b72fcb0e6c57f07c
Content-length: 1274

#include "FormulationLaplace.h"
#include "TriNodeBasis.h"

#include <cmath>

FormulationLaplace::FormulationLaplace(void){
  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  // Generate Basis
  TriNodeBasis baseGen(1);  
  const Polynomial* basis = baseGen.getBasis();

  // Take gradient
  basisSize = baseGen.getSize();  
  gradBasis = new Vector<Polynomial> [basisSize];

  for(int i = 0; i < basisSize; i++)
    gradBasis[i] = basis[i].gradient();
}

FormulationLaplace::~FormulationLaplace(void){
  delete[] gradBasis;
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = jac.grad(gradBasis[nodeI].at(jg(0), jg(1), 0));
    Vector<double> phiJ = jac.grad(gradBasis[nodeJ].at(jg(0), jg(1), 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 737
Text-content-md5: d57ea24135c5fae0b4e5a4e3b63f5069
Text-content-sha1: 89348ad944c73b1951db3428777897c590d26f33
Content-length: 737

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "Formulation.h"
#include "Polynomial.h"
#include "Vector.h"

class FormulationLaplace: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;
};

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

#endif


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: change
Text-content-length: 3041
Text-content-md5: cd56dfbc7e737911f978a0aa90fde518
Text-content-sha1: 1be915dc3b7d252cd9d4e2b7dc39f21d639be741
Content-length: 3041

#include "FormulationProjection.h"

#include <cmath>

FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  // Vector to Project //
  f = &vectorToProject;

  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  baseGen = new TriEdgeBasis(1);

  basis     = baseGen->getBasis();
  basisSize = baseGen->getSize();
}

FormulationProjection::~FormulationProjection(void){
  delete baseGen;
}

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = phiVect(edgeI, jg(0), jg(1), jac);
    Vector<double> phiJ = phiVect(edgeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jg    = jac.map(gx[g], gy[g]);
    Vector<double> jPhiI = phiVect(equationI, jg(0), jg(1), jac);
  
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

Vector<double> FormulationProjection::phiVect(const int i, const double x, const double y,
				      const Jacobian& jac) const{
  const int j = (i + 1) % 3;
  const Vector<double> uv = jac.invMap(x, y);

  const double phi0 = nodePhi(i, uv(0), uv(1));
  const double phi1 = nodePhi(j, uv(0), uv(1));
  
  const Vector<double> gradPhi0 = gradNodePhi(i, jac);
  const Vector<double> gradPhi1 = gradNodePhi(j, jac);

  Vector<double> phi(2);
  phi(0) = (phi0 * gradPhi1(0)) - (phi1 * gradPhi0(0));
  phi(1) = (phi0 * gradPhi1(1)) - (phi1 * gradPhi0(1));

  return phi;
}

double FormulationProjection::nodePhi(const int i, const double x, const double y){
  switch(i){
  case 0: 
    return 1.0 - x - y;
    
  case 1: 
    return x;

  case 2: 
    return y;

  default: throw Exception("Unknown function");
  }
  
  return 0;
}

Vector<double> FormulationProjection::gradNodePhi(const int i, const Jacobian& jac){
  Vector<double> a(2);
  
  switch(i){
  case 0: 
    a(0) = -1.0;
    a(1) = -1.0;
    break;
    
  case 1: 
    a(0) = 1.0;
    a(1) = 0.0;
    break;
    
  case 2: 
    a(0) = 0.0;
    a(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(a);
}


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1046
Text-content-md5: 055c4b1f9e1292b859f45efa08a7d695
Text-content-sha1: 2844fa56553197fea2a2ce878bda903bdc223079
Content-length: 1046

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "Formulation.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriEdgeBasis.h"

class FormulationProjection: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriEdgeBasis*             baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;
  
  Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

 private:
  static double nodePhi(const int i, const double x, const double y);
  
  static Vector<double> gradNodePhi(const int i, const Jacobian& jac);
};


#endif


Revision-number: 12
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-04T16:05:52.644939Z
PROPS-END

Node-path: assembler/Dof.h
Node-kind: file
Node-action: change
Text-content-length: 2589
Text-content-md5: f7ca1b1bd967ba2bc7b3c45dc01fd92a
Text-content-sha1: 2bab1455ca2d92a1a6975069182a3367ce0b55b4
Content-length: 2589

#ifndef _DOF_H_
#define _DOF_H_

#include <string>

/**
   @class Dof
   @brief This class represents degrees of freedom (@c DOF)
   
   This class represents degrees of freedom (@c DOF).@n
   These are the terms that will be assembled in the system.

   A @c DOF is defined by a pair of to integers called (@c entity, @c type).@n
   By themselfs, these integers have no meaning.@n
   They just @em define a @c DOF.

   @note
   Note that users are not allowed to instanciate @c DOFs.@n
   This is the DofManager's responsability.
*/

class DofManager;

class Dof{
 private:
  int entity;
  int type;

  friend class DofManager;

 private:
  // Construction and destruction are not for the user responsablity
   Dof(const int entity, const int type);
  ~Dof(void);

 public:
  int getEntity(void) const;
  int getType(void) const;

  bool operator<(const Dof& other) const;
  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

  std::string toString(void) const;
};

/**
   @fn int Dof::getEntity(void) const
   @return Returns the associated @a entity of the @c DOF

   @fn int Dof::getType(void) const
   @return Returns the associated @a type of the @c DOF

   @fn bool Dof::operator<(const Dof& other) const
   @param other An other @c DOF to compare the current one
   @return Returns :
   @li @c true if the current @c DOF is @em smaller than @a other
   @li @c false otherwise

   @fn bool Dof::operator>(const Dof& other) const
   @param other An other @c DOF to compare the current one
   @return Returns :
   @li @c true if the current @c DOF is @em greater than @c other
   @li @c false otherwise
  
   @fn bool Dof::operator==(const Dof& other) const
   @param other An other @c DOF to compare the current one
   @return Returns :
   @li @c true if the current @c DOF is @em equal to @c other
   @li @c false otherwise

   @fn std::string Dof::toString(void) const
   @return Returns to corresponding @c DOF string
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Dof::~Dof(void){
}

inline int Dof::getEntity(void) const{
  return entity;
}

inline int Dof::getType(void) const{
  return type;
}

inline bool Dof::operator<(const Dof& other) const{
  return (entity < other.entity) ||
    ((entity == other.entity) && (type < other.type));
}

inline bool Dof::operator>(const Dof& other) const{
  return (entity > other.entity) ||
    ((entity == other.entity) && (type > other.type));
}

inline bool Dof::operator==(const Dof& other) const{
  return (entity == other.entity) && (type == other.type);
}

#endif


Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 77774
Text-content-md5: 4a4cc0f41e7ef07d8bb5e55623799fbe
Text-content-sha1: a5d6f836bdbb3ec719b3e351e148aade47ca64fe
Content-length: 77774

# Doxyfile 1.7.6.1

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = YES

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = NO

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = YES

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = NO

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = YES

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = NO

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = YES

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = NO

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to the 
# mathjax.org site, so you can quickly see the result without installing 
# MathJax, but it is strongly recommended to install a local copy of MathJax 
# before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. 
# Optionally an initial location of the external documentation 
# can be added for each tagfile. The format of a tag file without 
# this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths or 
# URLs. If a location is present for each tag, the installdox tool 
# does not have to be run to correct the links. 
# Note that each tag file must have a unique name 
# (where the name does NOT include the path) 
# If a tag file is not located in the directory in which doxygen 
# is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = YES

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = YES

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = YES

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = YES

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = svg

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Revision-number: 13
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-07T08:26:21.246761Z
PROPS-END

Node-path: assembler/Dof.h
Node-kind: file
Node-action: change
Text-content-length: 2589
Text-content-md5: a6ce5abbe545b45a709eec055214f7f4
Text-content-sha1: 4c5c5ee8d7257a6333b27119ee7f2b2566238684
Content-length: 2589

#ifndef _DOF_H_
#define _DOF_H_

#include <string>

/**
   @class Dof
   @brief This class represents degrees of freedom (@c DOF)
   
   This class represents degrees of freedom (@c DOF).@n
   These are the terms that will be assembled in the system.

   A @c DOF is defined by a pair of to integers called (@c entity, @c type).@n
   By themselfs, these integers have no meaning.@n
   They just @em define a @c DOF.

   @note
   Note that users are not allowed to instanciate @c DOFs.@n
   This is the DofManager's responsability.
*/

class DofManager;

class Dof{
 private:
  int entity;
  int type;

  friend class DofManager;

 private:
  // Construction and destruction are not for the user responsablity
   Dof(const int entity, const int type);
  ~Dof(void);

 public:
  int getEntity(void) const;
  int getType(void) const;

  bool operator<(const Dof& other) const;
  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

  std::string toString(void) const;
};

/**
   @fn int Dof::getEntity(void) const
   @return Returns the associated @a entity of the @c DOF

   @fn int Dof::getType(void) const
   @return Returns the associated @a type of the @c DOF

   @fn bool Dof::operator<(const Dof& other) const
   @param other An other @c DOF to compare the current one
   @return Returns :
   @li @c true if the current @c DOF is @em smaller than @c other
   @li @c false otherwise

   @fn bool Dof::operator>(const Dof& other) const
   @param other An other @c DOF to compare the current one
   @return Returns :
   @li @c true if the current @c DOF is @em greater than @c other
   @li @c false otherwise
  
   @fn bool Dof::operator==(const Dof& other) const
   @param other An other @c DOF to compare the current one
   @return Returns :
   @li @c true if the current @c DOF is @em equal to @c other
   @li @c false otherwise

   @fn std::string Dof::toString(void) const
   @return Returns to corresponding @c DOF string
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Dof::~Dof(void){
}

inline int Dof::getEntity(void) const{
  return entity;
}

inline int Dof::getType(void) const{
  return type;
}

inline bool Dof::operator<(const Dof& other) const{
  return (entity < other.entity) ||
    ((entity == other.entity) && (type < other.type));
}

inline bool Dof::operator>(const Dof& other) const{
  return (entity > other.entity) ||
    ((entity == other.entity) && (type > other.type));
}

inline bool Dof::operator==(const Dof& other) const{
  return (entity == other.entity) && (type == other.type);
}

#endif


Revision-number: 14
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-21T15:41:52.288459Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 1083
Text-content-md5: 71f1dc194785ae7df795aceb7bcd1290
Text-content-sha1: 46532e1f2f7a1e6b5af53174ea07ec928f686ecd
Content-length: 1083

cmake_minimum_required(VERSION 2.6)
project(SmallFem)

## Add Source Macro
macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)

## Look for Packages
include(FindPackageHandleStandardArgs)
find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)
find_package(Doxygen)

## Add Sources
add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
add_subdirectory(postprocessing)
add_subdirectory(solver)

## Add Main
list(APPEND sources Main.cpp)

## Include Path
include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)

## Build Documentation
if(DOXYGEN_FOUND)
  add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile)
endif(DOXYGEN_FOUND)

## Build
add_definitions(-pedantic -Wall)
add_executable(sf ${sources}) 

## Link
target_link_libraries(sf cblas lapack)

Node-path: assembler/Dof.h
Node-kind: file
Node-action: change
Text-content-length: 2576
Text-content-md5: 343213bce858a91dd10b88919a1bbe8c
Text-content-sha1: dcd938ca8d2b5861c88067a36f5d10ab997780d4
Content-length: 2576

#ifndef _DOF_H_
#define _DOF_H_

#include <string>

/**
   @class Dof
   @brief This class represents degrees of freedom (@c Dof)
   
   This class represents degrees of freedom (@c Dof).@n
   These are the terms that will be assembled in the system.

   A @c Dof is defined by a pair of to integers called (@c entity, @c type).@n
   By themselfs, these integers have no meaning.@n
   They just @em define a @c Dof.

   @note
   Note that users are not allowed to instanciate a @c Dof.@n
   This is the DofManager's responsability.
*/

class DofManager;

class Dof{
 private:
  int entity;
  int type;

  friend class DofManager;

 private:
  // Construction and destruction are not for the user responsablity
   Dof(const int entity, const int type);
  ~Dof(void);

 public:
  int getEntity(void) const;
  int getType(void) const;

  bool operator<(const Dof& other) const;
  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

  std::string toString(void) const;
};

/**
   @fn int Dof::getEntity(void) const
   @return Returns the associated @a entity of the @c Dof

   @fn int Dof::getType(void) const
   @return Returns the associated @a type of the @c Dof

   @fn bool Dof::operator<(const Dof& other) const
   @param other An other @c Dof to compare the current one
   @return Returns :
   @li @c true if the current @c Dof is @em smaller than @c other
   @li @c false otherwise

   @fn bool Dof::operator>(const Dof& other) const
   @param other An other @c Dof to compare the current one
   @return Returns :
   @li @c true if the current @c Dof is @em greater than @c other
   @li @c false otherwise
  
   @fn bool Dof::operator==(const Dof& other) const
   @param other An other @c Dof to compare the current one
   @return Returns :
   @li @c true if the current @c Dof is @em equal to @c other
   @li @c false otherwise

   @fn std::string Dof::toString(void) const
   @return Returns the Dof's string
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Dof::~Dof(void){
}

inline int Dof::getEntity(void) const{
  return entity;
}

inline int Dof::getType(void) const{
  return type;
}

inline bool Dof::operator<(const Dof& other) const{
  return (entity < other.entity) ||
    ((entity == other.entity) && (type < other.type));
}

inline bool Dof::operator>(const Dof& other) const{
  return (entity > other.entity) ||
    ((entity == other.entity) && (type > other.type));
}

inline bool Dof::operator==(const Dof& other) const{
  return (entity == other.entity) && (type == other.type);
}

#endif


Node-path: assembler/DofManager.h
Node-kind: file
Node-action: change
Text-content-length: 4372
Text-content-md5: 099e107fc655db9e099d493823159a5f
Text-content-sha1: b99051cc88d9b6abe1042709042edc557fb79940
Content-length: 4372

#ifndef _DOFMANAGER_H_
#define _DOFMANAGER_H_

#include <string>
#include <set>
#include <map>
#include <vector>

#include "GroupOfDof.h"

/**
   @class DofManager
   @brief This class manages the degrees freedom (@c Dof)
   
   This class manages the degrees freedom (@c Dof).@n

   It can map a @c Dof a @em global @em @c ID.
   Those @c IDs are handeld by the DofManager itself.@n

   It can also map a given @c Dof to the corresponding @em Entity in the Mesh.@n

   A DofManager can be instantiated from a list of @em Element%s.@n

   If a @em group of @c Dof got a special meaning 
   (@e e.g: members of the same element),
   a DofManager can instantiate (and map) GroupOfDof%s.

   @note
   A DofManager is the @em only @em one allowed to instatiate a @c Dof.@n
   It is also the @em only @em one allowed to instatiate a GroupOfDof.

   @warning
   Up to know, a @c Dof @em can't be @em deleted.@n
   It is also @em impossible to create a @em non @em Mesh @em Related @c Dof.

   @todo
   A more @em general DofManager, with non Mesh @c Dof, etc
*/

class DofManager{
 private:
  
  class DofComparator{
  public:
    bool operator()(const Dof* a, const Dof* b) const;
  };

  int nDof;
  int nextId;
  std::vector<Dof*>* dof;

  std::map<Dof*, int    , DofComparator>* globalId;
  std::map<Dof*, Entity*, DofComparator>* dofToEntityLookup;
  std::multimap<int, Dof*>* physical;

  std::vector<GroupOfDof*>* group;
  int nGroup;

  std::set<Dof*, DofComparator>* dofLookup;

 public:
   DofManager(const std::vector<Element*>& element);
  ~DofManager(void);

  int dofNumber(void) const;
  int groupNumber(void) const;

  const std::vector<Dof*>& getAllDofs(void) const;
  const std::multimap<int, Dof*>& getAllPhysicals(void) const;
  const std::vector<GroupOfDof*>& getAllGroups(void) const;

  int   getGlobalId(Dof& dof) const;
  Entity& getEntity(Dof& dof) const;

  std::string toString(void) const;

 private:
  void add(Element& element, int groupId);
  int  getNbDofFromElements(const std::vector<Element*>& element) const;
};


/**
   @fn DofManager::DofManager(const std::vector<Element*>& element)
   @param element A list of Element%s from which @c Dof%s will be instantiated
   @return Instantiate a new DofManager from the given list of Element%s

   @fn DofManager::~DofManager(void)
   @return Deletes the DofManager

   @fn int DofManager::dofNumber(void) const
   @return Returns the number of @c Dof mapped in the DofManager

   @fn int DofManager::groupNumber(void) const
   @return Returns the number of GroupOfDof mapped in the DofManager   

   @fn const std::vector<Dof*>& DofManager::getAllDofs(void) const
   @return Returns all the @c Dof%s in the DofManager 

   @fn const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const
   @return Returns a map between @e Physical @e @c IDs and @c Dof%s
   @warning This should be replaced with a method @em hiding the multimap
   @todo Replace with a method @em hiding the multimap

   @fn const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const
   @return Returns all the GroupOfDof%s in the DofManager

   @fn int DofManager::getGlobalId(Dof& dof) const
   @param dof The @c Dof from which we want the @em global @c ID
   @return Returns the @em global @em @c ID of the given @c Dof
 
   @fn Entity& DofManager::getEntity(Dof& dof) const
   @param dof The @c Dof from which we want the @em entity
   @return Returns the @em entity associated with the given @c Dof

   @fn std::string DofManager::toString(void) const
   @return Returns the DofManager's string
*/

//////////////////////
// Inline Functions //
//////////////////////

inline int DofManager::dofNumber(void) const{
  return nDof;
}

inline int DofManager::groupNumber(void) const{
  return nGroup;
}

inline const std::vector<Dof*>& DofManager::getAllDofs(void) const{
  return *dof;
}

inline const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const{
  return *physical;
}

inline const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const{
  return *group;
}

inline int DofManager::getGlobalId(Dof& dof) const{
  return globalId->find(&dof)->second;
}

inline Entity& DofManager::getEntity(Dof& dof) const{
  return *(dofToEntityLookup->find(&dof)->second);
}

inline bool DofManager::DofComparator::operator()(const Dof* a, const Dof* b) const{
  return *a < *b;
}

#endif


Node-path: basis/NodalSpace.h
Node-action: delete


Node-path: basis/EdgeSpace.cpp
Node-action: delete


Node-path: basis/FunctionalSpace.h
Node-action: delete


Node-path: basis/EdgeSpace.h
Node-action: delete


Node-path: basis/NodalSpace.cpp
Node-action: delete


Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 77775
Text-content-md5: 9e4937207eb6e3bb9a23edd415163929
Text-content-sha1: 91d0c69c942ecb1e04f16cbe6817040c7fafd51f
Content-length: 77775

# Doxyfile 1.7.6.1

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = YES

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = NO

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = YES

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = NO

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = YES

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = NO

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = YES

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = YES

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to the 
# mathjax.org site, so you can quickly see the result without installing 
# MathJax, but it is strongly recommended to install a local copy of MathJax 
# before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. 
# Optionally an initial location of the external documentation 
# can be added for each tagfile. The format of a tag file without 
# this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths or 
# URLs. If a location is present for each tag, the installdox tool 
# does not have to be run to correct the links. 
# Note that each tag file must have a unique name 
# (where the name does NOT include the path) 
# If a tag file is not located in the directory in which doxygen 
# is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = YES

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = YES

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = YES

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = YES

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = svg

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Revision-number: 15
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-21T17:25:47.508640Z
PROPS-END

Node-path: assembler/Dof.h
Node-kind: file
Node-action: change
Text-content-length: 2537
Text-content-md5: 03bc16a9e957b0201e9f11ef4ca05843
Text-content-sha1: 88cd2556ee34e93e834473a2e94481ed5741ce49
Content-length: 2537

#ifndef _DOF_H_
#define _DOF_H_

#include <string>

/**
   @class Dof
   @brief This class represents degrees of freedom (Dof)
   
   This class represents degrees of freedom (Dof).@n
   These are the terms that will be assembled in the system.

   A Dof is defined by a pair of to integers called (@c entity, @c type).@n
   By themselfs, these integers have no meaning.@n
   They just @em define a Dof.

   @note
   Note that users are not allowed to instanciate a Dof.@n
   This is the DofManager's responsability.
*/

class DofManager;

class Dof{
 private:
  int entity;
  int type;

  friend class DofManager;

 private:
  // Construction and destruction are not for the user responsablity
   Dof(const int entity, const int type);
  ~Dof(void);

 public:
  int getEntity(void) const;
  int getType(void) const;

  bool operator<(const Dof& other) const;
  bool operator>(const Dof& other) const;
  bool operator==(const Dof& other) const;

  std::string toString(void) const;
};

/**
   @fn int Dof::getEntity(void) const
   @return Returns the associated @a entity of the Dof

   @fn int Dof::getType(void) const
   @return Returns the associated @a type of the Dof

   @fn bool Dof::operator<(const Dof& other) const
   @param other An other Dof to compare the current one
   @return Returns :
   @li @c true if the current Dof is @em smaller than @c other
   @li @c false otherwise

   @fn bool Dof::operator>(const Dof& other) const
   @param other An other Dof to compare the current one
   @return Returns :
   @li @c true if the current Dof is @em greater than @c other
   @li @c false otherwise
  
   @fn bool Dof::operator==(const Dof& other) const
   @param other An other Dof to compare the current one
   @return Returns :
   @li @c true if the current Dof is @em equal to @c other
   @li @c false otherwise

   @fn std::string Dof::toString(void) const
   @return Returns the Dof's string
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Dof::~Dof(void){
}

inline int Dof::getEntity(void) const{
  return entity;
}

inline int Dof::getType(void) const{
  return type;
}

inline bool Dof::operator<(const Dof& other) const{
  return (entity < other.entity) ||
    ((entity == other.entity) && (type < other.type));
}

inline bool Dof::operator>(const Dof& other) const{
  return (entity > other.entity) ||
    ((entity == other.entity) && (type > other.type));
}

inline bool Dof::operator==(const Dof& other) const{
  return (entity == other.entity) && (type == other.type);
}

#endif


Node-path: assembler/DofManager.h
Node-kind: file
Node-action: change
Text-content-length: 4730
Text-content-md5: e496e067f83213485a90c55bc2db254a
Text-content-sha1: 8dcfa16b5d21f43279f8572830716ee8000a7adc
Content-length: 4730

#ifndef _DOFMANAGER_H_
#define _DOFMANAGER_H_

#include <string>
#include <set>
#include <map>
#include <vector>

#include "GroupOfDof.h"

/**
   @class DofManager
   @brief This class manages the degrees freedom (Dof)
   
   This class manages the degrees freedom (Dof).@n

   It can map a Dof a @em global @em @c ID.@n
   Those @c IDs are handeld by the DofManager itself.@n

   It can also map a given Dof to the corresponding @em Entity in the Mesh.@n

   A DofManager can be instantiated from a list of @em Element%s.@n

   If a @em group of Dof got a special meaning 
   (@e e.g: members of the same element),@n
   a DofManager can instantiate (and map) GroupOfDof%s.

   @note
   A DofManager is the @em only @em one allowed to instatiate a Dof.@n
   It is also the @em only @em one allowed to instatiate a GroupOfDof.

   @warning
   Up to know, a Dof @em can't be @em deleted.@n
   It is also @em impossible to create a @em non @em Mesh @em Related Dof.

   @todo
   A more @em general DofManager, with non Mesh Dof, etc
*/

/**
   @class DofManager::DofComparator
   @brief A private class of DofManager, which can compare two Dof%s

   A private class of DofManager, which can compare two Dof%s.
 */

class DofManager{
 private:
  
  class DofComparator{
  public:
    bool operator()(const Dof* a, const Dof* b) const;
  };

  int nDof;
  int nextId;
  std::vector<Dof*>* dof;

  std::map<Dof*, int    , DofComparator>* globalId;
  std::map<Dof*, Entity*, DofComparator>* dofToEntityLookup;
  std::multimap<int, Dof*>* physical;

  std::vector<GroupOfDof*>* group;
  int nGroup;

  std::set<Dof*, DofComparator>* dofLookup;

 public:
   DofManager(const std::vector<Element*>& element);
  ~DofManager(void);

  int dofNumber(void) const;
  int groupNumber(void) const;

  const std::vector<Dof*>& getAllDofs(void) const;
  const std::multimap<int, Dof*>& getAllPhysicals(void) const;
  const std::vector<GroupOfDof*>& getAllGroups(void) const;

  int   getGlobalId(Dof& dof) const;
  Entity& getEntity(Dof& dof) const;

  std::string toString(void) const;

 private:
  void add(Element& element, int groupId);
  int  getNbDofFromElements(const std::vector<Element*>& element) const;
};


/**
   @fn DofManager::DofManager(const std::vector<Element*>& element)
   @param element A list of Element%s from which Dof%s will be instantiated
   @return Instantiate a new DofManager from the given list of Element%s

   @fn DofManager::~DofManager(void)
   @return Deletes the DofManager

   @fn int DofManager::dofNumber(void) const
   @return Returns the number of Dof mapped in the DofManager

   @fn int DofManager::groupNumber(void) const
   @return Returns the number of GroupOfDof mapped in the DofManager   

   @fn const std::vector<Dof*>& DofManager::getAllDofs(void) const
   @return Returns all the Dof%s in the DofManager 

   @fn const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const
   @return Returns a map between @e Physical @e @c IDs and Dof%s
   @warning This should be replaced with a method @em hiding the multimap
   @todo Replace with a method @em hiding the multimap

   @fn const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const
   @return Returns all the GroupOfDof%s in the DofManager

   @fn int DofManager::getGlobalId(Dof& dof) const
   @param dof The Dof from which we want the @em global @c ID
   @return Returns the @em global @em @c ID of the given Dof
 
   @fn Entity& DofManager::getEntity(Dof& dof) const
   @param dof The Dof from which we want the @em entity
   @return Returns the @em entity associated with the given Dof

   @fn std::string DofManager::toString(void) const
   @return Returns the DofManager's string

   @fn bool DofManager::DofComparator::operator()(const Dof* a, const Dof* b) const
   @param a A Dof
   @param b Another Dof
   @return operator() is:
   @li @c true, if a is @em smaller than b  
   @li @c false, otherwise
}
*/

//////////////////////
// Inline Functions //
//////////////////////

inline int DofManager::dofNumber(void) const{
  return nDof;
}

inline int DofManager::groupNumber(void) const{
  return nGroup;
}

inline const std::vector<Dof*>& DofManager::getAllDofs(void) const{
  return *dof;
}

inline const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const{
  return *physical;
}

inline const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const{
  return *group;
}

inline int DofManager::getGlobalId(Dof& dof) const{
  return globalId->find(&dof)->second;
}

inline Entity& DofManager::getEntity(Dof& dof) const{
  return *(dofToEntityLookup->find(&dof)->second);
}

inline bool DofManager::DofComparator::operator()(const Dof* a, const Dof* b) const{
  return *a < *b;
}

#endif


Node-path: assembler/GroupOfDof.h
Node-kind: file
Node-action: change
Text-content-length: 2880
Text-content-md5: e4d40b924aef6b7c0d0d750ef42f904f
Text-content-sha1: 401477ee48d66d09d1af6a9a843cb52a7ff761bf
Content-length: 2880

#ifndef _GROUPOFDOF_H_
#define _GROUPOFDOF_H_

#include <vector>
#include "Dof.h"
#include "Element.h"
#include "Jacobian.h"

/**
   @class GroupOfDof
   @brief Handel a group of Dof%s with @em geometrical meaning

   This class handles a group of Dof%s with a @em geometrical meaning 
   (@e e.g: Dof%s that belongs to the same (finite) element).@n

   Every GroupOfDof got a @em Jacobian transformaion matrix, and Dof%s @em orientations.@n
   These parameters are related to a geometrical element.@n
   The Dof%s of the GroupOfDof are also related to this element.@n
   For instance, the degrees of freedom of a finite element are a GroupOfDof.@n

   Moreover, every GroupOfDof has a unique (for a given DofManager) @c ID.

   @warning
   This class should be completly private to the @em DofManager and/or the @em System.@n
   The user shall not be aware of geometry, when it comes to Dof.

   @todo
   Chang GroupOfDof to a private class for the DofManager and/or System.
*/


class DofManager;

class GroupOfDof{
 private:
  int id;

  std::vector<Dof*>* dof;
  const std::vector<int>* direction;
  int nDof;
  int nextDof;
  
  Jacobian* jac;
  friend class DofManager;

 private:
   GroupOfDof(int numberOfDof, int groupId);
  ~GroupOfDof(void);

  void add(Dof* dof);
  void jacobian(Element& element);
  void orientation(const std::vector<int>& orientation);

 public:
  int getId(void) const;
  int dofNumber(void) const;
  const std::vector<Dof*>& getAllDofs(void) const;
  const Jacobian& getJacobian(void) const;
  int getOrientation(const int dofId) const;
};


/**
   @fn int GroupOfDof::getId(void) const
   @return Returns the @c ID of this GroupOfDof

   @fn int GroupOfDof::dofNumber(void) const
   @return Returns the number of Dof in this GroupOfDof

   @fn const std::vector<Dof*>& GroupOfDof::getAllDofs(void) const
   @return Returns all the Dof%s in this GroupOfDof

   @fn const Jacobian& GroupOfDof::getJacobian(void) const;
   @return Returns the Jacobian associated to this GroupOfDof
   
   @fn int GroupOfDof::getOrientation(const int dofId) const;
   @param dofId The @em local @c ID of a Dof in the GroupOfDof
   @return Returns the orientation of a Dof (indentified by its @em local @c ID)
*/

//////////////////////
// Inline Functions //
//////////////////////

inline void GroupOfDof::jacobian(Element& element){
  jac = &(element.getJacobian());
}

inline void GroupOfDof::orientation(const std::vector<int>& orientation){
  direction = &orientation;
}

inline int GroupOfDof::getId(void) const{
  return id;
}

inline int GroupOfDof::dofNumber(void) const{
  return nDof;
}

inline const std::vector<Dof*>& GroupOfDof::getAllDofs(void) const{
  return *dof;
}

inline const Jacobian& GroupOfDof::getJacobian(void) const{
  return *jac;
}

inline int GroupOfDof::getOrientation(const int dofId) const{
  return (*direction)[dofId];
}

#endif


Node-path: assembler/System.h
Node-kind: file
Node-action: change
Text-content-length: 2344
Text-content-md5: 670267907c7449089939b95f217e4afd
Text-content-sha1: ec78e6732f4a25ecd70063403f9c9d8dd82ea454
Content-length: 2344

#ifndef _SYSTEM_H_
#define _SYSTEM_H_

#include "Matrix.h"
#include "Vector.h"
#include "Mesh.h"
#include "Jacobian.h"
#include "DofManager.h"
#include "Formulation.h"

/**
   @class System
   @brief This class assembles a linear system

   This class assembles the linear system, that comes from a Formulation and a list of Element%s.@n
  
   @warning
   Up to now, the assembly is done when the System is instantiated@n
   Also, we can @em only assemble Dof related to an Element@n

   @todo
   Assembly done by a specific method, not the constructor@n
   Assembly of @em non @em geometric Dof@n
   Maybe put the list of element on the formulation ? Or more abstract concept -- 'Problem' Class ?@n
   Get the solution vector instead of fixing elements value
 */

class System{
 private:
  Matrix* A;
  Vector<double>* n;
  int size;

  DofManager* dofM;
  const Formulation* formulation;

 public:
   System(const std::vector<Element*>& elements, 
	  const Formulation& formulation);
  ~System(void);

  Matrix& getMatrix(void) const;
  Vector<double>& getRHS(void) const;

  void fixBC(const int physicalId, const double value);
  void solve(void);
  
 private:
  void assemble(GroupOfDof& group);
};


/**
   @fn System::System(const std::vector<Element*>& elements, 
   const Formulation& formulation)
   @param elements A list of Element%s, giving the geomtry of the problem to solve
   @param formualtion A Formulation, giving the way to assemble the system
   @return A new @em assembled System
 
   @fn System::~System(void)
   @return Deletes the System

   @fn Matrix& System::getMatrix(void) const
   @return Returns the assembled matrix of the the linear system

   @fn Vector<double>& System::getRHS(void) const
   @return Returns the assembled Right Hand Side of the the linear system

   @fn void System::fixBC(const int physicalId, const double value)
   @param physicalId The physical @c ID on which the bondary condtion shall be imposed
   @param value The value of the bondary condition
   @return Fix a Boundary Condition on the linear system

   @fn void System::solve(void)
   @return Solves the linear system
*/

//////////////////////
// Inline Functions //
//////////////////////


inline Matrix& System::getMatrix(void) const{
  return *A;
}

inline Vector<double>& System::getRHS(void) const{
  return *n;
}

#endif


Revision-number: 16
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-21T22:09:46.114976Z
PROPS-END

Node-path: assembler/System.h
Node-kind: file
Node-action: change
Text-content-length: 2344
Text-content-md5: bdeae12f54f664eee816c1ba4a8442e9
Text-content-sha1: 0864d4e173e89fbc3358cdd2d52a475ce780bd3e
Content-length: 2344

#ifndef _SYSTEM_H_
#define _SYSTEM_H_

#include "Matrix.h"
#include "Vector.h"
#include "Mesh.h"
#include "Jacobian.h"
#include "DofManager.h"
#include "Formulation.h"

/**
   @class System
   @brief This class assembles a linear system

   This class assembles the linear system, that comes from a Formulation and a list of Element%s.@n
  
   @warning
   Up to now, the assembly is done when the System is instantiated@n
   Also, we can @em only assemble Dof related to an Element@n

   @todo
   Assembly done by a specific method, not the constructor@n
   Assembly of @em non @em geometric Dof@n
   Maybe put the list of element on the formulation ? Or more abstract concept -- 'Problem' Class ?@n
   Get the solution vector instead of fixing elements value
 */

class System{
 private:
  Matrix* A;
  Vector<double>* n;
  int size;

  DofManager* dofM;
  const Formulation* formulation;

 public:
   System(const std::vector<Element*>& elements, 
	  const Formulation& formulation);
  ~System(void);

  Matrix& getMatrix(void) const;
  Vector<double>& getRHS(void) const;

  void fixBC(const int physicalId, const double value);
  void solve(void);
  
 private:
  void assemble(GroupOfDof& group);
};


/**
   @fn System::System(const std::vector<Element*>& elements, 
   const Formulation& formulation)
   @param elements A list of Element%s, giving the geomtry of the problem to solve
   @param formulation A Formulation, giving the way to assemble the system
   @return A new @em assembled System
 
   @fn System::~System(void)
   @return Deletes the System

   @fn Matrix& System::getMatrix(void) const
   @return Returns the assembled matrix of the the linear system

   @fn Vector<double>& System::getRHS(void) const
   @return Returns the assembled Right Hand Side of the the linear system

   @fn void System::fixBC(const int physicalId, const double value)
   @param physicalId The physical @c ID on which the bondary condtion shall be imposed
   @param value The value of the bondary condition
   @return Fix a Boundary Condition on the linear system

   @fn void System::solve(void)
   @return Solves the linear system
*/

//////////////////////
// Inline Functions //
//////////////////////


inline Matrix& System::getMatrix(void) const{
  return *A;
}

inline Vector<double>& System::getRHS(void) const{
  return *n;
}

#endif


Node-path: basis/Basis.h
Node-kind: file
Node-action: change
Text-content-length: 2294
Text-content-md5: 22f5d682900f10547bd62d7da2d67cde
Text-content-sha1: 2a59bca2bb74747f6fe91de50c8708e1d94770d2
Content-length: 2294

#ifndef _BASIS_H_
#define _BASIS_H_

/**
   @class Basis
   @brief Mother class of all Basis

   This class is the @em mother (by @em inheritence) of all Basis.@n

   A Basis may be of @em two types:
   @li Polynomial, for @em scalar basis
   @li Vector<Polynomial>, for @em vectorial basis@n

   A Basis is @em set of @em linearly @em independent Polynomial%s (or Vector%s of Polynomial%s).@n
 */

template<class T>
class Basis{
 protected:
  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

  T* basis;

 public:
  ~Basis(void);
  
  int getOrder(void) const;
  int getType(void) const;
  int getSize(void) const;
  int getNodeNbr(void) const;
  int getDim(void) const;

  const T* getBasis(void) const;

 protected:
  Basis(void);
};

/**
   @fn int Basis<>::getOrder(void) const
   @return Returns the @em polynomial @em order of the Basis

   @fn int Basis<>::getType(void) const
   @return Returns the @em type of the Basis:
   @li 1 for 1-form
   @li 2 for 2-form
   @li 3 for 3-form

   @todo Check if the 'form numbering is good'
   
   @fn int Basis<>::getSize(void) const
   @return Returns the number of Polynomial%s 
   (or Vector%s of Polynomial%s) in the Basis

   @fn int Basis<>::getNodeNbr(void) const
   @return Returns the node number of 
   the @em geometric @em reference @em element
 
   @fn int Basis<>::getDim(void) const
   @return Returns the @em dimension (1D, 2D or 3D) of the Basis

   @fn const T* Basis<>::getBasis(void) const
   @return Returns the Polynomial%s 
   (or Vector%s of Polynomial%s) of the Basis
*/

//////////////////////
// In .h Functions  //
//////////////////////

template<class T>
Basis<T>::Basis(void){
}

template<class T>
Basis<T>::~Basis(void){
  delete[] basis;
}

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline int Basis<T>::getOrder(void) const{
  return order;
}

template<class T>
inline int Basis<T>::getType(void) const{
  return type;
}

template<class T>
inline int Basis<T>::getSize(void) const{
  return size;
}

template<class T>
inline int Basis<T>::getNodeNbr(void) const{
  return nodeNbr;
}

template<class T>
inline int Basis<T>::getDim(void) const{
  return dim;
}

template<class T>
inline const T* Basis<T>::getBasis(void) const{
  return basis;
}

#endif


Node-path: basis/QuadEdgeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 769
Text-content-md5: 44c0b2fe970007ac6bb9ef8cbdab33b6
Text-content-sha1: f8598723784d0e4f73c0ed1c8d2e50cf1c62ab08
Content-length: 769

#ifndef _QUADEDGEBASIS_H_
#define _QUADEDGEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class QuadEdgeBasis
   @brief A Edge-Basis for Quads
   
   This class can instantiate an Edge-Based Basis 
   (high or low order) for Quads.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr</a>  
   Basis for @em high @em order Polynomial%s generation.
 */

class QuadEdgeBasis: public Basis<Vector<Polynomial> >{
 public:
   QuadEdgeBasis(const int order);
};

/**
   @fn QuadEdgeBasis::QuadEdgeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Edge-Basis for Quads of the given order

   @fn getSize(void)
   @copydoc int Basis<>::getSize(void) const
 */

#endif


Node-path: formulation/Formulation.h
Node-kind: file
Node-action: change
Text-content-length: 419
Text-content-md5: 7613e3d8c0e36cb445fe1cf4230b8ed0
Text-content-sha1: e71ab52628d57720bcd25baf3725340eca78dcd1
Content-length: 419

#ifndef _FORMULATION_H_
#define _FORMULATION_H_

#include "GroupOfDof.h"

class Formulation{
 public:
  virtual ~Formulation(void);
  
  virtual double weak(const int entityI, const int entityJ,
		      const GroupOfDof& god) const = 0;
  
  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const = 0;
  
  virtual    int type(void) const = 0;
};

inline Formulation::~Formulation(void){
}

#endif


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1246
Text-content-md5: 41b4b8ee17fe966f5af8c393d0c51c13
Text-content-sha1: 84baf643d9150d31dfe2b8c309d448f31d52c8b0
Content-length: 1246

#include "FormulationLaplace.h"
#include <cmath>

FormulationLaplace::FormulationLaplace(void){
  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  // Generate Basis
  base = new TriNodeBasis(1);  
  const Polynomial* basis = base->getBasis();

  // Take gradient
  basisSize = base->getSize();  
  gradBasis = new Vector<Polynomial> [basisSize];

  for(int i = 0; i < basisSize; i++)
    gradBasis[i] = basis[i].gradient();
}

FormulationLaplace::~FormulationLaplace(void){
  delete[] gradBasis;
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = jac.grad(gradBasis[nodeI].at(jg(0), jg(1), 0));
    Vector<double> phiJ = jac.grad(gradBasis[nodeJ].at(jg(0), jg(1), 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1040
Text-content-md5: 1ec58ddb4f40d1e42e4e0653e31f25e1
Text-content-sha1: 9a52e1217e8520cc37e1a2581b9241668a4b1643
Content-length: 1040

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "FormulationScalar.h"
#include "Polynomial.h"
#include "Vector.h"
#include "TriNodeBasis.h"

class FormulationLaplace: public FormulationScalar{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNodeBasis*       base;
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual int type(void) const;

  virtual Basis<Polynomial>& getBasis(void) const; 
};

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline int FormulationLaplace::type(void) const{
  return 0;
}

inline Basis<Polynomial>& FormulationLaplace::getBasis(void) const{
  return *base;
}

#endif


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1149
Text-content-md5: 4651e6c8fa371c146fb8f897158c2d05
Text-content-sha1: 7ce3d514715a697a3c48eb9fa924d0ace595a399
Content-length: 1149

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "Formulation.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriEdgeBasis.h"

class FormulationProjection: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriEdgeBasis*             baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual    int type(void) const;
  
  Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

 private:
  static double nodePhi(const int i, const double x, const double y);
  
  static Vector<double> gradNodePhi(const int i, const Jacobian& jac);
};

inline int FormulationProjection::type(void) const{
  return 0;
}


#endif


Revision-number: 17
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-22T10:22:51.740045Z
PROPS-END

Node-path: assembler/DofManager.h
Node-kind: file
Node-action: change
Text-content-length: 4726
Text-content-md5: 25e5d7cc3835b18f9b9540e5117ea5ef
Text-content-sha1: 36339a4c88b0ece3cdc067d263b14d42b02cee51
Content-length: 4726

#ifndef _DOFMANAGER_H_
#define _DOFMANAGER_H_

#include <string>
#include <set>
#include <map>
#include <vector>

#include "GroupOfDof.h"

/**
   @class DofManager
   @brief This class manages the degrees freedom (Dof)
   
   This class manages the degrees freedom (Dof).@n

   It can map a Dof a @em global @c ID.@n
   Those @c IDs are handeld by the DofManager itself.@n

   It can also map a given Dof to the corresponding @em Entity in the Mesh.@n

   A DofManager can be instantiated from a list of @em Element%s.@n

   If a @em group of Dof got a special meaning 
   (@e e.g: members of the same element),@n
   a DofManager can instantiate (and map) GroupOfDof%s.

   @note
   A DofManager is the @em only @em one allowed to instatiate a Dof.@n
   It is also the @em only @em one allowed to instatiate a GroupOfDof.

   @warning
   Up to know, a Dof @em can't be @em deleted.@n
   It is also @em impossible to create a @em non @em Mesh @em Related Dof.

   @todo
   A more @em general DofManager, with non Mesh Dof, etc
*/

/**
   @class DofManager::DofComparator
   @brief A private class of DofManager, which can compare two Dof%s

   A private class of DofManager, which can compare two Dof%s.
 */

class DofManager{
 private:
  
  class DofComparator{
  public:
    bool operator()(const Dof* a, const Dof* b) const;
  };

  int nDof;
  int nextId;
  std::vector<Dof*>* dof;

  std::map<Dof*, int    , DofComparator>* globalId;
  std::map<Dof*, Entity*, DofComparator>* dofToEntityLookup;
  std::multimap<int, Dof*>* physical;

  std::vector<GroupOfDof*>* group;
  int nGroup;

  std::set<Dof*, DofComparator>* dofLookup;

 public:
   DofManager(const std::vector<Element*>& element);
  ~DofManager(void);

  int dofNumber(void) const;
  int groupNumber(void) const;

  const std::vector<Dof*>& getAllDofs(void) const;
  const std::multimap<int, Dof*>& getAllPhysicals(void) const;
  const std::vector<GroupOfDof*>& getAllGroups(void) const;

  int   getGlobalId(Dof& dof) const;
  Entity& getEntity(Dof& dof) const;

  std::string toString(void) const;

 private:
  void add(Element& element, int groupId);
  int  getNbDofFromElements(const std::vector<Element*>& element) const;
};


/**
   @fn DofManager::DofManager(const std::vector<Element*>& element)
   @param element A list of Element%s from which Dof%s will be instantiated
   @return Instantiate a new DofManager from the given list of Element%s

   @fn DofManager::~DofManager(void)
   @return Deletes the DofManager

   @fn int DofManager::dofNumber(void) const
   @return Returns the number of Dof mapped in the DofManager

   @fn int DofManager::groupNumber(void) const
   @return Returns the number of GroupOfDof mapped in the DofManager   

   @fn const std::vector<Dof*>& DofManager::getAllDofs(void) const
   @return Returns all the Dof%s in the DofManager 

   @fn const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const
   @return Returns a map between @e Physical @e @c IDs and Dof%s
   @warning This should be replaced with a method @em hiding the multimap
   @todo Replace with a method @em hiding the multimap

   @fn const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const
   @return Returns all the GroupOfDof%s in the DofManager

   @fn int DofManager::getGlobalId(Dof& dof) const
   @param dof The Dof from which we want the @em global @c ID
   @return Returns the @em global @em @c ID of the given Dof
 
   @fn Entity& DofManager::getEntity(Dof& dof) const
   @param dof The Dof from which we want the @em entity
   @return Returns the @em entity associated with the given Dof

   @fn std::string DofManager::toString(void) const
   @return Returns the DofManager's string

   @fn bool DofManager::DofComparator::operator()(const Dof* a, const Dof* b) const
   @param a A Dof
   @param b Another Dof
   @return operator() is:
   @li @c true, if a is @em smaller than b  
   @li @c false, otherwise
}
*/

//////////////////////
// Inline Functions //
//////////////////////

inline int DofManager::dofNumber(void) const{
  return nDof;
}

inline int DofManager::groupNumber(void) const{
  return nGroup;
}

inline const std::vector<Dof*>& DofManager::getAllDofs(void) const{
  return *dof;
}

inline const std::multimap<int, Dof*>& DofManager::getAllPhysicals(void) const{
  return *physical;
}

inline const std::vector<GroupOfDof*>& DofManager::getAllGroups(void) const{
  return *group;
}

inline int DofManager::getGlobalId(Dof& dof) const{
  return globalId->find(&dof)->second;
}

inline Entity& DofManager::getEntity(Dof& dof) const{
  return *(dofToEntityLookup->find(&dof)->second);
}

inline bool DofManager::DofComparator::operator()(const Dof* a, const Dof* b) const{
  return *a < *b;
}

#endif


Node-path: basis/Basis.h
Node-kind: file
Node-action: change
Text-content-length: 2294
Text-content-md5: 34f68fbf88ad999aa802f8e240d740b3
Text-content-sha1: d36e71fd59acd25eb161952c91c7232b3f4d0e26
Content-length: 2294

#ifndef _BASIS_H_
#define _BASIS_H_

/**
   @class Basis
   @brief Mother class of all Basis

   This class is the @em mother (by @em inheritence) of all Basis.@n

   A Basis may be of @em two types:
   @li Polynomial, for @em scalar basis
   @li Vector<Polynomial>, for @em vectorial basis@n

   A Basis is @em set of @em linearly @em independent Polynomial%s (or Vector%s of Polynomial%s).@n
 */

template<class T>
class Basis{
 protected:
  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

  T* basis;

 public:
  ~Basis(void);
  
  int getOrder(void) const;
  int getType(void) const;
  int getSize(void) const;
  int getNodeNbr(void) const;
  int getDim(void) const;

  const T* getBasis(void) const;

 protected:
  Basis(void);
};

/**
   @fn int Basis<>::getOrder(void) const
   @return Returns the @em polynomial @em order of the Basis

   @fn int Basis<>::getType(void) const
   @return Returns the @em type of the Basis:
   @li 1 for 1-form
   @li 2 for 2-form
   @li 3 for 3-form

   @todo Check if the 'form numbering' is good
   
   @fn int Basis<>::getSize(void) const
   @return Returns the number of Polynomial%s 
   (or Vector%s of Polynomial%s) in the Basis

   @fn int Basis<>::getNodeNbr(void) const
   @return Returns the node number of 
   the @em geometric @em reference @em element
 
   @fn int Basis<>::getDim(void) const
   @return Returns the @em dimension (1D, 2D or 3D) of the Basis

   @fn const T* Basis<>::getBasis(void) const
   @return Returns the Polynomial%s 
   (or Vector%s of Polynomial%s) of the Basis
*/

//////////////////////
// In .h Functions  //
//////////////////////

template<class T>
Basis<T>::Basis(void){
}

template<class T>
Basis<T>::~Basis(void){
  delete[] basis;
}

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline int Basis<T>::getOrder(void) const{
  return order;
}

template<class T>
inline int Basis<T>::getType(void) const{
  return type;
}

template<class T>
inline int Basis<T>::getSize(void) const{
  return size;
}

template<class T>
inline int Basis<T>::getNodeNbr(void) const{
  return nodeNbr;
}

template<class T>
inline int Basis<T>::getDim(void) const{
  return dim;
}

template<class T>
inline const T* Basis<T>::getBasis(void) const{
  return basis;
}

#endif


Node-path: basis/QuadEdgeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 779
Text-content-md5: 1e4f56e51188ba7f29533786f6e46005
Text-content-sha1: de6e15aceae57d4c27ace42122781a697821e966
Content-length: 779

#ifndef _QUADEDGEBASIS_H_
#define _QUADEDGEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class QuadEdgeBasis
   @brief An Edge-Basis for Quads
   @extends Basis
 
   This class can instantiate an Edge-Based Basis 
   (high or low order) for Quads.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n

   @note
   This is a Basis of Vector%s of Polynomial%s
 */

class QuadEdgeBasis: public Basis<Vector<Polynomial> >{
 public:
   QuadEdgeBasis(const int order);
};

/**
   @fn QuadEdgeBasis::QuadEdgeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Edge-Basis for Quads of the given order
*/

#endif


Node-path: basis/QuadNodeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 736
Text-content-md5: 013b32b4fe56ae9df797076b3bcfba01
Text-content-sha1: dc489da3615fd71b13fef3a96351447ced043e60
Content-length: 736

#ifndef _QUADNODEBASIS_H_
#define _QUADNODEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"

/**
   @class QuadNodeBasis
   @brief A Node-Basis for Quads
   @extends Basis
 
   This class can instantiate a Node-Based Basis 
   (high or low order) for Quads.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n

   @note
   This is a Basis of Polynomial%s
 */

class QuadNodeBasis: public Basis<Polynomial>{
 public:
   QuadNodeBasis(const int order);
};

/**
   @fn QuadNodeBasis::QuadNodeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Node-Basis for Quads of the given order
*/

#endif


Node-path: basis/TriEdgeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 782
Text-content-md5: 91289c7174f3e47f6aeefd416ca0d190
Text-content-sha1: 9371505dac78f29e77af84ef62e3d2e3f7f57e82
Content-length: 782

#ifndef _TRIEDGEBASIS_H_
#define _TRIEDGEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class TriEdgeBasis
   @brief An Edge-Basis for Triangles
   @extends Basis
 
   This class can instantiate an Edge-Based Basis 
   (high or low order) for Triangles.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n
 
   @note
   This is a Basis of Vector%s Polynomial%s
*/

class TriEdgeBasis: public Basis<Vector<Polynomial> >{
 public:
   TriEdgeBasis(const int order);
};


/**
   @fn TriEdgeBasis::TriEdgeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Edge-Basis for Triangles of the given order
*/

#endif


Node-path: basis/TriNodeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 741
Text-content-md5: e30d2a9310591884c68b40759f5db0e3
Text-content-sha1: fbd7637b37d1b190855fa38398f571efd18d8135
Content-length: 741

#ifndef _TRINODEBASIS_H_
#define _TRINODEBASIS_H_

#include "Basis.h"
#include "Polynomial.h"

/**
   @class TriNodeBasis
   @brief A Node-Basis for Triangles
   @extends Basis
 
   This class can instantiate a Node-Based Basis 
   (high or low order) for Triangles.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n

   @note
   This is a Basis of Polynomial%s
 */

class TriNodeBasis: public Basis<Polynomial>{
 public:
   TriNodeBasis(const int order);
};

/**
   @fn TriNodeBasis::TriNodeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Node-Basis for Triangles of the given order
*/

#endif


Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 78769
Text-content-md5: d5e7d77f63bd43ffabfac0b7b5fce37e
Text-content-sha1: f55b3525e11addd9321349d276708698169621a4
Content-length: 78769

# Doxyfile 1.8.0

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = YES

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all 
# comments according to the Markdown format, which allows for more readable 
# documentation. See http://daringfireball.net/projects/markdown/ for details. 
# The output of markdown processing is further processed by doxygen, so you 
# can mix doxygen, HTML, and XML commands with Markdown formatting. 
# Disable only in case of backward compatibilities issues.

MARKDOWN_SUPPORT       = YES

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal
# scope will be included in the documentation.

EXTRACT_PACKAGE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = YES

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = YES

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = NO

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = YES

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = NO

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = YES

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = YES

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you may also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to 
# the MathJax Content Delivery Network so you can quickly see the result without 
# installing MathJax.  However, it is strongly recommended to install a local 
# copy of MathJax from http://www.mathjax.org before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. For each 
# tag file the location of the external documentation should be added. The 
# format of a tag file without this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths 
# or URLs. Note that each tag file must have a unique name (where the name does 
# NOT include the path). If a tag file is not located in the directory in which 
# doxygen is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = YES

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = YES

# If the UML_LOOK tag is enabled, the fields and methods are shown inside 
# the class node. If there are many fields or methods and many nodes the 
# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS 
# threshold limits the number of items for each type to make the size more 
# managable. Set this to 0 for no limit. Note that the threshold may be 
# exceeded by 50% before the limit is enforced.

UML_LIMIT_NUM_FIELDS   = 10

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = YES

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = YES

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = svg

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Revision-number: 18
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-22T12:56:52.534646Z
PROPS-END

Node-path: formulation/FormulationScalar.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 439
Text-content-md5: 97401dfc894c083c4bc90674ef41a0a0
Text-content-sha1: a864fca5016b9f64a32f6e8168621146dfcbf0f6
Content-length: 449

PROPS-END
#ifndef _FORMULATIONSCALAR_H_
#define _FORMULATIONSCALAR_H_

#include "Formulation.h"
#include "Basis.h"
#include "Polynomial.h"

class FormulationScalar: public Formulation{
 public:
  virtual ~FormulationScalar(void);

  virtual int type(void) const;

  virtual Basis<Polynomial>& getBasis(void) const = 0; 
};

inline FormulationScalar::~FormulationScalar(void){
}

inline int FormulationScalar::type(void) const{
  return 0;
}

#endif


Revision-number: 19
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-22T17:12:56.502708Z
PROPS-END

Node-path: basis/Basis.h
Node-kind: file
Node-action: change
Text-content-length: 2352
Text-content-md5: c874f4ca18ffd087f7376d2833629d34
Text-content-sha1: 2ed2323caf65186ce60706ebc07c12e0c57d7ed9
Content-length: 2352

#ifndef _BASIS_H_
#define _BASIS_H_

/**
   @class Basis
   @brief Mother class of all Basis

   This class is the @em mother (by @em inheritence) of all Basis.@n

   A Basis may be of @em two types:
   @li Polynomial, for @em scalar basis
   @li Vector<Polynomial>, for @em vectorial basis@n

   A Basis is @em set of @em linearly @em independent Polynomial%s (or Vector%s of Polynomial%s).@n
 */

template<class T>
class Basis{
 protected:
  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

  T* basis;

 public:
  ~Basis(void);
  
  int getOrder(void) const;
  int getType(void) const;
  int getSize(void) const;
  int getNodeNbr(void) const;
  int getDim(void) const;

  const T* getBasis(void) const;

 protected:
  Basis(void);
};

/**
   @fn Basis::~Basis(void)
   @return Deletes this Basis

   @fn int Basis<>::getOrder(void) const
   @return Returns the @em polynomial @em order of the Basis

   @fn int Basis<>::getType(void) const
   @return Returns the @em type of the Basis:
   @li 1 for 1-form
   @li 2 for 2-form
   @li 3 for 3-form

   @todo Check if the 'form numbering' is good
   
   @fn int Basis<>::getSize(void) const
   @return Returns the number of Polynomial%s 
   (or Vector%s of Polynomial%s) in the Basis

   @fn int Basis<>::getNodeNbr(void) const
   @return Returns the node number of 
   the @em geometric @em reference @em element
 
   @fn int Basis<>::getDim(void) const
   @return Returns the @em dimension (1D, 2D or 3D) of the Basis

   @fn const T* Basis<>::getBasis(void) const
   @return Returns the Polynomial%s 
   (or Vector%s of Polynomial%s) of the Basis
*/

//////////////////////
// In .h Functions  //
//////////////////////

template<class T>
Basis<T>::Basis(void){
}

template<class T>
Basis<T>::~Basis(void){
  delete[] basis;
}

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline int Basis<T>::getOrder(void) const{
  return order;
}

template<class T>
inline int Basis<T>::getType(void) const{
  return type;
}

template<class T>
inline int Basis<T>::getSize(void) const{
  return size;
}

template<class T>
inline int Basis<T>::getNodeNbr(void) const{
  return nodeNbr;
}

template<class T>
inline int Basis<T>::getDim(void) const{
  return dim;
}

template<class T>
inline const T* Basis<T>::getBasis(void) const{
  return basis;
}

#endif


Node-path: common/Exception.cpp
Node-kind: file
Node-action: change
Text-content-length: 204
Text-content-md5: b050b826d0d8af872437ad130e191358
Text-content-sha1: cd430c4a3006167523707f1159dbfbae4dae71ba
Content-length: 204

#include "Exception.h"

Exception::Exception(const std::string cause){
  why = cause;
}

Exception::~Exception(void) throw(){
}
  
const char* Exception::what(void) const throw(){
  return why.c_str();
}


Node-path: common/Exception.h
Node-kind: file
Node-action: change
Text-content-length: 895
Text-content-md5: 08afbd6f213bf2ec8e1ac8b91ae03add
Text-content-sha1: e1bd74482a856a7cebfaf0c3c4f1de5b9a9baf5f
Content-length: 895

#ifndef _EXCEPTION_H_
#define _EXCEPTION_H_

#include <string>
#include <exception>

/**
   @class Exception
   @brief A general class for exceptions

   Exception is a general class for exceptions.@n

   An Exception is instantiated with a @em string.@n
   This string is used as a @em description 
   of the @em cause of the exception.
 */

class Exception: public std::exception{
 protected:
  std::string why;
  
 public:
  Exception(const std::string cause);
  virtual ~Exception(void) throw();
  virtual const char* what(void) const throw();
};

/**
   @fn Exception::Exception(const std::string cause)
   @param cause A string discribing the @em cause of the exception
   @return Instantiates a new Exception

   @fn Exception::~Exception(void)
   @return Deletes the Exception

   @fn const char* Exception::what(void) const
   @return Returns the @em cause of the exception
 */

#endif


Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 78768
Text-content-md5: 7209184f99724c684420836ee91ab65c
Text-content-sha1: 470e668c00adaad8a40d6ddfad930524885c0e09
Content-length: 78768

# Doxyfile 1.8.0

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = YES

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all 
# comments according to the Markdown format, which allows for more readable 
# documentation. See http://daringfireball.net/projects/markdown/ for details. 
# The output of markdown processing is further processed by doxygen, so you 
# can mix doxygen, HTML, and XML commands with Markdown formatting. 
# Disable only in case of backward compatibilities issues.

MARKDOWN_SUPPORT       = YES

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal
# scope will be included in the documentation.

EXTRACT_PACKAGE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = YES

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = YES

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = NO

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = NO

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = NO

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = YES

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = YES

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you may also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to 
# the MathJax Content Delivery Network so you can quickly see the result without 
# installing MathJax.  However, it is strongly recommended to install a local 
# copy of MathJax from http://www.mathjax.org before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. For each 
# tag file the location of the external documentation should be added. The 
# format of a tag file without this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths 
# or URLs. Note that each tag file must have a unique name (where the name does 
# NOT include the path). If a tag file is not located in the directory in which 
# doxygen is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = YES

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = YES

# If the UML_LOOK tag is enabled, the fields and methods are shown inside 
# the class node. If there are many fields or methods and many nodes the 
# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS 
# threshold limits the number of items for each type to make the size more 
# managable. Set this to 0 for no limit. Note that the threshold may be 
# exceeded by 50% before the limit is enforced.

UML_LIMIT_NUM_FIELDS   = 10

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = YES

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = YES

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = svg

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Node-path: formulation/Formulation.h
Node-kind: file
Node-action: change
Text-content-length: 1803
Text-content-md5: 9283ce73d5279729450b924ffa9aa7ff
Text-content-sha1: 39f09fcdecfb7f7031d4bb961b3cb5dcbf41e4bf
Content-length: 1803

#ifndef _FORMULATION_H_
#define _FORMULATION_H_

#include "GroupOfDof.h"

/**
   @interface Formulation
   @brief Base interface of a finite element formulation

   This is the base interface of a finite element formulation.@n

   A Formulation is defined by a @em bilinear @em weak formulation,
   and a @em right @em hand @em side.
   
   @warning
   A formulation may accomodate @em only @em one basis.@n
   A formulation is defined @em only on @em GroupOfDof%s.


   @todo
   Allow multiple basis within a formulation, and of multiple type@n
   Add quadrature laws as a paramaeter of a Formulation@n
   Remove dependance on GroupOfDof%s
 */

class Formulation{
 public:
  virtual ~Formulation(void);
  
  virtual double weak(const int entityI, const int entityJ,
		      const GroupOfDof& god) const = 0;
  
  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const = 0;
  
  virtual    int type(void) const = 0;
};


/**
   @fn double Formulation::weak
   @param entityI The @em first index of a formulation term 
   @param entityJ The @em second index of the formulation term
   @param god The @em GroupOfDof associated with the formulation term   
   @return The value of the given formulation term

   @fn double Formulation::rhs
   @param equationI The @em ith equation of the formulation
   @param god The @em GroupOfDof associated 
   with the @em ith  equation of the formulation
   @return The value of the @em ith equation Right Hand Side

   @fn int Formulation::type
   @return The type of the formulation:
   @li 0 for @em scalar formulations
   @li 1 for @em vectorial formulations
   @warning
   This should desapear from the interface
   
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Formulation::~Formulation(void){
}

#endif


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1150
Text-content-md5: e48ac7043a898ead691aeab3204f4fae
Text-content-sha1: 6b388763baf95d243134661553f024d3c3de2d21
Content-length: 1150

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "FormulationScalar.h"
#include "Polynomial.h"
#include "Vector.h"
#include "TriNodeBasis.h"

/**
   @class FormulationLaplace
   @brief Formulation for the Laplace problem

   Scalar Formulation for the @em Laplace problem.
 */

class FormulationLaplace: public FormulationScalar{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNodeBasis*       base;
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Basis<Polynomial>& getBasis(void) const; 
};


//////////////////////
// Inline Functions //
//////////////////////

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline Basis<Polynomial>& FormulationLaplace::getBasis(void) const{
  return *base;
}

#endif


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1389
Text-content-md5: 14f965dcab40fa34b46639bbab264661
Text-content-sha1: e458af00a39271214fb4db1e645d98955546dc9f
Content-length: 1389

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "Formulation.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriEdgeBasis.h"

/**
   @class FormulationProjection
   @brief Formulation for the Projection problem

   Vectorial Formulation for the @em Projection problem.

   @todo
   Put this class as a FormulationVector@n
   Setup all the automatic Basis stuff
 */

class FormulationProjection: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriEdgeBasis*             baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual    int type(void) const;
  
  Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

 private:
  static double nodePhi(const int i, const double x, const double y);
  
  static Vector<double> gradNodePhi(const int i, const Jacobian& jac);
};

inline int FormulationProjection::type(void) const{
  return 0;
}


#endif


Node-path: formulation/FormulationScalar.h
Node-kind: file
Node-action: change
Text-content-length: 909
Text-content-md5: c0d64440a6699ae42f2f652b0e39ce88
Text-content-sha1: 3527d41c19934e7bc3d39fd93938da140fdc116c
Content-length: 909

#ifndef _FORMULATIONSCALAR_H_
#define _FORMULATIONSCALAR_H_

#include "Formulation.h"
#include "Basis.h"
#include "Polynomial.h"

/**
   @interface FormulationScalar
   @brief Interface for Scalar Formulation%s

   This is an interface for @em Scalar Formulation%s.@n

   This interface @em adds the ability to access the Basis,
   used by the scalar formulation.

   @warning
   This should desapear for something more flexible
 */

class FormulationScalar: public Formulation{
 public:
  virtual ~FormulationScalar(void);

  virtual int type(void) const;

  virtual Basis<Polynomial>& getBasis(void) const = 0; 
};

/**
   @fn FormulationScalar::getBasis
   @return Returns the Basis used by the Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline FormulationScalar::~FormulationScalar(void){
}

inline int FormulationScalar::type(void) const{
  return 0;
}

#endif


Node-path: formulation/FormulationVector.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 947
Text-content-md5: 0afd6f7164e25fb923788b9066ff1816
Text-content-sha1: d54862e16a507515291a4f556aebb59b1a1c2ce6
Content-length: 957

PROPS-END
#ifndef _FORMULATIONVECTOR_H_
#define _FORMULATIONVECTOR_H_

#include "Formulation.h"
#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @interface FormulationVector
   @brief Interface for Vectorial Formulation%s

   This is an interface for @em Vectorial Formulation%s.@n

   This interface @em adds the ability to access the Basis,
   used by the vectorial formulation.

   @warning
   This should desapear for something more flexible
 */

class FormulationVector: public Formulation{
 public:
  virtual ~FormulationVector(void);

  virtual int type(void) const;

  virtual Basis<Vector<Polynomial> >& getBasis(void) const = 0; 
};

/**
   @fn FormulationVector::getBasis
   @return Returns the Basis used by the Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline FormulationVector::~FormulationVector(void){
}

inline int FormulationVector::type(void) const{
  return 1;
}

#endif


Node-path: geometry/Edge.h
Node-kind: file
Node-action: change
Text-content-length: 1082
Text-content-md5: 5f517cc60438e8ebd7d517ec95491d5e
Text-content-sha1: 6d4e6682fb160c508a4346050ed09eaf2a0b9cc4
Content-length: 1082

#ifndef _EDGE_H_
#define _EDGE_H_

#include <string>
#include "Entity.h"
#include "Node.h"

/**
   @class Edge
   @brief An Edge represents an edge of a Mesh
   
   Edge%s represent @em edges of a Mesh.@n

   An Edge is an Entity with 2 @em Nodes,
   namely '@c 0' and '@c 1'.

   @note
   As an Entity, an Edge can't be instantiated by
   the users
*/

class Mesh;

class Edge: public Entity{
 private:
  Node* node0;
  Node* node1;

  friend class Mesh;

 private:
  Edge(const int id, Node& node0, Node& node1);
  virtual ~Edge(void);

 public:
  Node& getNode0(void) const;
  Node& getNode1(void) const;

  virtual std::string toString(void) const;
};

/**
   @fn Edge::getNode0
   @return Returns the Node '@c 0' of this Edge

   @fn Edge::getNode1
   @return Returns the Node '@c 1' of this Edge
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Edge::~Edge(void){
  // Edge is not responsible for deleting nodes
}

inline Node& Edge::getNode0(void) const{
  return *node0;
}

inline Node& Edge::getNode1(void) const{
  return *node1;
}

#endif


Node-path: geometry/Element.h
Node-kind: file
Node-action: change
Text-content-length: 4780
Text-content-md5: 1b772eef33b0bd4e55ec0cae48fd646e
Text-content-sha1: 48c79923f6e13d18deda189103b8dd07f24da8d5
Content-length: 4780

#ifndef _ELEMENT_H_
#define _ELEMENT_H_

#include <string>
#include <vector>
#include "Entity.h"
#include "Node.h"
#include "Jacobian.h"

/**
   @class Element
   @brief Represents a geometrical element of a Mesh

   An Element is a geometrical element of a Mesh.@n

   An Element is defined by:
   @li An @c ID in the Mesh
   @li A set of @em Node%s, giving the @em position of the 
   Element in the Mesh
   @li A set of @em Entity, giving the @em geomtrical
   @em elements of the Element
   @li A set of @em Orientations for the Entity
   @li A type
   
   @note
   In the case of @em nodal elements, the sets of
   @em Node%s and @em Entity are @em equal

   Element%s type are given by the @em concatenation of:
   @li The number of @em Node%s describing the Element

   And

   @li @c 0 for @em nodal Element%s
   @li @c 1 for @em edge Element%s

   @warning This may change in the futur
   @todo Find a clever way for Element%s types

   Moreover, an Element will instantiate a Jacobian 
   transformation.

   @note
   An Element can't be instantiated by the users,
   it is the @em Mesh job
 */

class Mesh;

class Element{
 private:
  int type;
  int id;
  int numberOfEntity;

  std::vector<Node*>* node;

  std::vector<Entity*>* entity;
  std::vector<int>* orientation;
  std::vector<int>* entityId;  

  Jacobian* jac;

  friend class Mesh;

 private:
   Element(const int id, const int type);
  ~Element(void);

 public:
  Entity& getEntity(const int id) const;
  const std::vector<Entity*>& getAllEntities(void) const;
  const std::vector<int>&   getAllEntitiesId(void);
  
  const std::vector<Node*>& getAllNodes(void) const;

  int getOrientation(const int id) const;
  const std::vector<int>& getAllOrientations(void) const;  

  int getId(void) const;
  int nEntity(void) const;
  int getType(void) const;
  
  Jacobian& getJacobian(void) const;

  bool operator==(const Element& other) const;
  bool operator!=(const Element& other) const;
    
  std::string toString(void) const;

 private:
  void buildJacobian(void);
};


/**
   @fn Element::getEntity
   @param id The Entity @em local @c ID in the Element
   @return Returns the requested Entity
   @note
   Entity @em local @c IDs are ranging from 
   @em 0 to @em E @em -  @em 1,@n
   where E is the number of Entity in the Element

   @fn Element::getAllEntities
   @return Returns the set of all the Entity of the Element

   @fn Element::getAllEntitiesId
   @return Returns the set of all the Entity @c IDs 
   of the Element
   @warning
   The @c IDs are related to the Mesh, so they are
   @em global @c IDs

   @fn Element::getAllNodes
   @return Returns the set of all the Node%s of the Element 

   @fn Element::getOrientation
   @param id An Element Entity @em local @c ID
   @return Returns the orientation of the given 
   (by its @em local @c ID) Entity

   @fn Element::getAllOrientations
   @return Returns the set of orientations of the  
   Element Entity
   
   @fn Element::getId
   @return Returns the @c ID of this Element in the Mesh
   
   @fn Element::nEntity
   @return Returns the @em size of set of Entity

   @fn Element::getType
   @return Returns the @em type of this Element

   @fn Element::getJacobian
   @return Returns the Jacobian allowing
   the mapping of this Element onto
   a reference element

   @fn bool Element::operator==(const Element& other) const;
   @param other An other Element
   @return Returns:
   @li @c true, if this Element and the other are 
   the @em same
   @li @c false, otherwise
   
   @fn bool Element::operator!=(const Element& other) const;
   @param other
   @return Returns:
   @li @c true, if this Element and the other are 
   @em not the @em same
   @li @c false, otherwise
   
   @fn Element::toString
   @return Returns a string associated to this Element

*/

//////////////////////
// Inline Functions //
//////////////////////

inline Entity& Element::getEntity(const int id) const{
  return *((*entity)[id]);
}

inline const std::vector<Entity*>& Element::getAllEntities(void) const{
  return *entity;
}

inline const std::vector<Node*>& Element::getAllNodes(void) const{
  return *node;
}

inline int Element::getOrientation(const int id) const{
  return (*orientation)[id];
}

inline const std::vector<int>& Element::getAllOrientations(void) const{
  return *orientation;
}

inline int Element::getId(void) const{
  return id;
}

inline int Element::nEntity(void) const{
  return numberOfEntity;
}

inline int Element::getType(void) const{
  return type;
}

inline Jacobian& Element::getJacobian(void) const{
  return *jac;
}

inline bool Element::operator==(const Element& other) const{
  return (*this).id == other.id;
}

inline bool Element::operator!=(const Element& other) const{
  return !(*this == other);
}

#endif


Node-path: geometry/Entity.h
Node-kind: file
Node-action: change
Text-content-length: 4117
Text-content-md5: da0c5d11e364e6b997dffb22e6d62665
Text-content-sha1: 9783d335f14666a98737b2b7f4e3a0a724c80c3b
Content-length: 4117

#ifndef _ENTITY_H_
#define _ENTITY_H_

#include <string>

/**
   @class Entity
   @brief Common methods to all Mesh entities (Node, Edge, ...)
   
   This class represents the common methods to all Mesh entities.
   An entity may be:
   @li A Node
   @li An Edge
   @li A Face
   @li ...

   @warning
   All @em specific mesh entity @em must @em specialize this class. 

   A Entity is defined by multiple parameters:
   @li A Mesh @c ID
   @li A type (Node, Edge, Face, ...)
   @li A value
   @li A physical @c ID in the Mesh

   @note
   Note that the users can't @em instantiated an Entity,
   it is the Mesh job
*/

class Mesh;

class Entity{
 protected:
  int id;
  int type;

  bool   hasValue;
  double value;

  bool   hasPhysical;
  int    physical;

  friend class Mesh;

 protected:
  Entity(const int id, const int type);
  virtual ~Entity(void);

 public:
  bool   gotValue(void) const;
  void   setValue(const double x);
  double getValue(void) const;

  bool   gotPhysical(void) const;
  void   setPhysical(const int physical);
  double getPhysical(void) const;  

  int getId(void) const;
  int getType(void) const;

  bool operator<(const Entity& other) const;
  bool operator==(const Entity& other) const;

  virtual std::string toString(void) const;
};


/**
   @fn Entity::gotValue
   @return Returns:
   @li @c true, if this Entity has a Value assigned
   @li @c false, otherwise

   @fn Entity::setValue
   @param x The value to which we want to set the Entity
   @return Sets the Entity to the given value

   @fn Entity::getValue
   @return Returns the value of the Entity 
   @warning If no value has been set, 
   this method has no specific behaviour

   @fn Entity::gotPhysical
   @return Returns:
   @li @c true, if this Entity is associated with 
   a physical in the Mesh
   @li @c false, otherwise

   @fn Entity::setPhysical
   @param physical The physical @c ID to affect to the Entity
   @return Affect the given physical @c ID to the Entity

   @fn Entity::getPhysical
   @return Returns the physical @c ID associated to the Entity 
   @warning If no physical @c ID has been set, 
   this method has no specific behaviour

   @fn Entity::getId(void)
   @return Returns the @em @c ID of the Entity 
   in the Mesh
  
   @fn Entity::getType(void) const
   @return Returns the @em type of this Entity
   (see description for more details on types)
   
   @fn bool Entity::operator<(const Entity& other) const
   @param other An other Entity
   @return Returns:
   @li @c true, if @em this Entity has a @em smaller
   @em @c ID than the @em other Entity
   @li @c false, otherwise
   @note
   Note that both Entities @em must be of the same type,
   otherwise this operator is allways @em @c flase 

   @fn bool Entity::operator==(const Entity& other) const
   @param other An other Entity
   @return Returns:
   @li @c true, if @em this Entity has the @em same
   @em @c ID as the @em other Entity 
   @li @c false, otherwise
   @note
   Note that both Entities @em must be of the same type,
   otherwise this operator is allways @em @c flase 

   @fn Entity::toString
   @return Returns a string corresponding to the Entity
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Entity::~Entity(void){
}

inline bool Entity::gotValue(void) const{
  return hasValue;
}

inline void Entity::setValue(const double x){
  hasValue = true;
  value = x;
}

inline double Entity::getValue(void) const{
  return value;
}

inline bool Entity::gotPhysical(void) const{
  return hasPhysical;
}

inline void Entity::setPhysical(const int physical){
  hasPhysical = true;
  this->physical = physical;
}

inline double Entity::getPhysical(void) const{
  return physical;
}

inline int Entity::getId(void) const{
  return id;
}

inline int Entity::getType(void) const{
  return type;
}

inline bool Entity::operator<(const Entity& other) const{
  return ((*this).type == other.type) &&
         ((*this).id    < other.id);
}

inline bool Entity::operator==(const Entity& other) const{
  return ((*this).type == other.type) &&
         ((*this).id   == other.id);
}

#endif


Node-path: geometry/Mesh.h
Node-kind: file
Node-action: change
Text-content-length: 4874
Text-content-md5: d2c6c9e818b6cd63b684b8886cad992c
Text-content-sha1: 529ed3bf9e0b3f577a0d6582fc4a5ef9f89a0e17
Content-length: 4874

#ifndef _MESH_H_
#define _MESH_H_

#include <vector>
#include <string>
#include "Node.h"
#include "Edge.h"
#include "Element.h"

/**
   @class Mesh
   @brief Represents a mesh
   
   This class represents a mesh.@n

   A Mesh is composed of Entity, and of Element%s build 
   on these Entity.@n
 
   A Mesh is instantiated thanks to a 
   <a href="http://www.geuz.org/gmsh">gmsh</a>
   @c .msh file, wich discribes the mesh.@n

   @note
   Note that the Mesh will instantiate all its Entity,
   and its Element%s
*/

class Mesh{
 private:
  struct edgeTriplet{
    int   origin;
    int   end;
    Edge* edge;
  };
  
  class EdgeTripletComparator{
  public:
    inline bool operator()(const edgeTriplet& a, 
			   const edgeTriplet& b) const;
  };

  class PairComparator{
  public:
    inline bool operator()(const std::pair<int, int>& a, 
			   const std::pair<int, int>& b) const;
  };

  std::vector<Node*>* node;
  std::vector<Element*>* nodeElement; 
  std::vector<Element*>* edgeElement;
  std::vector<Edge*>* edge;
  int nNode;
  int nNodeElement;
  int nLine;
  int nEdge;
  int nEdgeElement;

  std::ifstream* in;  
  
 public:
   Mesh(const std::string fileName);
  ~Mesh(void);
   
  Node& getNode(const int i) const;
  const std::vector<Node*>& getAllNodes(void) const;
  int getNbNode(void) const;

  Element& getNodeElement(const int i) const;
  const std::vector<Element*>& getAllNodeElements(void) const;
  int getNbNodeElement(void) const;

  Edge& getEdge(const int i) const;
  const std::vector<Edge*>& getAllEdges(void) const;
  int getNbEdge(void) const;

  Element& getEdgeElement(const int i) const;
  const std::vector<Element*>& getAllEdgeElements(void) const;
  int getNbEdgeElement(void) const;

  std::string toString(void) const;

 private:
  void skipLine(const int N);
  bool parse(const std::string str);

  void getTri(int id, std::istringstream& stream);
  void getLine(int id, std::istringstream& stream);
  void getEdges(void);
};

/**
   @fn Mesh::Mesh
   @param fileName The path to the @c .msh file discribing the Meh
   @return Returns a new Mesh

   @fn Mesh::~Mesh
   @return Deletes this Mesh

   @fn Mesh::getNode
   @param i The @c ID of a Node in the Mesh
   @return Returns the requested Node

   @fn Mesh::getAllNodes
   @return Returns the set of all Node%s in the Mesh

   @fn Mesh::getNbNode
   @return Returns the number of Node%s in the Mesh

   @fn Mesh::getNodeElement
   @param i The @c ID of a @em nodal Element
   in the Mesh
   @return Returns the requested @em nodal Element

   @fn Mesh::getAllNodeElements
   @return Returns the set of all 
   @em nodal Element%s in the Mesh

   @fn Mesh::getNbNodeElement
   @return Returns the number of 
   @em nodal Element%s in the Mesh

   @fn Mesh::getEdge
   @param i The @c ID of an Edge in the Mesh
   @return Returns the requested Edge

   @fn Mesh::getAllEdges
   @return Returns the set of all Edge%s in the Mesh

   @fn Mesh::getNbEdge
   @return Returns the number of Edge%s in the Mesh

   @fn Mesh::getEdgeElement
   @param i The @c ID of an @em edge Element
   in the Mesh
   @return Returns the requested @em edge Element

   @fn Mesh::getAllEdgeElements
   @return Returns the set of all 
   @em edge Element%s in the Mesh

   @fn Mesh::getNbEdgeElement
   @return Returns the number of 
   @em edge Element%s in the Mesh

   @fn Mesh::toString
   @return Returns a string associated to the Mesh
 */


//////////////////////
// Inline Functions //
//////////////////////

inline Node& Mesh::getNode(const int i) const{
  return *((*node)[i]);
}
  
inline const std::vector<Node*>& Mesh::getAllNodes(void) const{
  return *node;
}

inline int Mesh::getNbNode(void) const{
  return nNode;
}

inline Element& Mesh::getNodeElement(const int i) const{
  return *((*nodeElement)[i]);
}
  
inline const std::vector<Element*>& Mesh::getAllNodeElements(void) const{
  return *nodeElement;
}

inline int Mesh::getNbNodeElement(void) const{
  return nNodeElement; 
}

inline Edge& Mesh::getEdge(const int i) const{
  return *((*edge)[i]);
}

inline const std::vector<Edge*>& Mesh::getAllEdges(void) const{
  return *edge;
}

inline int Mesh::getNbEdge(void) const{
  return nEdge;
}

inline Element& Mesh::getEdgeElement(const int i) const{
  return *((*edgeElement)[i]);
}

inline const std::vector<Element*>& Mesh::getAllEdgeElements(void) const{
  return *edgeElement;
}

inline int Mesh::getNbEdgeElement(void) const{
  return nEdgeElement;
}

inline bool Mesh::PairComparator::operator()(const std::pair<int, int>& a, 
				       const std::pair<int, int>& b) const{
  return (a.first < b.first) || 
    ((a.first == b.first) && (a.second < b.second));
}

inline bool Mesh::EdgeTripletComparator::operator()(const edgeTriplet& a, 
					  const edgeTriplet& b) const{
  return (a.origin < b.origin) || 
    ((a.origin == b.origin) && (a.end < b.end));
}


#endif


Node-path: geometry/Node.h
Node-kind: file
Node-action: change
Text-content-length: 1182
Text-content-md5: 250d67ed7a66717c80279872dce74639
Text-content-sha1: e65f1f6e6ad3accb54a9d9fb27a8da2d6fd064c8
Content-length: 1182

#ifndef _NODE_H_
#define _NODE_H_

#include <string>
#include "Entity.h"

/**
   @class Node
   @brief A Node represents a node of a Mesh
   
   Node%s represent @em verticies of a Mesh.@n

   A Node is an Entity with 3 @em coordinates,
   namely @c X, @c Y and @c Z.

   @note
   As an Entity, a Node can't be instantiated by
   the users
*/

class Mesh;

class Node: public Entity{
 private:
  double x;
  double y;
  double z;

  friend class Mesh;

 private:
  Node(const int id, const double x, const double y, const double z);
  virtual ~Node(void);

 public:
  double getX(void) const;
  double getY(void) const;
  double getZ(void) const;

  virtual std::string toString(void) const;
};

/**
   @fn Node::getX
   @return Returns the @c X coordinate of this Node

   @fn Node::getY
   @return Returns the @c Y coordinate of this Node

   @fn Node::getZ
   @return Returns the @c Z coordinate of this Node

*/

//////////////////////
// Inline Functions //
//////////////////////

inline Node::~Node(void){
}

inline double Node::getX(void) const{
  return x;
}

inline double Node::getY(void) const{
  return y;
}

inline double Node::getZ(void) const{
  return z;
}

#endif


Revision-number: 20
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-22T20:57:35.677918Z
PROPS-END

Node-path: assembler/System.h
Node-kind: file
Node-action: change
Text-content-length: 2371
Text-content-md5: e6daade54fa5f29ab71e95c6c12a0f40
Text-content-sha1: ec4c44788fd11b09d834c22a0bd1cbf75288629d
Content-length: 2371

#ifndef _SYSTEM_H_
#define _SYSTEM_H_

#include "Matrix.h"
#include "Vector.h"
#include "Mesh.h"
#include "Jacobian.h"
#include "DofManager.h"
#include "Formulation.h"

/**
   @class System
   @brief This class assembles a linear system

   This class assembles the linear system, that comes from a Formulation and a list of Element%s.@n
  
   @warning
   Up to now, the assembly is done when the System is instantiated@n
   Also, we can @em only assemble Dof related to an Element@n

   @todo
   Assembly done by a specific method, not the constructor@n
   Assembly of @em non @em geometric Dof@n
   Maybe put the list of element on the formulation ? Or more abstract concept -- 'Problem' Class ?@n
   Give the possiblite to get the solution Vector instead of setting 
   Entity values
 */

class System{
 private:
  Matrix* A;
  Vector<double>* n;
  int size;

  DofManager* dofM;
  const Formulation* formulation;

 public:
   System(const std::vector<Element*>& elements, 
	  const Formulation& formulation);
  ~System(void);

  Matrix& getMatrix(void) const;
  Vector<double>& getRHS(void) const;

  void fixBC(const int physicalId, const double value);
  void solve(void);
  
 private:
  void assemble(GroupOfDof& group);
};


/**
   @fn System::System(const std::vector<Element*>& elements, 
   const Formulation& formulation)
   @param elements A list of Element%s, giving the geomtry of the problem to solve
   @param formulation A Formulation, giving the way to assemble the system
   @return A new @em assembled System
 
   @fn System::~System(void)
   @return Deletes the System

   @fn Matrix& System::getMatrix(void) const
   @return Returns the assembled matrix of the the linear system

   @fn Vector<double>& System::getRHS(void) const
   @return Returns the assembled Right Hand Side of the the linear system

   @fn void System::fixBC(const int physicalId, const double value)
   @param physicalId The physical @c ID on which the bondary condtion shall be imposed
   @param value The value of the bondary condition
   @return Fix a Boundary Condition on the linear system

   @fn void System::solve(void)
   @return Solves the linear system
*/

//////////////////////
// Inline Functions //
//////////////////////


inline Matrix& System::getMatrix(void) const{
  return *A;
}

inline Vector<double>& System::getRHS(void) const{
  return *n;
}

#endif


Node-path: geometry/Jacobian.h
Node-kind: file
Node-action: change
Text-content-length: 2914
Text-content-md5: 6ed83addd8de3c442717980791a3695c
Text-content-sha1: 930f09f24eb3e47152d7ac853ea14e8e4928fecb
Content-length: 2914

#ifndef _JACOBIAN_H_
#define _JACOBIAN_H_

#include <vector>
#include "Vector.h"
#include "Node.h"

/**
   @class Jacobian
   @brief Transformations between
   physical and reference spaces

   This class handles the transformations
   between physical and reference spaces.@n

   The @em pysical space is defined by:
   @li @c X and @c Y coordinates in @c 2D
   @li @c X, @c Y and @c Z coordinates in @c 3D

   The @em reference space is defined by:
   @li @c U and @c V coordinates in @c 2D
   @li @c U, @c V and @c W coordinates in @c 3D

   @todo
   Use a real Matrix to handle Jacobian%s
*/

class Jacobian{
 private:
  int type;

  double nodeX[3];
  double nodeY[3];

  double dxdu;
  double dxdv;
  double dydu;
  double dydv;

  double detDxDu;

  double dudx;
  double dudy;
  double dvdx;
  double dvdy;

 public:
   Jacobian(const std::vector<Node*>& nodes);
  ~Jacobian(void);

  double det(void) const;

  Vector<double> grad(const Vector<double>& gradUV) const;

  Vector<double> invMap(const Vector<double>& XY) const;
  Vector<double> invMap(const double x, const double y) const;

  Vector<double> map(const Vector<double>& UV) const;
  Vector<double> map(const double u, const double v) const;
};

/**
   @fn Jacobian::Jacobian
   @param nodes Node%s defining the geometry of the 
   @em physical element to transform (onto the 
   @em reference element)
   @return Returns a new Jacobian

   @fn Jacobian::~Jacobian
   @return Deletes this Jacobian

   @fn Jacobian::det
   @return Returns the determinant of the 
   transformation jacobian matrix

   @fn Jacobian::grad
   @param gradUV A gradient in the @em reference space
   @returns Returns the given gradient in the 
   @em physical space

   @fn Jacobian::invMap(const Vector<double>&) const
   @param XY A @c 2D Vector with the coordinates 
   of a point in the @em physical (@c 2D) space
   @returns Returns the coordiantes of the given point
   in the @em reference space

   @fn Jacobian::invMap(const double, const double) const
   @param x The @c X coordinate 
   of a point in the @em physical (@c 2D) space
   @param y The @c Y coordinate of the same point
   @returns Returns the coordiantes of the given point
   in the @em reference space

   @fn Jacobian::map(const Vector<double>&) const
   @param UV A @c 2D Vector with the coordinates 
   of a point in the @em reference (@c 2D) space
   @returns Returns the coordiantes of the given point
   in the @em physical space

   @fn Jacobian::map(const double, const double) const
   @param u The @c U coordinate 
   of a point in the @em reference (@c 2D) space
   @param v The @c V coordinate of the same point
   @returns Returns the coordiantes of the given point
   in the @em physical space
 */

//////////////////////
// Inline Functions //
//////////////////////

inline Jacobian::~Jacobian(void){
}

inline double Jacobian::det(void) const{
  return detDxDu;
}

#endif


Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: change
Text-content-length: 1976
Text-content-md5: 4bb1024ea241188e6ef3bb7da977ba5b
Text-content-sha1: b8c50a2f44663add8ff006a9275cc2769f66f266
Content-length: 1976

#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

#include <vector>
#include "Vector.h"
#include "Formulation.h"
#include "Mesh.h"

/**
   @class Interpolator
   @brief Interpolates Entity values on Node%s
   
   This class interpolates Entity values (of Mesh)
   on the @em Node%s (of the same Mesh).@n

   The Entity @em type to concider is given by the Formulation
   of the problem.@n

   The Formulation is also used to define the 
   @em type of the interpolated field, 
   @e i.e scalar of vectorial field. 
   
   @warning
   We can concider only @em one Entity @em type

   @todo
   Give the possibility to interpolate multiple type fields@n
   Give the possibility to interpolate non Mesh stuff@n
   Use Vector instead of std::vector@n
   Find a better for handling Vector / Scalar fields
   --- use of inheritance ?
 */

class Interpolator{
 private:
  const Formulation* f;
  int fType;
  int bSize;

  const Mesh* msh;  
  int nNode;
  std::vector<Vector<double>*>* nodeVectorValue;
  std::vector<bool>* isInterpolated;

 public:
   Interpolator(const Formulation& formulation, const Mesh& mesh);
  ~Interpolator(void);

  const std::vector<Vector<double>*>& getVectorNodeValue(void) const;
  const std::vector<double>&  getScalarNodeValue(void) const;

 private:
  void interpolateEdgeElement(void);
};

/**
   @fn Interpolator::Interpolator
   @param formulation The Formulation to use for 
   Entity @em type selection
   @param mesh The Mesh to interpolate on
   @return Returns a new Interpolator

   @fn Interpolator::~Interpolator
   @return Deletes the Interpolator

   @fn Interpolator::getVectorNodeValue
   @return Returns the interpolated @em vectorial field
   @warning
   If the field is not a @em vectorial field, this methods
   throws an Exception

   @fn Interpolator::getScalarNodeValue
   @return Returns the interpolated @em scalar field
   @warning
   If the field is not a @em scalar field, this methods
   throws an Exception
 */

#endif


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1796
Text-content-md5: 61e71fe6924ab123ef6180b2a385ca84
Text-content-sha1: a6d689583905c07b7a6f7e73a9156fa1ddbf4c7a
Content-length: 1796

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"
#include "Interpolator.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  const Formulation* f;
  int fType;

  Interpolator *interpolator;

  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void getNodalScalarValue(void);
  void getNodalVectorValue(void);

  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @return Writes the solution in the given @c .msh file
 */

#endif


Node-path: solver/Solver.h
Node-kind: file
Node-action: change
Text-content-length: 759
Text-content-md5: b1b62777050a4506a9f9e036921d1377
Text-content-sha1: 0cf5cfd172fa64e88f60062588b2b3c280e642bc
Content-length: 759

#ifndef _SOLVER_H_
#define _SOLVER_H_

#include "Matrix.h"
#include "Vector.h"

/**
   @class Solver
   @brief A linear system solver

   This class handles a solver for the @em linear system
   @c A @c x @c = @c b.
 
   @note
   The solver is called by the 
   @em static method Solver::solve.@n
   So, their is @em no @em need to instantiate a Solver

   @todo
   Return the solution in a sperate vector, to save the RHS@n
   Use other stuff than LAPACK
*/

class Solver{
 public:
  static void solve(Matrix& A, Vector<double>& x);
};

/**
   @fn Solver::solve
   @param A The Matrix of the system to solve
   @param x The Vector with the 
   Right Hand Side of the system to solve
   @returns The Vector @c x becomes the solution of the system
 */

#endif


Revision-number: 21
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-23T12:52:06.218312Z
PROPS-END

Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 78766
Text-content-md5: d7a3e4c912aa2180cea355476631ec6d
Text-content-sha1: aebc5d3ec3d1ba0d43a4521ab217ebbb1a8e3825
Content-length: 78766

# Doxyfile 1.8.0

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project
#
# All text after a hash (#) is considered a comment and will be ignored
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ")

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file 
# that follow. The default is UTF-8 which is also the encoding used for all 
# text before the first occurrence of this tag. Doxygen uses libiconv (or the 
# iconv built into libc) for the transcoding. See 
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should 
# identify the project. Note that if you do not use Doxywizard you need 
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number. 
# This could be handy for archiving the generated documentation or 
# if some version control system is used.

PROJECT_NUMBER         = 

# Using the PROJECT_BRIEF tag one can provide an optional one line description 
# for a project that appears at the top of each page and should give viewer 
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          = 

# With the PROJECT_LOGO tag one can specify an logo or icon that is 
# included in the documentation. The maximum height of the logo should not 
# exceed 55 pixels and the maximum width should not exceed 200 pixels. 
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           = 

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
# base path where the generated documentation will be put. 
# If a relative path is entered, it will be relative to the location 
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
# 4096 sub-directories (in 2 levels) under the output directory of each output 
# format and will distribute the generated files over these directories. 
# Enabling this option can be useful when feeding doxygen a huge amount of 
# source files, where putting all generated files in the same directory would 
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all 
# documentation generated by doxygen is written. Doxygen will use this 
# information to generate all constant output in the proper language. 
# The default language is English, other supported languages are: 
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, 
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
# include brief member descriptions after the members that are listed in 
# the file and class documentation (similar to JavaDoc). 
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
# the brief description of a member or function before the detailed description. 
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator 
# that is used to form the text in various listings. Each string 
# in this list, if found as the leading text of the brief description, will be 
# stripped from the text and the result after processing the whole list, is 
# used as the annotated text. Otherwise, the brief description is used as-is. 
# If left blank, the following values are used ("$name" is automatically 
# replaced with the name of the entity): "The $name class" "The $name widget" 
# "The $name file" "is" "provides" "specifies" "contains" 
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
# Doxygen will generate a detailed section even if there is only a brief 
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
# inherited members of a class in the documentation of that class as if those 
# members were ordinary class members. Constructors, destructors and assignment 
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = YES

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
# path before files name in the file list and in the header files. If set 
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
# can be used to strip a user-defined part of the path. Stripping is 
# only done if one of the specified strings matches the left-hand part of 
# the path. The tag can be used to show relative paths in the file list. 
# If left blank the directory from which doxygen is run is used as the 
# path to strip.

STRIP_FROM_PATH        = 

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
# the path mentioned in the documentation of a class, which tells 
# the reader which header file to include in order to use a class. 
# If left blank only the name of the header file containing the class 
# definition is used. Otherwise one should specify the include paths that 
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    = 

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
# (but less readable) file names. This can be useful if your file system 
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
# will interpret the first line (until the first dot) of a JavaDoc-style 
# comment as the brief description. If set to NO, the JavaDoc 
# comments will behave just like regular Qt-style comments 
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
# interpret the first line (until the first dot) of a Qt-style 
# comment as the brief description. If set to NO, the comments 
# will behave just like regular Qt-style comments (thus requiring 
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
# treat a multi-line C++ special comment block (i.e. a block of //! or /// 
# comments) as a brief description. This used to be the default behaviour. 
# The new default is to treat a multi-line C++ comment block as a detailed 
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
# member inherits the documentation from any documented member that it 
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
# a new page for each member. If set to NO, the documentation of a member will 
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab. 
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts 
# as commands in the documentation. An alias has the form "name=value". 
# For example adding "sideeffect=\par Side Effects:\n" will allow you to 
# put the command \sideeffect (or @sideeffect) in the documentation, which 
# will result in a user-defined paragraph with heading "Side Effects:". 
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                = 

# This tag can be used to specify a number of word-keyword mappings (TCL only). 
# A mapping has the form "name=value". For example adding 
# "class=itcl::class" will allow you to use the command class in the 
# itcl::class meaning.

TCL_SUBST              = 

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
# sources only. Doxygen will then generate output that is more tailored for C. 
# For instance, some of the names that are used will be different. The list 
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
# sources only. Doxygen will then generate output that is more tailored for 
# Java. For instance, namespaces will be presented as packages, qualified 
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
# sources only. Doxygen will then generate output that is more tailored for 
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
# sources. Doxygen will then generate output that is tailored for 
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it 
# parses. With this tag you can assign which parser to use for a given extension. 
# Doxygen has a built-in mapping, but you can override or extend it using this 
# tag. The format is ext=language, where ext is a file extension, and language 
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C, 
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make 
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C 
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions 
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      = 

# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all 
# comments according to the Markdown format, which allows for more readable 
# documentation. See http://daringfireball.net/projects/markdown/ for details. 
# The output of markdown processing is further processed by doxygen, so you 
# can mix doxygen, HTML, and XML commands with Markdown formatting. 
# Disable only in case of backward compatibilities issues.

MARKDOWN_SUPPORT       = YES

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
# to include (a tag file for) the STL sources as input, then you should 
# set this tag to YES in order to let doxygen match functions declarations and 
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
# func(std::string) {}). This also makes the inheritance and collaboration 
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to 
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
# Doxygen will parse them like normal C++ but will assume all classes use public 
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter 
# and setter methods for a property. Setting this option to YES (the default) 
# will make doxygen replace the get and set methods by a property in the 
# documentation. This will only work if the methods are indeed getting or 
# setting a simple type. If this is not the case, or you want to show the 
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
# tag is set to YES, then doxygen will reuse the documentation of the first 
# member in the group (if any) for the other members of the group. By default 
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
# the same type (for instance a group of public functions) to be put as a 
# subgroup of that type (e.g. under the Public Functions section). Set it to 
# NO to prevent subgrouping. Alternatively, this can be done per class using 
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
# unions are shown inside the group in which they are included (e.g. using 
# @ingroup) instead of on a separate page (for HTML and Man pages) or 
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
# unions with only public data fields will be shown inline in the documentation 
# of the scope in which they are defined (i.e. file, namespace, or group 
# documentation), provided this scope is documented. If set to NO (the default), 
# structs, classes, and unions are shown on a separate page (for HTML and Man 
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
# is documented as struct, union, or enum with the name of the typedef. So 
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
# with name TypeT. When disabled the typedef will appear as a member of a file, 
# namespace, or class. And the struct will be named TypeS. This can typically 
# be useful for C code in case the coding convention dictates that all compound 
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
# determine which symbols to keep in memory and which to flush to disk. 
# When the cache is full, less often used symbols will be written to disk. 
# For small to medium size projects (<1000 input files) the default value is 
# probably good enough. For larger projects a too small cache size can cause 
# doxygen to be busy swapping symbols to and from disk most of the time 
# causing a significant performance penalty. 
# If the system has enough physical memory increasing the cache will improve the 
# performance by keeping more symbols in memory. Note that the value works on 
# a logarithmic scale so increasing the size by one will roughly double the 
# memory usage. The cache size is given by this formula: 
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be 
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
# their name and scope. Since this can be an expensive process and often the 
# same symbol appear multiple times in the code, doxygen keeps a cache of 
# pre-resolved symbols. If the cache is too small doxygen will become slower. 
# If the cache is too large, memory is wasted. The cache size is given by this 
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0, 
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
# documentation are documented, even if no documentation was available. 
# Private class members and static file members will be hidden unless 
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal
# scope will be included in the documentation.

EXTRACT_PACKAGE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file 
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
# defined locally in source files will be included in the documentation. 
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local 
# methods, which are defined in the implementation section but not in 
# the interface are included in the documentation. 
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be 
# extracted and appear in the documentation as a namespace called 
# 'anonymous_namespace{file}', where file will be replaced with the base 
# name of the file that contains the anonymous namespace. By default 
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
# undocumented members of documented classes, files or namespaces. 
# If set to NO (the default) these members will be included in the 
# various overviews, but no documentation section is generated. 
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = YES

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
# undocumented classes that are normally visible in the class hierarchy. 
# If set to NO (the default) these classes will be included in the various 
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
# friend (class|struct|union) declarations. 
# If set to NO (the default) these declarations will be included in the 
# documentation.

HIDE_FRIEND_COMPOUNDS  = YES

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
# documentation blocks found inside the body of a function. 
# If set to NO (the default) these blocks will be appended to the 
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation 
# that is typed after a \internal command is included. If the tag is set 
# to NO (the default) then the documentation will be excluded. 
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
# file names in lower-case letters. If set to YES upper-case letters are also 
# allowed. This is useful if you have classes or files whose names only differ 
# in case and if your file system supports case sensitive file names. Windows 
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
# will show members with their full class and namespace scopes in the 
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
# will put a list of the files that are included by a file in the documentation 
# of that file.

SHOW_INCLUDE_FILES     = NO

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
# will list include files with double quotes in the documentation 
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
# will sort the (detailed) documentation of file and class members 
# alphabetically by member name. If set to NO the members will appear in 
# declaration order.

SORT_MEMBER_DOCS       = NO

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
# brief documentation of file, namespace and class members alphabetically 
# by member name. If set to NO (the default) the members will appear in 
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
# will sort the (brief and detailed) documentation of class members so that 
# constructors and destructors are listed first. If set to NO (the default) 
# the constructors will appear in the respective orders defined by 
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
# hierarchy of group names into alphabetical order. If set to NO (the default) 
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
# sorted by fully-qualified names, including namespaces. If set to 
# NO (the default), the class list will be sorted only by class name, 
# not including the namespace part. 
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
# Note: This option applies only to the class list, not to the 
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
# do proper type resolution of all parameters of a function it will reject a 
# match between the prototype and the implementation of a member function even 
# if there is only one candidate or it is obvious which candidate to choose 
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or 
# disable (NO) the todo list. This list is created by putting \todo 
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or 
# disable (NO) the test list. This list is created by putting \test 
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or 
# disable (NO) the bug list. This list is created by putting \bug 
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
# disable (NO) the deprecated list. This list is created by putting 
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional 
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       = 

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
# the initial value of a variable or macro consists of for it to appear in 
# the documentation. If the initializer consists of more lines than specified 
# here it will be hidden. Use a value of 0 to hide initializers completely. 
# The appearance of the initializer of individual variables and macros in the 
# documentation can be controlled using \showinitializer or \hideinitializer 
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
# at the bottom of the documentation of classes and structs. If set to YES the 
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = NO

# If the sources in your project are distributed over multiple directories 
# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
# in the documentation. The default is NO.

SHOW_DIRECTORIES       = YES

# Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
# This will remove the Files entry from the Quick Index and from the 
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
# Namespaces page.  This will remove the Namespaces entry from the Quick Index 
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that 
# doxygen should invoke to get the current version for each file (typically from 
# the version control system). Doxygen will invoke the program by executing (via 
# popen()) the command <command> <input-file>, where <command> is the value of 
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
# provided by doxygen. Whatever the program writes to standard output 
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    = 

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
# by doxygen. The layout file controls the global structure of the generated 
# output files in an output format independent way. The create the layout file 
# that represents doxygen's defaults, run doxygen with the -l option. 
# You can optionally specify a file name after the option, if omitted 
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            = 

# The CITE_BIB_FILES tag can be used to specify one or more bib files 
# containing the references data. This must be a list of .bib files. The 
# .bib extension is automatically appended if omitted. Using this command 
# requires the bibtex tool to be installed. See also 
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         = 

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated 
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = YES

# The WARNINGS tag can be used to turn on/off the warning messages that are 
# generated by doxygen. Possible values are YES and NO. If left blank 
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
# potential errors in the documentation, such as not documenting some 
# parameters in a documented function, or documenting parameters that 
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for 
# functions that are documented, but have no documentation for their parameters 
# or return value. If set to NO (the default) doxygen will only warn about 
# wrong or incomplete parameter documentation, but not about the absence of 
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that 
# doxygen can produce. The string should contain the $file, $line, and $text 
# tags, which will be replaced by the file and line number from which the 
# warning originated and the warning text. Optionally the format may contain 
# $version, which will be replaced by the version of the file (if it could 
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning 
# and error messages should be written. If left blank the output is written 
# to stderr.

WARN_LOGFILE           = 

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain 
# documented source files. You may enter file names like "myfile.cpp" or 
# directories like "/usr/src/myproject". Separate the files or directories 
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files 
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
# also the default input encoding. Doxygen uses libiconv (or the iconv built 
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the 
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank the following patterns are tested: 
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories 
# should be searched for input files as well. Possible values are YES and NO. 
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be 
# excluded from the INPUT source files. This way you can easily exclude a 
# subdirectory from a directory tree whose root is specified with the INPUT tag. 
# Note that relative paths are relative to the directory from which doxygen is 
# run.

EXCLUDE                = 

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
# directories that are symbolic links (a Unix file system feature) are excluded 
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the 
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
# certain files from those directories. Note that the wildcards are matched 
# against the file with absolute path, so to exclude all test directories 
# for example use the pattern */test/*

EXCLUDE_PATTERNS       = 

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
# (namespaces, classes, functions, etc.) that should be excluded from the 
# output. The symbol name can be a fully qualified name, a word, or if the 
# wildcard * is used, a substring. Examples: ANamespace, AClass, 
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        = 

# The EXAMPLE_PATH tag can be used to specify one or more files or 
# directories that contain example code fragments that are included (see 
# the \include command).

EXAMPLE_PATH           = 

# If the value of the EXAMPLE_PATH tag contains directories, you can use the 
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
# and *.h) to filter out the source-files in the directories. If left 
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
# searched for input files to be used with the \include or \dontinclude 
# commands irrespective of the value of the RECURSIVE tag. 
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or 
# directories that contain image that are included in the documentation (see 
# the \image command).

IMAGE_PATH             = 

# The INPUT_FILTER tag can be used to specify a program that doxygen should 
# invoke to filter for each input file. Doxygen will invoke the filter program 
# by executing (via popen()) the command <filter> <input-file>, where <filter> 
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
# input file. Doxygen will then use the output that the filter program writes 
# to standard output.  If FILTER_PATTERNS is specified, this tag will be 
# ignored.

INPUT_FILTER           = 

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
# basis.  Doxygen will compare the file name with each pattern and apply the 
# filter if there is a match.  The filters are a list of the form: 
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
# info on how filters are used. If FILTER_PATTERNS is empty or if 
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        = 

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
# INPUT_FILTER) will be used to filter the input files when producing source 
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
# pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
# and it is also possible to disable source filtering for a specific pattern 
# using *.ext= (so without naming a filter). This option only has effect when 
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS = 

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will 
# be generated. Documented entities will be cross-referenced with these sources. 
# Note: To get rid of all source code in the generated output, make sure also 
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body 
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
# doxygen to hide any special comment blocks from generated source code 
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES 
# then for each documented function all documented 
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES 
# then for each documented function all documented entities 
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
# link to the source code.  Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code 
# will point to the HTML generated by the htags(1) tool instead of doxygen 
# built-in source browser. The htags tool is part of GNU's global source 
# tagging system (see http://www.gnu.org/software/global/global.html). You 
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
# will generate a verbatim copy of the header file for each class for 
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
# of all compounds will be generated. Enable this if the project 
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all 
# classes will be put under the same header in the alphabetical index. 
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
# should be ignored while generating the index headers.

IGNORE_PREFIX          = 

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard header. Note that when using a custom header you are responsible  
# for the proper inclusion of any scripts and style sheets that doxygen 
# needs, which is dependent on the configuration options used. 
# It is advised to generate a default header using "doxygen -w html 
# header.html footer.html stylesheet.css YourConfigFile" and then modify 
# that header. Note that the header is subject to change so you typically 
# have to redo this when upgrading to a newer version of doxygen or when 
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            = 

# The HTML_FOOTER tag can be used to specify a personal HTML footer for 
# each generated HTML page. If it is left blank doxygen will generate a 
# standard footer.

HTML_FOOTER            = 

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
# style sheet that is used by each HTML page. It can be used to 
# fine-tune the look of the HTML output. If the tag is left blank doxygen 
# will generate a default style sheet. Note that doxygen will try to copy 
# the style sheet file to the HTML output directory, so don't put your own 
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        = 

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
# other source files which should be copied to the HTML output directory. Note 
# that these files will be copied to the base HTML output directory. Use the 
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
# files. In the HTML_STYLESHEET file, use the file name only. Also note that 
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       = 

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
# Doxygen will adjust the colors in the style sheet and background images 
# according to this color. Hue is specified as an angle on a colorwheel, 
# see http://en.wikipedia.org/wiki/Hue for more information. 
# For instance the value 0 represents red, 60 is yellow, 120 is green, 
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
# the colors in the HTML output. For a value of 0 the output will use 
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
# the luminance component of the colors in the HTML output. Values below 
# 100 gradually make the output lighter, whereas values above 100 make 
# the output darker. The value divided by 100 is the actual gamma applied, 
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
# page will contain the date and time when the page was generated. Setting 
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
# files or namespaces will be aligned in HTML using tables. If set to 
# NO a bullet list will be used.

HTML_ALIGN_MEMBERS     = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
# documentation will contain sections that can be hidden and shown after the 
# page has loaded. For this to work a browser that supports 
# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).

HTML_DYNAMIC_SECTIONS  = NO

# If the GENERATE_DOCSET tag is set to YES, additional index files 
# will be generated that can be used as input for Apple's Xcode 3 
# integrated development environment, introduced with OSX 10.5 (Leopard). 
# To create a documentation set, doxygen will generate a Makefile in the 
# HTML output directory. Running make will produce the docset in that 
# directory and running "make install" will install the docset in 
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
# it at startup. 
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
# feed. A documentation feed provides an umbrella under which multiple 
# documentation sets from a single provider (such as a company or product suite) 
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
# should uniquely identify the documentation set bundle. This should be a 
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify 
# the documentation publisher. This should be a reverse domain-name style 
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files 
# will be generated that can be used as input for tools like the 
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
# be used to specify the file name of the resulting .chm file. You 
# can add a path in front of the file if the result should not be 
# written to the html output directory.

CHM_FILE               = 

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
# be used to specify the location (absolute path including file name) of 
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           = 

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
# controls if a separate .chi index file is generated (YES) or that 
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
# is used to encode HtmlHelp index (hhk), content (hhc) and project file 
# content.

CHM_INDEX_ENCODING     = 

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
# controls whether a binary table of contents is generated (YES) or a 
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members 
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
# that can be used as input for Qt's qhelpgenerator to generate a 
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
# be used to specify the file name of the resulting .qch file. 
# The path specified is relative to the HTML output folder.

QCH_FILE               = 

# The QHP_NAMESPACE tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
# Qt Help Project output. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
# add. For more information please see 
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   = 

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
# custom filter to add. For more information please see 
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters"> 
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  = 

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
# project's 
# filter section matches. 
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes"> 
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  = 

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
# be used to specify the location of Qt's qhelpgenerator. 
# If non-empty doxygen will try to run qhelpgenerator on the generated 
# .qhp file.

QHG_LOCATION           = 

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
# will be generated, which together with the HTML files, form an Eclipse help 
# plugin. To install this plugin and make it available under the help contents 
# menu in Eclipse, the contents of the directory containing the HTML and XML 
# files needs to be copied into the plugins directory of eclipse. The name of 
# the directory within the plugins directory should be the same as 
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin 
# the directory name containing the HTML and XML files should also have 
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
# at top of each HTML page. The value NO (the default) enables the index and 
# the value YES disables it. Since the tabs have the same information as the 
# navigation tree you can set this option to NO if you already set 
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
# structure should be generated to display hierarchical information. 
# If the tag value is set to YES, a side panel will be generated 
# containing a tree-like index structure (just like the one that 
# is generated for HTML Help). For this to work a browser that supports 
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
# Windows users are probably better off using the HTML help feature. 
# Since the tree basically has the same information as the tab index you 
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
# (range [0,1..20]) that doxygen will group on one line in the generated HTML 
# documentation. Note that a value of 0 will completely suppress the enum 
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories, 
# and Class Hierarchy pages using a tree view instead of an ordered list.

USE_INLINE_TREES       = NO

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
# used to set the initial width (in pixels) of the frame in which the tree 
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included 
# as images in the HTML documentation. The default is 10. Note that 
# when you change the font size after a successful doxygen run you need 
# to manually remove any form_*.png images from the HTML output directory 
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images 
# generated for formulas are transparent PNGs. Transparent PNGs are 
# not supported properly for IE 6.0, but are supported on all modern browsers. 
# Note that when changing this option you need to delete any form_*.png files 
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
# (see http://www.mathjax.org) which uses client side Javascript for the 
# rendering instead of using prerendered bitmaps. Use this if you do not 
# have LaTeX installed or if you want to formulas look prettier in the HTML 
# output. When enabled you may also need to install MathJax separately and 
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the 
# HTML output directory using the MATHJAX_RELPATH option. The destination 
# directory should contain the MathJax.js script. For instance, if the mathjax 
# directory is located at the same level as the HTML output directory, then 
# MATHJAX_RELPATH should be ../mathjax. The default value points to 
# the MathJax Content Delivery Network so you can quickly see the result without 
# installing MathJax.  However, it is strongly recommended to install a local 
# copy of MathJax from http://www.mathjax.org before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     = 

# When the SEARCHENGINE tag is enabled doxygen will generate a search box 
# for the HTML output. The underlying search engine uses javascript 
# and DHTML and should work on any modern browser. Note that when using 
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
# (GENERATE_DOCSET) there is already a search function so this one should 
# typically be disabled. For large projects the javascript based search engine 
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
# implemented using a PHP enabled web server instead of at the web client 
# using Javascript. Doxygen will generate the search PHP script and index 
# file to put on the web server. The advantage of the server 
# based approach is that it scales better to large projects and allows 
# full text search. The disadvantages are that it is more difficult to setup 
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
# invoked. If left blank `latex' will be used as the default command name. 
# Note that when enabling USE_PDFLATEX this option is only used for 
# generating bitmaps for formulas in the HTML output, but not in the 
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
# generate index for LaTeX. If left blank `makeindex' will be used as the 
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
# LaTeX documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used 
# by the printer. Possible values are: a4, letter, legal and 
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         = 

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
# the generated latex document. The header should contain everything until 
# the first chapter. If it is left blank doxygen will generate a 
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           = 

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
# the generated latex document. The footer should contain everything after 
# the last chapter. If it is left blank doxygen will generate a 
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           = 

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
# is prepared for conversion to pdf (using ps2pdf). The pdf file will 
# contain links (just like the HTML output) instead of page references 
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
# plain latex in the generated Makefile. Set this option to YES to get a 
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
# command to the generated LaTeX files. This will instruct LaTeX to keep 
# running if errors occur, instead of asking the user for help. 
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not 
# include the index chapters (such as File Index, Compound Index, etc.) 
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include 
# source code with syntax highlighting in the LaTeX output. 
# Note that which sources are shown also depends on other settings 
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See 
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
# The RTF output is optimized for Word 97 and may not look very pretty with 
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
# RTF documents. This may be useful for small projects and may help to 
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
# will contain hyperlink fields. The RTF file will 
# contain links (just like the HTML output) instead of page references. 
# This makes the output suitable for online browsing using WORD or other 
# programs which support those fields. 
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's 
# config file, i.e. a series of assignments. You only have to provide 
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    = 

# Set optional variables used in the generation of an rtf document. 
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    = 

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to 
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
# then it will generate one additional man file for each entity 
# documented in the real man page(s). These additional files 
# only source the real man page, but without them the man command 
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will 
# generate an XML file that captures the structure of 
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put. 
# If a relative path is entered the value of OUTPUT_DIRECTORY will be 
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_SCHEMA             = 

# The XML_DTD tag can be used to specify an XML DTD, 
# which can be used by a validating XML parser to check the 
# syntax of the XML files.

XML_DTD                = 

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
# dump the program listings (including syntax highlighting 
# and cross-referencing information) to the XML output. Note that 
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
# generate an AutoGen Definitions (see autogen.sf.net) file 
# that captures the structure of the code including all 
# documentation. Note that this feature is still experimental 
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will 
# generate a Perl module file that captures the structure of 
# the code including all documentation. Note that this 
# feature is still experimental and incomplete at the 
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
# the necessary Makefile rules, Perl scripts and LaTeX code to be able 
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
# nicely formatted so it can be parsed by a human reader.  This is useful 
# if you want to understand what is going on.  On the other hand, if this 
# tag is set to NO the size of the Perl module output will be much smaller 
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file 
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
# This is useful so different doxyrules.make files included by the same 
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX = 

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
# evaluate all C-preprocessor directives found in the sources and include 
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
# names in the source code. If set to NO (the default) only conditional 
# compilation will be performed. Macro expansion can be done in a controlled 
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
# then the macro expansion is limited to the macros specified with the 
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that 
# contain include files that are not input files but should be processed by 
# the preprocessor.

INCLUDE_PATH           = 

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
# patterns (like *.h and *.hpp) to filter out the header-files in the 
# directories. If left blank, the patterns specified with FILE_PATTERNS will 
# be used.

INCLUDE_FILE_PATTERNS  = 

# The PREDEFINED tag can be used to specify one or more macro names that 
# are defined before the preprocessor is started (similar to the -D option of 
# gcc). The argument of the tag is a list of macros of the form: name 
# or name=definition (no spaces). If the definition and the = are 
# omitted =1 is assumed. To prevent a macro definition from being 
# undefined via #undef or recursively expanded use the := operator 
# instead of the = operator.

PREDEFINED             = 

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
# this tag can be used to specify a list of macro names that should be expanded. 
# The macro definition that is found in the sources will be used. 
# Use the PREDEFINED tag if you want to use a different macro definition that 
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      = 

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
# doxygen's preprocessor will remove all references to function-like macros 
# that are alone on a line, have an all uppercase name, and do not end with a 
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. For each 
# tag file the location of the external documentation should be added. The 
# format of a tag file without this location is as follows: 
#   TAGFILES = file1 file2 ... 
# Adding location for the tag files is done as follows: 
#   TAGFILES = file1=loc1 "file2 = loc2" ... 
# where "loc1" and "loc2" can be relative or absolute paths 
# or URLs. Note that each tag file must have a unique name (where the name does 
# NOT include the path). If a tag file is not located in the directory in which 
# doxygen is run, you must also specify the path to the tagfile here.

TAGFILES               = 

# When a file name is specified after GENERATE_TAGFILE, doxygen will create 
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       = 

# If the ALLEXTERNALS tag is set to YES all external classes will be listed 
# in the class index. If set to NO only the inherited external classes 
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
# in the modules index. If set to NO, only the current project's groups will 
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script 
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
# or super classes. Setting the tag to NO turns the diagrams off. Note that 
# this option also works with HAVE_DOT disabled, but it is recommended to 
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = YES

# You can define message sequence charts within doxygen comments using the \msc 
# command. Doxygen will then run the mscgen tool (see 
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
# documentation. The MSCGEN_PATH tag allows you to specify the directory where 
# the mscgen tool resides. If left empty the tool is assumed to be found in the 
# default search path.

MSCGEN_PATH            = 

# If set to YES, the inheritance and collaboration graphs will hide 
# inheritance and usage relations if the target is undocumented 
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
# available from the path. This tool is part of Graphviz, a graph visualization 
# toolkit from AT&T and Lucent Bell Labs. The other options in this section 
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
# allowed to run in parallel. When set to 0 (the default) doxygen will 
# base this on the number of processors available in the system. You can set it 
# explicitly to a value larger than 0 to get control over the balance 
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that 
# doxygen generates. When you want a differently looking font you can specify 
# the font name using DOT_FONTNAME. You need to make sure dot is able to find 
# the font, which can be done by putting it in a standard location or by setting 
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font. 
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
# set the path where dot can find it.

DOT_FONTPATH           = 

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect inheritance relations. Setting this tag to YES will force the 
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for each documented class showing the direct and 
# indirect implementation dependencies (inheritance, containment, and 
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
# collaboration diagrams in a style similar to the OMG's Unified Modeling 
# Language.

UML_LOOK               = YES

# If the UML_LOOK tag is enabled, the fields and methods are shown inside 
# the class node. If there are many fields or methods and many nodes the 
# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS 
# threshold limits the number of items for each type to make the size more 
# managable. Set this to 0 for no limit. Note that the threshold may be 
# exceeded by 50% before the limit is enforced.

UML_LIMIT_NUM_FIELDS   = 10

# If set to YES, the inheritance and collaboration graphs will show the 
# relations between templates and their instances.

TEMPLATE_RELATIONS     = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
# tags are set to YES then doxygen will generate a graph for each documented 
# file showing the direct and indirect include dependencies of the file with 
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
# documented header file showing the documented files that directly or 
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then 
# doxygen will generate a call dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable call graphs 
# for selected functions only using the \callgraph command.

CALL_GRAPH             = NO

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
# doxygen will generate a caller dependency graph for every global function 
# or class method. Note that enabling this option will significantly increase 
# the time of a run. So in most cases it will be better to enable caller 
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = NO

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
# then doxygen will show the dependencies a directory has on other directories 
# in a graphical way. The dependency relations are determined by the #include 
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
# generated by dot. Possible values are svg, png, jpg, or gif. 
# If left blank png will be used. If you choose svg you need to set 
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = svg

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
# enable generation of interactive SVG images that allow zooming and panning. 
# Note that this requires a modern browser other than Internet Explorer. 
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be 
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               = 

# The DOTFILE_DIRS tag can be used to specify one or more directories that 
# contain dot files that are included in the documentation (see the 
# \dotfile command).

DOTFILE_DIRS           = 

# The MSCFILE_DIRS tag can be used to specify one or more directories that 
# contain msc files that are included in the documentation (see the 
# \mscfile command).

MSCFILE_DIRS           = 

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
# nodes that will be shown in the graph. If the number of nodes in a graph 
# becomes larger than this value, doxygen will truncate the graph, which is 
# visualized by representing a node as a red box. Note that doxygen if the 
# number of direct children of the root node in a graph is already larger than 
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
# graphs generated by dot. A depth value of 3 means that only nodes reachable 
# from the root by following a path via at most 3 edges will be shown. Nodes 
# that lay further from the root node will be omitted. Note that setting this 
# option to 1 or 2 may greatly reduce the computation time needed for large 
# code bases. Also note that the size of a graph can be further restricted by 
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
# background. This is disabled by default, because dot on Windows does not 
# seem to support this out of the box. Warning: Depending on the platform used, 
# enabling this option may lead to badly anti-aliased labels on the edges of 
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
# files in one run (i.e. multiple -o and -T options on the command line). This 
# makes dot run faster, but since only newer versions of dot (>1.8.10) 
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
# generate a legend page explaining the meaning of the various boxes and 
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
# remove the intermediate dot files that are used to generate 
# the various graphs.

DOT_CLEANUP            = YES


Node-path: mathematics/Legendre.h
Node-kind: file
Node-action: change
Text-content-length: 2813
Text-content-md5: 2be36c4d3ca889ae3a49a771ffa3bd5b
Text-content-sha1: 0cbf380ae7768d315ed7a967c85074284bdd9588
Content-length: 2813

#ifndef _LEGENDRE_H_
#define _LEGENDRE_H_

#include "Polynomial.h"

/**
   @class Legendre
   @brief Generators for legendre Polynomial%s
   
   This class handles the generation of legendre 
   Polynomial%s of many types:
   @li Classical legendre (Legendre::legendre)
   @li Integrated legendre (Legendre::integrated)
   @li Scaled legendre (Legendre::scaled)
   @li Integrated Scaled legendre (Legendre::intScaled)

   @note
   It is @em not @em requiered to instantiate a Legendre class.@n
   Indeed, all its methods are @em static.@n
   Each method is actualy a @em specific Polynomial @em generator.
 */

class Legendre{
 public:
  static void legendre(Polynomial* polynomial, const int order);
  static void integrated(Polynomial* polynomial, const int order);
  static void scaled(Polynomial* polynomial, const int order);
  static void intScaled(Polynomial* polynomial, const int order);

 private:
  static Polynomial legendre(const int n,
			     const Polynomial& l, 
			     const Polynomial& lMinus);
  
  static Polynomial integrated(const int n,
			       const Polynomial& l, 
			       const Polynomial& lMinus);

  static Polynomial scaled(const int n,
			   const Polynomial& l, 
			   const Polynomial& lMinus);

  static Polynomial intScaled(const int n,
			      const Polynomial& l, 
			      const Polynomial& lMinus);
};

/**
   @fn void Legendre::legendre(Polynomial*, const int)
   @param polynomial An @em allocated array (of size @c 'order' @c + @c 1) 
   for storing the requested legendre Polynomial%s
   @param order The @em maximal order of the requested Polynomial%s
   @return Stores in @c 'polynomial' all the @em classical legendre Polynomial%s
   of order [@c 0, @c 'order']  

   @fn void Legendre::integrated(Polynomial*, const int)
   @param polynomial An @em allocated array (of size @c 'order')
   for storing the requested legendre Polynomial%s
   @param order The @em maximal order of the requested Polynomial%s
   @return Stores in @c 'polynomial' all the @em integrated legendre Polynomial%s
   of order [@c 1, @c 'order']  

   @fn void Legendre::scaled(Polynomial*, const int)
   @param polynomial An @em allocated array (of size @c 'order' @c + @c 1) 
   for storing the requested legendre Polynomial%s
   @param order The @em maximal order of the requested Polynomial%s
   @return Stores in @c 'polynomial' all the @em scaled legendre Polynomial%s
   of order [@c 0, @c 'order']  

   @fn void Legendre::intScaled(Polynomial*, const int)
   @param polynomial An @em allocated array (of size @c 'order')
   for storing the requested legendre Polynomial%s
   @param order The @em maximal order of the requested Polynomial%s
   @return Stores in @c 'polynomial' all the @em scaled @em integrated 
   legendre Polynomial%s of order [@c 1, @c 'order']  
 */

#endif


Node-path: mathematics/Matrix.h
Node-kind: file
Node-action: change
Text-content-length: 3036
Text-content-md5: 8bac6012cd13314452b9d16620462510
Text-content-sha1: b1ecc2eca563aff2549c97b7bdc4300aa563e162
Content-length: 3036

#ifndef _MATRIX_H_
#define _MATRIX_H_

#include <string>
#include "Vector.h"

/**
   @class Matrix
   @brief Handles matrices
   
   This class represents a @c n by @c m matrix.

   @todo
   Other than Matrix of double
 */

class Solver;

class Matrix{
 private:
  int nRow;
  int nCol;
  int nElem;
  double *matrix;
  friend class Solver;

 public:
   Matrix(const int n, const int m);
  ~Matrix(void);

  int row(void) const;
  int col(void) const;

  void   set(const int i, const int j, const double v);
  void   allToZero(void);
  double get(const int i, const int j) const;
  
  double& operator()(const int i, const int j);
  double  operator()(const int i, const int j) const;
  
  Vector<double> mult(const Vector<double>& v) const;

  std::string toString(void) const;
  std::string toStringMatlab(void) const;
};

/**
   @fn Matrix::Matrix
   @param n The number of @em rows of the future Matrix
   @param m The number of @em columns of the future Matrix
   @return Returns a new @c n by @c m Matrix

   @fn Matrix::~Matrix
   @return Deletes this Matrix

   @fn Matrix::row
   @return Returns the number of @c rows of this Matrix
   
   @fn Matrix::col
   @return Returns the number of @c columns of this Matrix

   @fn Matrix::set
   @param i A @em row index
   @param j A @em column index
   @param v A value
   @returns Sets the given value at the position (@c i, @c j)
   in this Matrix

   @fn Matrix::allToZero
   @returns Sets all the Matrix elements to @em @c 0
 
   @fn Matrix::get
   @param i A @em row index
   @param j A @em column index
   @returns Retuns the value at the position (@c i, @c j)
   in this Matrix
   
   @fn double& Matrix::operator()(const int, const int)
   @param i A @em row index
   @param j A @em column index
   @return Returns a @em reference to the element
   at position (@c i, @c j) in this Matrix

   @fn double Matrix::operator()(const int, const int) const
   @param i A @em row index
   @param j A @em column index
   @return Returns the @em value of the element
   at position (@c i, @c j) in this Matrix

   @fn Matrix::mult
   @param v A Vector of size @c m (for a @c n by @c m Matrix)
   @return Returns the Vector (of size @c n) resulting 
   of the product of @em this Matrix with the @em given Vector

   @fn Matrix::toString
   @return Retuns a string correspondig to this Matrix

   @fn Matrix::toStringMatlab
   @return Same as Matrix::toString, but the string is in 
   Matlab / Octave format
*/

//////////////////////
// Inline Functions //
//////////////////////

inline int Matrix::row(void) const{
  return nRow;
}

inline int Matrix::col(void) const{
  return nCol;
}

inline void Matrix::set(const int i, const int j, const double v){
  matrix[j + i * nCol] = v;
}

inline double Matrix::get(const int i, const int j) const{
  return matrix[j + i * nCol];
}

inline double& Matrix::operator()(const int i, const int j){
  return matrix[j + i * nCol];
}

inline double Matrix::operator()(const int i, const int j) const{
  return matrix[j + i * nCol];
}

#endif


Node-path: mathematics/Polynomial.h
Node-kind: file
Node-action: change
Text-content-length: 3845
Text-content-md5: 77e3b1eb9bc9dc5cfdca76f189938152
Text-content-sha1: 52fc5ea7907abe057461ca214a2d8192ca6bb130
Content-length: 3845

#ifndef _POLYNOMIAL_H_
#define _POLYNOMIAL_H_

#include <string>
#include <stack>
#include "Vector.h"

/**
   @class Polynomial
   @brief Represents @c 3D polynomials

   This class represents @c 3D polynomials.@n
   A @c 3D polynomials uses monomials of 'xyz' type.
 */

// We suppose 3D Polynomial
class Polynomial{
 private: 
  static const char coefName[3];

  struct monomial_t{
    double coef;
    int power[3];
  };
  
  int         nMon;
  monomial_t*  mon;

 public:
   Polynomial(const double coef, const int powerX,
 	                         const int powerY,
                                 const int powerZ);

   Polynomial(const Polynomial& other);
   Polynomial(void);
  ~Polynomial(void);

  void               derivative(const int dim);
  Vector<Polynomial> gradient(void) const;

  double operator()
    (const double x, const double y, const double z) const;  
  
  double at
    (const double x, const double y, const double z) const;  


  Polynomial operator+(const Polynomial& other) const;
  Polynomial operator-(const Polynomial& other) const;
  Polynomial operator*(const Polynomial& other) const;
  Polynomial operator*(const double alpha) const;

  void add(const Polynomial& other);
  void sub(const Polynomial& other);
  void mul(const Polynomial& other);
  void mul(const double alpha);

  void power(const int n);

  Polynomial compose(const Polynomial& other);
  Polynomial compose(const Polynomial& otherA, const Polynomial& otherB);

  void operator=(const Polynomial& other);

  std::string toString(void) const;

 private:
  static std::string toString(const monomial_t* mon, const bool isAbs);

  static bool isSmaller(const monomial_t* a, const monomial_t*b); 
  static bool isEqual(const monomial_t* a, const monomial_t*b); 
  static bool isSmallerPower(const monomial_t* a, const monomial_t* b);  
  static bool isEqualPower(const monomial_t* a, const monomial_t* b);
  
  static void sort(monomial_t* mon, const int size);
  static void swap(monomial_t* mon, const int i, const int j);

  static int mergeMon(monomial_t* sourceA, const int sizeA, 
		      monomial_t* sourceB, const int sizeB,
		      monomial_t** dest);
  
  static int mult(const monomial_t* sourceA, const int sizeA,
		  const monomial_t* sourceB, const int sizeB,
		  monomial_t** dest);
  
  static void mult(monomial_t* source, const int size, const double alpha);

  static void distribute(monomial_t* src, const int size, const monomial_t* m);

  static void compose(const monomial_t* src, 
		      Polynomial comp,
		      std::stack<monomial_t>* stk);

  static void compose(const monomial_t* src, 
		      Polynomial compA, Polynomial compB,
		      std::stack<monomial_t>* stk);

  static Polynomial polynomialFromStack(std::stack<monomial_t>& stk);

  static monomial_t* copyMonomial(const monomial_t* src, const int size);

  static monomial_t* zeroPolynomial(void);
  static monomial_t* unitPolynomial(void);
};


//////////////////////
// Inline Functions //
//////////////////////

inline double Polynomial::operator() (const double x, 
				      const double y, 
				      const double z) const{
  return at(x, y, z);
}

inline bool Polynomial::isEqual(const Polynomial::monomial_t* a,
				const Polynomial::monomial_t* b){
  return a->power[0] == b->power[0] &&
         a->power[1] == b->power[1] &&
         a->power[2] == b->power[2];
}

inline bool Polynomial::isSmallerPower(const Polynomial::monomial_t* a,
				       const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    < 
    b->power[0] + b->power[1] + b->power[2] ;    
}

inline bool Polynomial::isEqualPower(const Polynomial::monomial_t* a,
				     const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    ==
    b->power[0] + b->power[1] + b->power[2] ;    
}

#endif


Node-path: mathematics/Vector.h
Node-kind: file
Node-action: change
Text-content-length: 5586
Text-content-md5: 4d8a745d6e9795389ca56a577c08ce15
Text-content-sha1: 0f53f4a3fd78be479b36a8e04f56d6bd031032ce
Content-length: 5586

#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <string>

extern "C"{
#include <cblas.h>
}

#include "Exception.h"

/**
   @class Vector
   @brief Handles vectors

   This class represents a vector of type < T >
   and of dimention @c n.   

   @todo
   Use Inheritance instead of template@n
   |@n
   |@n
   ---> We have methods that changes between types 
   (e.g: at(...), 3D automatic allocation, scalar mult)
 */

class Solver;

template<class T>
class Vector{
 private:
  int N;
  T* v;

  friend class Solver;
  friend class Matrix;
  
 public:
   Vector(const int a);
   Vector(void);
  ~Vector(void);

  int dim(void) const;

  T&   operator()(const int i);
  T    operator()(const int i) const;
  void operator=(const Vector<T>& other);

  T    get(const int i) const;
  void set(const int i, const T a);

  Vector<double> at(const double x, const double y, const double z) const;

  Vector<T> operator+(const Vector<T>& other);
  Vector<T> operator-(const Vector<T>& other);
  Vector<T> operator*(const T& other);
  //Vector<T> operator*(const double alpha);

  void   add(const Vector<T>& b);
  void   sub(const Vector<T>& b);
  void   mul(const T& other);
  //void   mul(const double alpha);
  double dot(const Vector<T>& v) const;

  void allToZero(void);

  std::string toString(void) const;
};


/**
   @fn Vector::Vector(int)
   @param a Size of the futur Vector
   @return Returns a new Vector of size @c a

   @fn Vector::Vector(void)
   @return Returns a new Vector of size @em @c 3

   @fn Vector::~Vector
   @return Deletes this Vector

   @fn Vector::dim
   @return Returns the @em dimention of this vector

   @fn T& Vector::operator()(const int)
   @param i An index of this Vector
   @return Returns a @em reference to
   the element at position @c i
 
   @fn T Vector::operator()(const int) const
   @param i An index of this Vector
   @return Returns the @em value of
   the element at position @c i

   @fn Vector::get
   @param i An index in this Vector
   @return Returns the @em value of the element
   at position @c i

   @fn Vector::set
   @param i An index in this Vector
   @param a A value
   @return Sets the given value at position @c i
   in this Vector

   @fn Vector::at
   @param x The @em first dimesion of a @c 3D Polynomial
   @param y The @em second dimesion of a @c 3D Polynomial
   @param z The @em third dimesion of a @c 3D Polynomial
   @return Retuns the @c 3D Vector resulting of the @em evaluation
   of this @em @c 3D Vector @em of @em Polynomial%s

   @warning
   This works only for @em @c 3D Vector @em of @em Polynomial%s

   @fn Vector<T> Vector::operator+(const Vector<T>&)
   @param other An other Vector
   @return Returns the Vector containing
   the @em sum of this Vector with the other

   @fn Vector<T> Vector::operator-(const Vector<T>&)
   @param other An other Vector
   @return Returns the Vector containing
   the @em substraction of this Vector with the other

   @fn Vector<T> Vector::operator*(const T&)
   @param other A value
   @return Returns the Vector containing
   the @em product (@em element @em by @em element) 
   of this Vector with the given value

   @fn Vector::add
   @param b An other Vector
   @return Adds the given Vector with this one
   @note
   The result is stored in this Vector

   @fn Vector::sub
   @param b An other Vector
   @return Substracts the given Vector with this one
   @note
   The result is stored in this Vector

   @fn Vector::mul
   @param other A value
   @return Multiplies all the elements of this Vector 
   with the given value
   @note
   The result is stored in this Vector

   @fn Vector::dot
   @param v An Vector
   @return Returns the @em dot @em product of this
   Vector with the given one

   @fn Vector::allToZero
   @return Sets all the elements of this Vector
   to the @em zero @em element

   @fn Vector::toString
   @return Returns a string representing this Vector
*/

//////////////////////////////////////////////////////////////////////
// Templated Implementations                                        //
//////////////////////////////////////////////////////////////////////

template<class T>
Vector<T>::Vector(const int a){
  if(!a)
    throw Exception("Vector must by of dimension bigger than 0");
  
  N = a;
  v = new T[N];
}

template<class T>
Vector<T>::Vector(void){
  N = 3;
  v = new T[N];
}

template<class T>
Vector<T>::~Vector(void){
  delete[] v;
}

//////////////////////////////////////////////////////////////////////
// Inline Templated Implementations                                 //
//////////////////////////////////////////////////////////////////////

template<class T>
inline int Vector<T>::dim(void) const{
  return N;
}

template<class T>
inline T& Vector<T>::operator()(const int i){
  return v[i];
}

template<class T>
inline T Vector<T>::operator()(const int i) const{
  return v[i];
}

template<class T>
void Vector<T>::operator=(const Vector<T>& other){
  if(N != other.N)
    throw Exception("Vectors must be of the same dimension");

  for(int i = 0; i < N; i++)
    v[i] = other.v[i];
}

template<class T>
inline T Vector<T>::get(const int i) const{
  return v[i];
}

template<class T>
inline void Vector<T>::set(const int i, const T a){
  v[i] = a;
}

//////////////////////////////////////////////////////////////////////
// Inline Vector<double> Implementations                            //
//////////////////////////////////////////////////////////////////////

template<>
inline double Vector<double>::dot(const Vector<double>& v) const{ 
  return cblas_ddot(N, (*this).v, 1, v.v, 1);
}

#endif


Revision-number: 22
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-23T14:22:50.586896Z
PROPS-END

Node-path: mathematics/Polynomial.cpp
Node-kind: file
Node-action: change
Text-content-length: 14300
Text-content-md5: cfe31ac6a519cc1118fb75d9c4ba5887
Text-content-sha1: 5fb28f6e9c728683dc88cf74808a41053c1ea96e
Content-length: 14300

#include <cmath>
#include <sstream>
#include <stack>
#include "Polynomial.h"

using namespace std;

const char Polynomial::coefName[3] = {'x', 'y', 'z'};

Polynomial::Polynomial(const double coef, const int powerX,
 	                                  const int powerY,
                                          const int powerZ){
  nMon = 1;
  mon  = new monomial_t[1];
  
  mon[0].coef     = coef;
  mon[0].power[0] = powerX;
  mon[0].power[1] = powerY;
  mon[0].power[2] = powerZ;
}
 
Polynomial::Polynomial(const Polynomial& other){
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon); 
}

Polynomial::Polynomial(void){
  nMon = 0;
  mon  = NULL;
}

Polynomial::~Polynomial(void){
  if(mon)
    delete[] mon;
}

void Polynomial::derivative(const int dim){ 
  // Take derivative //
  for(int i = 0; i < nMon; i++){
    mon[i].coef *= mon[i].power[dim];
    mon[i].power[dim] -= 1;
  }

  // Remove zero monomials //
  int N = 0;
  stack<monomial_t*> s;

  for(int i = 0; i < nMon; i++){
    if(mon[i].coef != 0.0){
      s.push(&mon[i]);
      N++;
    }
  }

  // If no monomial any more ---> return zero polynomial
  if(!N){
    delete[] mon;
    
    mon  = zeroPolynomial();
    nMon = 1;
    return;
  }
  
  // If no zero found ---> return;
  if(N == nMon) 
    return;

  // Else, remove them //
  monomial_t* tmp = mon;
  
  mon  = new monomial_t[N];
  nMon = N;

  for(int i = N - 1; i >= 0; i--){
    mon[i] = *(s.top());
    s.pop();
  }

  delete[] tmp;

  // Sort resulting monomial and return // 
  sort(mon, nMon);

  return;
}

Vector<Polynomial> Polynomial::gradient(void) const{
  Vector<Polynomial> grad(3);

  // Copy Polynomial //
  grad(0) = *this;
  grad(1) = *this;
  grad(2) = *this;

  // Derivative with respect to each direction //
  grad(0).derivative(0);
  grad(1).derivative(1);
  grad(2).derivative(2);
  
  return grad;
}

double Polynomial::at
  (const double x, const double y, const double z) const{
  
  double val = 0;
  for(int i = 0; i < nMon; i++){
    val += mon[i].coef * pow(x, mon[i].power[0]) 
                       * pow(y, mon[i].power[1]) 
                       * pow(z, mon[i].power[2]);
  }

  return val;
}

Polynomial Polynomial::operator+(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mergeMon(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator-(const Polynomial& other) const{
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  
  Polynomial  newP;

  mult(otherMinus, otherNMon, -1); 
  newP.nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &newP.mon);

  delete[] otherMinus;
  return newP;
}

Polynomial Polynomial::operator*(const Polynomial& other) const{
  Polynomial newP;
  
  newP.nMon = mult(mon, nMon, other.mon, other.nMon, &newP.mon);

  return newP;
}

Polynomial Polynomial::operator*(const double alpha) const{
  Polynomial newP;
  
  newP.mon  = copyMonomial(mon, nMon);
  newP.nMon = nMon;

  newP.mul(alpha);

  return newP;
}


void Polynomial::add(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mergeMon(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::sub(const Polynomial& other){
  const int   otherNMon  = other.nMon;
  monomial_t* otherMinus = copyMonomial(other.mon, otherNMon);   
  monomial_t* tmp        = mon;
  
  mult(otherMinus, otherNMon, -1); 
  nMon = mergeMon(mon, nMon, otherMinus, otherNMon, &mon);

  delete[] otherMinus;
  delete[] tmp;
}

void Polynomial::mul(const Polynomial& other){
  monomial_t* tmp = mon;
  
  nMon = mult(mon, nMon, other.mon, other.nMon, &mon);

  delete[] tmp;
}

void Polynomial::mul(const double alpha){
  for(int i = 0; i < nMon; i++)
    mon[i].coef *= alpha;
}

void Polynomial::power(const int n){
  if (n < 0)
    return;

  switch(n){
  case 0:
    delete[] mon;
    
    mon  = unitPolynomial();
    nMon = 1;
    
    break;
    
  case 1:
    break;

  default:
    Polynomial old = *this;
    
    for(int i = 1; i < n; i++)
      mul(old);
    
    break;
  }
}

Polynomial Polynomial::compose(const Polynomial& other) const{
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], other, &stk);

  return polynomialFromStack(stk);
}

Polynomial Polynomial::compose(const Polynomial& otherA,
			       const Polynomial& otherB) const{
  stack<monomial_t> stk;

  for(int i = 0; i < nMon; i++)
    compose(&mon[i], otherA, otherB, &stk);

  return polynomialFromStack(stk);
}

void Polynomial::operator=(const Polynomial& other){
  if(mon)
    delete[] mon;
  
  nMon = other.nMon;
  mon  = copyMonomial(other.mon, nMon);
}

string Polynomial::toString(const Polynomial::monomial_t* mon, const bool isAbs){
  stringstream stream;
  const bool minusOne    = mon->coef == -1.0;
  const bool notUnitCoef = mon->coef !=  1.0 && !minusOne;

  // If we have a constant term
  if(!mon->power[0] && !mon->power[1] && !mon->power[2]){
    stream << mon->coef;
    return stream.str();
  }

  // If we're here, we do not have a constant term
  
  // If we have a coefficient of '1', we don't display it
  if(notUnitCoef && isAbs)
    stream << abs(mon->coef);

  if(notUnitCoef && !isAbs)
    stream << mon->coef;

  if(minusOne && !isAbs)
    stream << "-";

  // We look for each power
  bool notOnce = false;
  for(int i = 0; i < 3; i++){
    // If we have a non zero power, we display it
    if(mon->power[i]){
      if(notUnitCoef || notOnce)
	stream << " * ";

      stream << coefName[i];
      
      if(mon->power[i] != 1)
	stream << "^" << mon->power[i];

      notOnce = true;
    }
  }

  return stream.str();
}

string Polynomial::toString(void) const{
  stringstream stream;
  bool isAbs = false;

  stream << toString(&mon[0], isAbs);
    
  for(int i = 1; i < nMon; i++){
    if(mon[i].coef < 0.0){
      stream << " - ";
      isAbs = true;
    }

    else{
      stream << " + ";
      isAbs = false;
    }

    stream << toString(&mon[i], isAbs);
  }

  return stream.str();
}

bool Polynomial::isSmaller(const Polynomial::monomial_t* a, 
			   const Polynomial::monomial_t* b){
  // GRevLex order: 
  // http://www.math.uiuc.edu/Macaulay2/doc/Macaulay2-1.4/share/doc/Macaulay2/Macaulay2Doc/html/___G__Rev__Lex.html
  
  int dif[3];
  int last = 0;

  if(isSmallerPower(a, b))
    return true;
  
  if(isEqualPower(a, b)){
    for(int i = 0, j = 2; i < 3; i++, j--)
      dif[i] = b->power[j] - a->power[j];

    for(int i = 0; i < 3; i++)
      if(dif[i])
	last = dif[i];

    if(last < 0)
      return true;
    
    else
      return false;
  }
    
  return false;
}

void Polynomial::sort(monomial_t* mon, const int size){
  for(int i = 0; i < size; i++)
    for(int j = i; j < size; j++)
      if(isSmaller(&mon[j], &mon[i]))
        swap(mon, i, j);
}

void Polynomial::swap(monomial_t* mon, const int i, const int j){
  monomial_t tmp = mon[i];
  mon[i] = mon[j];
  mon[j] = tmp;
}


int Polynomial::mergeMon(monomial_t* sourceA, const int sizeA, 
			 monomial_t* sourceB, const int sizeB,
			 monomial_t** dest){
  stack<monomial_t> s;
  monomial_t tmp;

  int i = 0;
  int j = 0;
  int N = 0;

  while(i < sizeA && j < sizeB){
    if(sourceA[i].coef == 0.0)
      i++;

    else if(sourceB[j].coef == 0.0)
      j++;
    
    else if(isEqual(&sourceA[i], &sourceB[j])){
      tmp       = sourceA[i];
      tmp.coef += sourceB[j].coef; 
      
      if(tmp.coef != 0.0){
	s.push(tmp);
	N++;
      }
      
      i++;
      j++;
    }
    
    else if(isSmaller(&sourceA[i], &sourceB[j])){
      s.push(sourceA[i]);
      i++;
      N++;
    }

    else{
      s.push(sourceB[j]);
      j++;
      N++;
    }
  }

  while(i == sizeA && j < sizeB){
    s.push(sourceB[j]);
    j++;
    N++;
  }

  while(i < sizeA && j == sizeB){
    s.push(sourceA[i]);
    i++;
    N++;
  }

  if(!N){
    *dest = zeroPolynomial();
    N++;
  }

  else{
    *dest = new monomial_t[N];

    for(int k = N - 1; k >= 0; k--){
      (*dest)[k] = s.top();
      s.pop();
    }
  }

  return N;
}

int Polynomial::mult(const monomial_t* sourceA, const int sizeA,
		     const monomial_t* sourceB, const int sizeB,
		     monomial_t** dest){

  const monomial_t* a; // smaller polynomial
  const monomial_t* b; // bigger polynomial
  int nDist;
  int size;

  if(sizeA < sizeB){
    a     = sourceA;
    b     = sourceB; 
    nDist = sizeA;
    size  = sizeB;
  }
  
  else{
    a     = sourceB;
    b     = sourceA;
    nDist = sizeB;
    size  = sizeA;
  }

  // Check if zero //
  if(a[0].coef == 0 || b[0].coef == 0){
    *dest = zeroPolynomial();
    return 1;
  }

  // Distrubute all monomials //
  monomial_t** dist = new monomial_t*[nDist];

  for(int i = 0; i < nDist; i++){
    dist[i] = copyMonomial(b, size);
  
    distribute(dist[i], size, &a[i]);
  }

  // Merge //
  int finalSize    = size;
  int nDistMinus   = nDist - 1;
  monomial_t** tmp = new monomial_t*[nDistMinus]; // Temp array for all dist[0];

  for(int i = 1, j = 0; i < nDist; i++, j++){
    tmp[j] = dist[0];
    
    finalSize = mergeMon(dist[0], finalSize, 
			 dist[i], size,
			 &dist[0]);
  }

  // Keep distributed polynomial //
  *dest = dist[0];

  // Free Temporary Resources and Return //
  for(int i = 1, j = 0; i < nDist; i++, j++){
    delete[] dist[i];
    delete[] tmp[j];
  }
  
  delete[] dist;
  delete[] tmp;

  return finalSize;
}

void Polynomial::mult(monomial_t* source, const int size, const double alpha){
  for(int i = 0; i < size; i++)
    source[i].coef *= alpha;
}


void Polynomial::distribute(monomial_t* src, const int size, const monomial_t* m){ 
  for(int i = 0; i < size; i++){
    src[i].coef *= m->coef;
    
    src[i].power[0] += m->power[0];
    src[i].power[1] += m->power[1];
    src[i].power[2] += m->power[2];    
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial comp,
			 stack<Polynomial::monomial_t>* stk){
  
  comp.power(src->power[0]);
  comp.mul(src->coef);
  
  const int size = comp.nMon;

  for(int i = 0; i < size; i++){
    if(comp.mon[i].coef != 0){
      
      comp.mon[i].power[1] += src->power[1];
      comp.mon[i].power[2] += src->power[2];
      
      stk->push(comp.mon[i]);
    }
  }
}

void Polynomial::compose(const Polynomial::monomial_t* src,
			 Polynomial compA, Polynomial compB,
			 stack<Polynomial::monomial_t>* stk){

  compA.power(src->power[0]);
  compB.power(src->power[1]);
  
  compA.mul(compB);
  compA.mul(src->coef);
  
  const int size = compA.nMon;

  for(int i = 0; i < size; i++){
    if(compA.mon[i].coef != 0){
      
      compA.mon[i].power[2] += src->power[2];
      
      stk->push(compA.mon[i]);
    }
  }
}

Polynomial Polynomial::polynomialFromStack(std::stack<Polynomial::monomial_t>& stk){
  Polynomial  newP;
  monomial_t* tmp;
  monomial_t* newMon;
  int         newNMon;

  if(!stk.size()){
    newMon  = zeroPolynomial();
    newNMon = 1;
  }

  else{
    newMon    = new monomial_t[1];
    newMon[0] = stk.top();
    newNMon   = 1;
    stk.pop();
    
    while(!stk.empty()){
      tmp     = newMon;
      newNMon = mergeMon(newMon, newNMon, &stk.top(), 1, &newMon);
      stk.pop();
      
      delete[] tmp;
    }
  }

  newP.nMon = newNMon;
  newP.mon  = newMon;

  return newP;
}

Polynomial::monomial_t* Polynomial::copyMonomial(const monomial_t* src, const int size){
  monomial_t* dest = new monomial_t[size];

  for(int i = 0; i < size; i++){
    dest[i].coef     = src[i].coef;
    dest[i].power[0] = src[i].power[0];
    dest[i].power[1] = src[i].power[1];
    dest[i].power[2] = src[i].power[2];
  }

  return dest;
}

Polynomial::monomial_t* Polynomial::zeroPolynomial(void){
  monomial_t* zero = new monomial_t[1];
  
  zero->coef     = 0;
  zero->power[0] = 0;
  zero->power[1] = 0;
  zero->power[2] = 0;
 
  return zero;
}

Polynomial::monomial_t* Polynomial::unitPolynomial(void){
  monomial_t* unit = new monomial_t[1];
  
  unit->coef     = 1;
  unit->power[0] = 0;
  unit->power[1] = 0;
  unit->power[2] = 0;
 
  return unit;
}







/*
#include <iostream>
int main(void){
  Polynomial m0(-1  , 0, 0, 0);
  Polynomial m1(4.2, 1, 0, 0);
  Polynomial m2(4.2, 1, 1, 0);
  Polynomial m3(4.2, 1, 0, 1);

  cout << "m0 = " << m0.toString() << endl;
  cout << "m1 = " << m1.toString() << endl;
  cout << "m1(4, 5, 6) = " << m1.at(4, 5, 6) << endl;
  cout << "m2 = " << m2.toString() << endl;
  cout << "m3 = " << m3.toString() << endl;

  Polynomial p0 = m1 + m0;
  Polynomial p1 = m3 + m3;
  Polynomial p2 = p1 + p0;

  cout << "p0 = " << p0.toString() << endl;
  cout << "p1 = " << p1.toString() << endl;
  cout << "p2 = " << p2.toString() << endl;
  cout << "p2(1.1, 2.2, 3.3) = " << p2.at(1.1, 2.2, 3.3) << endl;

  p2.add(p0);
  cout << "p2 = " << p2.toString() << endl;


  Polynomial p3 = p2 * p0;
  Polynomial p4 = p3 * p3;
  cout << "p3 = " << p3.toString() << endl;
  cout << "p4 = " << p4.toString() << endl;
  
  p3.mul(p3);
  cout << "p3 = " << p3.toString() << endl;

  Polynomial p5 = p2 - p3;
  Polynomial p6 = p3 - p2;
  Polynomial p7 = p6 - p6;
  cout << "p5 = " << p5.toString() << endl;
  cout << "p6 = " << p6.toString() << endl;
  cout << "p7 = " << p7.toString() << endl;
  
  p6.sub(p6);
  cout << "p6 = " << p6.toString() << endl;
  

  Polynomial p8(p4);
  Polynomial p9(p4);
  Polynomial p10(p4);

  p8.derivative(0);
  p9.derivative(1);
  p10.derivative(2);

  cout << "p8 = "  << p8.toString()  << endl;
  cout << "p9 = "  << p9.toString()  << endl;
  cout << "p10 = " << p10.toString() << endl;

  Polynomial p11 = p8 * 4;
  cout << "p11 = " << p11.toString() << endl;
  cout << "p11(1, 2, 3) = " << p11.at(1, 2, 3.1) << endl;

  Polynomial m4(1, 1, 0, 0);
  Polynomial m5(1, 0, 1, 0);
  Polynomial m6(1, 0, 0, 1);

  Polynomial p12 = m4 + m5 + m6;

  cout << "p12 = " << p12.toString() << endl;

  p12.power(4);
  cout << "p12^4 = " << p12.toString() << endl;

 Polynomial m7(1, 1, 0, 0);
 Polynomial m8(2, 2, 0, 0);
 Polynomial m9(3, 3, 0, 0);

 Polynomial p13 = m9 + m7;
 cout << "p13 = " << p13.toString() << endl;

 Polynomial m10(1, 1, 1, 0);
 Polynomial m11(2, 2, 1, 2);
 Polynomial m12(1, 1, 3, 1);

 Polynomial p14 = m10 + m11 + m12;
 cout << "p14 = " << p14.toString() << endl;

 Polynomial p15 = p14.compose(p13);
 cout << "p15 = p14(p13) = " << p15.toString() << endl;

 return 0;
}

*/


Node-path: mathematics/Polynomial.h
Node-kind: file
Node-action: change
Text-content-length: 8430
Text-content-md5: 88cb5e7ddcd53699231678ccbf2f3904
Text-content-sha1: 6b1c16ad58554078f6ab61c962c16742c686fe1e
Content-length: 8430

#ifndef _POLYNOMIAL_H_
#define _POLYNOMIAL_H_

#include <string>
#include <stack>
#include "Vector.h"

/**
   @class Polynomial
   @brief Represents @c 3D polynomials

   This class represents @c 3D polynomials.@n
   A @c 3D polynomials uses monomials of '@c xyz' type.
 */

// We suppose 3D Polynomial
class Polynomial{
 private: 
  static const char coefName[3];

  struct monomial_t{
    double coef;
    int power[3];
  };
  
  int         nMon;
  monomial_t*  mon;

 public:
   Polynomial(const double coef, const int powerX,
 	                         const int powerY,
                                 const int powerZ);

   Polynomial(const Polynomial& other);
   Polynomial(void);
  ~Polynomial(void);

  void               derivative(const int dim);
  Vector<Polynomial> gradient(void) const;

  double operator()
    (const double x, const double y, const double z) const;  
  
  double at
    (const double x, const double y, const double z) const;  


  Polynomial operator+(const Polynomial& other) const;
  Polynomial operator-(const Polynomial& other) const;
  Polynomial operator*(const Polynomial& other) const;
  Polynomial operator*(const double alpha) const;

  void add(const Polynomial& other);
  void sub(const Polynomial& other);
  void mul(const Polynomial& other);
  void mul(const double alpha);

  void power(const int n);

  Polynomial compose(const Polynomial& other) const;
  Polynomial compose(const Polynomial& otherA, 
		     const Polynomial& otherB) const;

  void operator=(const Polynomial& other);

  std::string toString(void) const;

 private:
  static std::string toString(const monomial_t* mon, const bool isAbs);

  static bool isSmaller(const monomial_t* a, const monomial_t*b); 
  static bool isEqual(const monomial_t* a, const monomial_t*b); 
  static bool isSmallerPower(const monomial_t* a, const monomial_t* b);  
  static bool isEqualPower(const monomial_t* a, const monomial_t* b);
  
  static void sort(monomial_t* mon, const int size);
  static void swap(monomial_t* mon, const int i, const int j);

  static int mergeMon(monomial_t* sourceA, const int sizeA, 
		      monomial_t* sourceB, const int sizeB,
		      monomial_t** dest);
  
  static int mult(const monomial_t* sourceA, const int sizeA,
		  const monomial_t* sourceB, const int sizeB,
		  monomial_t** dest);
  
  static void mult(monomial_t* source, const int size, const double alpha);

  static void distribute(monomial_t* src, const int size, const monomial_t* m);

  static void compose(const monomial_t* src, 
		      Polynomial comp,
		      std::stack<monomial_t>* stk);

  static void compose(const monomial_t* src, 
		      Polynomial compA, Polynomial compB,
		      std::stack<monomial_t>* stk);

  static Polynomial polynomialFromStack(std::stack<monomial_t>& stk);

  static monomial_t* copyMonomial(const monomial_t* src, const int size);

  static monomial_t* zeroPolynomial(void);
  static monomial_t* unitPolynomial(void);
};

/**
   @fn Polynomial::Polynomial(const double, const int, const int, const int)
   @param coef The coeficient of the futur monomial
   @param powerX The power of the '@c x' coordinate 
   of the futur monomial
   @param powerY The power of the '@c y' coordinate 
   of the futur monomial
   @param powerZ The power of the '@c z' coordinate 
   of the futur monomial
   @return Returns a new Monomial with the given
   parameters
   @note
   Note that Monomials are special case of Polynomial%s

   @fn Polynomial::Polynomial(const Polynomial&)
   @param other A Polynomial
   @return Returns a new Polynomial, which is
   the @em copy of the given one

   @fn Polynomial::Polynomial(void)
   @return Returns a new Polynomial, which is
   @em empty
   @warning
   An @em empty Polynomial means: @em A @em Polynomial
   @em with @em no @em monomials.@n
   In particular, the empty Polynomial is @em not
   the @em zero @em Polynomial.@n
   Indeed, the @em zero @em Polynomial has one monomial, 
   @em @c 0.

   @fn Polynomial::~Polynomial
   @return Deletes this Polynomial
 
   @fn Polynomial::derivative
   @param dim The dimention to use for the
   derivation
   @returns Derivates this Polynomial with 
   respect to the given dimention
   @note
   Dimention:
   @li @c 0 is for the @c x coordinate
   @li @c 1 is for the @c y coordinate
   @li @c 2 is for the @c z coordinate
   
   @fn Polynomial::gradient
   @return Returns a Vector with the gradient 
   of this Polynomial

   @fn double Polynomial::operator()(const double, const double, const double)
   @param x A value
   @param y A value
   @param z A value
   @return Returns the @em evaluation of this
   Polynomial at (@c x, @c y, @c z)

   @fn Polynomial::at
   @param x A value
   @param y A value
   @param z A value
   @return Returns the @em evaluation of this
   Polynomial at (@c x, @c y, @c z)

   @fn Polynomial Polynomial::operator+(const Polynomial&) const
   @param other An other Polynomial
   @return Returns a @em new Polynomial, which is the
   @em sum of this Polynomial and the given one

   @fn Polynomial Polynomial::operator-(const Polynomial&) const
   @param other An other Polynomial
   @return Returns a @em new Polynomial, which is the
   @em difference of this Polynomial and the given one

   @fn Polynomial Polynomial::operator*(const Polynomial&) const
   @param other An other Polynomial
   @return Returns a @em new Polynomial, which is the
   @em product of this Polynomial and the given one

   @fn Polynomial Polynomial::operator*(const double) const
   @param alpha A value
   @return Returns a @em new Polynomial, 
   which is this Polynomial @em multiplied by @c alpha

   @fn Polynomial::add
   @param other An other Polynomial
   @return The given Polynomial is 
   @em added to this Polynomial
   @note
   The result of this operation is stored in 
   this Polynomial  

   @fn Polynomial::sub
   @param other An other Polynomial
   @return The given Polynomial is 
   @em substracted to this Polynomial
   @note
   The result of this operation is stored in 
   this Polynomial  

   @fn void Polynomial::mul(const Polynomial&)
   @param other An other Polynomial
   @return The given Polynomial is 
   @em multiplied with this Polynomial
   @note
   The result of this operation is stored in 
   this Polynomial  

   @fn void Polynomial::mul(const double)
   @param alpha A value
   @return This Polynomial is @em multiplied
   by the given value
   @note
   The result of this operation is stored in 
   this Polynomial  

   @fn Polynomial::power
   @param n A @em natural number
   @return Takes this Polynomial to the power @c n

   @fn Polynomial Polynomial::compose(const Polynomial&) const
   @param other An other Polynomial, 
   called @c Q(x, @c y, @c z)
   @return
   Let this Polynomial be @c P(x, @c y, @c z).@n
   This method returns a @em new Polynomial,
   representing @c P(Q(x, @c y, @c z), @c y, @c z)

   @fn Polynomial Polynomial::compose(const Polynomial&, const Polynomial&) const
   @param otherA An other Polynomial, 
   called @c Q(x, @c y, @c z)
   @param otherB An other Polynomial, 
   called @c R(x, @c y, @c z)
   @return
   Let this Polynomial be @c P(x, @c y, @c z).@n
   This method returns a @em new Polynomial, representing 
   @c P(Q(x, @c y, @c z), @c R(x, @c y, @c z), @c z)

   @fn void Polynomial::operator=(const Polynomial&)
   @param other A Polynomial
   @return Sets this Polynomial to a @em copy
   of the given one

   @fn Polynomial::toString
   @return Returns a string representing this Polynomial
*/

//////////////////////
// Inline Functions //
//////////////////////

inline double Polynomial::operator() (const double x, 
				      const double y, 
				      const double z) const{
  return at(x, y, z);
}

inline bool Polynomial::isEqual(const Polynomial::monomial_t* a,
				const Polynomial::monomial_t* b){
  return a->power[0] == b->power[0] &&
         a->power[1] == b->power[1] &&
         a->power[2] == b->power[2];
}

inline bool Polynomial::isSmallerPower(const Polynomial::monomial_t* a,
				       const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    < 
    b->power[0] + b->power[1] + b->power[2] ;    
}

inline bool Polynomial::isEqualPower(const Polynomial::monomial_t* a,
				     const Polynomial::monomial_t* b){
  
  return 
    a->power[0] + a->power[1] + a->power[2] 
    ==
    b->power[0] + b->power[1] + b->power[2] ;    
}

#endif


Node-path: mathematics/Vector.cpp
Node-action: delete


Revision-number: 23
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-23T16:44:59.935919Z
PROPS-END

Node-path: basis/TriEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 4797
Text-content-md5: ed3e50343bf80ed0308cb4562a51abd5
Text-content-sha1: 39de79ee6e710292dac44b4f1e7000d3887e7a12
Content-length: 4797

#include "TriEdgeBasis.h"
#include "Legendre.h"

TriEdgeBasis::TriEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 2;
  size    = (order + 1) * (order + 2);
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  const int orderPlus     = order + 1;
  const int orderMinus    = order - 1;

  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];
  
  Polynomial* lagrange    = new Polynomial[3];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  Polynomial* u           = new Polynomial[orderPlus];
  Polynomial* v           = new Polynomial[orderPlus];

  // Classical and Intrated-Scaled Legendre Polynomial //
  Legendre::legendre(legendre, order);
  Legendre::intScaled(intLegendre, orderPlus);

  // Lagrange //
  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = lagrange[j] + lagrange[i];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = lagrange[i] - lagrange[j];


  // Basis //
  basis = new Vector<Polynomial>[size];

  // Edge Based (Nedelec) //
  int i = 0;

  for(int j = 1; i < 3; j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	(intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e])).gradient();

      i++;
    }
  }

  // Cell Based (Preliminary) //
  Polynomial p = lagrange[2] * 2 - Polynomial(1, 0, 0, 0);
  
  for(int l = 0; l < orderPlus; l++){
    u[l] = intLegendre[l].compose(lagrangeSub[0] * -1, lagrangeSum[0]);
    v[l] = legendre[l].compose(p);
    v[l].mul(lagrange[2]);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].add(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].sub(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 0; l < orderMinus; l++){
    basis[i] = basis[0];
    basis[i].mul(v[l]);
    
    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrange;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
  delete[] u;
  delete[] v;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: change
Text-content-length: 3092
Text-content-md5: 3627d7ab923d2f41635b31bd21d7570e
Text-content-sha1: 441f2312397937d4d26852c59d95ecaa23ac9a38
Content-length: 3092

#include "FormulationProjection.h"

#include <cmath>
#include "QuadEdgeBasis.h"
FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  // Vector to Project //
  f = &vectorToProject;

  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  baseGen = new TriEdgeBasis(1);

  basis     = baseGen->getBasis();
  basisSize = baseGen->getSize() - 3; //We use only Nedelc
}

FormulationProjection::~FormulationProjection(void){
  delete baseGen;
}

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> jg   = jac.map(gx[g], gy[g]);
    Vector<double> phiI = phiVect(edgeI, jg(0), jg(1), jac);
    Vector<double> phiJ = phiVect(edgeJ, jg(0), jg(1), jac);

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jg    = jac.map(gx[g], gy[g]);
    Vector<double> jPhiI = phiVect(equationI, jg(0), jg(1), jac);
  
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

Vector<double> FormulationProjection::phiVect(const int i, const double x, const double y,
				      const Jacobian& jac) const{
  const int j = (i + 1) % 3;
  const Vector<double> uv = jac.invMap(x, y);

  const double phi0 = nodePhi(i, uv(0), uv(1));
  const double phi1 = nodePhi(j, uv(0), uv(1));
  
  const Vector<double> gradPhi0 = gradNodePhi(i, jac);
  const Vector<double> gradPhi1 = gradNodePhi(j, jac);

  Vector<double> phi(2);
  phi(0) = (phi0 * gradPhi1(0)) - (phi1 * gradPhi0(0));
  phi(1) = (phi0 * gradPhi1(1)) - (phi1 * gradPhi0(1));

  return phi;
}

double FormulationProjection::nodePhi(const int i, const double x, const double y){
  switch(i){
  case 0: 
    return 1.0 - x - y;
    
  case 1: 
    return x;

  case 2: 
    return y;

  default: throw Exception("Unknown function");
  }
  
  return 0;
}

Vector<double> FormulationProjection::gradNodePhi(const int i, const Jacobian& jac){
  Vector<double> a(2);
  
  switch(i){
  case 0: 
    a(0) = -1.0;
    a(1) = -1.0;
    break;
    
  case 1: 
    a(0) = 1.0;
    a(1) = 0.0;
    break;
    
  case 2: 
    a(0) = 0.0;
    a(1) = 1.0;
    break;

  default: throw Exception("Unknown function");
  }

  return jac.grad(a);
}


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1558
Text-content-md5: c3c75f61203f1dc1b97777d503931dc7
Text-content-sha1: cecf638f691a95b25eaf829fb5f16641a473ce00
Content-length: 1558

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "FormulationVector.h"
#include "Basis.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriEdgeBasis.h"

/**
   @class FormulationProjection
   @brief Formulation for the Projection problem

   Vectorial Formulation for the @em Projection problem.

   @todo
   Put this class as a FormulationVector@n
   Setup all the automatic Basis stuff
 */

class FormulationProjection: public FormulationVector{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriEdgeBasis*             baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Basis<Vector<Polynomial> >& getBasis(void) const;
  
  
  Vector<double> phiVect(const int i, const double x, const double y, 
				 const Jacobian& jac) const;

 private:
  static double nodePhi(const int i, const double x, const double y);
  
  static Vector<double> gradNodePhi(const int i, const Jacobian& jac);
};


//////////////////////
// Inline Functions //
//////////////////////

inline Basis<Vector<Polynomial> >& 
FormulationProjection::getBasis(void) const{
  return *baseGen;
}


#endif


Revision-number: 24
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-24T14:11:42.337051Z
PROPS-END

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 789
Text-content-md5: 1e96f3b721afeb1be85cf9709da27c13
Text-content-sha1: c4262b3dc6df1aac96a0aa25cf3bdf178153c831
Content-length: 789

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  // Create Formulation //
  Vector<double> f(2); f(0) = -1; f(1) = 1; // Vector to project
  FormulationLaplace laplace;
  FormulationProjection projection(f);

  // Create System //
  System sys(msh.getAllNodeElements(), laplace);
  //System sys(msh.getAllEdgeElements(), projection);

  // Set Bondary Conditions //
  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  // Solve System //
  sys.solve();

  // Write Solution //
  Solution sol(msh, laplace);
  //Solution sol(msh, projection);
  sol.write("sol.pos");

  return 0;
}



Node-path: basis/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 134
Text-content-md5: b747accbb635dd3ede5e055e1867bc9b
Text-content-sha1: 63f3bfa13a30c8cfb1165e199434fe0b07286924
Content-length: 134

set(src
  QuadNodeBasis.cpp
  QuadEdgeBasis.cpp
  TriNodeBasis.cpp
  TriEdgeBasis.cpp
  TriNedelec.cpp
)


add_sources(basis "${src}")

Node-path: basis/TriNedelec.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2503
Text-content-md5: a2f46411b8a0f0e1a9296fb33f71ec41
Text-content-sha1: 7b8c114ddd02410b6c924ce324643cf771fe47c5
Content-length: 2513

PROPS-END
#include "TriNedelec.h"

TriNedelec::TriNedelec(void){
  // Set Basis Type //
  order   = 1;
  type    = 2;
  size    = 3;
  nodeNbr = 3;
  dim     = 2;

  // Lagrange //
  Polynomial* lagrange    = new Polynomial[3];

  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Basis //
  basis = new Vector<Polynomial>[size];

  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);
  }

  // Free Temporary Sapce //
  delete[] lagrange;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriNedelec b;
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNedelec.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 508
Text-content-md5: ce4b8b0717da090d2c1155a1b0171bff
Text-content-sha1: f00d15feee5915785bb0ba6e4ec0bb7e86e6b9b9
Content-length: 518

PROPS-END
#ifndef _TRINEDELEC_H_
#define _TRINEDELEC_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class TriNedelec
   @brief Nedelec Basis for Triangles
   @extends Basis
 
   This class can instantiate a Nedelec Basis 
   for Triangles.@n

   @note
   This is a Basis of Vector%s of Polynomial%s
*/

class TriNedelec: public Basis<Vector<Polynomial> >{
 public:
   TriNedelec(void);
};


/**
   @fn TriNedelec::TriNedelec
   @return Returns a new Nedelec Basis for Triangles
*/

#endif


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1197
Text-content-md5: 6a6f049a19d92dbdd7942d0dc481fcce
Text-content-sha1: 005b00cbfebb1040158c81913a94942528fd2f07
Content-length: 1197

#include "FormulationLaplace.h"
#include <cmath>

FormulationLaplace::FormulationLaplace(void){
  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  // Generate Basis
  base = new TriNodeBasis(1);  
  const Polynomial* basis = base->getBasis();

  // Take gradient
  basisSize = base->getSize();  
  gradBasis = new Vector<Polynomial> [basisSize];

  for(int i = 0; i < basisSize; i++)
    gradBasis[i] = basis[i].gradient();
}

FormulationLaplace::~FormulationLaplace(void){
  delete[] gradBasis;
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> phiI = jac.grad(gradBasis[nodeI].at(gx[g], gy[g], 0));
    Vector<double> phiJ = jac.grad(gradBasis[nodeJ].at(gx[g], gy[g], 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1343
Text-content-md5: 22284cd9be61e7c165322c12df8e58e0
Text-content-sha1: 57901d58d0bb6156a49e56cb966354c3fdcabf45
Content-length: 1343

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "FormulationScalar.h"
#include "Polynomial.h"
#include "Vector.h"
#include "TriNodeBasis.h"

/**
   @class FormulationLaplace
   @brief Formulation for the Laplace problem

   Scalar Formulation for the @em Laplace problem.
 */

class FormulationLaplace: public FormulationScalar{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNodeBasis*       base;
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Basis<Polynomial>& getBasis(void) const; 
};

/**
   @fn FormulationLaplace::FormulationLaplace
   @return Returns a new FormulationLaplace
 
   @fn FormulationLaplace::~FormulationLaplace
   @return Deletes the this FormulationLaplace
*/

//////////////////////
// Inline Functions //
//////////////////////

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline Basis<Polynomial>& FormulationLaplace::getBasis(void) const{
  return *base;
}

#endif


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: change
Text-content-length: 1758
Text-content-md5: bec12f9a6fa3461b10d5abe7e62ebf55
Text-content-sha1: 5ad82409bcf26d5e7680b78dcf5b984bf28c37b9
Content-length: 1758

#include "FormulationProjection.h"
#include <cmath>

FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  // Vector to Project //
  f = &vectorToProject;

  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  baseGen   = new TriNedelec;
  basis     = baseGen->getBasis();
  basisSize = baseGen->getSize(); 
}

FormulationProjection::~FormulationProjection(void){
  delete baseGen;
}

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> phiI = jac.grad(basis[edgeI].at(gx[g], gy[g], 0));
    Vector<double> phiJ = jac.grad(basis[edgeJ].at(gx[g], gy[g], 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jPhiI = jac.grad(basis[equationI].at(gx[g], gy[g], 0));
 
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1484
Text-content-md5: 4cfa5444597471f13b527edb4ddbaefb
Text-content-sha1: 810f5a82daaf8305edc2b35f3484e0abf1cca151
Content-length: 1484

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "FormulationVector.h"
#include "Basis.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriNedelec.h"

/**
   @class FormulationProjection
   @brief Formulation for the Projection problem

   Vectorial Formulation for the @em Projection problem.
 */

class FormulationProjection: public FormulationVector{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNedelec*               baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Basis<Vector<Polynomial> >& getBasis(void) const;
};

/**
   @fn FormulationProjection::FormulationProjection
   @param vectorToProject A Vector<double>
   @return Returns a new FormulationProjection to project
   the given Vector
 
   @fn FormulationProjection::~FormulationProjection
   @return Deletes the this FormulationProjection
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Basis<Vector<Polynomial> >& 
FormulationProjection::getBasis(void) const{
  return *baseGen;
}


#endif


Node-path: geometry/Jacobian.cpp
Node-kind: file
Node-action: change
Text-content-length: 1593
Text-content-md5: 7ce5b927d4fb779fe1af73489680f4e3
Text-content-sha1: 6965e1acb0d1e915d4851e655ddb7dcec334e192
Content-length: 1593

#include "Jacobian.h"

Jacobian::Jacobian(const std::vector<Node*>& nodes){
  const int N = nodes.size();
  
  for(int i = 0; i < N; i++){
    nodeX[i] = nodes[i]->getX();
    nodeY[i] = nodes[i]->getY();
  }  

  dxdu = nodeX[1] - nodeX[0];
  dxdv = nodeX[2] - nodeX[0];
  dydu = nodeY[1] - nodeY[0];
  dydv = nodeY[2] - nodeY[0];
  
  detDxDu = (dxdu * dydv) - (dxdv * dydu);
  
  dudx = +dydv / detDxDu;
  dudy = -dxdv / detDxDu;
  dvdx = -dydu / detDxDu;
  dvdy = +dxdu / detDxDu; 
}

Vector<double> Jacobian::grad(const Vector<double>& gradUV) const{
  Vector<double> gradXY(2);
  
  gradXY(0) = gradUV(0) * dudx + gradUV(1) * dvdx;
  gradXY(1) = gradUV(0) * dudy + gradUV(1) * dvdy;    
  
  return gradXY;
}

Vector<double> Jacobian::invMap(const Vector<double>& XY) const{
  Vector<double> UV(2);
  
  UV(0) = (XY(0) - nodeX[0]) * dudx + (XY(1) - nodeY[0]) * dudy;
  UV(1) = (XY(0) - nodeX[0]) * dvdx + (XY(1) - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::invMap(const double x, const double y) const{
  Vector<double> UV(2);
  
  UV(0) = (x - nodeX[0]) * dudx + (y - nodeY[0]) * dudy;
  UV(1) = (x - nodeX[0]) * dvdx + (y - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::map(const Vector<double>& UV) const{
  Vector<double> XY(2);

  XY(0) = UV(0) * dxdu + UV(1) * dxdv + nodeX[0];
  XY(1) = UV(0) * dydu + UV(1) * dydv + nodeY[0];  

  return XY;
}

Vector<double> Jacobian::map(const double u, const double v) const{
  Vector<double> XY(2);

  XY(0) = u * dxdu + v * dxdv + nodeX[0];
  XY(1) = u * dydu + v * dydv + nodeY[0];  

  return XY;
}


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: change
Text-content-length: 2907
Text-content-md5: b91329b8ab17a732e54d49edbe8151e1
Text-content-sha1: 68438bb46e3c80329f2349e7c39e0802d31c3786
Content-length: 2907

#include "Interpolator.h"
#include "Jacobian.h"
#include "Exception.h"
#include "FormulationScalar.h"
#include "FormulationVector.h"


#include "FormulationProjection.h"

using namespace std;

Interpolator::Interpolator(const Formulation& formulation, const Mesh& mesh){
  f     = &formulation;
  fType = f->type();
  
  if(!fType){
    const FormulationScalar& fc = 
      dynamic_cast<const FormulationScalar&>(formulation);
    
    bSize = fc.getBasis().getSize();
  }

  else{ 
    const FormulationVector& fv = 
      dynamic_cast<const FormulationVector&>(formulation);

    bSize     = fv.getBasis().getSize();
    vectBasis = fv.getBasis().getBasis();
  }

  msh = &mesh;

  nNode = msh->getNbNode();
  nodeVectorValue = new vector<Vector<double>*>(nNode);
  isInterpolated  = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    Vector<double>* v = new Vector<double>(2);
    (*v)(0) = 0.0; 
    (*v)(1) = 0.0;
    (*nodeVectorValue)[i] = v;
    (*isInterpolated)[i] = false;
  }

 switch(fType){
 case 0 : break;
 case 1 : interpolateEdgeElement(); break;
 default: throw Exception("Unknown Basis Type"); break;
 }
}

Interpolator::~Interpolator(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeVectorValue)[i];
  delete nodeVectorValue;

  delete isInterpolated;
}

void Interpolator::interpolateEdgeElement(void){

  const FormulationProjection& fv = 
    dynamic_cast<const FormulationProjection&>(*f);

  
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeVectorValue)[id];
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> uv = jac.invMap(x, y);
	  Vector<double> vk = jac.grad(vectBasis[k].at(uv(0), uv(1), 0));

	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
 
}

const std::vector<Vector<double>*>& Interpolator::getVectorNodeValue(void) const{
  if(fType != 1 && fType != 2)
    throw Exception("The Basis Functions are scalar");
    
    return *nodeVectorValue;
}

const std::vector<double>& Interpolator::getScalarNodeValue(void) const{
  if(fType != 0 && fType != 3)
    throw Exception("The Basis Functions are vectorial");
    
  if(fType == 0)
    throw Exception("Interpolation of Nodal function is not implemented");

  if(fType == 3)
    throw Exception("Interpolation of Volume function is not implemented");
}


Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: change
Text-content-length: 2059
Text-content-md5: 2367c5fcb3b85ffa9527340537650b07
Text-content-sha1: 7c3fbc61485cfef8a8fa0c82699209cafacdbef5
Content-length: 2059

#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

#include <vector>
#include "Vector.h"
#include "Formulation.h"
#include "Mesh.h"
#include "Basis.h"
#include "Polynomial.h"

/**
   @class Interpolator
   @brief Interpolates Entity values on Node%s
   
   This class interpolates Entity values (of Mesh)
   on the @em Node%s (of the same Mesh).@n

   The Entity @em type to concider is given by the Formulation
   of the problem.@n

   The Formulation is also used to define the 
   @em type of the interpolated field, 
   @e i.e scalar of vectorial field. 
   
   @warning
   We can concider only @em one Entity @em type

   @todo
   Give the possibility to interpolate multiple type fields@n
   Give the possibility to interpolate non Mesh stuff@n
   Use Vector instead of std::vector@n
   Find a better for handling Vector / Scalar fields
   --- use of inheritance ?
 */

class Interpolator{
 private:
  const Formulation* f;
  int fType;
  int bSize;

  const Vector<Polynomial>* vectBasis;

  const Mesh* msh;  
  int nNode;
  std::vector<Vector<double>*>* nodeVectorValue;
  std::vector<bool>* isInterpolated;

 public:
   Interpolator(const Formulation& formulation, const Mesh& mesh);
  ~Interpolator(void);

  const std::vector<Vector<double>*>& getVectorNodeValue(void) const;
  const std::vector<double>&  getScalarNodeValue(void) const;

 private:
  void interpolateEdgeElement(void);
};

/**
   @fn Interpolator::Interpolator
   @param formulation The Formulation to use for 
   Entity @em type selection
   @param mesh The Mesh to interpolate on
   @return Returns a new Interpolator

   @fn Interpolator::~Interpolator
   @return Deletes the Interpolator

   @fn Interpolator::getVectorNodeValue
   @return Returns the interpolated @em vectorial field
   @warning
   If the field is not a @em vectorial field, this methods
   throws an Exception

   @fn Interpolator::getScalarNodeValue
   @return Returns the interpolated @em scalar field
   @warning
   If the field is not a @em scalar field, this methods
   throws an Exception
 */

#endif


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 3117
Text-content-md5: a8d2e75c3056efc8ca3ce4055608f806
Text-content-sha1: 77914881f33bceb901902fe5aa9a1f55053c2b83
Content-length: 3117

#include "Solution.h"
#include "Exception.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();
  f       = &formulation;
  fType   = f->type();

  interpolator = new Interpolator(*f, *msh);

  nodalScalarValue = NULL;
  
  switch(fType){
  case 0 : getNodalScalarValue(); break;
  case 1 : getNodalVectorValue(); break;
  default: throw Exception("Unknown basis type"); break;
  }
}

Solution::~Solution(void){
  if(nodalScalarValue)
    delete nodalScalarValue;

  delete interpolator;
  // Interpolator is responsible for deleting 'nodalVectorValue'
}

void Solution::getNodalScalarValue(void){
  nodalScalarValue = new vector<double>(N);
  
  for(int i = 0; i < N; i++)
    (*nodalScalarValue)[i] = (*node)[i]->getValue();
}

void Solution::getNodalVectorValue(void){
  nodalVectorValue = &(interpolator->getVectorNodeValue());
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  bool isScalar;
  if(fType == 0 || fType == 3)
    isScalar = true;
  else
    isScalar = false;

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, isScalar);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1849
Text-content-md5: 90be974fe0412ebf02ff306a4e1e2516
Text-content-sha1: a49dfe7d990b8e0aa53076ee382b697519719fb6
Content-length: 1849

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"
#include "Interpolator.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   Choose Interpolator Type at runtime IN SOLUTION@n
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  const Formulation* f;
  int fType;

  Interpolator *interpolator;

  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void getNodalScalarValue(void);
  void getNodalVectorValue(void);

  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @return Writes the solution in the given @c .msh file
 */

#endif


Node-path: tests/circle.geo
Node-kind: file
Node-action: change
Text-content-length: 675
Text-content-md5: 933407db459387aaa68586f748386b49
Text-content-sha1: 3a2e3e1becda4567931d6de8eda17d6d77c618cb
Content-length: 675

//cl = 2.75;
cl = 1;
//cl = 0.75;

L = 2;
l = 0.75;

Point(0) = {0, 0, 0, cl};

Point(1) = {+L, -L, 0, cl};
Point(2) = {+L, +L, 0, cl};
Point(3) = {-L, +L, 0, cl};
Point(4) = {-L, -L, 0, cl};

Circle(1) = {1, 0, 2};
Circle(2) = {2, 0, 3};
Circle(3) = {3, 0, 4};
Circle(4) = {4, 0, 1};

Point(5) = {+l, -l, 0, cl};
Point(6) = {+l, +l, 0, cl};
Point(7) = {-l, +l, 0, cl};
Point(8) = {-l, -l, 0, cl};

Circle(5) = {5, 0, 6};
Circle(6) = {6, 0, 7};
Circle(7) = {7, 0, 8};
Circle(8) = {8, 0, 5};

Line Loop(9) = {3, 4, 1, 2};
Line Loop(10) = {7, 8, 5, 6};
Plane Surface(11) = {9, 10};

Physical Line(5) = {1, 2, 3, 4};
Physical Line(6) = {5, 6, 7, 8};
Physical Surface(7) = {11};


Node-path: tests/circle.msh
Node-kind: file
Node-action: change
Text-content-length: 267955
Text-content-md5: 3903df69da5a2d027473d111bf14e163
Text-content-sha1: 47e34efe00680792e190decc6a5af9590a29f51d
Content-length: 267955

$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
2712
1 2 -2 0
2 2 2 0
3 2.073383798128843 -1.923819021024798 0
4 2.143867781534048 -1.84494740719086 0
5 2.211353371991436 -1.763495467581956 0
6 2.275746184800493 -1.679577120100772 0
7 2.336956160789899 -1.593309732144423 0
8 2.394897692273435 -1.504813956455539 0
9 2.449489742780063 -1.414213562378489 0
10 2.500655960390763 -1.321635262756766 0
11 2.548324784523594 -1.227208536713616 0
12 2.59242954601764 -1.131065448563774 0
13 2.632908560376147 -1.033340463108844 0
14 2.669705214037212 -0.9341702575775559 0
15 2.702768043553101 -0.8336935304703623 0
16 2.732050807567089 -0.7320508075755515 0
17 2.757512551485858 -0.629384245431954 0
18 2.779117664758207 -0.5258374325101685 0
19 2.796835930679621 -0.4215551883911033 0
20 2.810642568653064 -0.3166833612226954 0
21 2.820518268846891 -0.2113686237380878 0
22 2.826449219201389 -0.1057582681205504 0
23 2.82842712474619 -2.043476499125063e-12 0
24 2.826449219201538 0.1057582681165679 0
25 2.820518268847182 0.2113686237342141 0
26 2.810642568653487 0.3166833612189366 0
27 2.796835930680169 0.4215551883874624 0
28 2.779117664758873 0.5258374325066506 0
29 2.757512551486633 0.6293842454285619 0
30 2.732050807567963 0.7320508075722882 0
31 2.702768043554068 0.8336935304672314 0
32 2.669705214038262 0.9341702575745581 0
33 2.632908560377271 1.033340463105981 0
34 2.592429546018792 1.131065448561134 0
35 2.548324784524719 1.227208536711281 0
36 2.50065596039184 1.321635262754729 0
37 2.449489742781072 1.414213562376743 0
38 2.394897692274355 1.504813956454076 0
39 2.33695616079071 1.593309732143234 0
40 2.275746184801176 1.679577120099844 0
41 2.211353371991975 1.76349546758128 0
42 2.143867781534424 1.844947407190423 0
43 2.073383798129039 1.923819021024587 0
44 -2 2 0
45 1.923819021024798 2.073383798128843 0
46 1.84494740719086 2.143867781534048 0
47 1.763495467581956 2.211353371991436 0
48 1.679577120100772 2.275746184800493 0
49 1.593309732144423 2.336956160789899 0
50 1.504813956455539 2.394897692273435 0
51 1.414213562378489 2.449489742780063 0
52 1.321635262756766 2.500655960390763 0
53 1.227208536713616 2.548324784523594 0
54 1.131065448563774 2.59242954601764 0
55 1.033340463108844 2.632908560376147 0
56 0.9341702575775559 2.669705214037212 0
57 0.8336935304703623 2.702768043553101 0
58 0.7320508075755515 2.732050807567089 0
59 0.629384245431954 2.757512551485858 0
60 0.5258374325101685 2.779117664758207 0
61 0.4215551883911033 2.796835930679621 0
62 0.3166833612226954 2.810642568653064 0
63 0.2113686237380878 2.820518268846891 0
64 0.1057582681205504 2.826449219201389 0
65 2.043476499125063e-12 2.82842712474619 0
66 -0.1057582681165679 2.826449219201538 0
67 -0.2113686237342141 2.820518268847182 0
68 -0.3166833612189366 2.810642568653487 0
69 -0.4215551883874624 2.796835930680169 0
70 -0.5258374325066506 2.779117664758873 0
71 -0.6293842454285619 2.757512551486633 0
72 -0.7320508075722882 2.732050807567963 0
73 -0.8336935304672314 2.702768043554068 0
74 -0.9341702575745581 2.669705214038262 0
75 -1.033340463105981 2.632908560377271 0
76 -1.131065448561134 2.592429546018792 0
77 -1.227208536711281 2.548324784524719 0
78 -1.321635262754729 2.50065596039184 0
79 -1.414213562376743 2.449489742781072 0
80 -1.504813956454076 2.394897692274355 0
81 -1.593309732143234 2.33695616079071 0
82 -1.679577120099844 2.275746184801176 0
83 -1.76349546758128 2.211353371991975 0
84 -1.844947407190423 2.143867781534424 0
85 -1.923819021024587 2.073383798129039 0
86 -2 -2 0
87 -2.073383798128843 1.923819021024798 0
88 -2.143867781534048 1.84494740719086 0
89 -2.211353371991436 1.763495467581956 0
90 -2.275746184800493 1.679577120100772 0
91 -2.336956160789899 1.593309732144423 0
92 -2.394897692273435 1.504813956455539 0
93 -2.449489742780063 1.414213562378489 0
94 -2.500655960390763 1.321635262756766 0
95 -2.548324784523594 1.227208536713616 0
96 -2.59242954601764 1.131065448563774 0
97 -2.632908560376147 1.033340463108844 0
98 -2.669705214037212 0.9341702575775559 0
99 -2.702768043553101 0.8336935304703623 0
100 -2.732050807567089 0.7320508075755515 0
101 -2.757512551485858 0.629384245431954 0
102 -2.779117664758207 0.5258374325101685 0
103 -2.796835930679621 0.4215551883911033 0
104 -2.810642568653064 0.3166833612226954 0
105 -2.820518268846891 0.2113686237380878 0
106 -2.826449219201389 0.1057582681205504 0
107 -2.82842712474619 2.043476499125063e-12 0
108 -2.826449219201538 -0.1057582681165679 0
109 -2.820518268847182 -0.2113686237342141 0
110 -2.810642568653487 -0.3166833612189366 0
111 -2.796835930680169 -0.4215551883874624 0
112 -2.779117664758873 -0.5258374325066506 0
113 -2.757512551486633 -0.6293842454285619 0
114 -2.732050807567963 -0.7320508075722882 0
115 -2.702768043554068 -0.8336935304672314 0
116 -2.669705214038262 -0.9341702575745581 0
117 -2.632908560377271 -1.033340463105981 0
118 -2.592429546018792 -1.131065448561134 0
119 -2.548324784524719 -1.227208536711281 0
120 -2.50065596039184 -1.321635262754729 0
121 -2.449489742781072 -1.414213562376743 0
122 -2.394897692274355 -1.504813956454076 0
123 -2.33695616079071 -1.593309732143234 0
124 -2.275746184801176 -1.679577120099844 0
125 -2.211353371991975 -1.76349546758128 0
126 -2.143867781534424 -1.844947407190423 0
127 -2.073383798129039 -1.923819021024587 0
128 -1.923819021024798 -2.073383798128843 0
129 -1.84494740719086 -2.143867781534048 0
130 -1.763495467581956 -2.211353371991436 0
131 -1.679577120100772 -2.275746184800493 0
132 -1.593309732144423 -2.336956160789899 0
133 -1.504813956455539 -2.394897692273435 0
134 -1.414213562378489 -2.449489742780063 0
135 -1.321635262756766 -2.500655960390763 0
136 -1.227208536713616 -2.548324784523594 0
137 -1.131065448563774 -2.59242954601764 0
138 -1.033340463108844 -2.632908560376147 0
139 -0.9341702575775559 -2.669705214037212 0
140 -0.8336935304703623 -2.702768043553101 0
141 -0.7320508075755515 -2.732050807567089 0
142 -0.629384245431954 -2.757512551485858 0
143 -0.5258374325101685 -2.779117664758207 0
144 -0.4215551883911033 -2.796835930679621 0
145 -0.3166833612226954 -2.810642568653064 0
146 -0.2113686237380878 -2.820518268846891 0
147 -0.1057582681205504 -2.826449219201389 0
148 -2.043476499125063e-12 -2.82842712474619 0
149 0.1057582681165679 -2.826449219201538 0
150 0.2113686237342141 -2.820518268847182 0
151 0.3166833612189366 -2.810642568653487 0
152 0.4215551883874624 -2.796835930680169 0
153 0.5258374325066506 -2.779117664758873 0
154 0.6293842454285619 -2.757512551486633 0
155 0.7320508075722882 -2.732050807567963 0
156 0.8336935304672314 -2.702768043554068 0
157 0.9341702575745581 -2.669705214038262 0
158 1.033340463105981 -2.632908560377271 0
159 1.131065448561134 -2.592429546018792 0
160 1.227208536711281 -2.548324784524719 0
161 1.321635262754729 -2.50065596039184 0
162 1.414213562376743 -2.449489742781072 0
163 1.504813956454076 -2.394897692274355 0
164 1.593309732143234 -2.33695616079071 0
165 1.679577120099844 -2.275746184801176 0
166 1.76349546758128 -2.211353371991975 0
167 1.844947407190423 -2.143867781534424 0
168 1.923819021024587 -2.073383798129039 0
169 0.75 -0.75 0
170 0.75 0.75 0
171 0.8199014002507383 -0.6728756897576837 0
172 0.8819067018135037 -0.5892712187918466 0
173 0.9354187597387111 -0.499991743860728 0
174 0.9799222236558836 -0.4058970751130253 0
175 1.014988500879884 -0.3078933956446724 0
176 1.04027988399114 -0.206924534464575 0
177 1.055552803144611 -0.1039628769011031 0
178 1.060660171779821 -1.17217346939924e-12 0
179 1.055552803144812 0.1039628768990615 0
180 1.040279883991483 0.2069245344628503 0
181 1.014988500880309 0.30789339564327 0
182 0.9799222236563322 0.4058970751119425 0
183 0.9354187597391255 0.4999917438599528 0
184 0.8819067018138294 0.5892712187913591 0
185 0.8199014002509244 0.6728756897574573 0
186 -0.75 0.75 0
187 0.6728756897576837 0.8199014002507383 0
188 0.5892712187918466 0.8819067018135037 0
189 0.499991743860728 0.9354187597387111 0
190 0.4058970751130253 0.9799222236558836 0
191 0.3078933956446724 1.014988500879884 0
192 0.206924534464575 1.04027988399114 0
193 0.1039628769011031 1.055552803144611 0
194 1.17217346939924e-12 1.060660171779821 0
195 -0.1039628768990615 1.055552803144812 0
196 -0.2069245344628503 1.040279883991483 0
197 -0.30789339564327 1.014988500880309 0
198 -0.4058970751119425 0.9799222236563322 0
199 -0.4999917438599528 0.9354187597391255 0
200 -0.5892712187913591 0.8819067018138294 0
201 -0.6728756897574573 0.8199014002509244 0
202 -0.75 -0.75 0
203 -0.8199014002507383 0.6728756897576837 0
204 -0.8819067018135037 0.5892712187918466 0
205 -0.9354187597387111 0.499991743860728 0
206 -0.9799222236558836 0.4058970751130253 0
207 -1.014988500879884 0.3078933956446724 0
208 -1.04027988399114 0.206924534464575 0
209 -1.055552803144611 0.1039628769011031 0
210 -1.060660171779821 1.17217346939924e-12 0
211 -1.055552803144812 -0.1039628768990615 0
212 -1.040279883991483 -0.2069245344628503 0
213 -1.014988500880309 -0.30789339564327 0
214 -0.9799222236563322 -0.4058970751119425 0
215 -0.9354187597391255 -0.4999917438599528 0
216 -0.8819067018138294 -0.5892712187913591 0
217 -0.8199014002509244 -0.6728756897574573 0
218 -0.6728756897576837 -0.8199014002507383 0
219 -0.5892712187918466 -0.8819067018135037 0
220 -0.499991743860728 -0.9354187597387111 0
221 -0.4058970751130253 -0.9799222236558836 0
222 -0.3078933956446724 -1.014988500879884 0
223 -0.206924534464575 -1.04027988399114 0
224 -0.1039628769011031 -1.055552803144611 0
225 -1.17217346939924e-12 -1.060660171779821 0
226 0.1039628768990615 -1.055552803144812 0
227 0.2069245344628503 -1.040279883991483 0
228 0.30789339564327 -1.014988500880309 0
229 0.4058970751119425 -0.9799222236563322 0
230 0.4999917438599528 -0.9354187597391255 0
231 0.5892712187913591 -0.8819067018138294 0
232 0.6728756897574573 -0.8199014002509244 0
233 -1.675592868956513 1.00101697331708 0
234 1.00101697331708 1.675592868956513 0
235 1.675592868956513 -1.001016973317083 0
236 -1.001016973317083 -1.675592868956513 0
237 -1.004724783693921 1.680388742524567 0
238 -1.680388742524568 -1.004724783693923 0
239 1.004724783693923 -1.680388742524568 0
240 1.680388742524567 1.004724783693921 0
241 -1.941217085280069 0.1049452518161482 0
242 1.941217085280069 -0.1049452518161478 0
243 -0.1049452518161474 -1.941217085280069 0
244 0.1049452518161483 1.941217085280069 0
245 -2.110551840722817 -0.5197181353573471 0
246 -0.5197181353573477 2.110551840722818 0
247 0.5197181353573475 -2.110551840722818 0
248 2.110551840722818 0.5197181353573468 0
249 2.143661307312704 -0.6552199675069728 0
250 -0.6552199675069729 -2.143661307312704 0
251 -2.143661307312704 0.6552199675069733 0
252 0.6552199675069728 2.143661307312704 0
253 1.591571199214583 1.583925148936936 0
254 -1.583925148936938 1.591571199214583 0
255 -1.591571199214584 -1.583925148936938 0
256 1.583925148936939 -1.591571199214583 0
257 -0.3921249359943486 1.569701701268798 0
258 0.392124935994348 -1.569701701268798 0
259 1.569701701268797 0.3921249359943481 0
260 -1.569701701268797 -0.3921249359943477 0
261 1.140113751844552 1.140697994084603 0
262 -1.140113751844553 -1.140697994084602 0
263 -1.140697994084604 1.140113751844552 0
264 1.140697994084603 -1.140113751844553 0
265 1.537235997083475 -0.4673241721259884 0
266 -0.4673241721259884 -1.537235997083475 0
267 -1.537235997083475 0.4673241721259876 0
268 0.4673241721259874 1.537235997083475 0
269 0.1362931003954599 -2.357177644296475 0
270 -2.357177644296476 -0.1362931003954597 0
271 -0.1362931003954599 2.357177644296475 0
272 2.357177644296476 0.1362931003954596 0
273 -0.998927535163474 2.14511377990222 0
274 -2.14511377990222 -0.9989275351634722 0
275 2.14511377990222 0.9989275351634735 0
276 0.9989275351634741 -2.14511377990222 0
277 -2.10034570637802 1.0907725630665 0
278 1.090772563066499 2.100345706378019 0
279 2.10034570637802 -1.090772563066499 0
280 -1.090772563066499 -2.10034570637802 0
281 1.486071610874764 -0.03775739599181208 0
282 -0.037757395991812 -1.486071610874764 0
283 -1.486071610874763 0.03775739599181142 0
284 0.03775739599181162 1.486071610874763 0
285 -0.7266344701697544 1.305396880975857 0
286 1.305396880975856 0.7266344701697539 0
287 0.7266344701697539 -1.305396880975857 0
288 -1.305396880975856 -0.7266344701697539 0
289 -1.398078275506882 1.955211920604768 0
290 1.955211920604767 1.398078275506882 0
291 -1.955211920604769 -1.398078275506882 0
292 1.398078275506883 -1.955211920604769 0
293 -0.3071269494168859 -2.382132273812633 0
294 2.382132273812634 -0.307126949416886 0
295 -2.382132273812635 0.3071269494168858 0
296 0.3071269494168863 2.382132273812635 0
297 -1.236807845196658 0.7420031493331508 0
298 0.742003149333151 1.236807845196658 0
299 -0.7420031493331509 -1.236807845196658 0
300 1.236807845196658 -0.7420031493331508 0
301 -1.45691848061371 -1.946038555215579 0
302 1.946038555215579 -1.45691848061371 0
303 -1.946038555215579 1.456918480613711 0
304 1.456918480613711 1.946038555215579 0
305 0.6706383275517063 -1.772028484913299 0
306 -1.772028484913299 -0.6706383275517067 0
307 -0.670638327551706 1.7720284849133 0
308 1.772028484913299 0.6706383275517054 0
309 -1.892909378555157 -0.259814891993898 0
310 -0.2598148919938981 1.892909378555157 0
311 0.259814891993899 -1.892909378555157 0
312 1.892909378555158 0.2598148919938989 0
313 -1.877110970169661 0.4322046985386031 0
314 0.4322046985386032 1.877110970169661 0
315 -0.4322046985386025 -1.877110970169662 0
316 1.877110970169662 -0.4322046985386025 0
317 -1.450570985128759 1.268908230935793 0
318 -1.268908230935796 -1.450570985128757 0
319 1.450570985128757 -1.268908230935797 0
320 1.268908230935794 1.450570985128759 0
321 2.376231992825084 0.7505733079426472 0
322 0.7505733079426457 -2.376231992825085 0
323 -2.376231992825085 -0.7505733079426454 0
324 -0.7505733079426472 2.376231992825085 0
325 -0.4435214774604602 2.456714299412036 0
326 2.456714299412038 0.4435214774604602 0
327 -2.456714299412038 -0.4435214774604608 0
328 0.4435214774604616 -2.456714299412037 0
329 0.8909202942482328 2.355745037344463 0
330 -2.355745037344462 0.8909202942482336 0
331 -0.8909202942482318 -2.355745037344462 0
332 2.355745037344462 -0.8909202942482316 0
333 -1.274340416237504 1.529988256672232 0
334 1.529988256672232 1.274340416237505 0
335 -1.529988256672234 -1.274340416237506 0
336 1.274340416237506 -1.529988256672234 0
337 -0.737032808447159 -1.8402081989181 0
338 1.8402081989181 -0.737032808447159 0
339 0.737032808447159 1.840208198918101 0
340 -1.840208198918101 0.7370328084471592 0
341 1.875752218852007 1.67833345085214 0
342 -1.678333450852139 1.875752218852007 0
343 -1.87575221885201 -1.678333450852139 0
344 1.678333450852139 -1.875752218852009 0
345 -2.453426853499258 0.604407768245578 0
346 0.6044077682455771 2.453426853499259 0
347 2.453426853499258 -0.6044077682455772 0
348 -0.6044077682455773 -2.453426853499259 0
349 0.2220614263653415 -1.331935599372384 0
350 1.331935599372384 0.2220614263653408 0
351 -0.2220614263653425 1.331935599372384 0
352 -1.331935599372384 -0.2220614263653414 0
353 -0.8559333306083573 1.049107891859953 0
354 1.049107891859954 0.8559333306083572 0
355 0.8559333306083569 -1.049107891859953 0
356 -1.049107891859953 -0.8559333306083572 0
357 -0.270332612090131 -1.322791103425298 0
358 1.322791103425297 -0.2703326120901312 0
359 0.2703326120901303 1.322791103425297 0
360 -1.322791103425297 0.2703326120901304 0
361 -1.742071412025401 1.2668725170687 0
362 1.266872517068699 1.742071412025401 0
363 1.742071412025399 -1.266872517068703 0
364 -1.266872517068703 -1.742071412025399 0
365 1.536761024624167 -0.748405572907933 0
366 -0.748405572907933 -1.536761024624167 0
367 -1.536761024624167 0.7484055729079314 0
368 0.7484055729079313 1.536761024624167 0
369 -1.379874340276214 -0.997112252935913 0
370 0.9971122529359128 -1.379874340276213 0
371 1.379874340276213 0.9971122529359137 0
372 -0.997112252935914 1.379874340276212 0
373 1.375446373742149 -0.99567743771392 0
374 -0.9956774377139198 -1.375446373742149 0
375 -1.37544637374215 0.9956774377139186 0
376 0.995677437713919 1.37544637374215 0
377 0.2213641686153264 1.692732805724396 0
378 -1.692732805724395 0.2213641686153266 0
379 -0.2213641686153268 -1.692732805724396 0
380 1.692732805724396 -0.2213641686153265 0
381 -2.554214418342231 0.08474958539781353 0
382 -0.0847495853978142 -2.55421441834223 0
383 2.55421441834223 -0.08474958539781278 0
384 0.08474958539781419 2.554214418342232 0
385 2.221556125524339 1.268149739108309 0
386 1.268149739108309 -2.221556125524339 0
387 -1.268149739108309 2.221556125524339 0
388 -2.221556125524339 -1.268149739108309 0
389 1.258006055393931 0.4695101112634467 0
390 0.469510111263447 -1.258006055393931 0
391 -1.258006055393931 -0.4695101112634467 0
392 -0.4695101112634471 1.25800605539393 0
393 0.3134359042551227 2.118105900594583 0
394 -2.118105900594583 0.3134359042551227 0
395 2.118105900594582 -0.3134359042551225 0
396 -0.3134359042551219 -2.118105900594583 0
397 -1.117488338538527 1.897196319297705 0
398 1.897196319297704 1.117488338538527 0
399 -1.897196319297707 -1.117488338538527 0
400 1.117488338538529 -1.897196319297706 0
401 -1.717213334581761 -1.90127134658927 0
402 1.90127134658927 -1.717213334581761 0
403 1.717213334581761 1.901271346589271 0
404 -1.90127134658927 1.717213334581762 0
405 -1.358877769825451 -2.190127850410699 0
406 2.190127850410699 -1.358877769825452 0
407 1.358877769825451 2.190127850410698 0
408 -2.190127850410698 1.358877769825451 0
409 -1.54772978737017 -0.7554189627329481 0
410 0.7554189627329476 -1.54772978737017 0
411 -0.755418962732946 1.54772978737017 0
412 1.54772978737017 0.7554189627329458 0
413 -0.06099468944347456 1.746014997947738 0
414 -1.746014997947738 -0.06099468944347475 0
415 1.746014997947738 0.06099468944347503 0
416 0.06099468944347519 -1.746014997947738 0
417 0.1034319679042384 -2.093449030956088 0
418 -0.1034319679042373 2.093449030956088 0
419 -2.093449030956088 -0.1034319679042373 0
420 2.093449030956088 0.1034319679042392 0
421 2.039889499171399 0.787891376386689 0
422 -0.787891376386688 2.0398894991714 0
423 -2.0398894991714 -0.787891376386689 0
424 0.7878913763866896 -2.0398894991714 0
425 0.8236156218323627 1.023454760416103 0
426 1.023454760416103 -0.8236156218323629 0
427 -1.023454760416103 0.8236156218323626 0
428 -0.8236156218323626 -1.023454760416103 0
429 0.5143561348934245 1.208814337865783 0
430 -1.208814337865783 0.5143561348934247 0
431 -0.5143561348934247 -1.208814337865783 0
432 1.208814337865783 -0.514356134893425 0
433 0.9908861515233461 -2.378516650846406 0
434 -2.378516650846407 -0.9908861515233442 0
435 2.378516650846406 0.9908861515233466 0
436 -0.9908861515233466 2.378516650846407 0
437 -2.248754795783668 0.0896568478241017 0
438 -0.08965684782410017 -2.248754795783666 0
439 2.248754795783667 -0.08965684782410067 0
440 0.08965684782410094 2.248754795783666 0
441 -2.567360716564532 -0.2238617189429209 0
442 2.567360716564532 0.2238617189429215 0
443 -0.2238617189429218 2.567360716564532 0
444 0.2238617189429216 -2.567360716564531 0
445 -0.9585826681693688 -1.909480220963884 0
446 1.909480220963884 -0.9585826681693685 0
447 -1.909480220963884 0.9585826681693688 0
448 0.9585826681693683 1.909480220963884 0
449 -2.21238838100949 -0.3085614492057838 0
450 -0.3085614492057835 2.21238838100949 0
451 0.3085614492057843 -2.21238838100949 0
452 2.212388381009492 0.3085614492057836 0
453 -1.40401807430619 1.730892091955633 0
454 1.730892091955633 1.40401807430619 0
455 -1.730892091955635 -1.404018074306193 0
456 1.404018074306192 -1.730892091955635 0
457 1.11938710734937 2.347247988184295 0
458 -2.347247988184294 1.11938710734937 0
459 -1.119387107349369 -2.347247988184295 0
460 2.347247988184295 -1.119387107349369 0
461 -2.109786950959887 0.8772256466714856 0
462 0.8772256466714842 2.109786950959887 0
463 2.109786950959887 -0.8772256466714848 0
464 -0.8772256466714848 -2.109786950959887 0
465 2.075898454780491 1.578577321156025 0
466 -1.578577321156025 2.075898454780491 0
467 -2.075898454780493 -1.578577321156025 0
468 1.578577321156025 -2.075898454780492 0
469 -0.04836579821520427 -1.281405462062805 0
470 1.281405462062804 -0.04836579821520471 0
471 0.04836579821520431 1.281405462062803 0
472 -1.281405462062804 0.04836579821520402 0
473 -0.6621905407286934 1.118354883957766 0
474 1.118354883957766 0.6621905407286937 0
475 0.6621905407286934 -1.118354883957766 0
476 -1.118354883957765 -0.6621905407286937 0
477 -1.776888804160469 -0.4527747073094939 0
478 0.4527747073094946 -1.77688880416047 0
479 -0.452774707309494 1.776888804160469 0
480 1.776888804160468 0.4527747073094938 0
481 -2.5728069795299 0.4169822220829981 0
482 2.572806979529899 -0.4169822220829961 0
483 -0.4169822220829959 -2.572806979529899 0
484 0.4169822220829972 2.572806979529901 0
485 1.552945946187282 0.1599374609463876 0
486 0.1599374609463882 -1.552945946187281 0
487 -1.55294594618728 -0.1599374609463874 0
488 -0.1599374609463885 1.55294594618728 0
489 -1.456237418910449 -0.5722421685154624 0
490 0.5722421685154623 -1.45623741891045 0
491 -0.5722421685154617 1.456237418910448 0
492 1.456237418910448 0.5722421685154612 0
493 -1.863510046365312 -0.9134773049101261 0
494 -0.913477304910125 1.863510046365311 0
495 0.9134773049101271 -1.863510046365313 0
496 1.863510046365312 0.9134773049101261 0
497 1.938830929787365 -1.242657483388524 0
498 -1.242657483388524 -1.938830929787365 0
499 -1.938830929787366 1.242657483388525 0
500 1.242657483388524 1.938830929787366 0
501 2.242319751660212 -0.4613572429523556 0
502 -0.4613572429523557 -2.242319751660212 0
503 0.4613572429523541 2.242319751660213 0
504 -2.242319751660212 0.4613572429523555 0
505 2.542377073393952 0.6314659758211381 0
506 -0.6312611143807648 2.542570228909067 0
507 -2.542377073393953 -0.6314659758211379 0
508 0.6312611143807649 -2.542570228909067 0
509 0.5770783130798002 1.72242945701555 0
510 -1.72242945701555 0.5770783130797993 0
511 -0.5770783130797994 -1.722429457015551 0
512 1.722429457015551 -0.5770783130797994 0
513 1.267548813485051 -1.313637410249756 0
514 -1.313637410249756 -1.267548813485051 0
515 -1.267548813485053 1.313637410249753 0
516 1.313637410249754 1.267548813485053 0
517 0.6369075793868412 1.062615600738809 0
518 -1.06261560073881 0.6369075793868414 0
519 -0.6369075793868415 -1.06261560073881 0
520 1.062615600738809 -0.6369075793868412 0
521 1.184434889535539 -0.9330399642579399 0
522 -0.9330399642579397 -1.184434889535539 0
523 0.9330399642579393 1.184434889535539 0
524 -1.184434889535539 0.9330399642579389 0
525 -1.385660433987782 0.6035736225367249 0
526 0.6035736225367246 1.385660433987782 0
527 1.385660433987781 -0.6035736225367249 0
528 -0.6035736225367243 -1.385660433987781 0
529 1.71132653456082 1.191908702492102 0
530 -1.711326534560822 -1.191908702492103 0
531 -1.191908702492102 1.71132653456082 0
532 1.191908702492104 -1.711326534560822 0
533 -1.748461637012318 1.475956254798491 0
534 1.475956254798491 1.748461637012317 0
535 -1.475956254798492 -1.748461637012319 0
536 1.748461637012319 -1.475956254798492 0
537 2.069651634321467 -1.625117514154337 0
538 -1.625117514154337 -2.069651634321467 0
539 -2.069651634321466 1.625117514154338 0
540 1.624202563073472 2.069848725790997 0
541 0.5646393915520258 -2.318432104233787 0
542 -0.5648729785762849 2.318175161800168 0
543 -2.318206756132822 -0.5648783965657943 0
544 2.318206756132822 0.564878396565796 0
545 -2.501983603603465 0.7977879802379901 0
546 2.501821569663024 -0.7983244123810409 0
547 -0.798324412381041 -2.501821569663024 0
548 0.7983244123810417 2.501821569663023 0
549 1.499357532466911 -0.2889171235284306 0
550 -0.2889171235284308 -1.499357532466911 0
551 0.2889171235284294 1.49935753246691 0
552 -1.49935753246691 0.2889171235284297 0
553 0.8953590889454697 -1.231764337739292 0
554 -1.231764337739292 -0.8953590889454703 0
555 -0.8953590889454703 1.231764337739291 0
556 1.231764337739292 0.8953590889454695 0
557 -2.061560375560349 0.478338900464816 0
558 2.06156037556035 -0.4783389004648164 0
559 -0.4783389004648166 -2.061560375560351 0
560 0.4783389004648156 2.06156037556035 0
561 -1.446483112607029 1.466731355649054 0
562 1.466731355649055 1.446483112607029 0
563 1.44648311260703 -1.466731355649055 0
564 -1.466731355649055 -1.44648311260703 0
565 -1.464188110315041 2.211590595645086 0
566 1.464188110315041 -2.211590595645087 0
567 2.211590595645086 1.464188110315041 0
568 -2.211590595645087 -1.46418811031504 0
569 -1.710776310246804 -0.2608822417766299 0
570 -0.2608822417766312 1.710776310246805 0
571 1.710776310246805 0.2608822417766312 0
572 0.260882241776632 -1.710776310246805 0
573 -0.5713108175697629 1.640505896915903 0
574 1.640505896915902 0.571310817569762 0
575 -1.640505896915904 -0.5713108175697617 0
576 0.5713108175697615 -1.640505896915905 0
577 -2.646467796401877 0.2421018140128955 0
578 0.242101814012896 2.646467796401879 0
579 -0.2421018140128948 -2.646467796401878 0
580 2.646467796401878 -0.2421018140128946 0
581 0.8158120634441723 -2.195683402772105 0
582 -0.8158120634441716 2.195683402772106 0
583 -2.195683402772106 -0.8158120634441715 0
584 2.195683402772104 0.8158120634441721 0
585 0.5605460485785831 -1.942581593619205 0
586 -1.942581593619205 -0.5605460485785836 0
587 -0.5605460485785827 1.942581593619204 0
588 1.942581593619205 0.5605460485785817 0
589 -0.3751899544754038 2.048137605158704 0
590 2.048137605158705 0.3751899544754032 0
591 -2.048137605158704 -0.3751899544754041 0
592 0.3751899544754044 -2.048137605158703 0
593 -2.371059824182673 -1.183063707643998 0
594 2.371059824182674 1.183063707644001 0
595 -1.184317191913793 2.37041656403661 0
596 1.183063707644 -2.371059824182674 0
597 1.702104862632813 1.733824377179919 0
598 -1.733824377179919 1.702104862632815 0
599 -1.702104862632816 -1.733824377179918 0
600 1.733824377179919 -1.702104862632816 0
601 2.308678046586293 -0.7220858698773436 0
602 -0.7220858698773435 -2.308678046586293 0
603 0.722085869877345 2.308678046586294 0
604 -2.308678046586294 0.7220858698773465 0
605 1.600481985989846 -1.162233428833959 0
606 1.162233428833957 1.600481985989847 0
607 -1.162233428833959 -1.600481985989846 0
608 -1.600481985989847 1.162233428833956 0
609 -0.07432817772959921 1.921367948480762 0
610 -1.921367948480762 -0.07432817772959936 0
611 0.07432817772959996 -1.921367948480762 0
612 1.921367948480761 0.07432817772960057 0
613 -0.3856728834655987 1.388122361967636 0
614 0.3856728834655978 -1.388122361967636 0
615 -1.388122361967635 -0.3856728834655979 0
616 1.388122361967636 0.3856728834655974 0
617 0.2639508285018999 1.851287135106445 0
618 -1.851287135106445 0.2639508285019 0
619 -0.2639508285018997 -1.851287135106445 0
620 1.851287135106445 -0.2639508285018997 0
621 2.512545705642067 0.8823932736001932 0
622 0.8823932736001929 -2.512545705642067 0
623 -0.8823932736001933 2.512545705642067 0
624 -2.512545705642068 -0.8823932736001903 0
625 1.892318501274661 1.863380808764917 0
626 -1.892318501274663 -1.863380808764916 0
627 -1.863380808764916 1.892318501274661 0
628 1.863380808764916 -1.892318501274663 0
629 1.307373938884376 -1.147840640581326 0
630 -1.147840640581326 -1.307373938884376 0
631 -1.307373938884378 1.147840640581323 0
632 1.147840640581324 1.307373938884377 0
633 0.07014413022552406 -2.649974629088851 0
634 -0.07014413022552708 2.649974629088851 0
635 2.649974629088851 0.07014413022552651 0
636 -2.649974629088852 -0.07014413022552536 0
637 1.697117297490082 -0.831292980821692 0
638 -0.831292980821692 -1.697117297490082 0
639 0.8312929808216901 1.697117297490083 0
640 -1.697117297490082 0.8312929808216908 0
641 0.3940130452214894 1.70547258168559 0
642 -0.3940130452214885 -1.705472581685589 0
643 -1.705472581685589 0.3940130452214889 0
644 1.705472581685589 -0.3940130452214883 0
645 1.184161460412254 0.3019055491096737 0
646 -1.184161460412254 -0.3019055491096737 0
647 0.3019055491096738 -1.184161460412254 0
648 -0.3019055491096747 1.184161460412254 0
649 -1.160557485571873 2.066202985349547 0
650 2.066395993293055 1.161174338400622 0
651 -2.066202985349548 -1.160557485571872 0
652 1.160557485571873 -2.066202985349547 0
653 -1.120083662101943 -1.802733147134211 0
654 1.802733147134211 -1.120083662101943 0
655 -1.802733147134211 1.120083662101941 0
656 1.120083662101941 1.802733147134211 0
657 -1.532248422993014 -1.110784222629661 0
658 1.532248422993014 1.110784222629661 0
659 1.110784222629661 -1.532248422993015 0
660 -1.11078422262966 1.532248422993015 0
661 1.715011605707317 0.8337092697566549 0
662 0.8337092697566559 -1.715011605707318 0
663 -1.715011605707317 -0.8337092697566566 0
664 -0.8337092697566542 1.715011605707317 0
665 1.927940755738498 -0.5988567300675465 0
666 -0.5988567300675465 -1.927940755738498 0
667 0.5988567300675464 1.927940755738497 0
668 -1.927940755738498 0.5988567300675461 0
669 1.384243117342815 1.604484476190432 0
670 -1.604484476190434 1.384243117342816 0
671 -1.384243117342819 -1.604484476190433 0
672 1.604484476190434 -1.38424311734282 0
673 -2.624702377459526 -0.3953121926626167 0
674 0.3953121926626174 -2.624702377459526 0
675 2.624702377459526 0.3953121926626161 0
676 -0.3953121926626169 2.624702377459526 0
677 -1.509028200901287 1.857384204125194 0
678 1.857384204125194 1.509028200901286 0
679 1.509028200901288 -1.857384204125196 0
680 -1.857384204125197 -1.509028200901288 0
681 1.034027825036814 -1.001984911579359 0
682 -1.001984911579359 -1.034027825036814 0
683 1.001984911579359 1.034027825036814 0
684 -1.034027825036814 1.001984911579358 0
685 0.4391861776852546 1.377384130329099 0
686 -1.377384130329099 0.439186177685255 0
687 1.377384130329098 -0.4391861776852554 0
688 -0.4391861776852553 -1.377384130329098 0
689 -2.476446575547418 1.003040258537067 0
690 2.476596581572982 -1.002118327564639 0
691 -1.002118327564639 -2.476596581572982 0
692 1.003500057516826 2.476307689312754 0
693 -0.2799339898553585 2.385550041488701 0
694 -2.385550041488701 -0.2799339898553576 0
695 0.2799339898553595 -2.385550041488701 0
696 2.385550041488702 0.2799339898553572 0
697 0.8571984639029615 -0.8766287557024832 0
698 0.8766287557024837 0.8571984639029612 0
699 -0.8766287557024832 -0.8571984639029615 0
700 -0.8571984639029617 0.8766287557024836 0
701 -0.3427443725083569 -1.177196039967111 0
702 -1.177196039967111 0.3427443725083566 0
703 1.177196039967111 -0.3427443725083569 0
704 0.3427443725083562 1.177196039967111 0
705 0.1031963127262513 -1.215061261631289 0
706 -0.1031963127262517 1.215061261631289 0
707 -1.215061261631289 -0.1031963127262514 0
708 1.215061261631289 0.1031963127262511 0
709 -0.8277897550669098 -1.384393375098095 0
710 1.384393375098095 -0.8277897550669098 0
711 0.8277897550669091 1.384393375098094 0
712 -1.384393375098095 0.8277897550669091 0
713 -2.002881637552985 0.7438519453608967 0
714 -0.7438519453608964 -2.002881637552985 0
715 2.002881637552985 -0.7438519453608964 0
716 0.7438519453608962 2.002881637552985 0
717 -2.34036634483514 1.285331249813568 0
718 1.285331249813566 2.340366344835142 0
719 2.340366344835141 -1.285331249813567 0
720 -1.285331249813567 -2.340366344835141 0
721 -1.516685965117868 -2.203369753974076 0
722 2.203369753974076 -1.516685965117868 0
723 -2.203369753974074 1.516685965117867 0
724 1.516714318715661 2.203430951355264 0
725 1.536102207268726 -0.923369954841418 0
726 -0.923369954841418 -1.536102207268726 0
727 0.9233699548414167 1.536102207268726 0
728 -1.536102207268726 0.9233699548414168 0
729 0.130974444219368 2.391253713865673 0
730 -0.1309744442193668 -2.391253713865672 0
731 2.391253713865672 -0.130974444219367 0
732 -2.391253713865675 0.1309744442193677 0
733 -0.8509961717810947 1.41005700869085 0
734 1.41005700869085 0.8509961717810943 0
735 0.8509961717810945 -1.41005700869085 0
736 -1.41005700869085 -0.8509961717810948 0
737 -2.091023684642813 0.1351746882229345 0
738 -0.1351746882229333 -2.091023684642813 0
739 2.091023684642813 -0.1351746882229341 0
740 0.1351746882229344 2.091023684642813 0
741 -0.5737451753358231 -2.609753563289085 0
742 2.609753563289086 -0.5737451753358235 0
743 0.5737451753358231 2.609753563289085 0
744 -2.609753563289085 0.5737451753358253 0
745 2.028021771612793 1.736166002746963 0
746 -1.736166002746963 2.028021771612794 0
747 1.736166002746962 -2.028021771612794 0
748 -2.028021771612794 -1.736166002746962 0
749 2.218650834728337 -0.9881153101468644 0
750 -0.9881153101468644 -2.218650834728337 0
751 -2.218650834728338 0.9881153101468656 0
752 0.9881153101468638 2.218650834728338 0
753 -1.285001481722012 1.844174362746914 0
754 1.844174362746914 1.285001481722012 0
755 -1.844174362746916 -1.285001481722012 0
756 1.285001481722012 -1.844174362746916 0
757 0.6737925982995898 -2.178446070468747 0
758 2.178446070468745 0.6737925982995906 0
759 -0.6737925982995894 2.178446070468746 0
760 -2.178446070468746 -0.6737925982995897 0
761 0.08088004899161048 1.643642874593018 0
762 -1.643642874593017 0.08088004899161046 0
763 -0.08088004899161069 -1.643642874593018 0
764 1.643642874593019 -0.08088004899161104 0
765 -0.06438750148785369 1.382443923660533 0
766 0.06438750148785316 -1.382443923660534 0
767 -1.382443923660533 -0.06438750148785337 0
768 1.382443923660534 0.06438750148785281 0
769 -0.1913587100582936 -1.197202577941973 0
770 0.1913587100582933 1.197202577941973 0
771 -1.197202577941973 0.1913587100582937 0
772 1.197202577941973 -0.1913587100582938 0
773 -0.7333752696878981 0.9651701542848561 0
774 0.7333752696878981 -0.9651701542848562 0
775 0.9651701542848562 0.7333752696878979 0
776 -0.9651701542848559 -0.7333752696878982 0
777 -2.408389721145263 0.4530163522174304 0
778 2.408389721145261 -0.4530163522174296 0
779 -0.4530163522174297 -2.408389721145261 0
780 0.4530163522174296 2.408389721145262 0
781 -2.498581908750743 -0.07373655125073374 0
782 0.07373655125073128 -2.498581908750741 0
783 -0.07373655125073285 2.498581908750742 0
784 2.498581908750741 0.07373655125073347 0
785 2.236118014997845 1.10573093801823 0
786 1.10573093801823 -2.236118014997845 0
787 -1.10573093801823 2.236118014997846 0
788 -2.236118014997845 -1.105730938018229 0
789 1.100582816035951 0.5019200180764477 0
790 -1.10058281603595 -0.5019200180764479 0
791 0.5019200180764478 -1.10058281603595 0
792 -0.5019200180764475 1.10058281603595 0
793 -1.532614135659437 -0.9452732546352937 0
794 0.9452732546352922 -1.532614135659436 0
795 1.532614135659435 0.9452732546352931 0
796 -0.9452732546352927 1.532614135659435 0
797 -1.796888242918387 0.105027719409465 0
798 0.1050277194094652 1.796888242918387 0
799 1.796888242918387 -0.1050277194094656 0
800 -0.1050277194094656 -1.796888242918387 0
801 -1.009246465373401 1.988958298965895 0
802 -1.988958298965894 -1.009246465373399 0
803 1.989228510086806 1.010110059333651 0
804 1.010086093980729 -1.989121899562536 0
805 -1.869593209223271 1.569836225505085 0
806 1.569681193922607 1.869009857897701 0
807 -1.569681193922606 -1.869009857897701 0
808 1.869009857897701 -1.569681193922606 0
809 1.56785246523664 -0.6102804199822653 0
810 -0.6102804199822653 -1.56785246523664 0
811 -1.567852465236639 0.6102804199822641 0
812 0.6102804199822638 1.567852465236639 0
813 0.1445721819539576 1.395642391214063 0
814 -0.1445721819539579 -1.395642391214065 0
815 1.395642391214064 -0.1445721819539584 0
816 -1.395642391214063 0.1445721819539574 0
817 -1.097671449490502 1.277375462442802 0
818 1.277375462442802 1.097671449490502 0
819 1.0976714494905 -1.277375462442802 0
820 -1.277375462442802 -1.097671449490499 0
821 0.2297794034657544 2.246861307132634 0
822 -2.246861307132634 0.2297794034657541 0
823 -0.2297794034657525 -2.246861307132633 0
824 2.246861307132632 -0.2297794034657536 0
825 1.203954825588893 2.216413959606293 0
826 -1.203954825588895 -2.216413959606293 0
827 2.216413959606293 -1.203954825588895 0
828 -2.216413959606293 1.203954825588895 0
829 1.457459979952927 -1.121464668508624 0
830 -1.121464668508624 -1.457459979952927 0
831 1.121464668508623 1.457459979952929 0
832 -1.457459979952928 1.121464668508622 0
833 -0.4170925430589985 2.307483117289914 0
834 2.307483117289918 0.4170925430589982 0
835 -2.307483117289913 -0.4170925430589976 0
836 0.417092543058999 -2.307483117289912 0
837 -1.150926301521933 -0.7914933401273025 0
838 0.7914933401273022 -1.150926301521934 0
839 1.150926301521934 0.7914933401273022 0
840 -0.7914933401273029 1.150926301521934 0
841 -2.223775211720543 -0.04603738240435318 0
842 -0.04603738240435356 2.223775211720541 0
843 2.223775211720543 0.04603738240435284 0
844 0.04603738240435243 -2.223775211720542 0
845 -2.101947988691327 -1.357230219374117 0
846 -1.357230219374116 2.101947988691326 0
847 2.101947988691326 1.357230219374116 0
848 1.357230219374118 -2.101947988691327 0
849 -1.365660259005215 -1.867576476239239 0
850 -1.867576476239239 1.365660259005215 0
851 1.867576476239239 -1.365660259005215 0
852 1.365660259005214 1.867576476239239 0
853 -1.959186987911725 1.098566525490842 0
854 1.098566525490842 1.959186987911726 0
855 -1.098566525490842 -1.959186987911727 0
856 1.959186987911726 -1.098566525490842 0
857 1.229735560820142 0.6169222847165402 0
858 -0.6169222847165401 1.229735560820141 0
859 -1.229735560820141 -0.6169222847165399 0
860 0.6169222847165401 -1.229735560820141 0
861 -1.348761814824829 -2.07062169208321 0
862 2.07062169208321 -1.348761814824829 0
863 -2.070621692083209 1.34876181482483 0
864 1.348655070532063 2.070644686087987 0
865 0.7946201350159829 -1.87577043679292 0
866 -1.87577043679292 -0.7946201350159834 0
867 1.87577043679292 0.7946201350159822 0
868 -0.7946201350159812 1.875770436792919 0
869 1.713239087431581 1.578221777297354 0
870 1.578221777297354 -1.713239087431583 0
871 -1.713239087431583 -1.578221777297355 0
872 -1.578221777297354 1.713239087431581 0
873 -1.410229931845532 1.573243455049087 0
874 1.573243455049087 1.410229931845533 0
875 1.410229931845534 -1.573243455049087 0
876 -1.573243455049087 -1.410229931845535 0
877 -1.345637609593555 2.303174565190744 0
878 -2.303174565190744 -1.345637609593554 0
879 1.345637609593556 -2.303174565190744 0
880 2.303174565190745 1.345637609593555 0
881 -2.012737002123012 -0.2240613203607505 0
882 -0.2240613203607503 2.012737002123012 0
883 2.012737002123013 0.2240613203607529 0
884 0.2240613203607516 -2.012737002123012 0
885 0.9654813942992374 -0.7172338930585005 0
886 -0.9654813942992378 0.7172338930585004 0
887 0.7172338930585004 0.9654813942992377 0
888 -0.7172338930585005 -0.9654813942992374 0
889 -1.087667041708258 0.5133776410785454 0
890 0.5133776410785452 1.087667041708257 0
891 1.087667041708258 -0.5133776410785453 0
892 -0.5133776410785451 -1.087667041708258 0
893 2.691708742805066 -0.07759499124033603 0
894 0.07759499124033491 2.691708742805067 0
895 -2.691708742805065 0.0775949912403367 0
896 -0.07759499124033895 -2.691708742805065 0
897 2.04763592813122 -1.737876244000317 0
898 -1.737876244000317 -2.04763592813122 0
899 1.73777458276911 2.04765782718339 0
900 -2.04763592813122 1.737876244000318 0
901 2.62394460207905 0.5248263703868525 0
902 -0.5248068597734844 2.623962997842394 0
903 0.524806859773485 -2.623962997842394 0
904 -2.623944602079049 -0.5248263703868538 0
905 0.3180972460193598 2.000566109507401 0
906 -2.000566109507401 0.3180972460193598 0
907 2.000566109507402 -0.3180972460193601 0
908 -0.3180972460193597 -2.000566109507402 0
909 -1.030491357297782 1.802351034848545 0
910 -1.802351034848546 -1.030491357297782 0
911 1.802295027376901 1.03077036422023 0
912 1.030491357297784 -1.802351034848546 0
913 -2.361539860950286 0.01977790668992456 0
914 0.01977790668992548 2.361539860950282 0
915 2.361539860950283 -0.01977790668992473 0
916 -0.01977790668992577 -2.361539860950282 0
917 2.580051878230914 0.746916691338248 0
918 -0.7468939289559847 2.580073339954815 0
919 0.7468939289559837 -2.580073339954814 0
920 -2.580051878230913 -0.7469166913382467 0
921 0.7168203902268818 -1.425340750250714 0
922 -1.425340750250714 -0.7168203902268824 0
923 1.425340750250713 0.7168203902268809 0
924 -0.7168203902268812 1.425340750250713 0
925 -0.0672922976923295 1.593097173027989 0
926 0.06729229769232942 -1.593097173027989 0
927 -1.593097173027988 -0.06729229769232931 0
928 1.593097173027989 0.06729229769232924 0
929 2.506375447607131 -0.2390550986495251 0
930 -0.2390550986495245 -2.50637544760713 0
931 0.2390550986495272 2.506375447607132 0
932 -2.506375447607132 0.2390550986495273 0
933 1.906056629440223 0.3758586042132868 0
934 -0.3758586042132857 1.90605662944022 0
935 0.3758586042132864 -1.906056629440221 0
936 -1.906577835994048 -0.3759705122160754 0
937 -1.760691185204382 0.925634681401918 0
938 1.760691185204383 -0.9256346814019193 0
939 -0.9256346814019193 -1.760691185204383 0
940 0.9256346814019174 1.760691185204382 0
941 2.248397260352407 0.9480315173065971 0
942 -0.9480315173065984 2.248397260352408 0
943 0.9480315173065981 -2.248397260352407 0
944 -2.248397260352407 -0.9480315173065961 0
945 0.8297814757107272 2.212221389246555 0
946 -2.212221389246556 0.829781475710729 0
947 2.212221389246556 -0.8297814757107269 0
948 -0.829781475710727 -2.212221389246556 0
949 -0.5775378567914371 -2.318479359224879 0
950 0.5775378567914367 2.318479359224879 0
951 -2.318479359224878 0.5775378567914391 0
952 2.318479359224879 -0.577537856791437 0
953 -2.045917188451269 0.9719716473524319 0
954 2.04591718845127 -0.9719716473524315 0
955 -0.9719716473524315 -2.04591718845127 0
956 0.9719716473524309 2.045917188451269 0
957 0.1787262047596423 -2.210712060736624 0
958 -2.210712060736622 -0.1787262047596423 0
959 2.210712060736624 0.1787262047596424 0
960 -0.1787262047596413 2.210712060736622 0
961 1.132799958107568 0.9981281271459083 0
962 -0.9981281271459087 1.132799958107567 0
963 0.9981281271459087 -1.132799958107568 0
964 -1.132799958107567 -0.998128127145909 0
965 0.02566276407926106 2.058034944163709 0
966 2.058034944163708 -0.0256627640792607 0
967 -0.02566276407926038 -2.058034944163709 0
968 -2.058034944163709 0.02566276407926144 0
969 -1.146134816627675 1.424183814011878 0
970 1.424183814011878 1.146134816627675 0
971 -1.424183814011878 -1.146134816627672 0
972 1.146134816627672 -1.424183814011877 0
973 -1.993461465326295 -1.247475993274971 0
974 1.993482910653348 1.247544532478165 0
975 -1.24747599327497 1.993461465326293 0
976 1.247475993274971 -1.993461465326295 0
977 -0.6402690207377707 2.01575233442734 0
978 2.015752334427342 0.6402690207377708 0
979 0.6402690207377718 -2.015752334427342 0
980 -2.015752334427342 -0.6402690207377713 0
981 -0.6805182130180418 -1.689590112610622 0
982 1.689590112610622 -0.6805182130180418 0
983 -1.68959011261062 0.6805182130180405 0
984 0.6805182130180405 1.689590112610621 0
985 -1.655680788625992 -0.6882111000769126 0
986 0.688211100076912 -1.655680788625993 0
987 -0.6882111000769126 1.655680788625993 0
988 1.655680788625992 0.6882111000769117 0
989 1.795278802937794 0.1755425186305736 0
990 0.1755425186305737 -1.795278802937794 0
991 -1.795278802937794 -0.175542518630573 0
992 -0.175542518630573 1.795278802937794 0
993 0.7733851042580193 1.125729797529821 0
994 -1.125729797529821 0.7733851042580193 0
995 1.125729797529821 -0.7733851042580193 0
996 -0.7733851042580194 -1.125729797529821 0
997 0.6283476001344543 1.212658613133879 0
998 -1.212658613133879 0.6283476001344543 0
999 1.212658613133879 -0.6283476001344545 0
1000 -0.6283476001344543 -1.212658613133879 0
1001 1.454311088354328 0.2639935548709549 0
1002 0.2639935548709553 -1.454311088354327 0
1003 -0.2639935548709566 1.454311088354326 0
1004 -1.454311088354326 -0.2639935548709554 0
1005 -1.93104503953588 0.8438879692952632 0
1006 1.93104503953588 -0.8438879692952629 0
1007 -0.8438879692952629 -1.93104503953588 0
1008 0.8438879692952623 1.93104503953588 0
1009 1.399948045993642 2.298050682831681 0
1010 2.29805068283168 -1.399948045993644 0
1011 -1.399948045993643 -2.298050682831679 0
1012 -2.298050682831679 1.399948045993643 0
1013 2.048807792359195 0.88608817713678 0
1014 -0.8860881771367796 2.048807792359195 0
1015 -2.048807792359194 -0.8860881771367792 0
1016 0.8860881771367808 -2.048807792359195 0
1017 -0.1327070534975573 -1.552080107323 0
1018 0.1327070534975565 1.552080107323 0
1019 1.552080107323001 -0.1327070534975575 0
1020 -1.552080107322999 0.1327070534975567 0
1021 1.241428603023903 2.08300952786981 0
1022 -2.083006462002507 1.241442835596272 0
1023 -1.241442835596271 -2.083006462002507 0
1024 2.083006462002507 -1.241442835596271 0
1025 0.9067356327502077 2.544753768228094 0
1026 -2.544749764389332 0.906542146820057 0
1027 -0.9078444817730857 -2.543536936226645 0
1028 2.543536936226645 -0.9078444817730854 0
1029 -2.462991978186953 -1.107195374330114 0
1030 1.107195374330114 -2.462991978186954 0
1031 2.462991978186953 1.107195374330115 0
1032 -1.106942521160514 2.463186555466268 0
1033 0.6964136252800763 2.603953224553369 0
1034 2.60395322455337 -0.6964136252800766 0
1035 -2.60395322455337 0.6964136252800777 0
1036 -0.6964136252800768 -2.603953224553369 0
1037 -2.415828313570409 -0.63611978328373 0
1038 2.415828313570408 0.6361197832837308 0
1039 0.6360735308501685 -2.416288907629602 0
1040 -0.6360710213781353 2.415543964576521 0
1041 -2.686167787340512 0.3534586963306833 0
1042 2.686167787340512 -0.3534586963306827 0
1043 -0.3534586963306826 -2.686167787340512 0
1044 0.3534586963306837 2.686167787340512 0
1045 1.989642922675664 -0.1985642030748658 0
1046 -0.198564203074865 -1.989642922675664 0
1047 0.1985642030748659 1.989642922675664 0
1048 -1.989642922675664 0.1985642030748659 0
1049 1.37515587865318 -1.360928703034476 0
1050 -1.360928703034475 -1.375155878653179 0
1051 -1.375155878653181 1.360928703034472 0
1052 1.360928703034473 1.375155878653181 0
1053 2.717159482582483 0.2520106938091778 0
1054 -0.2520106938091787 2.717159482582483 0
1055 -2.717159482582484 -0.252010693809178 0
1056 0.2520106938091777 -2.717159482582484 0
1057 -1.27122843998551 1.032723135072534 0
1058 1.271228439985509 -1.032723135072537 0
1059 -1.032723135072536 -1.271228439985509 0
1060 1.032723135072535 1.271228439985509 0
1061 -2.206176627425091 -1.581793193894379 0
1062 -1.581793193894379 2.20617662742509 0
1063 1.581793193894378 -2.206176627425091 0
1064 2.20617662742509 1.58179319389438 0
1065 1.547440227927862 -1.025467194513634 0
1066 -1.025467194513634 -1.547440227927862 0
1067 -1.547440227927863 1.025467194513633 0
1068 1.025467194513634 1.547440227927864 0
1069 1.460768376041804 2.077436958748288 0
1070 -2.077161030690946 1.462049307555013 0
1071 -1.462049307555013 -2.077161030690949 0
1072 2.077161030690948 -1.462049307555013 0
1073 0.8828754641925679 -2.350201280178498 0
1074 2.350201280178498 0.882875464192569 0
1075 -0.8828754641925692 2.350201280178499 0
1076 -2.350201280178497 -0.8828754641925666 0
1077 -2.462394437005892 1.133028711880727 0
1078 2.462394437005893 -1.133028711880725 0
1079 -1.133028711880725 -2.462394437005893 0
1080 1.133028711880726 2.462394437005893 0
1081 1.970368142622447 1.508163389778338 0
1082 -1.508163389778338 1.970368142622448 0
1083 -1.97036814262245 -1.508163389778338 0
1084 1.508163389778338 -1.970368142622448 0
1085 0.1836262543436862 -2.459368569476436 0
1086 -2.459368569476437 -0.1836262543436851 0
1087 -0.1836262543436858 2.459368569476437 0
1088 2.459368569476437 0.1836262543436852 0
1089 0.3265714883612079 -2.504863603650714 0
1090 -2.504863603650715 -0.3265714883612069 0
1091 2.504863603650715 0.3265714883612063 0
1092 -0.3265714883612065 2.504863603650714 0
1093 -1.638850149831504 -1.28203443601774 0
1094 1.28203443601774 -1.638850149831504 0
1095 -1.282034436017737 1.638850149831502 0
1096 1.638850149831501 1.282034436017738 0
1097 0.4961043261430246 -1.361089449714577 0
1098 -1.361089449714576 -0.4961043261430246 0
1099 -0.4961043261430248 1.361089449714576 0
1100 1.361089449714577 0.4961043261430239 0
1101 2.180704671424795 0.4514984910689198 0
1102 -2.180704671424792 -0.4514984910689189 0
1103 -0.4514984910689195 2.180704671424794 0
1104 0.4514984910689189 -2.180704671424791 0
1105 -0.1423832277629009 1.669009455368157 0
1106 -1.669009455368156 -0.1423832277629002 0
1107 0.1423832277629012 -1.669009455368157 0
1108 1.669009455368157 0.142383227762901 0
1109 0.6352218913250951 -1.551314622919318 0
1110 -1.551314622919318 -0.6352218913250954 0
1111 1.551314622919316 0.6352218913250938 0
1112 -0.6352218913250947 1.551314622919316 0
1113 0.9091669153262665 1.304786598094366 0
1114 -1.304786598094366 0.9091669153262665 0
1115 -0.9091669153262669 -1.304786598094366 0
1116 1.304786598094366 -0.9091669153262671 0
1117 1.8134228143254 1.778177731278781 0
1118 -1.77817773127878 1.813422814325402 0
1119 1.778177731278779 -1.813422814325402 0
1120 -1.813422814325403 -1.778177731278779 0
1121 -1.873277974306262 -1.970102534481861 0
1122 -1.970102534481861 1.873277974306262 0
1123 1.970102534481861 -1.873277974306262 0
1124 1.873276898526037 1.970102766217863 0
1125 -0.7228550066041997 -1.41952283144267 0
1126 1.41952283144267 -0.7228550066041997 0
1127 0.7228550066041993 1.41952283144267 0
1128 -1.41952283144267 0.7228550066041993 0
1129 -2.52618537236823 -0.9819859823098933 0
1130 2.526185372368232 0.9819859823098958 0
1131 -0.9819859823098955 2.52618537236823 0
1132 0.9819859823098951 -2.526185372368232 0
1133 -1.704991667081182 1.587492188544921 0
1134 -1.587492188544922 -1.704991667081182 0
1135 1.704991667081183 -1.587492188544922 0
1136 1.587492188544919 1.70499166708118 0
1137 -1.395199689841402 1.841731409122849 0
1138 1.841731409122848 1.395199689841402 0
1139 -1.84173140912285 -1.395199689841404 0
1140 1.395199689841404 -1.84173140912285 0
1141 -1.483264792367014 -0.4601094700378755 0
1142 0.4601094700378755 -1.483264792367015 0
1143 1.483264792367014 0.4601094700378756 0
1144 -0.4601094700378764 1.483264792367014 0
1145 -1.097733544205205 -0.3922713905524549 0
1146 0.3922713905524549 -1.097733544205205 0
1147 1.097733544205205 0.3922713905524549 0
1148 -0.392271390552455 1.097733544205205 0
1149 -1.681277522000306 -0.3835573208457631 0
1150 -0.3835573208457645 1.681277522000306 0
1151 0.3835573208457647 -1.681277522000306 0
1152 1.681277522000306 0.383557320845764 0
1153 0.6209445890514186 -1.357961530589892 0
1154 -1.357961530589892 -0.6209445890514187 0
1155 -0.6209445890514187 1.357961530589892 0
1156 1.357961530589892 0.6209445890514187 0
1157 1.753667511164842 0.5610346742894123 0
1158 -0.5610346742894136 1.753667511164843 0
1159 -1.753667511164843 -0.5610346742894132 0
1160 0.5610346742894132 -1.753667511164844 0
1161 -0.8653400472728091 1.606433797028741 0
1162 1.606433797028741 0.8653400472728091 0
1163 0.8653400472728103 -1.606433797028742 0
1164 -1.606433797028742 -0.8653400472728108 0
1165 -0.2020110810480042 1.153798956608616 0
1166 1.153798956608616 0.2020110810480035 0
1167 -1.153798956608616 -0.2020110810480036 0
1168 0.2020110810480037 -1.153798956608616 0
1169 -0.3605667236243067 -2.22030977523864 0
1170 2.220309775238638 -0.3605667236243078 0
1171 0.3610990285868907 2.220793330401988 0
1172 -2.22030977523864 0.3605667236243074 0
1173 2.322846567390259 -1.004903729797087 0
1174 -1.004903729797087 -2.322846567390259 0
1175 -2.322581053920632 1.005949692669804 0
1176 1.005949692669803 2.322581053920632 0
1177 1.571615097622769 -1.270677239229424 0
1178 -1.270677239229423 -1.571615097622769 0
1179 -1.57161509762277 1.27067723922942 0
1180 1.27067723922942 1.571615097622769 0
1181 -0.4781267191425541 -2.674642193871943 0
1182 2.674642193871943 -0.4781267191425546 0
1183 0.4781267191425546 2.674642193871942 0
1184 -2.674642193871942 0.4781267191425566 0
1185 0.5306849514664778 1.828992089911581 0
1186 -1.828992089911581 0.5306849514664771 0
1187 -0.5306849514664764 -1.828992089911582 0
1188 1.828992089911582 -0.5306849514664764 0
1189 -0.05657362312742401 -1.14479375827994 0
1190 -1.14479375827994 0.05657362312742383 0
1191 1.14479375827994 -0.05657362312742416 0
1192 0.05657362312742404 1.14479375827994 0
1193 -0.5862955732603798 0.9813391646999684 0
1194 0.9813391646999684 0.5862955732603798 0
1195 -0.9813391646999681 -0.5862955732603797 0
1196 0.5862955732603798 -0.9813391646999682 0
1197 -0.06571847005320124 1.491518791008983 0
1198 1.491518791008984 0.06571847005320113 0
1199 -1.491518791008983 -0.06571847005320121 0
1200 0.06571847005320115 -1.491518791008984 0
1201 -1.597618184255965 -0.2992074152640642 0
1202 1.597618184255966 0.299207415264065 0
1203 -0.299207415264066 1.597618184255965 0
1204 0.2992074152640657 -1.597618184255965 0
1205 0.3660282850442145 1.589067944008375 0
1206 -1.589067944008375 0.3660282850442143 0
1207 1.589067944008375 -0.366028285044215 0
1208 -0.3660282850442154 -1.589067944008375 0
1209 0.5415099858411829 2.160896769293446 0
1210 -2.160896769293445 0.5415099858411843 0
1211 2.160896769293445 -0.5415099858411848 0
1212 -0.5415099858411849 -2.160896769293446 0
1213 1.805379892746716 0.3431080014147921 0
1214 -1.805429531466127 -0.3431186593198191 0
1215 -0.3431080014147919 1.805379892746715 0
1216 0.343108001414793 -1.805379892746715 0
1217 1.926560444090813 0.6569618365845866 0
1218 0.656961836584588 -1.926560444090813 0
1219 -1.926560444090814 -0.6569618365845883 0
1220 -0.6569618365845862 1.926560444090812 0
1221 -0.3564155019682926 -1.807590359134752 0
1222 1.807590359134752 -0.3564155019682927 0
1223 -1.807590359134752 0.3564155019682932 0
1224 0.3564155019682931 1.807590359134752 0
1225 1.219951074912467 1.835372253371399 0
1226 -1.835372253371398 1.219951074912468 0
1227 -1.21995107491247 -1.835372253371397 0
1228 1.835372253371397 -1.21995107491247 0
1229 -0.7822782163726794 -2.394193447472609 0
1230 2.394193447472607 -0.7822782163726794 0
1231 0.7822782163726807 2.394193447472609 0
1232 -2.39420887927646 0.7822271275971533 0
1233 -2.125927252332312 -1.679796230838425 0
1234 -1.679796230838425 2.125927252332313 0
1235 2.125927252332312 1.679796230838424 0
1236 1.679796230838425 -2.125927252332312 0
1237 -1.479846335499759 1.657445077843692 0
1238 1.657445077843692 1.479846335499758 0
1239 1.47984633549976 -1.657445077843693 0
1240 -1.657445077843694 -1.47984633549976 0
1241 -2.121719800073169 0.7625348334610306 0
1242 0.7625348334610297 2.121719800073167 0
1243 2.121719800073168 -0.7625348334610292 0
1244 -0.7625348334610293 -2.121719800073168 0
1245 -1.595478963380246 -1.19175516585003 0
1246 1.191755165850032 -1.595478963380246 0
1247 1.595478963380244 1.19175516585003 0
1248 -1.191755165850029 1.595478963380245 0
1249 -0.000962551640417504 -1.832645994829807 0
1250 1.832645994829807 -0.0009625516404177538 0
1251 -1.832645994829807 0.000962551640417434 0
1252 0.0009625516404178226 1.832645994829807 0
1253 0.3194913918173798 -1.292614516698125 0
1254 -0.3194913918173808 1.292614516698125 0
1255 1.292614516698125 0.3194913918173795 0
1256 -1.292614516698125 -0.3194913918173797 0
1257 -0.4757243399782728 2.016527220427597 0
1258 0.4757243399782728 -2.016527220427597 0
1259 -2.016535502073765 -0.4755951430339608 0
1260 2.016527220427598 0.4757243399782706 0
1261 -2.043859318610513 0.5869704654021981 0
1262 0.5869704654021978 2.043859318610513 0
1263 -0.5869704654021989 -2.043859318610513 0
1264 2.043859318610513 -0.5869704654021989 0
1265 -1.480577781977159 2.075545139547617 0
1266 2.075545139547616 1.48057778197716 0
1267 -2.07554513954762 -1.48057778197716 0
1268 1.48057778197716 -2.075545139547619 0
1269 2.482431517029128 -0.3327779852944459 0
1270 -0.3327779852944461 -2.482431517029128 0
1271 -2.482431517029129 0.3327779852944479 0
1272 0.332777985294448 2.482431517029129 0
1273 1.968752463691929 1.621414131044845 0
1274 1.621414131044845 -1.968752463691931 0
1275 -1.621414131044845 1.96875246369193 0
1276 -1.968752463691932 -1.621414131044846 0
1277 -1.755970056849662 -0.9278105940092196 0
1278 -0.9278105940092176 1.755970056849661 0
1279 0.9278105940092201 -1.755970056849663 0
1280 1.756239006678394 0.9272913943013541 0
1281 -0.3911641728758332 -1.47169284141218 0
1282 1.47169284141218 -0.3911641728758331 0
1283 -1.47169284141218 0.3911641728758323 0
1284 0.3911641728758321 1.47169284141218 0
1285 1.571628258931478 1.965145395521116 0
1286 -1.965682197595991 1.571863046255826 0
1287 1.965126624904971 -1.571715397129656 0
1288 -1.571715397129656 -1.965126624904971 0
1289 2.478375941234466 0.7287419948890664 0
1290 -2.478375941234466 -0.7287419948890653 0
1291 0.7287115641939322 -2.478450964712044 0
1292 -0.7287112853637078 2.478368193261703 0
1293 2.505720513370226 -0.5136358225754343 0
1294 0.5136358225754348 2.505720513370226 0
1295 -0.5136358225754344 -2.505720513370225 0
1296 -2.505720513370227 0.5136358225754363 0
1297 0.961965423565957 -0.9249922050496311 0
1298 -0.9249922050496308 -0.961965423565957 0
1299 0.9249922050496314 0.9619654235659567 0
1300 -0.9619654235659573 0.9249922050496308 0
1301 0.4119870748778099 1.270905419999534 0
1302 -1.270905419999534 0.4119870748778102 0
1303 1.270905419999533 -0.4119870748778108 0
1304 -0.4119870748778108 -1.270905419999533 0
1305 1.48635688669805 1.646488895529344 0
1306 -1.646488895529347 1.48635688669805 0
1307 -1.486356886698052 -1.646488895529347 0
1308 1.646488895529348 -1.486356886698052 0
1309 -2.165322746289001 0.04130542508277145 0
1310 2.165322746289001 -0.04130542508277125 0
1311 -0.04130542508277073 -2.165322746289001 0
1312 0.04130542508277032 2.165322746289 0
1313 1.22565014534202 -1.214060783592452 0
1314 -1.214060783592451 -1.225650145342019 0
1315 -1.225650145342022 1.214060783592449 0
1316 1.214060783592449 1.225650145342021 0
1317 0.4929943562323536 1.644650216681887 0
1318 -1.644650216681887 0.4929943562323532 0
1319 1.644650216681887 -0.4929943562323534 0
1320 -0.4929943562323535 -1.644650216681887 0
1321 1.83600220940804 -2.012358841986072 0
1322 2.01235884198607 1.836002209408042 0
1323 -2.012358841986072 -1.83600220940804 0
1324 -1.836002209408042 2.012358841986071 0
1325 -2.181868069355372 1.626337928838873 0
1326 -1.626337928838872 -2.181868069355373 0
1327 2.181868069355373 -1.626337928838872 0
1328 1.626278154112851 2.181945900301301 0
1329 -0.5245158939968197 2.51730774961 0
1330 2.517284243912394 0.5245408242250136 0
1331 -2.517284243912394 -0.5245408242250154 0
1332 0.524515893996822 -2.517307749610001 0
1333 -1.108461044347469 -1.696325373346876 0
1334 1.696325373346876 -1.108461044347468 0
1335 1.108461044347465 1.696325373346876 0
1336 -1.696325373346876 1.108461044347465 0
1337 -0.8472131584379058 1.955408310828185 0
1338 1.955408310828185 0.8472131584379068 0
1339 0.8472131584379073 -1.955408310828185 0
1340 -1.955408310828185 -0.8472131584379072 0
1341 2.656278386085764 0.6570753823948348 0
1342 -0.6570518457818819 2.656300577800275 0
1343 0.6570518457818819 -2.656300577800274 0
1344 -2.656278386085764 -0.6570753823948345 0
1345 -1.298812648602494 2.395678002179724 0
1346 -2.395739265050778 -1.298693269148228 0
1347 1.29869326914823 -2.395739265050779 0
1348 2.395739265050779 1.298693269148229 0
1349 -1.102537540713313 -2.241659668549097 0
1350 2.241659668549097 -1.102537540713313 0
1351 1.102637156225 2.241634381551991 0
1352 -2.241634381551991 1.102637156225001 0
1353 -0.6481851268402651 -1.809712553727201 0
1354 1.809712553727201 -0.6481851268402651 0
1355 -1.8097125537272 0.6481851268402652 0
1356 0.6481851268402653 1.8097125537272 0
1357 2.288382691590976 0.6720576461481198 0
1358 -2.288382691590977 -0.6720576461481186 0
1359 -0.672052486158109 2.288352601750355 0
1360 0.6720304787721817 -2.288448019415755 0
1361 0.1414233626525115 -2.730597330425367 0
1362 -0.1414233626525139 2.730597330425367 0
1363 -2.730597330425367 -0.1414233626525128 0
1364 2.730597330425367 0.1414233626525128 0
1365 -1.004541793926466 1.281931015760291 0
1366 1.281931015760291 1.004541793926466 0
1367 1.004541793926465 -1.281931015760291 0
1368 -1.281931015760292 -1.004541793926465 0
1369 0.7631156922801829 0.8608504992233355 0
1370 -0.8608504992233357 0.7631156922801827 0
1371 0.8608504992233353 -0.7631156922801826 0
1372 -0.7631156922801826 -0.8608504992233353 0
1373 -1.078809064941376 0.3994736900703575 0
1374 0.3994736900703573 1.078809064941375 0
1375 1.078809064941375 -0.3994736900703578 0
1376 -0.3994736900703577 -1.078809064941376 0
1377 -0.8328994209991984 1.31461086057748 0
1378 -1.314610860577479 -0.8328994209991979 0
1379 0.8328994209991977 -1.31461086057748 0
1380 1.314610860577479 0.8328994209991973 0
1381 -1.249027380595167 -1.340352319357923 0
1382 1.249027380595164 1.340352319357926 0
1383 1.340352319357924 -1.249027380595167 0
1384 -1.340352319357926 1.249027380595163 0
1385 0.1630997106777445 2.725869315860066 0
1386 -2.725869315860065 0.1630997106777452 0
1387 2.725869315860066 -0.1630997106777446 0
1388 -0.1630997106777458 -2.725869315860066 0
1389 2.325824093646889 -0.3908630921993995 0
1390 -0.3908630921993993 -2.325824093646889 0
1391 -2.32582409364689 0.390863092199399 0
1392 0.3902247319627778 2.32572334405457 0
1393 1.499797922879485 -1.369599335619881 0
1394 -1.369599335619881 -1.499797922879484 0
1395 -1.499797922879485 1.369599335619878 0
1396 1.369599335619879 1.499797922879484 0
1397 -1.417082775405064 -1.262489010730607 0
1398 1.262489010730608 -1.417082775405064 0
1399 1.417082775405063 1.26248901073061 0
1400 -1.262489010730609 1.417082775405062 0
1401 -1.486417568128057 0.5548803308050068 0
1402 -0.5548803308050064 -1.486417568128057 0
1403 1.486417568128057 -0.5548803308050066 0
1404 0.554880330805006 1.486417568128057 0
1405 1.13950798273038 -1.031288143787089 0
1406 1.031288143787088 1.13950798273038 0
1407 -1.031288143787089 -1.13950798273038 0
1408 -1.13950798273038 1.031288143787088 0
1409 -0.9227343151716774 -1.079244323841555 0
1410 1.079244323841555 -0.9227343151716778 0
1411 0.9227343151716774 1.079244323841555 0
1412 -1.079244323841555 0.9227343151716769 0
1413 0.5175032001694908 1.317994097516644 0
1414 -1.317994097516644 0.5175032001694914 0
1415 1.317994097516643 -0.5175032001694916 0
1416 -0.517503200169491 -1.317994097516643 0
1417 1.374664055029534 1.713396718230667 0
1418 -1.713396718230667 1.374664055029535 0
1419 -1.374664055029538 -1.713396718230666 0
1420 1.713396718230667 -1.374664055029538 0
1421 1.645769035291846 1.102684366894583 0
1422 1.102684366894584 -1.645769035291848 0
1423 -1.645769035291848 -1.102684366894584 0
1424 -1.102684366894582 1.645769035291847 0
1425 -2.417692143668042 -0.5369853766880479 0
1426 -0.5369765866743478 2.417659650598158 0
1427 2.41769214366804 0.5369853766880479 0
1428 0.5369509113907682 -2.417770971207792 0
1429 -0.9796680458029937 0.5871906320835899 0
1430 -0.5871906320835896 -0.9796680458029934 0
1431 0.5871906320835896 0.9796680458029934 0
1432 0.9796680458029934 -0.5871906320835898 0
1433 2.434056486391789 -1.249385665674417 0
1434 -1.249385665674417 -2.434056486391789 0
1435 1.248838822798919 2.436086509715402 0
1436 -2.434056486391788 1.249385665674418 0
1437 -0.1748444648431988 1.427565148643636 0
1438 0.1748444648431981 -1.427565148643636 0
1439 1.427565148643636 0.1748444648431973 0
1440 -1.427565148643636 -0.1748444648431977 0
1441 1.205836336718097 -0.8372722320693995 0
1442 -0.8372722320693994 -1.205836336718096 0
1443 0.8372722320693994 1.205836336718097 0
1444 -1.205836336718097 0.8372722320693992 0
1445 -1.308680557032789 0.6694318562146078 0
1446 1.308680557032789 -0.669431856214608 0
1447 0.669431856214608 1.308680557032789 0
1448 -0.6694318562146077 -1.308680557032789 0
1449 0.7573265672108023 -2.131836325546196 0
1450 -0.7573265672108003 2.131836325546196 0
1451 -2.131836325546196 -0.7573265672108017 0
1452 2.131836325546195 0.7573265672108023 0
1453 0.04073559101238917 1.381197067079789 0
1454 -0.04073559101238947 -1.38119706707979 0
1455 1.38119706707979 -0.04073559101238985 0
1456 -1.381197067079789 0.04073559101238888 0
1457 2.011823602243013 0.1337869288961384 0
1458 -2.011823602243014 -0.1337869288961352 0
1459 0.1337869288961363 -2.011823602243015 0
1460 -0.1337869288961351 2.011823602243015 0
1461 -0.4265487322647867 -2.147316097784688 0
1462 -2.147316097784687 0.4265487322647865 0
1463 0.426607877260628 2.147369826136169 0
1464 2.147316097784687 -0.4265487322647868 0
1465 0.184208430094119 1.299807567271254 0
1466 1.299807567271254 -0.1842084300941196 0
1467 -0.1842084300941191 -1.299807567271255 0
1468 -1.299807567271254 0.1842084300941191 0
1469 1.803427123741751 1.142018458923341 0
1470 -1.80343311985948 -1.141986732871607 0
1471 -1.141986732871607 1.803433119859479 0
1472 1.14198673287161 -1.803433119859481 0
1473 -0.2897818242791069 2.102512936839362 0
1474 -2.102512936839362 -0.2897818242791073 0
1475 0.289781824279108 -2.102512936839362 0
1476 2.102512936839362 0.2897818242791084 0
1477 0.0297504233544925 2.466182742227863 0
1478 -0.02975042335449339 -2.466182742227862 0
1479 -2.466182742227866 0.02975042335449133 0
1480 2.466182742227863 -0.02975042335449137 0
1481 -0.222605633824453 2.293496600623874 0
1482 -2.293496600623874 -0.2226056338244522 0
1483 2.293496600623876 0.2226056338244524 0
1484 0.2226056338244533 -2.293496600623875 0
1485 1.745346001411046 1.302917991713286 0
1486 -1.302917991713286 1.745346001411046 0
1487 1.302917991713288 -1.745346001411048 0
1488 -1.745346001411048 -1.302917991713289 0
1489 -0.5038125733348142 -1.956336404733326 0
1490 1.956336404733325 -0.5038125733348139 0
1491 0.503812573334814 1.956336404733324 0
1492 -1.956336404733324 0.5038125733348139 0
1493 1.267675017575121 -2.110470752018177 0
1494 -2.110470752018177 -1.26767501757512 0
1495 2.110491176139183 1.267740293006733 0
1496 -1.26767501757512 2.110470752018177 0
1497 -0.2392623909713661 -1.405878701811296 0
1498 1.405878701811296 -0.2392623909713664 0
1499 -1.405878701811296 0.2392623909713657 0
1500 0.2392623909713655 1.405878701811295 0
1501 -2.461743957383608 0.6995992919350724 0
1502 0.6996645720371362 2.461724238967577 0
1503 2.461724238967577 -0.6996645720371359 0
1504 -0.6996645720371362 -2.461724238967578 0
1505 -1.705797239546573 -2.125214088712701 0
1506 1.705653721274828 2.125253664908385 0
1507 2.125214088712701 -1.705797239546573 0
1508 -2.125214088712701 1.705797239546574 0
1509 1.087900980719107 -2.344974019488307 0
1510 -2.344974019488307 -1.087900980719106 0
1511 2.344974019488307 1.087900980719107 0
1512 -1.087996278919125 2.344931287786713 0
1513 2.208288709165116 0.5695527936309641 0
1514 -2.208288709165115 -0.5695527936309626 0
1515 0.569527443879562 -2.208316392586615 0
1516 -0.5695517862043423 2.208282834481948 0
1517 1.469354463773053 1.84619396211532 0
1518 -1.846749534806339 1.469502112899222 0
1519 -1.469354463773052 -1.846193962115319 0
1520 1.846676423559807 -1.469417336674133 0
1521 1.048693502397267 0.7584875033866956 0
1522 0.7584875033866956 -1.048693502397266 0
1523 -1.048693502397266 -0.7584875033866957 0
1524 -0.7584875033866957 1.048693502397266 0
1525 2.446318113897666 -0.8866742665309733 0
1526 -0.886674266530974 -2.446318113897666 0
1527 -2.446455923662268 0.8865667193199559 0
1528 0.8867045866342315 2.446421218313358 0
1529 -1.811316887936745 0.8239655968335962 0
1530 -0.8239655968335959 -1.811316887936744 0
1531 1.811316887936744 -0.8239655968335959 0
1532 0.8239655968335953 1.811316887936745 0
1533 1.544120638584002 -1.482723625959776 0
1534 -1.482723625959776 -1.544120638584001 0
1535 -1.544120638584002 1.482723625959775 0
1536 1.482723625959777 1.544120638583999 0
1537 -1.766525928890472 1.930672237759249 0
1538 1.930672237759247 1.766525928890474 0
1539 1.766525928890472 -1.93067223775925 0
1540 -1.93067223775925 -1.766525928890473 0
1541 -1.65199516924469 -1.818237223406529 0
1542 1.81823722340653 -1.65199516924469 0
1543 -1.818292780675632 1.652009934157308 0
1544 1.65199516924469 1.81823722340653 0
1545 0.8137893871760152 2.602508504811517 0
1546 -2.602523555297392 0.813719871169045 0
1547 2.602392616049476 -0.813894991844861 0
1548 -0.8138949918448611 -2.602392616049476 0
1549 0.8329402039568417 1.590759441527405 0
1550 -1.590759441527405 0.8329402039568419 0
1551 -0.8329402039568435 -1.590759441527405 0
1552 1.590759441527405 -0.8329402039568435 0
1553 0.54072578545981 -1.5453145776026 0
1554 -0.5407257854598112 1.545314577602598 0
1555 -1.545314577602599 -0.5407257854598095 0
1556 1.545314577602597 0.54072578545981 0
1557 1.979820136000994 -1.673725241951871 0
1558 1.673602603006287 1.9798465539052 0
1559 -1.673725241951871 -1.979820136000994 0
1560 -1.979881866299996 1.673741647410335 0
1561 -0.4450328819822821 -1.786015963019935 0
1562 1.786015963019934 -0.4450328819822821 0
1563 -1.786015963019934 0.4450328819822831 0
1564 0.4450328819822839 1.786015963019934 0
1565 -2.60450642581992 -0.8483000444579252 0
1566 0.8482978766119965 -2.604508469793625 0
1567 2.604506425819921 0.848300044457926 0
1568 -0.8482978766119967 2.604508469793625 0
1569 -1.125042197646285 0.2570237887324003 0
1570 -0.2570237887324001 -1.125042197646286 0
1571 1.125042197646285 -0.2570237887324004 0
1572 0.2570237887323999 1.125042197646285 0
1573 -0.8709930359673967 -0.7570398361846936 0
1574 -0.7570398361846935 0.8709930359673967 0
1575 0.7570398361846936 -0.870993035967397 0
1576 0.8709930359673971 0.7570398361846934 0
1577 2.249082702630665 -0.6368484401976178 0
1578 0.6368484401976185 2.249082702630667 0
1579 -2.249082702630667 0.6368484401976202 0
1580 -0.6368484401976179 -2.249082702630666 0
1581 -1.69058105140316 -0.4868647865430377 0
1582 -0.4868647865430388 1.69058105140316 0
1583 1.690581051403158 0.4868647865430379 0
1584 0.4868647865430382 -1.690581051403161 0
1585 0.1377985951555411 2.63053803013395 0
1586 2.630538030133948 -0.1377985951555402 0
1587 -2.630538030133947 0.1377985951555412 0
1588 -0.1377985951555414 -2.630538030133948 0
1589 2.004856155392094 -0.9073827851256441 0
1590 -0.9073827851256441 -2.004856155392094 0
1591 0.9073827851256439 2.004856155392095 0
1592 -2.004856155392095 0.9073827851256442 0
1593 1.766533181253698 1.66589362454462 0
1594 -1.766533181253702 -1.66589362454462 0
1595 1.665893624544619 -1.766533181253701 0
1596 -1.66589362454462 1.7665331812537 0
1597 -0.4607462969890164 2.707130845818082 0
1598 -2.707128801844376 -0.4607484648349451 0
1599 2.707128801844377 0.4607484648349442 0
1600 0.4607462969890156 -2.707130845818081 0
1601 2.298781298520465 1.501195131532571 0
1602 -1.501195131532571 2.298781298520465 0
1603 -2.298781298520465 -1.501195131532571 0
1604 1.501195131532571 -2.298781298520465 0
1605 1.986113738841121 1.092200576166531 0
1606 -1.091316420445323 1.985837094122093 0
1607 -1.985837094122094 -1.091316420445321 0
1608 1.092109403018911 -1.985991605796698 0
1609 -1.133111543508614 -0.9106557124723346 0
1610 1.133111543508615 0.9106557124723338 0
1611 0.9106557124723338 -1.133111543508614 0
1612 -0.9106557124723346 1.133111543508614 0
1613 -0.3570595252102771 2.715878839039505 0
1614 -2.715878611931315 -0.3570597660820453 0
1615 0.3570595252102756 -2.715878839039503 0
1616 2.715878611931313 0.3570597660820449 0
1617 1.591811788798283 -0.2378305841115322 0
1618 0.2378305841115313 1.591811788798283 0
1619 -1.591811788798282 0.2378305841115319 0
1620 -0.2378305841115322 -1.591811788798283 0
1621 1.769806941027433 -1.030102861520579 0
1622 -1.030102861520579 -1.769806941027433 0
1623 1.030102861520577 1.769806941027432 0
1624 -1.769806941027432 1.030102861520577 0
1625 -0.6907471026161224 -1.918504991392348 0
1626 1.918504991392348 -0.6907471026161224 0
1627 -1.918504991392349 0.6907471026161222 0
1628 0.690747102616122 1.918504991392349 0
1629 0.3889581833207727 2.064398928107808 0
1630 -0.3889502973213274 -2.064391764327612 0
1631 2.064391764327611 -0.3889502973213271 0
1632 -2.06439176432761 0.3889502973213272 0
1633 0.6549253970356393 1.497064413696997 0
1634 1.497064413696997 -0.6549253970356402 0
1635 -0.6549253970356399 -1.497064413696997 0
1636 -1.497064413696997 0.6549253970356396 0
1637 0.1249645509518837 -2.571122338619396 0
1638 2.571122338619397 0.1249645509518855 0
1639 -0.1249645509518859 2.571122338619398 0
1640 -2.5711223386194 -0.1249645509518845 0
1641 1.504112330308853 0.8551257272572763 0
1642 -0.855125727257276 1.504112330308852 0
1643 -1.504112330308853 -0.8551257272572774 0
1644 0.8551257272572769 -1.504112330308851 0
1645 1.849536123568081 0.5194155910762649 0
1646 -1.849545785488609 -0.5192648613079022 0
1647 -0.5194155910762654 1.84953612356808 0
1648 0.5194155910762652 -1.849536123568081 0
1649 -1.764070645987416 -1.490326248098674 0
1650 1.490326248098673 -1.764070645987417 0
1651 1.764070645987415 1.490326248098671 0
1652 -1.490326248098672 1.764070645987415 0
1653 0.2196275171078476 2.151535354172785 0
1654 -2.151535354172785 0.2196275171078472 0
1655 -0.219627517107846 -2.151535354172785 0
1656 2.151535354172784 -0.2196275171078472 0
1657 -2.579285280305554 0.3050007829576056 0
1658 -0.305000782957604 -2.579285280305553 0
1659 2.579285280305553 -0.3050007829576044 0
1660 0.305000782957606 2.579285280305555 0
1661 0.7806264094122199 -2.277937561464958 0
1662 2.27793030281776 0.7806294280095477 0
1663 -0.7806288546773238 2.277926959502137 0
1664 -2.27793030281776 -0.7806294280095464 0
1665 -2.295490538952776 0.1566043113715404 0
1666 2.294706067737629 -0.1564794951674437 0
1667 -0.1564794951674433 -2.294706067737628 0
1668 0.1564794951674441 2.294706067737629 0
1669 -1.013133756106424 1.906194480161318 0
1670 1.01331515734875 -1.906229825969235 0
1671 1.906249018868906 1.013358951284637 0
1672 -1.906194480161319 -1.013133756106424 0
1673 1.255996605577415 -2.308168972931044 0
1674 -2.308168972931042 -1.255996605577411 0
1675 2.308168972931044 1.255996605577415 0
1676 -1.256179654073953 2.308075036528761 0
1677 -1.782898325270426 0.1978231358132285 0
1678 0.1978231358132284 1.782898325270427 0
1679 -0.1978231358132289 -1.782898325270427 0
1680 1.782898325270427 -0.1978231358132281 0
1681 -0.04278762070258672 1.140295420472833 0
1682 -1.140295420472833 -0.04278762070258709 0
1683 1.140295420472833 0.04278762070258646 0
1684 0.04278762070258676 -1.140295420472833 0
1685 -1.089749882696147 2.14744251867111 0
1686 2.147689139932259 1.090538083532882 0
1687 1.090449573202253 -2.147578852501643 0
1688 -2.14744251867111 -1.089749882696145 0
1689 -0.7128778196409539 1.210015093575703 0
1690 -1.210015093575703 -0.7128778196409534 0
1691 1.210015093575704 0.7128778196409534 0
1692 0.7128778196409534 -1.210015093575703 0
1693 -2.734454345662969 0.2612521621539641 0
1694 2.734454345662971 -0.2612521621539626 0
1695 0.2612521621539633 2.734454345662971 0
1696 -0.2612521621539631 -2.734454345662971 0
1697 2.288763456302163 -1.507448862428161 0
1698 -1.50744886242816 -2.288763456302163 0
1699 1.507452432881215 2.288771162639054 0
1700 -2.288763456302163 1.50744886242816 0
1701 1.429856913185624 -0.9176937897508003 0
1702 -0.9176937897508003 -1.429856913185624 0
1703 0.9176937897507992 1.429856913185624 0
1704 -1.429856913185624 0.917693789750799 0
1705 -1.790217278788855 -0.765950944560477 0
1706 1.790217278788854 0.7659509445604751 0
1707 -0.7659509445604743 1.790217278788854 0
1708 0.7659509445604756 -1.790217278788854 0
1709 -1.341570374447128 -1.960068559291121 0
1710 1.960068559291121 -1.341570374447128 0
1711 -1.960068559291121 1.341570374447129 0
1712 1.341560208324007 1.960070749196338 0
1713 -1.482390654205495 -1.351817279313541 0
1714 1.351817279313541 -1.482390654205496 0
1715 1.482390654205495 1.351817279313541 0
1716 -1.35181727931354 1.482390654205494 0
1717 -0.1697924740898308 -1.878646757056401 0
1718 1.878646757056402 -0.1697924740898313 0
1719 -1.878646757056402 0.1697924740898314 0
1720 0.1697924740898315 1.878646757056401 0
1721 1.245817648421706 0.2181192404577277 0
1722 0.218119240457728 -1.245817648421706 0
1723 -1.245817648421706 -0.2181192404577282 0
1724 -0.2181192404577293 1.245817648421705 0
1725 0.01748111153789091 -2.731743838693196 0
1726 2.731743838693197 0.01748111153789375 0
1727 -0.01748111153789486 2.731743838693197 0
1728 -2.731743838693197 -0.01748111153789305 0
1729 -1.485185274069744 -0.3404880063619547 0
1730 0.3404880063619544 -1.485185274069745 0
1731 -0.3404880063619557 1.485185274069744 0
1732 1.485185274069744 0.3404880063619546 0
1733 2.19655307581991 1.363899602831301 0
1734 -1.363893386123528 2.196551130665528 0
1735 -2.196551130665529 -1.363893386123528 0
1736 1.363893386123529 -2.196551130665529 0
1737 -0.6346333655754618 -2.531211050054142 0
1738 -2.531213240989256 0.634626112230787 0
1739 2.531211050054142 -0.6346333655754606 0
1740 0.63463336557546 2.531211050054142 0
1741 -0.9115817347601537 -1.64275349672438 0
1742 1.64275349672438 -0.9115817347601537 0
1743 -1.64275349672438 0.9115817347601521 0
1744 0.9115817347601519 1.642753496724381 0
1745 -2.152050955196144 -0.9036904416426611 0
1746 0.9036904416426632 -2.152050955196144 0
1747 -0.903690441642663 2.152050955196145 0
1748 2.152050955196144 0.9036904416426627 0
1749 0.0171854662674182 1.9548449556074 0
1750 -1.9548449556074 0.01718546626741806 0
1751 -0.01718546626741747 -1.9548449556074 0
1752 1.9548449556074 -0.01718546626741757 0
1753 -2.124761600806383 0.9834757691161451 0
1754 2.124761600806383 -0.9834757691161441 0
1755 -0.9840165349834427 -2.125070213418938 0
1756 0.9834757691161432 2.124761600806383 0
1757 -1.496842623555326 -1.194329308933004 0
1758 1.194329308933005 -1.496842623555326 0
1759 1.496842623555326 1.194329308933005 0
1760 -1.194329308933004 1.496842623555326 0
1761 -0.3394864510010989 -1.378271239650137 0
1762 0.3394864510010976 1.378271239650136 0
1763 -1.378271239650137 0.339486451001098 0
1764 1.378271239650137 -0.3394864510010987 0
1765 0.8290700409334142 1.484115511943135 0
1766 1.484115511943136 -0.8290700409334159 0
1767 -0.8290700409334159 -1.484115511943136 0
1768 -1.484115511943135 0.8290700409334142 0
1769 2.565257929002759 0.01709285840151547 0
1770 -0.01709285840151484 2.56525792900276 0
1771 0.01709285840151284 -2.565257929002759 0
1772 -2.56525792900276 -0.01709285840151446 0
1773 1.055930461306903 1.876768396631231 0
1774 -1.87676839663123 1.055930461306903 0
1775 -1.055930461306904 -1.876768396631231 0
1776 1.876768396631231 -1.055930461306904 0
1777 -0.04070708725631527 -1.732092898844336 0
1778 1.732092898844336 -0.04070708725631573 0
1779 -1.732092898844334 0.04070708725631533 0
1780 0.04070708725631546 1.732092898844334 0
1781 -2.171191124791286 -1.182244067640412 0
1782 2.171242241827473 1.18240743754009 0
1783 1.18232181102998 -2.17120627299468 0
1784 -1.182244067640413 2.171191124791287 0
1785 1.666691526475197 -0.303705561921487 0
1786 -0.3037055619214872 -1.666691526475197 0
1787 0.3037055619214875 1.666691526475198 0
1788 -1.666691526475197 0.3037055619214875 0
1789 1.031833617719789 -1.467467442259682 0
1790 -1.031734660051303 1.467392006905713 0
1791 -1.467392006905713 -1.031734660051303 0
1792 1.467392006905713 1.031734660051303 0
1793 -1.674893497448606 1.210361911892398 0
1794 1.674893497448604 -1.210361911892402 0
1795 1.210361911892398 1.674893497448605 0
1796 -1.210361911892402 -1.674893497448603 0
1797 1.02464248624637 -1.57742637912794 0
1798 -1.577417997421944 -1.024631490949873 0
1799 1.577417997421943 1.024631490949872 0
1800 -1.024631490949872 1.577417997421943 0
1801 -0.2800760608424183 1.099181088719185 0
1802 1.099181088719185 0.280076060842418 0
1803 0.280076060842418 -1.099181088719185 0
1804 -1.099181088719185 -0.280076060842418 0
1805 0.03444435061805504 -1.293530790625678 0
1806 1.293530790625678 0.03444435061805465 0
1807 -0.03444435061805512 1.293530790625677 0
1808 -1.293530790625678 -0.03444435061805518 0
1809 0.1331410088113198 -1.312992454232195 0
1810 1.312992454232195 0.1331410088113194 0
1811 -1.312992454232195 -0.13314100881132 0
1812 -0.1331410088113207 1.312992454232195 0
1813 0.1872056808415608 -2.114581468593026 0
1814 2.114581468593026 0.1872056808415618 0
1815 -0.1872056808415592 2.114581468593025 0
1816 -2.114581468593025 -0.1872056808415597 0
1817 -1.220116421835935 1.114056172933568 0
1818 1.220116421835933 -1.114056172933571 0
1819 -1.114056172933569 -1.220116421835933 0
1820 1.114056172933568 1.220116421835933 0
1821 1.142232296538627 0.572399829522925 0
1822 -0.5723998295229243 1.142232296538627 0
1823 -1.142232296538626 -0.572399829522925 0
1824 0.572399829522925 -1.142232296538626 0
1825 -1.084702663723702 -1.377268722694053 0
1826 1.0847026637237 1.377268722694054 0
1827 1.377268722694052 -1.084702663723702 0
1828 -1.377268722694054 1.084702663723699 0
1829 1.505629383250067 -1.18911641604039 0
1830 -1.189116416040389 -1.505629383250068 0
1831 -1.505629383250068 1.189116416040387 0
1832 1.189116416040388 1.505629383250069 0
1833 -0.3144172627732226 1.985177542822676 0
1834 1.985177542822678 0.3144172627732235 0
1835 0.3144172627732236 -1.985177542822676 0
1836 -1.98523545466199 -0.3144296969957552 0
1837 0.8122724679978707 -0.9625910861497675 0
1838 -0.8122724679978708 0.962591086149768 0
1839 0.9625910861497682 0.8122724679978703 0
1840 -0.9625910861497674 -0.8122724679978708 0
1841 -0.2647287924159983 -1.233139222732028 0
1842 0.2647287924159976 1.233139222732028 0
1843 1.233139222732028 -0.2647287924159984 0
1844 -1.233139222732028 0.2647287924159982 0
1845 -2.473967424034291 -1.203605958295635 0
1846 2.473967424034291 1.203605958295637 0
1847 1.203605958295636 -2.473967424034292 0
1848 -1.203730403912798 2.473910763396757 0
1849 1.665894252103733 1.649644031641938 0
1850 -1.665894252103737 -1.649644031641938 0
1851 -1.649644031641938 1.665894252103735 0
1852 1.649644031641938 -1.665894252103736 0
1853 -0.4376122260958072 2.099506492286065 0
1854 2.099506492286066 0.4376122260958049 0
1855 -2.099507596505554 -0.4375949998365653 0
1856 0.4376122260958068 -2.099506492286063 0
1857 1.492804925974009 -1.559401279256378 0
1858 -1.492804925974007 1.559401279256378 0
1859 -1.559401279256379 -1.492804925974008 0
1860 1.559401279256379 1.492804925974005 0
1861 1.340052239017525 0.9220354909944083 0
1862 0.9221509416076431 -1.340140246930489 0
1863 -0.9220354909944091 1.340052239017524 0
1864 -1.340052239017526 -0.9220354909944083 0
1865 1.210270828818687 0.3979661503313817 0
1866 -1.210270828818687 -0.3979661503313815 0
1867 0.3979661503313818 -1.210270828818687 0
1868 -0.3979661503313823 1.210270828818687 0
1869 -1.064201291695233 1.192835554241149 0
1870 1.192835554241149 1.064201291695233 0
1871 1.064201291695233 -1.192835554241149 0
1872 -1.192835554241148 -1.064201291695233 0
1873 -1.74978884907743 0.7468683835484176 0
1874 0.7468683835484164 1.749788849077431 0
1875 -0.7468683835484176 -1.74978884907743 0
1876 1.74978884907743 -0.7468683835484176 0
1877 1.303511795290288 1.658748570650102 0
1878 -1.658748570650102 1.303511795290289 0
1879 -1.303511795290293 -1.658748570650101 0
1880 1.658748570650101 -1.303511795290294 0
1881 -0.6522331604044478 -2.371304425731685 0
1882 0.6522331604044478 2.371304425731686 0
1883 2.371304425731685 -0.6522331604044481 0
1884 -2.371307773371674 0.6522220776542026 0
1885 -0.161879694995134 1.912724116625959 0
1886 0.161879694995135 -1.912724116625959 0
1887 -1.912724116625958 -0.1618796949951342 0
1888 1.912724116625957 0.1618796949951353 0
1889 -0.5891982292360688 -1.139971724873591 0
1890 0.589198229236069 1.139971724873591 0
1891 1.139971724873591 -0.5891982292360688 0
1892 -1.139971724873591 0.5891982292360692 0
1893 -0.7276354551802608 -1.056996755145156 0
1894 0.7276354551802603 1.056996755145156 0
1895 1.056996755145155 -0.7276354551802604 0
1896 -1.056996755145156 0.7276354551802601 0
1897 -1.332558200039698 0.756910371619168 0
1898 1.332558200039698 -0.7569103716191677 0
1899 -0.756910371619168 -1.332558200039698 0
1900 0.7569103716191682 1.332558200039698 0
1901 0.7347958967450202 2.222561823454304 0
1902 -0.7347958967450187 -2.222561823454303 0
1903 -2.222561823454305 0.734795896745021 0
1904 2.222561823454303 -0.7347958967450182 0
1905 0.4124576968813735 -1.304795712913172 0
1906 -0.4124576968813741 1.304795712913172 0
1907 1.304795712913173 0.412457696881373 0
1908 -1.304795712913172 -0.4124576968813732 0
1909 -2.385424613256716 -0.3816185993630187 0
1910 0.3816185993630202 -2.385424613256715 0
1911 -0.381618599363019 2.385424613256714 0
1912 2.385424613256717 0.3816185993630176 0
1913 -1.905025717544701 0.3434247392627974 0
1914 0.3434247392627974 1.905025717544701 0
1915 1.905025717544701 -0.3434247392627975 0
1916 -0.3434247392627973 -1.905025717544701 0
1917 -0.4761177010390187 -1.452162346732458 0
1918 1.452162346732458 -0.4761177010390189 0
1919 -1.452162346732458 0.4761177010390191 0
1920 0.4761177010390181 1.452162346732458 0
1921 2.263192674768589 0.483688488889794 0
1922 -2.263192674768584 -0.4836884888897914 0
1923 -0.4836877749546665 2.263188511544607 0
1924 0.4836591161381064 -2.263220789382191 0
1925 2.017917388813113 -1.171097863670006 0
1926 -2.017917388813113 1.171097863670007 0
1927 -1.171097863670006 -2.017917388813113 0
1928 1.171096677622309 2.017917644302054 0
1929 1.044123806211569 0.9568932876117177 0
1930 0.9568932876117175 -1.044123806211568 0
1931 -0.9568932876117179 1.044123806211568 0
1932 -1.044123806211568 -0.9568932876117177 0
1933 1.834412222426588 0.09146965609785562 0
1934 0.09146965609785515 -1.834412222426588 0
1935 -0.09146965609785469 1.834412222426588 0
1936 -1.834412222426587 -0.09146965609785489 0
1937 -2.546966682561786 1.055839970029947 0
1938 1.055901276560582 2.546948164397164 0
1939 -1.05571704590029 -2.546986683365195 0
1940 2.546986683365195 -1.05571704590029 0
1941 -2.218341548196309 -1.029907600059814 0
1942 2.218374431031128 1.030012693504713 0
1943 1.030000892127297 -2.218359726040379 0
1944 -1.029907600059816 2.218341548196309 0
1945 1.285903628354011 2.251308989883599 0
1946 -2.251308989883598 1.285903628354013 0
1947 -1.285903628354013 -2.251308989883599 0
1948 2.251308989883599 -1.285903628354013 0
1949 -1.201050546148681 -2.298006365284683 0
1950 2.298006365284683 -1.201050546148681 0
1951 -2.298003555618338 1.201061614538868 0
1952 1.201061614538867 2.298003555618338 0
1953 -1.8039611090672 -1.888692432797046 0
1954 1.888692432797048 -1.803961109067199 0
1955 -1.888692432797048 1.8039611090672 0
1956 1.803960989536063 1.888692458545492 0
1957 -2.547684422480799 -0.440826097507128 0
1958 2.547684422480799 0.4408260975071258 0
1959 0.440820172061586 -2.54769000934226 0
1960 -0.4408201720615842 2.547690009342258 0
1961 0.5694844866939133 2.698462991828702 0
1962 -0.5694844866939126 -2.698462991828702 0
1963 2.698462991828703 -0.5694844866939138 0
1964 -2.698462991828701 0.5694844866939153 0
1965 0.93342296691631 -1.438986527387448 0
1966 -1.43874282548566 -0.9332699213163195 0
1967 -0.933269921316319 1.438742825485659 0
1968 1.438742825485659 0.9332699213163193 0
1969 0.8486367161216685 -1.801121183763446 0
1970 1.801157043740609 0.8485674894939527 0
1971 -0.8486367161216666 1.801121183763445 0
1972 -1.801121183763444 -0.8486367161216694 0
1973 0.6118263066378422 -1.853411266477482 0
1974 1.853411266477483 0.6118263066378413 0
1975 -1.853412340024208 -0.6118095588858022 0
1976 -0.6118263066378421 1.853411266477482 0
1977 -1.966113127284278 -1.919501796051132 0
1978 1.919501796051132 -1.966113127284279 0
1979 -1.919501796051133 1.966113127284276 0
1980 1.966112983846912 1.919501826949267 0
1981 -2.486591889142025 0.1479775460745219 0
1982 0.1479775460745224 2.486591889142023 0
1983 2.486591889142022 -0.1479775460745204 0
1984 -0.1479775460745197 -2.486591889142022 0
1985 2.440588521410271 0.8250895662030769 0
1986 -2.440588521410271 -0.8250895662030747 0
1987 0.825086185014728 -2.440596857352225 0
1988 -0.8250861540335934 2.440587660524409 0
1989 -2.441416328730757 -0.929849977510937 0
1990 0.9298496018233448 -2.44141725494653 0
1991 2.441416328730757 0.9298499775109406 0
1992 -0.9298495983809976 2.441416233076772 0
1993 -2.628105091352259 -0.2922969054684385 0
1994 0.2922968787049092 -2.628105116586501 0
1995 2.628105091352257 0.2922969054684386 0
1996 -0.2922968787049086 2.628105116586501 0
1997 -0.3318220982923799 2.302627241163353 0
1998 2.302627241163355 0.3318220982923787 0
1999 0.3318220982923799 -2.302627241163352 0
2000 -2.302627241163352 -0.3318220982923791 0
2001 1.439534921122808 2.15164210290064 0
2002 -2.151540892247972 1.439657603325923 0
2003 -1.439657603325925 -2.151540892247975 0
2004 2.151540892247975 -1.439657603325925 0
2005 -1.586059458427462 1.891926097815441 0
2006 1.891926097815441 1.586059458427461 0
2007 -1.891926097815444 -1.586059458427462 0
2008 1.586059458427461 -1.891926097815442 0
2009 2.263919862191116 -0.9057311924032191 0
2010 -0.9063620859150675 -2.264279910239096 0
2011 0.9058474105001871 2.263890360694492 0
2012 -2.263890360694492 0.9058474105001895 0
2013 -0.06375573670758843 2.41073654962269 0
2014 -2.410736549622691 -0.06375573670758944 0
2015 0.06375573670758751 -2.410736549622689 0
2016 2.41073654962269 0.06375573670758893 0
2017 0.778996314775556 -1.646230685691106 0
2018 -1.646230685691106 -0.7789963147755566 0
2019 1.646230685691105 0.778996314775555 0
2020 -0.7789963147755558 1.646230685691106 0
2021 -1.711272075956885 0.1346695958635541 0
2022 0.134669595863554 1.711272075956886 0
2023 -0.1346695958635547 -1.711272075956886 0
2024 1.711272075956887 -0.1346695958635546 0
2025 -0.4730467895938174 1.60215135954298 0
2026 0.4730467895938159 -1.602151359542981 0
2027 1.602151359542979 0.4730467895938164 0
2028 -1.602151359542981 -0.4730467895938159 0
2029 0.5419462732247627 -1.280320848598522 0
2030 1.280320848598523 0.5419462732247625 0
2031 -1.280320848598522 -0.5419462732247624 0
2032 -0.5419462732247624 1.280320848598521 0
2033 -1.177446130323503 -1.402313710932436 0
2034 1.402313710932436 -1.177446130323504 0
2035 1.177446130323501 1.402313710932438 0
2036 -1.402313710932438 1.1774461303235 0
2037 1.9003440487932 -1.150874664644683 0
2038 -1.150874664644683 -1.9003440487932 0
2039 -1.9003440487932 1.150874664644682 0
2040 1.150874532861604 1.90034407718086 0
2041 0.9315997629190593 -0.8239227533241842 0
2042 0.8239227533241846 0.931599762919059 0
2043 -0.8239227533241841 -0.9315997629190592 0
2044 -0.9315997629190594 0.8239227533241844 0
2045 1.166008448580734 -0.4331579087311315 0
2046 0.433157908731131 1.166008448580734 0
2047 -1.166008448580735 0.433157908731131 0
2048 -0.4331579087311314 -1.166008448580735 0
2049 -1.05080210046375 2.064245625405638 0
2050 1.051897313015461 -2.064540362722779 0
2051 2.065339941654813 1.05207705316238 0
2052 -2.064245625405637 -1.050802100463748 0
2053 -0.6130403483266724 2.106894408586462 0
2054 0.6130376436239192 -2.10689813726476 0
2055 2.106895061329037 0.6130404602629633 0
2056 -2.106895061329037 -0.6130404602629628 0
2057 -2.39379370735896 1.364463542878356 0
2058 2.393793707358961 -1.364463542878354 0
2059 -1.364463542878354 -2.393793707358961 0
2060 1.363359795064773 2.393812362155105 0
2061 -2.325694528506499 0.4945383539774582 0
2062 2.325694528506498 -0.4945383539774565 0
2063 0.4945383539774559 2.3256945285065 0
2064 -0.4945383539774572 -2.325694528506499 0
2065 -1.894533474160157 -1.214353032198262 0
2066 -1.214353032198262 1.894533474160154 0
2067 1.894535516572254 1.214359559741423 0
2068 1.214353032198263 -1.894533474160157 0
2069 2.104090850274681 1.771658541146791 0
2070 -1.771658541146792 2.10409085027468 0
2071 -2.10409085027468 -1.771658541146792 0
2072 1.771658541146792 -2.10409085027468 0
2073 1.028950874296593 1.465363642020876 0
2074 -1.465363642020876 1.028950874296592 0
2075 1.465363642020874 -1.028950874296593 0
2076 -1.028950874296593 -1.465363642020875 0
2077 -2.062593615372279 0.6784470444474048 0
2078 0.6784470444474046 2.062593615372278 0
2079 -0.6784470444474053 -2.062593615372279 0
2080 2.062593615372279 -0.6784470444474052 0
2081 1.849659154102153 -0.905503948726889 0
2082 -0.9055039487268891 -1.849659154102153 0
2083 0.905503948726888 1.849659154102153 0
2084 -1.849659154102153 0.9055039487268888 0
2085 1.291566497214912 -0.8188546618503899 0
2086 -0.8188546618503898 -1.291566497214913 0
2087 -1.291566497214912 0.8188546618503898 0
2088 0.8188546618503898 1.291566497214912 0
2089 -0.2331252467846262 -2.07181409609242 0
2090 -2.07181409609242 0.233125246784627 0
2091 0.2331252467846267 2.07181409609242 0
2092 2.071814096092419 -0.2331252467846273 0
2093 2.256126079688167 0.8636471595627633 0
2094 -0.8636471595627646 2.25612607968817 0
2095 0.8636471595627639 -2.256126079688167 0
2096 -2.256126079688168 -0.8636471595627628 0
2097 0.655365888049346 2.675349716642266 0
2098 -0.655365888049345 -2.675349716642266 0
2099 2.675349716642267 -0.655365888049347 0
2100 -2.675349716642268 0.6553658880493481 0
2101 -1.454144888026798 1.907448343692012 0
2102 1.907448343692012 1.454144888026798 0
2103 -1.907448343692013 -1.454144888026799 0
2104 1.454144888026799 -1.907448343692013 0
2105 -2.054218762998484 1.824153928474172 0
2106 -1.824153928474172 -2.054218762998484 0
2107 2.054218762998484 -1.82415392847417 0
2108 1.824142632781815 2.054221196226504 0
2109 -1.926449380431952 -0.4669635980612077 0
2110 0.468320165976484 -1.926362423147193 0
2111 -0.468320165976484 1.926362423147192 0
2112 1.926362423147195 0.4683201659764836 0
2113 -2.120440120885492 1.535946848636708 0
2114 -1.535946848636709 -2.120440120885496 0
2115 2.120440120885495 -1.535946848636708 0
2116 1.536202031016845 2.120990897316192 0
2117 2.020017190070337 1.331279706445359 0
2118 -1.331279706445359 2.020017190070339 0
2119 -2.02001719007034 -1.331279706445359 0
2120 1.33127970644536 -2.020017190070339 0
2121 0.8070486036078939 2.302394116486219 0
2122 -0.8070486036078928 -2.302394116486217 0
2123 2.302394116486217 -0.8070486036078929 0
2124 -2.302394116486219 0.8070486036078953 0
2125 -0.7918612111401973 1.240849099787762 0
2126 0.7918612111401967 -1.240849099787762 0
2127 -1.240849099787761 -0.791861211140197 0
2128 1.240849099787762 0.7918612111401965 0
2129 -0.7785304703959238 1.383112603239013 0
2130 -1.383112603239014 -0.7785304703959236 0
2131 1.383112603239013 0.7785304703959232 0
2132 0.7785304703959234 -1.383112603239013 0
2133 -0.1576152017472986 -1.12547342929687 0
2134 -1.12547342929687 0.1576152017472986 0
2135 1.125473429296869 -0.1576152017472986 0
2136 0.1576152017472985 1.125473429296869 0
2137 -0.9182752182443951 -0.6695471056336988 0
2138 0.6695471056336988 -0.9182752182443955 0
2139 -0.6695471056336988 0.9182752182443951 0
2140 0.9182752182443951 0.6695471056336987 0
2141 2.400958192902874 -0.9663906622281637 0
2142 -0.9663906622281638 -2.400958192902874 0
2143 0.9663906622281654 2.400958192902875 0
2144 -2.400958192902874 0.9663906622281648 0
2145 -1.05362542356287 -2.40074774576783 0
2146 2.40074774576783 -1.05362542356287 0
2147 1.051970175461447 2.400585199622438 0
2148 -2.400603717787058 1.051908868930813 0
2149 -0.6835058742243948 -1.596908876014601 0
2150 1.596908876014601 -0.6835058742243949 0
2151 -1.596908876014598 0.6835058742243927 0
2152 0.6835058742243927 1.5969088760146 0
2153 -0.2289772086555903 -2.426722298745771 0
2154 2.426722298745773 -0.2289772086555908 0
2155 -2.426722298745775 0.2289772086555921 0
2156 0.2289772086555923 2.426722298745774 0
2157 1.551998730824323 1.791846002265232 0
2158 -1.792005266436657 1.552041056907158 0
2159 -1.551998730824324 -1.791846002265232 0
2160 1.791910330457832 -1.552007113877801 0
2161 1.268083197429316 2.159372567851669 0
2162 -1.268096639303221 -2.159369672310328 0
2163 2.159369672310328 -1.268096639303221 0
2164 -2.159369672310328 1.268096639303222 0
2165 1.023792869940157 0.4891125677111284 0
2166 0.4891125677111283 -1.023792869940157 0
2167 -0.4891125677111282 1.023792869940157 0
2168 -1.023792869940156 -0.4891125677111282 0
2169 -2.266335677037981 -0.1242780329527608 0
2170 0.1242780329527592 -2.26633567703798 0
2171 -0.12427803295276 2.266335677037979 0
2172 2.266335677037981 0.12427803295276 0
2173 2.144447895797263 1.508275119320199 0
2174 -1.508275119320197 2.144447895797264 0
2175 1.508275119320198 -2.144447895797266 0
2176 -2.144447895797267 -1.508275119320198 0
2177 1.389506886556952 0.2853699061717712 0
2178 0.2853699061717717 -1.389506886556952 0
2179 -1.389506886556952 -0.2853699061717715 0
2180 -0.2853699061717726 1.389506886556952 0
2181 0.1817160607665974 -2.645285509652437 0
2182 2.645285506848633 0.1817160637403243 0
2183 -0.1817160607666004 2.645285509652438 0
2184 -2.645285506848635 -0.1817160637403245 0
2185 -0.09666463992505486 -2.012702424004126 0
2186 2.012702424004126 -0.09666463992505532 0
2187 -2.012702424004126 0.096664639925056 0
2188 0.09666463992505597 2.012702424004126 0
2189 0.02182239168493035 1.573735316146933 0
2190 -0.02182239168493035 -1.573735316146933 0
2191 1.573735316146933 -0.02182239168493065 0
2192 -1.573735316146932 0.02182239168493033 0
2193 -1.077279792024548 1.359816078960421 0
2194 1.359816078960421 1.077279792024548 0
2195 -1.359816078960421 -1.077279792024546 0
2196 1.077290787321045 -1.359824460666417 0
2197 0.2572180463530752 -1.804686780110452 0
2198 -0.257218046353074 1.804686780110452 0
2199 -1.804695053230354 -0.2572198226705782 0
2200 1.804686780110453 0.257218046353074 0
2201 -0.8235921435852751 -2.038506604540969 0
2202 2.038506604540969 -0.8235921435852751 0
2203 -2.03850660454097 0.8235921435852754 0
2204 0.823592143585275 2.03850660454097 0
2205 0.112938550100749 1.464285341837507 0
2206 -0.1129385501007495 -1.464285341837508 0
2207 1.464285341837508 -0.1129385501007497 0
2208 -1.464285341837507 0.1129385501007488 0
2209 -1.141478977180215 0.6842728848930644 0
2210 -0.6842728848930648 -1.141478977180215 0
2211 0.6842728848930645 1.141478977180215 0
2212 1.141478977180215 -0.6842728848930643 0
2213 -1.313363798062688 1.923923892330764 0
2214 -1.923923892330766 -1.313363798062688 0
2215 1.923926502079558 1.313372138812283 0
2216 1.313363798062689 -1.923923892330766 0
2217 1.634903175139774 -0.159492950529966 0
2218 -0.1594929505299658 -1.634903175139772 0
2219 -1.634903175139772 0.1594929505299653 0
2220 0.1594929505299651 1.634903175139773 0
2221 -0.4137710033702282 -1.982002312418779 0
2222 1.982002312418778 -0.4137710033702276 0
2223 0.4137718795923881 1.982003108394355 0
2224 -1.982002312418777 0.4137710033702275 0
2225 -0.8311927927942503 2.113690018845995 0
2226 0.831192792794252 -2.113690018845993 0
2227 2.113690018845993 0.8311927927942511 0
2228 -2.113690018845993 -0.8311927927942507 0
2229 2.290003574376128 -0.3028808899657232 0
2230 -0.3028808899657222 -2.290003574376128 0
2231 -2.29000357437613 0.3028808899657225 0
2232 0.3028691060463863 2.290046108328467 0
2233 2.253662110029492 -0.5442995405902953 0
2234 -2.253662110029492 0.5442995405902965 0
2235 -0.5442995405902961 -2.253662110029492 0
2236 0.5442995405902935 2.253662110029493 0
2237 0.6220159601757206 -1.703104992395233 0
2238 -0.6220159601757211 1.703104992395232 0
2239 -1.703104992395231 -0.6220159601757208 0
2240 1.703104992395231 0.6220159601757201 0
2241 1.086706105278604 1.058558272129943 0
2242 -1.058558272129943 1.086706105278604 0
2243 1.058558272129943 -1.086706105278605 0
2244 -1.086706105278605 -1.058558272129942 0
2245 0.2861554339369873 1.752869845181072 0
2246 -1.752869845181071 0.2861554339369874 0
2247 1.752869845181072 -0.2861554339369869 0
2248 -0.2861554339369874 -1.752869845181072 0
2249 1.458881992145466 0.7890104524836865 0
2250 -0.7890104524836867 1.458881992145465 0
2251 -1.458881992145467 -0.7890104524836874 0
2252 0.7890104524836872 -1.458881992145465 0
2253 -2.191823876655617 0.141928057137784 0
2254 0.1419141886706626 2.191736713187266 0
2255 2.191736713187266 -0.141914188670662 0
2256 -0.1419141886706607 -2.191736713187267 0
2257 2.478797043339587 -0.4201830277644268 0
2258 -2.47879704333959 0.420183027764429 0
2259 -0.4201830277644266 -2.478797043339587 0
2260 0.4201830277644285 2.478797043339589 0
2261 2.030836945892254 0.5606600936457568 0
2262 -2.030838050111742 -0.560642867386516 0
2263 0.5606597180938856 -2.030837356017016 0
2264 -0.5606600787209188 2.030836858859908 0
2265 1.796621938414152 1.224904189904049 0
2266 -1.224899089424729 1.796622465574902 0
2267 -1.796622465574903 -1.22489908942473 0
2268 1.224899089424731 -1.796622465574904 0
2269 -1.069376589022753 -1.609532498918081 0
2270 1.609532498918081 -1.069376589022754 0
2271 -1.609532498918082 1.069376589022752 0
2272 1.069376589022753 1.609532498918082 0
2273 2.358802831971987 1.419430499862688 0
2274 -1.419443764246496 2.358796024986315 0
2275 1.419430499862688 -2.358802831971987 0
2276 -2.358802831971987 -1.419430499862687 0
2277 1.397407363406345 1.795147118183049 0
2278 -1.397407363406346 -1.795147118183049 0
2279 -1.795221194541852 1.397427049956501 0
2280 1.795211446375647 -1.397415746459823 0
2281 -2.319260788527206 0.08448352489958434 0
2282 -0.08580403182264111 -2.321161400867999 0
2283 2.321161400868001 -0.0858040318226411 0
2284 0.08580403182264268 2.321161400867999 0
2285 0.1259315382107288 -1.126759177859219 0
2286 1.126759177859219 0.1259315382107285 0
2287 -0.1259315382107289 1.126759177859219 0
2288 -1.126759177859219 -0.1259315382107288 0
2289 -0.9389425622329133 2.588682855565037 0
2290 2.588682855565037 0.9389425622329124 0
2291 -2.588682855565037 -0.9389425622329118 0
2292 0.9389425622329139 -2.588682855565037 0
2293 0.7549800233792493 2.661444680652537 0
2294 2.661444680652537 -0.7549800233792493 0
2295 -2.661444680652538 0.7549800233792503 0
2296 -0.7549800233792493 -2.661444680652537 0
2297 0.5431156764497782 2.399731093475963 0
2298 2.399731093475962 -0.5431156764497788 0
2299 -0.5431156764497785 -2.399731093475963 0
2300 -2.399731093475963 0.54311567644978 0
2301 -1.183050261739556 -1.755697327782193 0
2302 1.755697327782193 -1.183050261739557 0
2303 1.183050261739554 1.755697327782195 0
2304 -1.755697327782195 1.183050261739554 0
2305 -0.3717612664501042 2.146423144634247 0
2306 2.146423144634249 0.3717612664501034 0
2307 -2.146423144634247 -0.3717612664501044 0
2308 0.3717612664501048 -2.146423144634245 0
2309 -2.25770022734479 1.582982102646029 0
2310 1.582985883125735 2.257708386995617 0
2311 2.257700227344791 -1.582982102646028 0
2312 -1.582982102646028 -2.257700227344791 0
2313 0.9385108079396469 -1.961124941797976 0
2314 -0.9383973601785729 1.961102836641913 0
2315 1.961138919956191 0.938518336749514 0
2316 -1.961102836641913 -0.9383973601785729 0
2317 1.673467753355246 0.9172822877339505 0
2318 0.9173515143616675 -1.673431893378083 0
2319 -1.673431893378082 -0.9173515143616677 0
2320 -0.9173515143616657 1.673431893378081 0
2321 1.731634873680215 1.091863227316139 0
2322 1.091821796252918 -1.731643140825466 0
2323 -1.731643140825466 -1.091821796252915 0
2324 -1.091821796252916 1.731643140825465 0
2325 -1.809350313182059 -1.584628047760263 0
2326 -1.584628047760261 1.809350313182056 0
2327 1.809350313182056 1.58462804776026 0
2328 1.584628047760261 -1.809350313182058 0
2329 1.662174959664011 0.017590473401908 0
2330 0.0175904734019084 -1.662174959664011 0
2331 -1.66217495966401 -0.01759047340190826 0
2332 -0.01759047340190846 1.662174959664011 0
2333 -2.273647716454741 0.02122975584292679 0
2334 2.273858895603717 -0.02137647883437751 0
2335 -0.02137647883437781 -2.273858895603716 0
2336 0.02137647883437691 2.273858895603714 0
2337 -0.7577133014026182 -1.642055250027058 0
2338 1.642055250027058 -0.7577133014026182 0
2339 -1.642055250027057 0.7577133014026169 0
2340 0.7577133014026166 1.642055250027058 0
2341 -2.537356503130392 -1.058852606593504 0
2342 -1.058818892837558 2.537382446767634 0
2343 1.058852606593504 -2.537356503130394 0
2344 2.537356503130393 1.058852606593505 0
2345 1.185522051354771 -2.267006917579528 0
2346 2.267010914116505 1.185531565411451 0
2347 -1.18568361664108 2.266918575751378 0
2348 -2.267005234445814 -1.185513413200374 0
2349 1.637928390595797 1.9082504633132 0
2350 -1.908411933055112 1.63800087435893 0
2351 1.908244438177153 -1.637956360881632 0
2352 -1.637956360881632 -1.908244438177153 0
2353 1.224321377895256 -0.1082238521414923 0
2354 -0.108223852141492 -1.224321377895257 0
2355 0.1082238521414919 1.224321377895256 0
2356 -1.224321377895257 0.1082238521414918 0
2357 -0.6667602743557082 1.018528463478083 0
2358 1.018528463478083 0.6667602743557084 0
2359 -1.018528463478083 -0.6667602743557084 0
2360 0.6667602743557084 -1.018528463478083 0
2361 -1.661073055591936 2.035544107047461 0
2362 1.661073055591937 -2.035544107047463 0
2363 2.035544107047461 1.661073055591936 0
2364 -2.035544107047463 -1.661073055591937 0
2365 1.598257648344644 -0.9794760451319302 0
2366 -0.9794760451319302 -1.598257648344644 0
2367 0.9794760451319291 1.598257648344645 0
2368 -1.598257648344644 0.9794760451319289 0
2369 -0.495725704813352 -2.588734612237667 0
2370 2.588734612237667 -0.4957257048133525 0
2371 -2.588734612237666 0.4957257048133545 0
2372 0.4957257048133526 2.588734612237667 0
2373 1.061100710298794 2.166471550788855 0
2374 -2.166471550788855 1.061100710298794 0
2375 -1.061159530346207 -2.166516070736809 0
2376 2.166474922388468 -1.061087428230567 0
2377 -1.875217412287608 0.0781296871652549 0
2378 -0.07812968716525517 -1.875217412287608 0
2379 0.07812968716525549 1.875217412287608 0
2380 1.875217412287608 -0.07812968716525594 0
2381 -1.320756791381166 -1.17312719531965 0
2382 1.320756791381165 1.173127195319654 0
2383 -1.173127195319653 1.320756791381164 0
2384 1.173128242490746 -1.320757589638879 0
2385 2.415397293358488 -0.3783563578877922 0
2386 -0.3783563578877922 -2.415397293358488 0
2387 0.3782712431895759 2.415383860079511 0
2388 -2.415397293358488 0.3783563578877918 0
2389 1.641562541418794 -0.6035670541596079 0
2390 -0.6035670541596079 -1.641562541418794 0
2391 -1.641562541418792 0.6035670541596061 0
2392 0.6035670541596064 1.641562541418793 0
2393 1.014262875715098 1.970104328602254 0
2394 -1.970104328602253 1.014262875715098 0
2395 -1.014262875715098 -1.970104328602254 0
2396 1.970104328602254 -1.014262875715098 0
2397 -0.004308827434255804 -1.216525401953656 0
2398 -1.216525401953656 0.004308827434255448 0
2399 1.216525401953656 -0.004308827434256339 0
2400 0.004308827434256293 1.216525401953655 0
2401 1.058746108852954 2.0359434595193 0
2402 -2.03594343113164 1.058746240636032 0
2403 2.03594343113164 -1.058746240636031 0
2404 -1.058806325732398 -2.035977721421924 0
2405 0.9130076974080789 2.184291506778956 0
2406 -2.184291506778956 0.9130076974080822 0
2407 2.184295440311839 -0.9129922016618184 0
2408 -0.9109228889727154 -2.184390498194428 0
2409 1.53339227009426 -1.103681614845718 0
2410 -1.103681614845718 -1.533392270094261 0
2411 -1.533392270094261 1.103681614845718 0
2412 1.103681614845718 1.533392270094263 0
2413 2.706476386051925 0.561519321841915 0
2414 -2.706476386051925 -0.5615193218419153 0
2415 0.5615132931656152 -2.706482070245466 0
2416 -0.5615132931656152 2.706482070245467 0
2417 2.299153751009586 1.00923987050466 0
2418 -2.299150097361272 -1.009228193455226 0
2419 1.009238559240503 -2.299152117121723 0
2420 -1.009238782144118 2.299145349394429 0
2421 -2.31488607728121 -0.05526249898701684 0
2422 2.314909541631096 0.05524619643241065 0
2423 -0.05524619643241157 2.314909541631094 0
2424 0.05524619643240943 -2.314909541631094 0
2425 0.5872034480977047 1.281830964211476 0
2426 -1.281830964211476 0.587203448097705 0
2427 1.281830964211476 -0.5872034480977052 0
2428 -0.5872034480977045 -1.281830964211475 0
2429 1.121981432356673 -0.8534864349552339 0
2430 -1.121981432356673 0.8534864349552334 0
2431 0.8534864349552336 1.121981432356673 0
2432 -0.8534864349552334 -1.121981432356672 0
2433 -2.173258426842588 -0.1099225442427516 0
2434 2.173258426842589 0.109922544242752 0
2435 0.1099225442427514 -2.173258426842589 0
2436 -0.1099225442427508 2.173258426842588 0
2437 1.066422034333086 0.5778431015405842 0
2438 -0.5778431015405837 1.066422034333085 0
2439 0.5778431015405837 -1.066422034333085 0
2440 -1.066422034333085 -0.577843101540584 0
2441 -0.5833970513099492 2.475812426822689 0
2442 2.475829123631197 0.5834449419079265 0
2443 -2.475829123631199 -0.5834449419079274 0
2444 0.5833931903413604 -2.475955137433143 0
2445 -1.970370247520044 -1.170097245093376 0
2446 1.970435999573599 1.170307388466217 0
2447 -1.170097245093376 1.970370247520042 0
2448 1.170202976103189 -1.970390849076658 0
2449 2.01704771790016 -1.270960094572878 0
2450 -1.270960094572878 -2.01704771790016 0
2451 -2.01704771790016 1.270960094572879 0
2452 1.270942450701418 2.017051518602325 0
2453 1.61066472166496 0.9512862387460329 0
2454 -1.610659940334673 -0.9512954689630625 0
2455 -0.9512954689630616 1.610659940334672 0
2456 0.9512969350025945 -1.610661057895472 0
2457 -0.0151837775372439 1.436193652297461 0
2458 1.436193652297463 0.01518377753724373 0
2459 0.01518377753724345 -1.436193652297463 0
2460 -1.436193652297461 -0.01518377753724406 0
2461 1.165485920036108 2.140849151059268 0
2462 -2.140848558973786 1.165488668654582 0
2463 -1.165484783372269 -2.140855207254267 0
2464 2.140851288363949 -1.165477916504113 0
2465 -2.352253767906321 -0.478238223602745 0
2466 2.352253767906322 0.478238223602746 0
2467 -0.4782365656095973 2.352246184503374 0
2468 0.4782045743735543 -2.352290689045688 0
2469 2.029202053940007 0.0526827576264194 0
2470 -0.05268275762641807 2.029202053940009 0
2471 0.05268275762641887 -2.029202053940009 0
2472 -2.029202053940009 -0.05268275762641796 0
2473 -1.183467111070396 -0.499852760810437 0
2474 0.4998527608104372 -1.183467111070396 0
2475 1.183467111070396 0.4998527608104368 0
2476 -0.4998527608104365 1.183467111070396 0
2477 -0.6555106529145953 -1.990698304196187 0
2478 1.990698304196187 -0.6555106529145953 0
2479 0.6555106529145944 1.990698304196187 0
2480 -1.990698304196187 0.6555106529145946 0
2481 -0.7360998858274385 1.96002508759258 0
2482 1.960025087592581 0.7360998858274393 0
2483 0.7360998858274408 -1.960025087592581 0
2484 -1.960025087592581 -0.7360998858274408 0
2485 -0.9852292559364035 -2.574102272665288 0
2486 2.574102272665288 -0.9852292559364035 0
2487 0.9852902041483499 2.574220862101714 0
2488 -2.574241315509783 0.9851949252896109 0
2489 -1.906022642086762 0.7678325597055787 0
2490 -0.7678325597055782 -1.906022642086761 0
2491 1.906022642086761 -0.7678325597055782 0
2492 0.7678325597055781 1.906022642086762 0
2493 -1.576694812870374 0.5412819067900835 0
2494 1.576694812870374 -0.5412819067900839 0
2495 -0.541281906790084 -1.576694812870374 0
2496 0.5412819067900829 1.576694812870374 0
2497 0.06286040884714664 2.762694192450136 0
2498 -2.762694192450135 0.06286040884714728 0
2499 2.762694192450136 -0.06286040884714704 0
2500 -0.06286040884714997 -2.762694192450135 0
2501 1.669793587034047 -2.20379977623905 0
2502 -2.20379977623905 -1.669793587034046 0
2503 -1.669793587034047 2.20379977623905 0
2504 2.20379977623905 1.669793587034048 0
2505 -1.831804062978704 0.9785878092186091 0
2506 -0.9785878092186102 -1.831804062978704 0
2507 1.831804062978704 -0.97858780921861 0
2508 0.9785878092186091 1.831804062978704 0
2509 0.2298590504090497 2.33883992212036 0
2510 -0.2298603597334204 -2.338835196125653 0
2511 2.338835196125653 -0.2298603597334211 0
2512 -2.338922359594006 0.2298742282005425 0
2513 0.802308840823901 -2.521231701996893 0
2514 2.521217453314609 0.8023166731054577 0
2515 -0.8023087995157208 2.521219439559807 0
2516 -2.52121745331461 -0.8023166731054567 0
2517 1.770367803272229 1.96990684598386 0
2518 -1.770394113403396 -1.969901178465099 0
2519 -1.96990803738721 1.770395936232114 0
2520 1.969901178465099 -1.770394113403395 0
2521 0.1973314261771142 1.486317074278799 0
2522 1.4863170742788 -0.1973314261771157 0
2523 -1.486317074278799 0.1973314261771151 0
2524 -0.1973314261771158 -1.486317074278801 0
2525 0.7648657469126048 -2.657997310781091 0
2526 -0.7648657469126047 2.657997310781091 0
2527 2.65799121779281 0.764872209158091 0
2528 -2.65799121779281 -0.7648722091580907 0
2529 1.825590724608487 -1.739293326111514 0
2530 -1.739293326111515 -1.825590724608486 0
2531 -1.825598132244369 1.739295294766531 0
2532 1.739293310174029 1.825590728041614 0
2533 -0.3257644018613522 -1.095675625532417 0
2534 0.3257644018613521 1.095675625532417 0
2535 1.095675625532417 -0.3257644018613525 0
2536 -1.095675625532417 0.3257644018613522 0
2537 -1.808526764603657 1.309346602130251 0
2538 1.309344414735788 1.808518533897123 0
2539 -1.30934441473579 -1.808518533897121 0
2540 1.808525681474077 -1.309345346186177 0
2541 -0.8037995646413116 0.812727731160658 0
2542 0.812727731160658 0.8037995646413115 0
2543 0.8037995646413115 -0.8127277311606579 0
2544 -0.8127277311606579 -0.8037995646413115 0
2545 -1.861745952111993 -0.7048961710785435 0
2546 1.861745832829024 0.7048980319398795 0
2547 0.7048980319398807 -1.861745832829024 0
2548 -0.7048980319398791 1.861745832829023 0
2549 -1.715755464375428 -0.7480757414144894 0
2550 0.7480757414144887 -1.715755464375428 0
2551 1.715755464375428 0.7480757414144878 0
2552 -0.7480757414144883 1.715755464375429 0
2553 0.1950362599558608 2.568580098864407 0
2554 -2.568580098864405 0.1950362599558608 0
2555 -0.1950362599558592 -2.568580098864406 0
2556 2.568580098864405 -0.1950362599558593 0
2557 -0.8993041276915653 0.6651652415124869 0
2558 0.8993041276915651 -0.6651652415124869 0
2559 -0.6651652415124868 -0.899304127691565 0
2560 0.6651652415124869 0.8993041276915652 0
2561 -1.010551746196357 0.4795589267346497 0
2562 1.010551746196357 -0.4795589267346497 0
2563 0.4795589267346495 1.010551746196356 0
2564 -0.4795589267346497 -1.010551746196357 0
2565 2.04167480808599 1.412860583841705 0
2566 -2.041674808085991 -1.412860583841706 0
2567 -1.412860583841705 2.041674808085991 0
2568 1.412860583841707 -2.041674808085991 0
2569 -0.2406655468576271 2.182592111042501 0
2570 -2.182592111042501 -0.2406655468576278 0
2571 2.182592111042503 0.2406655468576274 0
2572 0.2406655468576282 -2.182592111042503 0
2573 -0.203022538844543 2.376332308952367 0
2574 2.376332308952368 0.2030225388445409 0
2575 -2.376332308952368 -0.203022538844541 0
2576 0.2030225388445436 -2.376332308952367 0
2577 -1.368896163566633 1.654188784415431 0
2578 1.368896163566635 -1.654188784415433 0
2579 1.654188784415431 1.368896163566633 0
2580 -1.654188784415432 -1.368896163566636 0
2581 -0.5211103356715427 -1.400443439038575 0
2582 1.400443439038575 -0.5211103356715433 0
2583 0.521110335671543 1.400443439038576 0
2584 -1.400443439038576 0.5211103356715435 0
2585 2.132406888539642 1.429548870676128 0
2586 -1.429548179930818 2.132406672411378 0
2587 1.42954817993082 -2.132406672411379 0
2588 -2.13240667241138 -1.429548179930819 0
2589 0.2632265284681656 1.931016007897904 0
2590 -1.931016007897905 0.2632265284681656 0
2591 -0.263226528468165 -1.931016007897905 0
2592 1.931016007897905 -0.2632265284681659 0
2593 0.03668719470694397 -2.118846808095805 0
2594 2.118846808095805 0.03668719470694379 0
2595 -2.118846808095805 -0.03668719470694341 0
2596 -0.03668719470694393 2.118846808095805 0
2597 -2.537718847120996 0.7232851273766145 0
2598 0.7233755915895153 2.537692314617333 0
2599 2.537676862782397 -0.7233896722120285 0
2600 -0.7233896722120288 -2.537676862782397 0
2601 -0.7410420898707081 2.211054637507536 0
2602 -2.211059095261702 -0.7410428543136728 0
2603 2.211059095261701 0.7410428543136739 0
2604 0.7410388295172378 -2.211068773457965 0
2605 1.731841829113276 -0.4904259715950725 0
2606 -0.4904259715950727 -1.731841829113276 0
2607 0.4904259715950742 1.731841829113276 0
2608 -1.731841829113276 0.4904259715950731 0
2609 -1.427064966772913 -2.019531321277325 0
2610 2.019531321277325 -1.427064966772913 0
2611 1.426878587849035 2.019571469539636 0
2612 -2.019531321277324 1.427064966772914 0
2613 -1.521720022022519 -2.036397460761629 0
2614 2.036397460761629 -1.521720022022518 0
2615 1.521473997874076 2.036517762410075 0
2616 -2.03645919106063 1.521736427480981 0
2617 0.7030621632139987 -2.070814772273957 0
2618 2.07081443050332 0.7030624761738924 0
2619 -2.07081443050332 -0.7030624761738922 0
2620 -0.7030624637365257 2.070814357976367 0
2621 -1.141352589472635 1.224379765760918 0
2622 1.224379765760918 1.141352589472635 0
2623 -1.224379765760918 -1.141352589472633 0
2624 1.141352729095446 -1.224379872195281 0
2625 -0.2436132018253996 1.524365673069632 0
2626 -1.524365673069632 -0.2436132018253973 0
2627 0.2436132018253987 -1.524365673069633 0
2628 1.52400495445007 0.2445138713478753 0
2629 2.276531719638863 1.422272229272065 0
2630 -1.422273168962203 2.276530552686855 0
2631 -2.276531460284945 -1.422271400377695 0
2632 1.422271400377696 -2.276531460284945 0
2633 -0.9665571709538554 2.058269657684315 0
2634 0.9667847586116459 -2.058323040247631 0
2635 2.058425281093689 0.966808229090502 0
2636 -2.058269657684312 -0.9665571709538529 0
2637 1.444054757005496 2.228103452290688 0
2638 -2.228080770374588 1.444066858092465 0
2639 2.228080770374591 -1.444066858092469 0
2640 -1.444066858092468 -2.22808077037459 0
2641 -1.19823423311406 -0.9761634350132391 0
2642 0.9761634350132383 -1.198234233114059 0
2643 -0.9761634350132389 1.198234233114059 0
2644 1.198234233114059 0.9761634350132379 0
2645 -0.4047100957508226 1.976843705470952 0
2646 -1.976933619780829 -0.4045285727329213 0
2647 0.4047100957508229 -1.976843705470952 0
2648 1.976843705470955 0.4047100957508222 0
2649 1.195229681818947 2.376730364666844 0
2650 -1.195301118416989 -2.376460069512541 0
2651 2.376460069512541 -1.195301118416989 0
2652 -2.376459694890362 1.195302594202348 0
2653 1.965415642507031 1.694984063369279 0
2654 -1.965415642507033 -1.694984063369279 0
2655 1.694984063369279 -1.965415642507034 0
2656 -1.694984063369278 1.965415642507032 0
2657 0.285313534727224 2.199842251875761 0
2658 -0.2852441319214555 -2.199772106660336 0
2659 2.199772106660335 -0.2852441319214566 0
2660 -2.199772106660336 0.2852441319214565 0
2661 -0.8899819657945078 0.97157711550647 0
2662 0.8899819657945077 -0.9715771155064702 0
2663 -0.97157711550647 -0.8899819657945078 0
2664 0.9715771155064705 0.8899819657945075 0
2665 -0.3268397604064728 -1.27684185127125 0
2666 1.27684185127125 -0.3268397604064728 0
2667 -1.276841851271251 0.3268397604064722 0
2668 0.3268397604064716 1.27684185127125 0
2669 -1.776188198827678 -2.114041857491224 0
2670 2.114041857491223 -1.776188198827677 0
2671 -2.114041857491223 1.776188198827678 0
2672 1.77615400213497 2.11405037862134 0
2673 0.217446751616099 -1.612832088899379 0
2674 -0.2174467516160991 1.612832088899379 0
2675 -1.612832088899378 -0.2174467516160969 0
2676 1.613363571470928 0.2180368615204398 0
2677 -1.905721543986645 1.51370577572045 0
2678 1.905537227223626 -1.512970656939502 0
2679 -1.515381753065887 -1.904551960707763 0
2680 1.515367230032858 1.904555089143787 0
2681 2.631200305510975 -0.0371463022331765 0
2682 -0.03714630223317975 -2.631200305510975 0
2683 -2.631200305510975 0.03714630223317835 0
2684 0.03714630223317703 2.631200305510976 0
2685 -1.469825405032155 -0.6559411812409227 0
2686 0.655941181240922 -1.469825405032155 0
2687 1.469825405032153 0.6559411812409202 0
2688 -0.6559411812409205 1.469825405032153 0
2689 1.855191221918918 0.4369218428100693 0
2690 0.4369218428100695 -1.855191221918918 0
2691 -1.855280217182722 -0.4367372119066262 0
2692 -0.436921842810068 1.855191221918917 0
2693 1.334544553401408 -1.576058167551945 0
2694 -1.576058167551945 -1.334544553401408 0
2695 -1.334544553401405 1.576058167551943 0
2696 1.576058167551943 1.334544553401406 0
2697 -1.292276861210092 -1.88359765431665 0
2698 1.883598607326911 -1.292276985403477 0
2699 1.292275505727008 1.883597946304014 0
2700 -1.88359875174419 1.292277152862688 0
2701 2.237973684887228 0.3898288771033271 0
2702 -2.237973684887224 -0.3898288771033271 0
2703 0.3898256134642504 -2.23797680873318 0
2704 -0.3898287977772013 2.237973222306783 0
2705 2.450764912099261 1.024773637316331 0
2706 -2.450764912099261 -1.024773637316331 0
2707 1.024773595573265 -2.450765015012126 0
2708 -1.024752343110169 2.450784655828258 0
2709 1.320462085616049 -0.1054780085717533 0
2710 0.1054780085717528 1.320462085616048 0
2711 -1.320462085616048 0.1054780085717524 0
2712 -0.1054780085717528 -1.320462085616049 0
$EndNodes
$Elements
5424
1 1 2 5 1 1 3
2 1 2 5 1 3 4
3 1 2 5 1 4 5
4 1 2 5 1 5 6
5 1 2 5 1 6 7
6 1 2 5 1 7 8
7 1 2 5 1 8 9
8 1 2 5 1 9 10
9 1 2 5 1 10 11
10 1 2 5 1 11 12
11 1 2 5 1 12 13
12 1 2 5 1 13 14
13 1 2 5 1 14 15
14 1 2 5 1 15 16
15 1 2 5 1 16 17
16 1 2 5 1 17 18
17 1 2 5 1 18 19
18 1 2 5 1 19 20
19 1 2 5 1 20 21
20 1 2 5 1 21 22
21 1 2 5 1 22 23
22 1 2 5 1 23 24
23 1 2 5 1 24 25
24 1 2 5 1 25 26
25 1 2 5 1 26 27
26 1 2 5 1 27 28
27 1 2 5 1 28 29
28 1 2 5 1 29 30
29 1 2 5 1 30 31
30 1 2 5 1 31 32
31 1 2 5 1 32 33
32 1 2 5 1 33 34
33 1 2 5 1 34 35
34 1 2 5 1 35 36
35 1 2 5 1 36 37
36 1 2 5 1 37 38
37 1 2 5 1 38 39
38 1 2 5 1 39 40
39 1 2 5 1 40 41
40 1 2 5 1 41 42
41 1 2 5 1 42 43
42 1 2 5 1 43 2
43 1 2 5 2 2 45
44 1 2 5 2 45 46
45 1 2 5 2 46 47
46 1 2 5 2 47 48
47 1 2 5 2 48 49
48 1 2 5 2 49 50
49 1 2 5 2 50 51
50 1 2 5 2 51 52
51 1 2 5 2 52 53
52 1 2 5 2 53 54
53 1 2 5 2 54 55
54 1 2 5 2 55 56
55 1 2 5 2 56 57
56 1 2 5 2 57 58
57 1 2 5 2 58 59
58 1 2 5 2 59 60
59 1 2 5 2 60 61
60 1 2 5 2 61 62
61 1 2 5 2 62 63
62 1 2 5 2 63 64
63 1 2 5 2 64 65
64 1 2 5 2 65 66
65 1 2 5 2 66 67
66 1 2 5 2 67 68
67 1 2 5 2 68 69
68 1 2 5 2 69 70
69 1 2 5 2 70 71
70 1 2 5 2 71 72
71 1 2 5 2 72 73
72 1 2 5 2 73 74
73 1 2 5 2 74 75
74 1 2 5 2 75 76
75 1 2 5 2 76 77
76 1 2 5 2 77 78
77 1 2 5 2 78 79
78 1 2 5 2 79 80
79 1 2 5 2 80 81
80 1 2 5 2 81 82
81 1 2 5 2 82 83
82 1 2 5 2 83 84
83 1 2 5 2 84 85
84 1 2 5 2 85 44
85 1 2 5 3 44 87
86 1 2 5 3 87 88
87 1 2 5 3 88 89
88 1 2 5 3 89 90
89 1 2 5 3 90 91
90 1 2 5 3 91 92
91 1 2 5 3 92 93
92 1 2 5 3 93 94
93 1 2 5 3 94 95
94 1 2 5 3 95 96
95 1 2 5 3 96 97
96 1 2 5 3 97 98
97 1 2 5 3 98 99
98 1 2 5 3 99 100
99 1 2 5 3 100 101
100 1 2 5 3 101 102
101 1 2 5 3 102 103
102 1 2 5 3 103 104
103 1 2 5 3 104 105
104 1 2 5 3 105 106
105 1 2 5 3 106 107
106 1 2 5 3 107 108
107 1 2 5 3 108 109
108 1 2 5 3 109 110
109 1 2 5 3 110 111
110 1 2 5 3 111 112
111 1 2 5 3 112 113
112 1 2 5 3 113 114
113 1 2 5 3 114 115
114 1 2 5 3 115 116
115 1 2 5 3 116 117
116 1 2 5 3 117 118
117 1 2 5 3 118 119
118 1 2 5 3 119 120
119 1 2 5 3 120 121
120 1 2 5 3 121 122
121 1 2 5 3 122 123
122 1 2 5 3 123 124
123 1 2 5 3 124 125
124 1 2 5 3 125 126
125 1 2 5 3 126 127
126 1 2 5 3 127 86
127 1 2 5 4 86 128
128 1 2 5 4 128 129
129 1 2 5 4 129 130
130 1 2 5 4 130 131
131 1 2 5 4 131 132
132 1 2 5 4 132 133
133 1 2 5 4 133 134
134 1 2 5 4 134 135
135 1 2 5 4 135 136
136 1 2 5 4 136 137
137 1 2 5 4 137 138
138 1 2 5 4 138 139
139 1 2 5 4 139 140
140 1 2 5 4 140 141
141 1 2 5 4 141 142
142 1 2 5 4 142 143
143 1 2 5 4 143 144
144 1 2 5 4 144 145
145 1 2 5 4 145 146
146 1 2 5 4 146 147
147 1 2 5 4 147 148
148 1 2 5 4 148 149
149 1 2 5 4 149 150
150 1 2 5 4 150 151
151 1 2 5 4 151 152
152 1 2 5 4 152 153
153 1 2 5 4 153 154
154 1 2 5 4 154 155
155 1 2 5 4 155 156
156 1 2 5 4 156 157
157 1 2 5 4 157 158
158 1 2 5 4 158 159
159 1 2 5 4 159 160
160 1 2 5 4 160 161
161 1 2 5 4 161 162
162 1 2 5 4 162 163
163 1 2 5 4 163 164
164 1 2 5 4 164 165
165 1 2 5 4 165 166
166 1 2 5 4 166 167
167 1 2 5 4 167 168
168 1 2 5 4 168 1
169 1 2 6 5 169 171
170 1 2 6 5 171 172
171 1 2 6 5 172 173
172 1 2 6 5 173 174
173 1 2 6 5 174 175
174 1 2 6 5 175 176
175 1 2 6 5 176 177
176 1 2 6 5 177 178
177 1 2 6 5 178 179
178 1 2 6 5 179 180
179 1 2 6 5 180 181
180 1 2 6 5 181 182
181 1 2 6 5 182 183
182 1 2 6 5 183 184
183 1 2 6 5 184 185
184 1 2 6 5 185 170
185 1 2 6 6 170 187
186 1 2 6 6 187 188
187 1 2 6 6 188 189
188 1 2 6 6 189 190
189 1 2 6 6 190 191
190 1 2 6 6 191 192
191 1 2 6 6 192 193
192 1 2 6 6 193 194
193 1 2 6 6 194 195
194 1 2 6 6 195 196
195 1 2 6 6 196 197
196 1 2 6 6 197 198
197 1 2 6 6 198 199
198 1 2 6 6 199 200
199 1 2 6 6 200 201
200 1 2 6 6 201 186
201 1 2 6 7 186 203
202 1 2 6 7 203 204
203 1 2 6 7 204 205
204 1 2 6 7 205 206
205 1 2 6 7 206 207
206 1 2 6 7 207 208
207 1 2 6 7 208 209
208 1 2 6 7 209 210
209 1 2 6 7 210 211
210 1 2 6 7 211 212
211 1 2 6 7 212 213
212 1 2 6 7 213 214
213 1 2 6 7 214 215
214 1 2 6 7 215 216
215 1 2 6 7 216 217
216 1 2 6 7 217 202
217 1 2 6 8 202 218
218 1 2 6 8 218 219
219 1 2 6 8 219 220
220 1 2 6 8 220 221
221 1 2 6 8 221 222
222 1 2 6 8 222 223
223 1 2 6 8 223 224
224 1 2 6 8 224 225
225 1 2 6 8 225 226
226 1 2 6 8 226 227
227 1 2 6 8 227 228
228 1 2 6 8 228 229
229 1 2 6 8 229 230
230 1 2 6 8 230 231
231 1 2 6 8 231 232
232 1 2 6 8 232 169
233 2 2 7 11 486 926 1107
234 2 2 7 11 488 925 1105
235 2 2 7 11 485 928 1108
236 2 2 7 11 487 927 1106
237 2 2 7 11 356 837 1609
238 2 2 7 11 354 839 1610
239 2 2 7 11 355 838 1611
240 2 2 7 11 353 840 1612
241 2 2 7 11 554 1609 837
242 2 2 7 11 555 1612 840
243 2 2 7 11 553 1611 838
244 2 2 7 11 556 1610 839
245 2 2 7 11 94 1436 2057
246 2 2 7 11 10 1433 2058
247 2 2 7 11 135 1434 2059
248 2 2 7 11 52 1435 2060
249 2 2 7 11 393 2091 905
250 2 2 7 11 394 2090 906
251 2 2 7 11 396 2089 908
252 2 2 7 11 395 2092 907
253 2 2 7 11 407 2161 864
254 2 2 7 11 406 2163 862
255 2 2 7 11 405 2162 861
256 2 2 7 11 408 2164 863
257 2 2 7 11 782 1085 2015
258 2 2 7 11 783 1087 2013
259 2 2 7 11 784 1088 2016
260 2 2 7 11 781 1086 2014
261 2 2 7 11 928 2329 1108
262 2 2 7 11 926 2330 1107
263 2 2 7 11 927 2331 1106
264 2 2 7 11 925 2332 1105
265 2 2 7 11 2 45 1124
266 2 2 7 11 86 128 1121
267 2 2 7 11 44 87 1122
268 2 2 7 11 1 3 1123
269 2 2 7 11 658 970 1792
270 2 2 7 11 660 969 1790
271 2 2 7 11 659 972 1789
272 2 2 7 11 657 971 1791
273 2 2 7 11 411 924 2688
274 2 2 7 11 412 923 2687
275 2 2 7 11 410 921 2686
276 2 2 7 11 409 922 2685
277 2 2 7 11 415 1108 2329
278 2 2 7 11 416 1107 2330
279 2 2 7 11 414 1106 2331
280 2 2 7 11 413 1105 2332
281 2 2 7 11 673 1957 1090
282 2 2 7 11 674 1959 1089
283 2 2 7 11 676 1960 1092
284 2 2 7 11 675 1958 1091
285 2 2 7 11 505 901 1341
286 2 2 7 11 506 902 1342
287 2 2 7 11 508 903 1343
288 2 2 7 11 507 904 1344
289 2 2 7 11 256 1239 870
290 2 2 7 11 253 1238 869
291 2 2 7 11 254 1237 872
292 2 2 7 11 255 1240 871
293 2 2 7 11 103 1041 1184
294 2 2 7 11 19 1042 1182
295 2 2 7 11 61 1044 1183
296 2 2 7 11 144 1043 1181
297 2 2 7 11 406 862 2004
298 2 2 7 11 407 864 2001
299 2 2 7 11 405 861 2003
300 2 2 7 11 408 863 2002
301 2 2 7 11 288 859 1154
302 2 2 7 11 287 860 1153
303 2 2 7 11 285 858 1155
304 2 2 7 11 286 857 1156
305 2 2 7 11 673 1090 1993
306 2 2 7 11 676 1092 1996
307 2 2 7 11 674 1089 1994
308 2 2 7 11 675 1091 1995
309 2 2 7 11 511 981 1353
310 2 2 7 11 512 982 1354
311 2 2 7 11 510 983 1355
312 2 2 7 11 509 984 1356
313 2 2 7 11 1076 2418 944
314 2 2 7 11 1073 2419 943
315 2 2 7 11 1075 2420 942
316 2 2 7 11 1074 2417 941
317 2 2 7 11 1076 434 2418
318 2 2 7 11 1073 433 2419
319 2 2 7 11 1075 436 2420
320 2 2 7 11 1074 435 2417
321 2 2 7 11 411 2688 1112
322 2 2 7 11 412 2687 1111
323 2 2 7 11 410 2686 1109
324 2 2 7 11 409 2685 1110
325 2 2 7 11 474 1691 839
326 2 2 7 11 475 1692 838
327 2 2 7 11 476 1690 837
328 2 2 7 11 473 1689 840
329 2 2 7 11 781 1640 1086
330 2 2 7 11 782 1637 1085
331 2 2 7 11 783 1639 1087
332 2 2 7 11 784 1638 1088
333 2 2 7 11 474 839 1521
334 2 2 7 11 475 838 1522
335 2 2 7 11 476 837 1523
336 2 2 7 11 473 840 1524
337 2 2 7 11 726 1702 2076
338 2 2 7 11 727 1703 2073
339 2 2 7 11 725 1701 2075
340 2 2 7 11 728 1704 2074
341 2 2 7 11 130 131 1326
342 2 2 7 11 5 6 1327
343 2 2 7 11 47 48 1328
344 2 2 7 11 89 90 1325
345 2 2 7 11 269 2015 1085
346 2 2 7 11 271 2013 1087
347 2 2 7 11 272 2016 1088
348 2 2 7 11 270 2014 1086
349 2 2 7 11 130 1326 1505
350 2 2 7 11 5 1327 1507
351 2 2 7 11 47 1328 1506
352 2 2 7 11 89 1325 1508
353 2 2 7 11 121 2276 1346
354 2 2 7 11 79 2274 1345
355 2 2 7 11 37 2273 1348
356 2 2 7 11 162 2275 1347
357 2 2 7 11 2 1124 1980
358 2 2 7 11 86 1121 1977
359 2 2 7 11 1 1123 1978
360 2 2 7 11 44 1122 1979
361 2 2 7 11 572 1107 990
362 2 2 7 11 570 1105 992
363 2 2 7 11 569 1106 991
364 2 2 7 11 571 1108 989
365 2 2 7 11 414 991 1106
366 2 2 7 11 413 992 1105
367 2 2 7 11 415 989 1108
368 2 2 7 11 416 990 1107
369 2 2 7 11 519 1430 888
370 2 2 7 11 520 1432 885
371 2 2 7 11 518 1429 886
372 2 2 7 11 517 1431 887
373 2 2 7 11 519 892 1430
374 2 2 7 11 520 891 1432
375 2 2 7 11 518 889 1429
376 2 2 7 11 517 890 1431
377 2 2 7 11 42 1322 2069
378 2 2 7 11 84 1324 2070
379 2 2 7 11 126 1323 2071
380 2 2 7 11 167 1321 2072
381 2 2 7 11 474 857 1691
382 2 2 7 11 473 858 1689
383 2 2 7 11 475 860 1692
384 2 2 7 11 476 859 1690
385 2 2 7 11 753 1137 1486
386 2 2 7 11 754 1138 1485
387 2 2 7 11 756 1140 1487
388 2 2 7 11 755 1139 1488
389 2 2 7 11 1067 728 2074
390 2 2 7 11 1068 727 2073
391 2 2 7 11 1065 725 2075
392 2 2 7 11 1066 726 2076
393 2 2 7 11 474 1821 857
394 2 2 7 11 476 1823 859
395 2 2 7 11 473 1822 858
396 2 2 7 11 475 1824 860
397 2 2 7 11 970 2194 1792
398 2 2 7 11 972 2196 1789
399 2 2 7 11 969 2193 1790
400 2 2 7 11 971 2195 1791
401 2 2 7 11 597 1544 1136
402 2 2 7 11 598 1543 1133
403 2 2 7 11 600 1542 1135
404 2 2 7 11 599 1541 1134
405 2 2 7 11 524 1408 1057
406 2 2 7 11 521 1405 1058
407 2 2 7 11 523 1406 1060
408 2 2 7 11 522 1407 1059
409 2 2 7 11 573 987 1112
410 2 2 7 11 574 988 1111
411 2 2 7 11 576 986 1109
412 2 2 7 11 575 985 1110
413 2 2 7 11 411 1112 987
414 2 2 7 11 412 1111 988
415 2 2 7 11 410 1109 986
416 2 2 7 11 409 1110 985
417 2 2 7 11 550 1497 1761
418 2 2 7 11 549 1498 1764
419 2 2 7 11 551 1500 1762
420 2 2 7 11 552 1499 1763
421 2 2 7 11 453 1486 1137
422 2 2 7 11 454 1485 1138
423 2 2 7 11 456 1487 1140
424 2 2 7 11 455 1488 1139
425 2 2 7 11 260 1201 1149
426 2 2 7 11 259 1202 1152
427 2 2 7 11 258 1204 1151
428 2 2 7 11 257 1203 1150
429 2 2 7 11 521 1058 1116
430 2 2 7 11 522 1059 1115
431 2 2 7 11 524 1057 1114
432 2 2 7 11 523 1060 1113
433 2 2 7 11 572 1151 1204
434 2 2 7 11 569 1149 1201
435 2 2 7 11 571 1152 1202
436 2 2 7 11 570 1150 1203
437 2 2 7 11 1047 905 2091
438 2 2 7 11 1046 908 2089
439 2 2 7 11 1048 906 2090
440 2 2 7 11 1045 907 2092
441 2 2 7 11 740 1312 965
442 2 2 7 11 737 1309 968
443 2 2 7 11 738 1311 967
444 2 2 7 11 739 1310 966
445 2 2 7 11 373 1116 1058
446 2 2 7 11 376 1113 1060
447 2 2 7 11 374 1115 1059
448 2 2 7 11 375 1114 1057
449 2 2 7 11 550 1761 1281
450 2 2 7 11 549 1764 1282
451 2 2 7 11 551 1762 1284
452 2 2 7 11 552 1763 1283
453 2 2 7 11 668 1355 1627
454 2 2 7 11 667 1356 1628
455 2 2 7 11 666 1353 1625
456 2 2 7 11 665 1354 1626
457 2 2 7 11 149 1361 1725
458 2 2 7 11 108 1363 1728
459 2 2 7 11 24 1364 1726
460 2 2 7 11 66 1362 1727
461 2 2 7 11 694 1086 1090
462 2 2 7 11 693 1087 1092
463 2 2 7 11 695 1085 1089
464 2 2 7 11 696 1088 1091
465 2 2 7 11 441 1090 1086
466 2 2 7 11 444 1089 1085
467 2 2 7 11 442 1091 1088
468 2 2 7 11 443 1092 1087
469 2 2 7 11 42 43 1322
470 2 2 7 11 84 85 1324
471 2 2 7 11 126 127 1323
472 2 2 7 11 167 168 1321
473 2 2 7 11 354 1521 839
474 2 2 7 11 356 1523 837
475 2 2 7 11 355 1522 838
476 2 2 7 11 353 1524 840
477 2 2 7 11 268 1317 1205
478 2 2 7 11 267 1318 1206
479 2 2 7 11 265 1319 1207
480 2 2 7 11 266 1320 1208
481 2 2 7 11 732 1479 913
482 2 2 7 11 729 1477 914
483 2 2 7 11 731 1480 915
484 2 2 7 11 730 1478 916
485 2 2 7 11 669 1396 1536
486 2 2 7 11 670 1395 1535
487 2 2 7 11 671 1394 1534
488 2 2 7 11 672 1393 1533
489 2 2 7 11 640 1743 937
490 2 2 7 11 639 1744 940
491 2 2 7 11 638 1741 939
492 2 2 7 11 637 1742 938
493 2 2 7 11 233 937 1743
494 2 2 7 11 236 939 1741
495 2 2 7 11 235 938 1742
496 2 2 7 11 234 940 1744
497 2 2 7 11 641 1205 1317
498 2 2 7 11 643 1206 1318
499 2 2 7 11 644 1207 1319
500 2 2 7 11 642 1208 1320
501 2 2 7 11 288 1154 922
502 2 2 7 11 287 1153 921
503 2 2 7 11 285 1155 924
504 2 2 7 11 286 1156 923
505 2 2 7 11 492 1156 1100
506 2 2 7 11 491 1155 1099
507 2 2 7 11 489 1154 1098
508 2 2 7 11 490 1153 1097
509 2 2 7 11 555 840 2125
510 2 2 7 11 553 838 2126
511 2 2 7 11 554 837 2127
512 2 2 7 11 556 839 2128
513 2 2 7 11 81 82 1062
514 2 2 7 11 164 165 1063
515 2 2 7 11 39 40 1064
516 2 2 7 11 123 124 1061
517 2 2 7 11 301 1709 849
518 2 2 7 11 304 1712 852
519 2 2 7 11 302 1710 851
520 2 2 7 11 303 1711 850
521 2 2 7 11 397 1669 1606
522 2 2 7 11 399 1672 1607
523 2 2 7 11 398 1671 1605
524 2 2 7 11 400 1670 1608
525 2 2 7 11 1136 1544 2157
526 2 2 7 11 1133 1543 2158
527 2 2 7 11 1135 1542 2160
528 2 2 7 11 1134 1541 2159
529 2 2 7 11 319 1049 1393
530 2 2 7 11 318 1050 1394
531 2 2 7 11 317 1051 1395
532 2 2 7 11 320 1052 1396
533 2 2 7 11 441 1086 1640
534 2 2 7 11 444 1085 1637
535 2 2 7 11 443 1087 1639
536 2 2 7 11 442 1088 1638
537 2 2 7 11 1049 563 1393
538 2 2 7 11 1051 561 1395
539 2 2 7 11 1050 564 1394
540 2 2 7 11 1052 562 1396
541 2 2 7 11 256 870 1852
542 2 2 7 11 255 871 1850
543 2 2 7 11 254 872 1851
544 2 2 7 11 253 869 1849
545 2 2 7 11 561 1716 873
546 2 2 7 11 564 1713 876
547 2 2 7 11 562 1715 874
548 2 2 7 11 563 1714 875
549 2 2 7 11 321 1074 1662
550 2 2 7 11 322 1073 1661
551 2 2 7 11 324 1075 1663
552 2 2 7 11 323 1076 1664
553 2 2 7 11 864 2161 1021
554 2 2 7 11 863 2164 1022
555 2 2 7 11 861 2162 1023
556 2 2 7 11 862 2163 1024
557 2 2 7 11 312 933 1213
558 2 2 7 11 310 934 1215
559 2 2 7 11 309 936 1214
560 2 2 7 11 311 935 1216
561 2 2 7 11 1028 1525 690
562 2 2 7 11 692 1025 1528
563 2 2 7 11 1027 1526 691
564 2 2 7 11 1026 1527 689
565 2 2 7 11 596 1509 1030
566 2 2 7 11 593 1510 1029
567 2 2 7 11 594 1511 1031
568 2 2 7 11 1032 595 1512
569 2 2 7 11 357 1497 1467
570 2 2 7 11 358 1498 1466
571 2 2 7 11 360 1499 1468
572 2 2 7 11 359 1500 1465
573 2 2 7 11 822 1665 2253
574 2 2 7 11 823 1667 2256
575 2 2 7 11 821 1668 2254
576 2 2 7 11 824 1666 2255
577 2 2 7 11 161 1347 1847
578 2 2 7 11 120 1346 1845
579 2 2 7 11 78 1345 1848
580 2 2 7 11 36 1348 1846
581 2 2 7 11 814 1467 1497
582 2 2 7 11 815 1466 1498
583 2 2 7 11 816 1468 1499
584 2 2 7 11 813 1465 1500
585 2 2 7 11 495 865 1339
586 2 2 7 11 494 868 1337
587 2 2 7 11 496 867 1338
588 2 2 7 11 493 866 1340
589 2 2 7 11 561 873 1858
590 2 2 7 11 562 874 1860
591 2 2 7 11 564 876 1859
592 2 2 7 11 563 875 1857
593 2 2 7 11 287 1692 860
594 2 2 7 11 288 1690 859
595 2 2 7 11 285 1689 858
596 2 2 7 11 286 1691 857
597 2 2 7 11 407 1009 1945
598 2 2 7 11 408 1012 1946
599 2 2 7 11 405 1011 1947
600 2 2 7 11 406 1010 1948
601 2 2 7 11 718 1945 1009
602 2 2 7 11 717 1946 1012
603 2 2 7 11 720 1947 1011
604 2 2 7 11 719 1948 1010
605 2 2 7 11 278 1756 2401
606 2 2 7 11 279 1754 2403
607 2 2 7 11 277 1753 2402
608 2 2 7 11 280 1755 2404
609 2 2 7 11 650 1495 974
610 2 2 7 11 649 1496 975
611 2 2 7 11 651 1494 973
612 2 2 7 11 652 1493 976
613 2 2 7 11 312 1888 883
614 2 2 7 11 309 1887 881
615 2 2 7 11 310 1885 882
616 2 2 7 11 311 1886 884
617 2 2 7 11 520 885 1895
618 2 2 7 11 518 886 1896
619 2 2 7 11 519 888 1893
620 2 2 7 11 517 887 1894
621 2 2 7 11 517 1890 890
622 2 2 7 11 520 1891 891
623 2 2 7 11 519 1889 892
624 2 2 7 11 518 1892 889
625 2 2 7 11 448 2393 1591
626 2 2 7 11 447 2394 1592
627 2 2 7 11 446 2396 1589
628 2 2 7 11 445 2395 1590
629 2 2 7 11 506 1342 918
630 2 2 7 11 505 1341 917
631 2 2 7 11 508 1343 919
632 2 2 7 11 507 1344 920
633 2 2 7 11 1074 2093 1662
634 2 2 7 11 1075 2094 1663
635 2 2 7 11 1073 2095 1661
636 2 2 7 11 1076 2096 1664
637 2 2 7 11 34 1846 1031
638 2 2 7 11 76 1848 1032
639 2 2 7 11 118 1845 1029
640 2 2 7 11 159 1847 1030
641 2 2 7 11 1030 1509 2707
642 2 2 7 11 1031 1511 2705
643 2 2 7 11 1032 1512 2708
644 2 2 7 11 1029 1510 2706
645 2 2 7 11 301 849 1519
646 2 2 7 11 302 851 1520
647 2 2 7 11 303 850 1518
648 2 2 7 11 304 852 1517
649 2 2 7 11 878 1346 2276
650 2 2 7 11 877 1345 2274
651 2 2 7 11 880 1348 2273
652 2 2 7 11 879 1347 2275
653 2 2 7 11 1057 1408 1817
654 2 2 7 11 1058 1405 1818
655 2 2 7 11 1060 1406 1820
656 2 2 7 11 1059 1407 1819
657 2 2 7 11 448 1591 1008
658 2 2 7 11 447 1592 1005
659 2 2 7 11 446 1589 1006
660 2 2 7 11 445 1590 1007
661 2 2 7 11 237 1278 909
662 2 2 7 11 239 1279 912
663 2 2 7 11 240 1280 911
664 2 2 7 11 238 1277 910
665 2 2 7 11 1007 2490 1530
666 2 2 7 11 1006 2491 1531
667 2 2 7 11 1005 2489 1529
668 2 2 7 11 1008 2492 1532
669 2 2 7 11 495 912 1279
670 2 2 7 11 494 909 1278
671 2 2 7 11 493 910 1277
672 2 2 7 11 496 911 1280
673 2 2 7 11 387 877 1734
674 2 2 7 11 386 879 1736
675 2 2 7 11 388 878 1735
676 2 2 7 11 385 880 1733
677 2 2 7 11 972 1398 2384
678 2 2 7 11 971 1397 2381
679 2 2 7 11 970 1399 2382
680 2 2 7 11 969 1400 2383
681 2 2 7 11 284 2189 1197
682 2 2 7 11 283 2192 1199
683 2 2 7 11 281 2191 1198
684 2 2 7 11 282 2190 1200
685 2 2 7 11 925 1197 2189
686 2 2 7 11 927 1199 2192
687 2 2 7 11 928 1198 2191
688 2 2 7 11 926 1200 2190
689 2 2 7 11 312 883 1834
690 2 2 7 11 310 882 1833
691 2 2 7 11 309 881 1836
692 2 2 7 11 311 884 1835
693 2 2 7 11 511 2390 981
694 2 2 7 11 512 2389 982
695 2 2 7 11 510 2391 983
696 2 2 7 11 509 2392 984
697 2 2 7 11 488 1197 925
698 2 2 7 11 486 1200 926
699 2 2 7 11 487 1199 927
700 2 2 7 11 485 1198 928
701 2 2 7 11 956 2401 1756
702 2 2 7 11 954 2403 1754
703 2 2 7 11 955 2404 1755
704 2 2 7 11 953 2402 1753
705 2 2 7 11 433 2707 1509
706 2 2 7 11 435 2705 1511
707 2 2 7 11 434 2706 1510
708 2 2 7 11 436 2708 1512
709 2 2 7 11 513 2384 1398
710 2 2 7 11 514 2381 1397
711 2 2 7 11 516 2382 1399
712 2 2 7 11 515 2383 1400
713 2 2 7 11 956 1591 2393
714 2 2 7 11 953 1592 2394
715 2 2 7 11 955 1590 2395
716 2 2 7 11 954 1589 2396
717 2 2 7 11 676 902 1960
718 2 2 7 11 673 904 1957
719 2 2 7 11 674 903 1959
720 2 2 7 11 675 901 1958
721 2 2 7 11 516 1382 1316
722 2 2 7 11 514 1381 1314
723 2 2 7 11 515 1384 1315
724 2 2 7 11 513 1383 1313
725 2 2 7 11 337 1530 2490
726 2 2 7 11 338 1531 2491
727 2 2 7 11 340 1529 2489
728 2 2 7 11 339 1532 2492
729 2 2 7 11 449 2570 1482
730 2 2 7 11 450 2569 1481
731 2 2 7 11 452 2571 1483
732 2 2 7 11 451 2572 1484
733 2 2 7 11 50 2060 1009
734 2 2 7 11 8 2058 1010
735 2 2 7 11 133 2059 1011
736 2 2 7 11 92 2057 1012
737 2 2 7 11 505 1330 901
738 2 2 7 11 506 1329 902
739 2 2 7 11 508 1332 903
740 2 2 7 11 507 1331 904
741 2 2 7 11 801 1606 1669
742 2 2 7 11 803 1605 1671
743 2 2 7 11 802 1607 1672
744 2 2 7 11 804 1608 1670
745 2 2 7 11 81 1062 1602
746 2 2 7 11 39 1064 1601
747 2 2 7 11 123 1061 1603
748 2 2 7 11 164 1063 1604
749 2 2 7 11 247 1104 1515
750 2 2 7 11 245 1102 1514
751 2 2 7 11 246 1103 1516
752 2 2 7 11 248 1101 1513
753 2 2 7 11 495 1969 865
754 2 2 7 11 494 1971 868
755 2 2 7 11 496 1970 867
756 2 2 7 11 493 1972 866
757 2 2 7 11 668 1186 1355
758 2 2 7 11 667 1185 1356
759 2 2 7 11 666 1187 1353
760 2 2 7 11 665 1188 1354
761 2 2 7 11 425 887 2042
762 2 2 7 11 426 885 2041
763 2 2 7 11 427 886 2044
764 2 2 7 11 428 888 2043
765 2 2 7 11 429 2046 890
766 2 2 7 11 430 2047 889
767 2 2 7 11 432 2045 891
768 2 2 7 11 431 2048 892
769 2 2 7 11 505 917 1289
770 2 2 7 11 506 918 1292
771 2 2 7 11 507 920 1290
772 2 2 7 11 508 919 1291
773 2 2 7 11 388 1674 878
774 2 2 7 11 387 1676 877
775 2 2 7 11 386 1673 879
776 2 2 7 11 385 1675 880
777 2 2 7 11 593 2348 1510
778 2 2 7 11 595 2347 1512
779 2 2 7 11 594 2346 1511
780 2 2 7 11 596 2345 1509
781 2 2 7 11 288 922 2130
782 2 2 7 11 287 921 2132
783 2 2 7 11 285 924 2129
784 2 2 7 11 286 923 2131
785 2 2 7 11 717 2057 1436
786 2 2 7 11 720 2059 1434
787 2 2 7 11 719 2058 1433
788 2 2 7 11 718 2060 1435
789 2 2 7 11 399 910 1672
790 2 2 7 11 397 909 1669
791 2 2 7 11 398 911 1671
792 2 2 7 11 400 912 1670
793 2 2 7 11 396 1461 1169
794 2 2 7 11 395 1464 1170
795 2 2 7 11 394 1462 1172
796 2 2 7 11 393 1463 1171
797 2 2 7 11 741 1295 1737
798 2 2 7 11 742 1293 1739
799 2 2 7 11 743 1294 1740
800 2 2 7 11 744 1296 1738
801 2 2 7 11 732 913 2281
802 2 2 7 11 729 914 2284
803 2 2 7 11 731 915 2283
804 2 2 7 11 730 916 2282
805 2 2 7 11 464 948 1244
806 2 2 7 11 463 947 1243
807 2 2 7 11 461 946 1241
808 2 2 7 11 462 945 1242
809 2 2 7 11 280 2375 1755
810 2 2 7 11 279 2376 1754
811 2 2 7 11 278 2373 1756
812 2 2 7 11 277 2374 1753
813 2 2 7 11 588 978 1217
814 2 2 7 11 585 979 1218
815 2 2 7 11 586 980 1219
816 2 2 7 11 587 977 1220
817 2 2 7 11 103 104 1041
818 2 2 7 11 61 62 1044
819 2 2 7 11 144 145 1043
820 2 2 7 11 19 20 1042
821 2 2 7 11 468 1063 1236
822 2 2 7 11 467 1061 1233
823 2 2 7 11 466 1062 1234
824 2 2 7 11 465 1064 1235
825 2 2 7 11 425 1894 887
826 2 2 7 11 426 1895 885
827 2 2 7 11 427 1896 886
828 2 2 7 11 428 1893 888
829 2 2 7 11 429 890 1890
830 2 2 7 11 430 889 1892
831 2 2 7 11 432 891 1891
832 2 2 7 11 431 892 1889
833 2 2 7 11 709 1115 1702
834 2 2 7 11 710 1116 1701
835 2 2 7 11 712 1114 1704
836 2 2 7 11 711 1113 1703
837 2 2 7 11 374 1702 1115
838 2 2 7 11 373 1701 1116
839 2 2 7 11 376 1703 1113
840 2 2 7 11 375 1704 1114
841 2 2 7 11 608 1179 1793
842 2 2 7 11 605 1177 1794
843 2 2 7 11 606 1180 1795
844 2 2 7 11 607 1178 1796
845 2 2 7 11 409 2251 922
846 2 2 7 11 410 2252 921
847 2 2 7 11 412 2249 923
848 2 2 7 11 411 2250 924
849 2 2 7 11 293 1270 2153
850 2 2 7 11 294 1269 2154
851 2 2 7 11 295 1271 2155
852 2 2 7 11 296 1272 2156
853 2 2 7 11 437 2253 1665
854 2 2 7 11 439 2255 1666
855 2 2 7 11 438 2256 1667
856 2 2 7 11 440 2254 1668
857 2 2 7 11 1270 930 2153
858 2 2 7 11 1269 929 2154
859 2 2 7 11 1272 931 2156
860 2 2 7 11 1271 932 2155
861 2 2 7 11 481 1184 1041
862 2 2 7 11 482 1182 1042
863 2 2 7 11 483 1181 1043
864 2 2 7 11 484 1183 1044
865 2 2 7 11 1071 2003 861
866 2 2 7 11 1072 2004 862
867 2 2 7 11 1069 2001 864
868 2 2 7 11 1070 2002 863
869 2 2 7 11 587 2264 977
870 2 2 7 11 585 2263 979
871 2 2 7 11 586 2262 980
872 2 2 7 11 588 2261 978
873 2 2 7 11 1179 1878 1793
874 2 2 7 11 1180 1877 1795
875 2 2 7 11 1177 1880 1794
876 2 2 7 11 1178 1879 1796
877 2 2 7 11 690 1525 2141
878 2 2 7 11 692 1528 2143
879 2 2 7 11 691 1526 2142
880 2 2 7 11 689 1527 2144
881 2 2 7 11 540 899 1506
882 2 2 7 11 537 897 1507
883 2 2 7 11 539 900 1508
884 2 2 7 11 538 898 1505
885 2 2 7 11 571 1213 1152
886 2 2 7 11 572 1216 1151
887 2 2 7 11 570 1215 1150
888 2 2 7 11 569 1214 1149
889 2 2 7 11 480 1152 1213
890 2 2 7 11 479 1150 1215
891 2 2 7 11 477 1149 1214
892 2 2 7 11 478 1151 1216
893 2 2 7 11 632 1316 1382
894 2 2 7 11 630 1314 1381
895 2 2 7 11 629 1313 1383
896 2 2 7 11 631 1315 1384
897 2 2 7 11 603 1231 1882
898 2 2 7 11 604 1232 1884
899 2 2 7 11 602 1229 1881
900 2 2 7 11 601 1230 1883
901 2 2 7 11 540 1558 899
902 2 2 7 11 537 1557 897
903 2 2 7 11 538 1559 898
904 2 2 7 11 539 1560 900
905 2 2 7 11 751 1352 1175
906 2 2 7 11 750 1349 1174
907 2 2 7 11 749 1350 1173
908 2 2 7 11 752 1351 1176
909 2 2 7 11 102 103 1184
910 2 2 7 11 18 19 1182
911 2 2 7 11 60 61 1183
912 2 2 7 11 143 144 1181
913 2 2 7 11 1037 1358 543
914 2 2 7 11 1038 1357 544
915 2 2 7 11 1040 1359 542
916 2 2 7 11 541 1039 1360
917 2 2 7 11 53 54 1080
918 2 2 7 11 95 96 1077
919 2 2 7 11 136 137 1079
920 2 2 7 11 11 12 1078
921 2 2 7 11 459 1174 1349
922 2 2 7 11 460 1173 1350
923 2 2 7 11 458 1175 1352
924 2 2 7 11 457 1176 1351
925 2 2 7 11 321 1357 1038
926 2 2 7 11 322 1360 1039
927 2 2 7 11 323 1358 1037
928 2 2 7 11 324 1359 1040
929 2 2 7 11 676 1597 902
930 2 2 7 11 673 1598 904
931 2 2 7 11 674 1600 903
932 2 2 7 11 675 1599 901
933 2 2 7 11 1035 2597 1546
934 2 2 7 11 1033 2598 1545
935 2 2 7 11 1036 2600 1548
936 2 2 7 11 1034 2599 1547
937 2 2 7 11 760 1514 1358
938 2 2 7 11 757 1515 1360
939 2 2 7 11 758 1513 1357
940 2 2 7 11 759 1516 1359
941 2 2 7 11 120 121 1346
942 2 2 7 11 78 79 1345
943 2 2 7 11 36 37 1348
944 2 2 7 11 161 162 1347
945 2 2 7 11 393 905 1629
946 2 2 7 11 394 906 1632
947 2 2 7 11 395 907 1631
948 2 2 7 11 396 908 1630
949 2 2 7 11 543 1358 1514
950 2 2 7 11 544 1357 1513
951 2 2 7 11 541 1360 1515
952 2 2 7 11 542 1359 1516
953 2 2 7 11 548 1545 2598
954 2 2 7 11 545 1546 2597
955 2 2 7 11 547 1548 2600
956 2 2 7 11 546 1547 2599
957 2 2 7 11 34 35 1846
958 2 2 7 11 76 77 1848
959 2 2 7 11 118 119 1845
960 2 2 7 11 159 160 1847
961 2 2 7 11 1232 1501 1884
962 2 2 7 11 1231 1502 1882
963 2 2 7 11 1229 1504 1881
964 2 2 7 11 1230 1503 1883
965 2 2 7 11 399 1470 910
966 2 2 7 11 397 1471 909
967 2 2 7 11 398 1469 911
968 2 2 7 11 400 1472 912
969 2 2 7 11 1146 1867 2474
970 2 2 7 11 1147 1865 2475
971 2 2 7 11 1145 1866 2473
972 2 2 7 11 1148 1868 2476
973 2 2 7 11 790 1145 2473
974 2 2 7 11 791 1146 2474
975 2 2 7 11 789 1147 2475
976 2 2 7 11 792 1148 2476
977 2 2 7 11 1102 1922 1514
978 2 2 7 11 1104 1924 1515
979 2 2 7 11 1103 1923 1516
980 2 2 7 11 1101 1921 1513
981 2 2 7 11 67 68 1054
982 2 2 7 11 25 26 1053
983 2 2 7 11 109 110 1055
984 2 2 7 11 150 151 1056
985 2 2 7 11 614 1142 1097
986 2 2 7 11 613 1144 1099
987 2 2 7 11 615 1141 1098
988 2 2 7 11 616 1143 1100
989 2 2 7 11 490 1097 1142
990 2 2 7 11 491 1099 1144
991 2 2 7 11 489 1098 1141
992 2 2 7 11 492 1100 1143
993 2 2 7 11 314 1185 1491
994 2 2 7 11 313 1186 1492
995 2 2 7 11 315 1187 1489
996 2 2 7 11 316 1188 1490
997 2 2 7 11 667 1491 1185
998 2 2 7 11 668 1492 1186
999 2 2 7 11 665 1490 1188
1000 2 2 7 11 666 1489 1187
1001 2 2 7 11 528 1448 1125
1002 2 2 7 11 527 1446 1126
1003 2 2 7 11 525 1445 1128
1004 2 2 7 11 526 1447 1127
1005 2 2 7 11 560 1262 1209
1006 2 2 7 11 559 1263 1212
1007 2 2 7 11 558 1264 1211
1008 2 2 7 11 557 1261 1210
1009 2 2 7 11 982 1876 1354
1010 2 2 7 11 981 1875 1353
1011 2 2 7 11 983 1873 1355
1012 2 2 7 11 984 1874 1356
1013 2 2 7 11 738 967 2185
1014 2 2 7 11 739 966 2186
1015 2 2 7 11 740 965 2188
1016 2 2 7 11 737 968 2187
1017 2 2 7 11 252 1209 1262
1018 2 2 7 11 251 1210 1261
1019 2 2 7 11 250 1212 1263
1020 2 2 7 11 249 1211 1264
1021 2 2 7 11 251 1579 1210
1022 2 2 7 11 252 1578 1209
1023 2 2 7 11 250 1580 1212
1024 2 2 7 11 249 1577 1211
1025 2 2 7 11 239 912 2322
1026 2 2 7 11 237 909 2324
1027 2 2 7 11 240 911 2321
1028 2 2 7 11 238 910 2323
1029 2 2 7 11 562 1536 1396
1030 2 2 7 11 561 1535 1395
1031 2 2 7 11 564 1534 1394
1032 2 2 7 11 563 1533 1393
1033 2 2 7 11 495 1670 912
1034 2 2 7 11 494 1669 909
1035 2 2 7 11 493 1672 910
1036 2 2 7 11 496 1671 911
1037 2 2 7 11 348 1737 1295
1038 2 2 7 11 347 1739 1293
1039 2 2 7 11 346 1740 1294
1040 2 2 7 11 345 1738 1296
1041 2 2 7 11 119 120 1845
1042 2 2 7 11 160 161 1847
1043 2 2 7 11 77 78 1848
1044 2 2 7 11 35 36 1846
1045 2 2 7 11 706 1812 1724
1046 2 2 7 11 707 1811 1723
1047 2 2 7 11 705 1809 1722
1048 2 2 7 11 708 1810 1721
1049 2 2 7 11 534 1417 1305
1050 2 2 7 11 533 1418 1306
1051 2 2 7 11 535 1419 1307
1052 2 2 7 11 536 1420 1308
1053 2 2 7 11 958 1482 2570
1054 2 2 7 11 960 1481 2569
1055 2 2 7 11 957 1484 2572
1056 2 2 7 11 959 1483 2571
1057 2 2 7 11 425 1299 1411
1058 2 2 7 11 428 1298 1409
1059 2 2 7 11 426 1297 1410
1060 2 2 7 11 427 1300 1412
1061 2 2 7 11 429 1413 1301
1062 2 2 7 11 430 1414 1302
1063 2 2 7 11 432 1415 1303
1064 2 2 7 11 431 1416 1304
1065 2 2 7 11 310 992 1885
1066 2 2 7 11 309 991 1887
1067 2 2 7 11 311 990 1886
1068 2 2 7 11 312 989 1888
1069 2 2 7 11 683 1411 1299
1070 2 2 7 11 682 1409 1298
1071 2 2 7 11 681 1410 1297
1072 2 2 7 11 684 1412 1300
1073 2 2 7 11 686 1302 1414
1074 2 2 7 11 687 1303 1415
1075 2 2 7 11 685 1301 1413
1076 2 2 7 11 688 1304 1416
1077 2 2 7 11 522 1115 1442
1078 2 2 7 11 521 1116 1441
1079 2 2 7 11 524 1114 1444
1080 2 2 7 11 523 1113 1443
1081 2 2 7 11 328 2468 1910
1082 2 2 7 11 325 2467 1911
1083 2 2 7 11 326 2466 1912
1084 2 2 7 11 327 2465 1909
1085 2 2 7 11 864 1021 2452
1086 2 2 7 11 863 1022 2451
1087 2 2 7 11 861 1023 2450
1088 2 2 7 11 862 1024 2449
1089 2 2 7 11 50 51 2060
1090 2 2 7 11 8 9 2058
1091 2 2 7 11 133 134 2059
1092 2 2 7 11 92 93 2057
1093 2 2 7 11 669 1305 1417
1094 2 2 7 11 670 1306 1418
1095 2 2 7 11 671 1307 1419
1096 2 2 7 11 672 1308 1420
1097 2 2 7 11 657 1423 1245
1098 2 2 7 11 659 1422 1246
1099 2 2 7 11 660 1424 1248
1100 2 2 7 11 658 1421 1247
1101 2 2 7 11 396 1630 1461
1102 2 2 7 11 395 1631 1464
1103 2 2 7 11 394 1632 1462
1104 2 2 7 11 393 1629 1463
1105 2 2 7 11 449 1482 2000
1106 2 2 7 11 451 1484 1999
1107 2 2 7 11 452 1483 1998
1108 2 2 7 11 450 1481 1997
1109 2 2 7 11 884 1459 1813
1110 2 2 7 11 883 1457 1814
1111 2 2 7 11 882 1460 1815
1112 2 2 7 11 881 1458 1816
1113 2 2 7 11 417 1813 1459
1114 2 2 7 11 420 1814 1457
1115 2 2 7 11 418 1815 1460
1116 2 2 7 11 419 1816 1458
1117 2 2 7 11 990 1934 1886
1118 2 2 7 11 992 1935 1885
1119 2 2 7 11 991 1936 1887
1120 2 2 7 11 989 1933 1888
1121 2 2 7 11 706 1724 1165
1122 2 2 7 11 707 1723 1167
1123 2 2 7 11 705 1722 1168
1124 2 2 7 11 708 1721 1166
1125 2 2 7 11 506 1292 1040
1126 2 2 7 11 1038 505 1289
1127 2 2 7 11 508 1291 1039
1128 2 2 7 11 1037 507 1290
1129 2 2 7 11 56 1545 1025
1130 2 2 7 11 14 1547 1028
1131 2 2 7 11 139 1548 1027
1132 2 2 7 11 98 1546 1026
1133 2 2 7 11 1045 2592 907
1134 2 2 7 11 1046 2591 908
1135 2 2 7 11 1048 2590 906
1136 2 2 7 11 1047 2589 905
1137 2 2 7 11 282 1017 2190
1138 2 2 7 11 281 1019 2191
1139 2 2 7 11 284 1018 2189
1140 2 2 7 11 283 1020 2192
1141 2 2 7 11 274 1745 944
1142 2 2 7 11 273 1747 942
1143 2 2 7 11 276 1746 943
1144 2 2 7 11 275 1748 941
1145 2 2 7 11 763 2190 1017
1146 2 2 7 11 764 2191 1019
1147 2 2 7 11 762 2192 1020
1148 2 2 7 11 761 2189 1018
1149 2 2 7 11 550 1208 1620
1150 2 2 7 11 549 1207 1617
1151 2 2 7 11 551 1205 1618
1152 2 2 7 11 552 1206 1619
1153 2 2 7 11 243 1717 1046
1154 2 2 7 11 244 1720 1047
1155 2 2 7 11 242 1718 1045
1156 2 2 7 11 241 1719 1048
1157 2 2 7 11 312 1834 933
1158 2 2 7 11 310 1833 934
1159 2 2 7 11 311 1835 935
1160 2 2 7 11 309 1836 936
1161 2 2 7 11 422 1014 1337
1162 2 2 7 11 421 1013 1338
1163 2 2 7 11 423 1015 1340
1164 2 2 7 11 424 1016 1339
1165 2 2 7 11 573 2238 987
1166 2 2 7 11 576 2237 986
1167 2 2 7 11 575 2239 985
1168 2 2 7 11 574 2240 988
1169 2 2 7 11 788 1510 2348
1170 2 2 7 11 787 1512 2347
1171 2 2 7 11 785 1511 2346
1172 2 2 7 11 786 1509 2345
1173 2 2 7 11 1210 1579 2234
1174 2 2 7 11 1209 1578 2236
1175 2 2 7 11 1211 1577 2233
1176 2 2 7 11 1212 1580 2235
1177 2 2 7 11 182 1147 2165
1178 2 2 7 11 229 1146 2166
1179 2 2 7 11 214 1145 2168
1180 2 2 7 11 198 1148 2167
1181 2 2 7 11 341 1538 1117
1182 2 2 7 11 342 1537 1118
1183 2 2 7 11 344 1539 1119
1184 2 2 7 11 343 1540 1120
1185 2 2 7 11 628 1119 1539
1186 2 2 7 11 627 1118 1537
1187 2 2 7 11 625 1117 1538
1188 2 2 7 11 626 1120 1540
1189 2 2 7 11 709 1767 1125
1190 2 2 7 11 710 1766 1126
1191 2 2 7 11 712 1768 1128
1192 2 2 7 11 711 1765 1127
1193 2 2 7 11 366 1125 1767
1194 2 2 7 11 365 1126 1766
1195 2 2 7 11 367 1128 1768
1196 2 2 7 11 368 1127 1765
1197 2 2 7 11 1255 1907 1865
1198 2 2 7 11 1254 1906 1868
1199 2 2 7 11 1253 1905 1867
1200 2 2 7 11 1256 1908 1866
1201 2 2 7 11 260 1729 1201
1202 2 2 7 11 259 1732 1202
1203 2 2 7 11 257 1731 1203
1204 2 2 7 11 258 1730 1204
1205 2 2 7 11 324 1040 1292
1206 2 2 7 11 321 1038 1289
1207 2 2 7 11 322 1039 1291
1208 2 2 7 11 323 1037 1290
1209 2 2 7 11 514 1050 1381
1210 2 2 7 11 513 1049 1383
1211 2 2 7 11 515 1051 1384
1212 2 2 7 11 516 1052 1382
1213 2 2 7 11 884 1475 1835
1214 2 2 7 11 881 1474 1836
1215 2 2 7 11 882 1473 1833
1216 2 2 7 11 883 1476 1834
1217 2 2 7 11 591 1836 1474
1218 2 2 7 11 592 1835 1475
1219 2 2 7 11 589 1833 1473
1220 2 2 7 11 590 1834 1476
1221 2 2 7 11 713 1005 2203
1222 2 2 7 11 714 1007 2201
1223 2 2 7 11 715 1006 2202
1224 2 2 7 11 716 1008 2204
1225 2 2 7 11 688 1761 1304
1226 2 2 7 11 687 1764 1303
1227 2 2 7 11 686 1763 1302
1228 2 2 7 11 685 1762 1301
1229 2 2 7 11 462 2405 945
1230 2 2 7 11 463 2407 947
1231 2 2 7 11 464 2408 948
1232 2 2 7 11 461 2406 946
1233 2 2 7 11 300 2212 995
1234 2 2 7 11 297 2209 994
1235 2 2 7 11 298 2211 993
1236 2 2 7 11 299 2210 996
1237 2 2 7 11 300 999 2212
1238 2 2 7 11 297 998 2209
1239 2 2 7 11 298 997 2211
1240 2 2 7 11 299 1000 2210
1241 2 2 7 11 228 1146 229
1242 2 2 7 11 181 1147 182
1243 2 2 7 11 213 1145 214
1244 2 2 7 11 197 1148 198
1245 2 2 7 11 312 2200 989
1246 2 2 7 11 309 2199 991
1247 2 2 7 11 310 2198 992
1248 2 2 7 11 311 2197 990
1249 2 2 7 11 666 1263 1489
1250 2 2 7 11 665 1264 1490
1251 2 2 7 11 668 1261 1492
1252 2 2 7 11 667 1262 1491
1253 2 2 7 11 633 1725 1361
1254 2 2 7 11 636 1728 1363
1255 2 2 7 11 635 1726 1364
1256 2 2 7 11 634 1727 1362
1257 2 2 7 11 558 1490 1264
1258 2 2 7 11 559 1489 1263
1259 2 2 7 11 557 1492 1261
1260 2 2 7 11 560 1491 1262
1261 2 2 7 11 327 1090 1957
1262 2 2 7 11 328 1089 1959
1263 2 2 7 11 326 1091 1958
1264 2 2 7 11 325 1092 1960
1265 2 2 7 11 1062 565 1602
1266 2 2 7 11 1064 567 1601
1267 2 2 7 11 1061 568 1603
1268 2 2 7 11 1063 566 1604
1269 2 2 7 11 1045 1718 2592
1270 2 2 7 11 1046 1717 2591
1271 2 2 7 11 1047 1720 2589
1272 2 2 7 11 1048 1719 2590
1273 2 2 7 11 848 1493 1736
1274 2 2 7 11 847 1495 1733
1275 2 2 7 11 845 1494 1735
1276 2 2 7 11 846 1496 1734
1277 2 2 7 11 386 1736 1493
1278 2 2 7 11 385 1733 1495
1279 2 2 7 11 388 1735 1494
1280 2 2 7 11 387 1734 1496
1281 2 2 7 11 274 944 1941
1282 2 2 7 11 273 942 1944
1283 2 2 7 11 275 941 1942
1284 2 2 7 11 276 943 1943
1285 2 2 7 11 485 2628 1439
1286 2 2 7 11 488 2625 1437
1287 2 2 7 11 486 2627 1438
1288 2 2 7 11 487 2626 1440
1289 2 2 7 11 335 1245 1093
1290 2 2 7 11 333 1248 1095
1291 2 2 7 11 336 1246 1094
1292 2 2 7 11 334 1247 1096
1293 2 2 7 11 1082 1265 466
1294 2 2 7 11 1081 1266 465
1295 2 2 7 11 1083 1267 467
1296 2 2 7 11 1084 1268 468
1297 2 2 7 11 639 940 1532
1298 2 2 7 11 640 937 1529
1299 2 2 7 11 638 939 1530
1300 2 2 7 11 637 938 1531
1301 2 2 7 11 340 1627 1355
1302 2 2 7 11 339 1628 1356
1303 2 2 7 11 337 1625 1353
1304 2 2 7 11 338 1626 1354
1305 2 2 7 11 1006 1531 2081
1306 2 2 7 11 1007 1530 2082
1307 2 2 7 11 1005 1529 2084
1308 2 2 7 11 1008 1532 2083
1309 2 2 7 11 732 1981 1479
1310 2 2 7 11 729 1982 1477
1311 2 2 7 11 731 1983 1480
1312 2 2 7 11 730 1984 1478
1313 2 2 7 11 551 1284 1205
1314 2 2 7 11 552 1283 1206
1315 2 2 7 11 550 1281 1208
1316 2 2 7 11 549 1282 1207
1317 2 2 7 11 268 1205 1284
1318 2 2 7 11 267 1206 1283
1319 2 2 7 11 266 1208 1281
1320 2 2 7 11 265 1207 1282
1321 2 2 7 11 530 1093 1245
1322 2 2 7 11 532 1094 1246
1323 2 2 7 11 529 1096 1247
1324 2 2 7 11 531 1095 1248
1325 2 2 7 11 942 1747 2094
1326 2 2 7 11 941 1748 2093
1327 2 2 7 11 944 1745 2096
1328 2 2 7 11 943 1746 2095
1329 2 2 7 11 150 1056 1361
1330 2 2 7 11 109 1055 1363
1331 2 2 7 11 67 1054 1362
1332 2 2 7 11 25 1053 1364
1333 2 2 7 11 633 2682 1725
1334 2 2 7 11 636 2683 1728
1335 2 2 7 11 635 2681 1726
1336 2 2 7 11 634 2684 1727
1337 2 2 7 11 1082 466 1275
1338 2 2 7 11 1081 465 1273
1339 2 2 7 11 1084 468 1274
1340 2 2 7 11 1083 467 1276
1341 2 2 7 11 279 1925 2464
1342 2 2 7 11 277 1926 2462
1343 2 2 7 11 278 1928 2461
1344 2 2 7 11 280 1927 2463
1345 2 2 7 11 657 1798 1423
1346 2 2 7 11 659 1797 1422
1347 2 2 7 11 660 1800 1424
1348 2 2 7 11 658 1799 1421
1349 2 2 7 11 645 1255 1865
1350 2 2 7 11 648 1254 1868
1351 2 2 7 11 647 1253 1867
1352 2 2 7 11 646 1256 1866
1353 2 2 7 11 1304 1761 2665
1354 2 2 7 11 1303 1764 2666
1355 2 2 7 11 1302 1763 2667
1356 2 2 7 11 1301 1762 2668
1357 2 2 7 11 236 1622 939
1358 2 2 7 11 235 1621 938
1359 2 2 7 11 234 1623 940
1360 2 2 7 11 233 1624 937
1361 2 2 7 11 980 2619 2484
1362 2 2 7 11 979 2617 2483
1363 2 2 7 11 978 2618 2482
1364 2 2 7 11 977 2620 2481
1365 2 2 7 11 441 1993 1090
1366 2 2 7 11 444 1994 1089
1367 2 2 7 11 443 1996 1092
1368 2 2 7 11 442 1995 1091
1369 2 2 7 11 952 1577 1883
1370 2 2 7 11 949 1580 1881
1371 2 2 7 11 950 1578 1882
1372 2 2 7 11 951 1579 1884
1373 2 2 7 11 601 1883 1577
1374 2 2 7 11 602 1881 1580
1375 2 2 7 11 603 1882 1578
1376 2 2 7 11 604 1884 1579
1377 2 2 7 11 582 2094 1747
1378 2 2 7 11 584 2093 1748
1379 2 2 7 11 583 2096 1745
1380 2 2 7 11 581 2095 1746
1381 2 2 7 11 1100 1156 2030
1382 2 2 7 11 1099 1155 2032
1383 2 2 7 11 1098 1154 2031
1384 2 2 7 11 1097 1153 2029
1385 2 2 7 11 300 995 1441
1386 2 2 7 11 297 994 1444
1387 2 2 7 11 298 993 1443
1388 2 2 7 11 299 996 1442
1389 2 2 7 11 297 1445 998
1390 2 2 7 11 298 1447 997
1391 2 2 7 11 300 1446 999
1392 2 2 7 11 299 1448 1000
1393 2 2 7 11 180 2286 1166
1394 2 2 7 11 196 2287 1165
1395 2 2 7 11 212 2288 1167
1396 2 2 7 11 227 2285 1168
1397 2 2 7 11 463 1589 954
1398 2 2 7 11 464 1590 955
1399 2 2 7 11 461 1592 953
1400 2 2 7 11 462 1591 956
1401 2 2 7 11 351 1437 2180
1402 2 2 7 11 350 1439 2177
1403 2 2 7 11 352 1440 2179
1404 2 2 7 11 349 1438 2178
1405 2 2 7 11 649 975 2447
1406 2 2 7 11 651 973 2445
1407 2 2 7 11 652 976 2448
1408 2 2 7 11 650 974 2446
1409 2 2 7 11 488 1437 1197
1410 2 2 7 11 486 1438 1200
1411 2 2 7 11 485 1439 1198
1412 2 2 7 11 487 1440 1199
1413 2 2 7 11 1001 2177 1439
1414 2 2 7 11 1003 2180 1437
1415 2 2 7 11 1004 2179 1440
1416 2 2 7 11 1002 2178 1438
1417 2 2 7 11 328 1428 2468
1418 2 2 7 11 325 1426 2467
1419 2 2 7 11 326 1427 2466
1420 2 2 7 11 327 1425 2465
1421 2 2 7 11 980 2484 1219
1422 2 2 7 11 979 2483 1218
1423 2 2 7 11 978 2482 1217
1424 2 2 7 11 977 2481 1220
1425 2 2 7 11 641 1224 2245
1426 2 2 7 11 644 1222 2247
1427 2 2 7 11 643 1223 2246
1428 2 2 7 11 642 1221 2248
1429 2 2 7 11 425 993 1894
1430 2 2 7 11 427 994 1896
1431 2 2 7 11 426 995 1895
1432 2 2 7 11 428 996 1893
1433 2 2 7 11 430 1892 998
1434 2 2 7 11 429 1890 997
1435 2 2 7 11 432 1891 999
1436 2 2 7 11 431 1889 1000
1437 2 2 7 11 96 1937 1077
1438 2 2 7 11 54 1938 1080
1439 2 2 7 11 12 1940 1078
1440 2 2 7 11 137 1939 1079
1441 2 2 7 11 970 1759 1399
1442 2 2 7 11 969 1760 1400
1443 2 2 7 11 971 1757 1397
1444 2 2 7 11 972 1758 1398
1445 2 2 7 11 508 1039 2444
1446 2 2 7 11 1037 2443 507
1447 2 2 7 11 1038 2442 505
1448 2 2 7 11 506 1040 2441
1449 2 2 7 11 1208 1786 1620
1450 2 2 7 11 1207 1785 1617
1451 2 2 7 11 1205 1787 1618
1452 2 2 7 11 1206 1788 1619
1453 2 2 7 11 1201 1729 2626
1454 2 2 7 11 1202 1732 2628
1455 2 2 7 11 1203 1731 2625
1456 2 2 7 11 1204 1730 2627
1457 2 2 7 11 464 955 1755
1458 2 2 7 11 463 954 1754
1459 2 2 7 11 462 956 1756
1460 2 2 7 11 461 953 1753
1461 2 2 7 11 789 2165 1147
1462 2 2 7 11 791 2166 1146
1463 2 2 7 11 790 2168 1145
1464 2 2 7 11 792 2167 1148
1465 2 2 7 11 1026 545 1527
1466 2 2 7 11 547 1526 1027
1467 2 2 7 11 548 1528 1025
1468 2 2 7 11 546 1525 1028
1469 2 2 7 11 93 94 2057
1470 2 2 7 11 9 10 2058
1471 2 2 7 11 134 135 2059
1472 2 2 7 11 51 52 2060
1473 2 2 7 11 1069 864 2611
1474 2 2 7 11 1072 862 2610
1475 2 2 7 11 1071 861 2609
1476 2 2 7 11 1070 863 2612
1477 2 2 7 11 858 2476 2032
1478 2 2 7 11 857 2475 2030
1479 2 2 7 11 860 2474 2029
1480 2 2 7 11 859 2473 2031
1481 2 2 7 11 620 2592 1718
1482 2 2 7 11 619 2591 1717
1483 2 2 7 11 617 2589 1720
1484 2 2 7 11 618 2590 1719
1485 2 2 7 11 53 1080 1435
1486 2 2 7 11 95 1077 1436
1487 2 2 7 11 11 1078 1433
1488 2 2 7 11 136 1079 1434
1489 2 2 7 11 1024 2464 1925
1490 2 2 7 11 1022 2462 1926
1491 2 2 7 11 1023 2463 1927
1492 2 2 7 11 1021 2461 1928
1493 2 2 7 11 694 1090 1909
1494 2 2 7 11 695 1089 1910
1495 2 2 7 11 693 1092 1911
1496 2 2 7 11 696 1091 1912
1497 2 2 7 11 660 1760 969
1498 2 2 7 11 658 1759 970
1499 2 2 7 11 659 1758 972
1500 2 2 7 11 657 1757 971
1501 2 2 7 11 325 1911 1092
1502 2 2 7 11 327 1909 1090
1503 2 2 7 11 328 1910 1089
1504 2 2 7 11 326 1912 1091
1505 2 2 7 11 284 2205 1018
1506 2 2 7 11 282 2206 1017
1507 2 2 7 11 283 2208 1020
1508 2 2 7 11 281 2207 1019
1509 2 2 7 11 455 1139 1649
1510 2 2 7 11 456 1140 1650
1511 2 2 7 11 453 1137 1652
1512 2 2 7 11 454 1138 1651
1513 2 2 7 11 34 1031 2344
1514 2 2 7 11 118 1029 2341
1515 2 2 7 11 76 1032 2342
1516 2 2 7 11 159 1030 2343
1517 2 2 7 11 318 1381 1050
1518 2 2 7 11 319 1383 1049
1519 2 2 7 11 317 1384 1051
1520 2 2 7 11 320 1382 1052
1521 2 2 7 11 641 2245 1787
1522 2 2 7 11 644 2247 1785
1523 2 2 7 11 643 2246 1788
1524 2 2 7 11 642 2248 1786
1525 2 2 7 11 680 1649 1139
1526 2 2 7 11 679 1650 1140
1527 2 2 7 11 677 1652 1137
1528 2 2 7 11 678 1651 1138
1529 2 2 7 11 179 2286 180
1530 2 2 7 11 211 2288 212
1531 2 2 7 11 195 2287 196
1532 2 2 7 11 226 2285 227
1533 2 2 7 11 974 1495 2117
1534 2 2 7 11 975 1496 2118
1535 2 2 7 11 973 1494 2119
1536 2 2 7 11 976 1493 2120
1537 2 2 7 11 445 1007 2082
1538 2 2 7 11 446 1006 2081
1539 2 2 7 11 448 1008 2083
1540 2 2 7 11 447 1005 2084
1541 2 2 7 11 682 1407 1409
1542 2 2 7 11 681 1405 1410
1543 2 2 7 11 684 1408 1412
1544 2 2 7 11 683 1406 1411
1545 2 2 7 11 522 1409 1407
1546 2 2 7 11 521 1410 1405
1547 2 2 7 11 524 1412 1408
1548 2 2 7 11 523 1411 1406
1549 2 2 7 11 1034 1547 2294
1550 2 2 7 11 1036 1548 2296
1551 2 2 7 11 1035 1546 2295
1552 2 2 7 11 1033 1545 2293
1553 2 2 7 11 713 1241 2077
1554 2 2 7 11 714 1244 2079
1555 2 2 7 11 715 1243 2080
1556 2 2 7 11 716 1242 2078
1557 2 2 7 11 1037 543 1425
1558 2 2 7 11 1038 544 1427
1559 2 2 7 11 541 1428 1039
1560 2 2 7 11 1040 542 1426
1561 2 2 7 11 1417 2277 2538
1562 2 2 7 11 1418 2279 2537
1563 2 2 7 11 1420 2280 2540
1564 2 2 7 11 1419 2278 2539
1565 2 2 7 11 826 1949 1349
1566 2 2 7 11 827 1950 1350
1567 2 2 7 11 828 1951 1352
1568 2 2 7 11 825 1952 1351
1569 2 2 7 11 1003 1437 2625
1570 2 2 7 11 1001 1439 2628
1571 2 2 7 11 1002 1438 2627
1572 2 2 7 11 1004 1440 2626
1573 2 2 7 11 460 1350 1950
1574 2 2 7 11 459 1349 1949
1575 2 2 7 11 457 1351 1952
1576 2 2 7 11 458 1352 1951
1577 2 2 7 11 514 1397 1050
1578 2 2 7 11 513 1398 1049
1579 2 2 7 11 516 1399 1052
1580 2 2 7 11 515 1400 1051
1581 2 2 7 11 713 2489 1005
1582 2 2 7 11 716 2492 1008
1583 2 2 7 11 714 2490 1007
1584 2 2 7 11 715 2491 1006
1585 2 2 7 11 82 2503 1062
1586 2 2 7 11 124 2502 1061
1587 2 2 7 11 165 2501 1063
1588 2 2 7 11 40 2504 1064
1589 2 2 7 11 2065 2267 1470
1590 2 2 7 11 2066 2266 1471
1591 2 2 7 11 2067 2265 1469
1592 2 2 7 11 2068 2268 1472
1593 2 2 7 11 410 986 2017
1594 2 2 7 11 412 988 2019
1595 2 2 7 11 411 987 2020
1596 2 2 7 11 409 985 2018
1597 2 2 7 11 609 1749 2470
1598 2 2 7 11 611 1751 2471
1599 2 2 7 11 610 1750 2472
1600 2 2 7 11 612 1752 2469
1601 2 2 7 11 763 1017 2218
1602 2 2 7 11 762 1020 2219
1603 2 2 7 11 764 1019 2217
1604 2 2 7 11 761 1018 2220
1605 2 2 7 11 1051 1716 561
1606 2 2 7 11 1052 1715 562
1607 2 2 7 11 1049 1714 563
1608 2 2 7 11 1050 1713 564
1609 2 2 7 11 745 2069 1322
1610 2 2 7 11 746 2070 1324
1611 2 2 7 11 748 2071 1323
1612 2 2 7 11 747 2072 1321
1613 2 2 7 11 374 1059 1825
1614 2 2 7 11 375 1057 1828
1615 2 2 7 11 376 1060 1826
1616 2 2 7 11 373 1058 1827
1617 2 2 7 11 1059 630 1825
1618 2 2 7 11 1057 631 1828
1619 2 2 7 11 1060 632 1826
1620 2 2 7 11 1058 629 1827
1621 2 2 7 11 1125 1448 1899
1622 2 2 7 11 1128 1445 1897
1623 2 2 7 11 1126 1446 1898
1624 2 2 7 11 1127 1447 1900
1625 2 2 7 11 1082 2005 677
1626 2 2 7 11 1084 2008 679
1627 2 2 7 11 1081 2006 678
1628 2 2 7 11 1083 2007 680
1629 2 2 7 11 765 1437 1812
1630 2 2 7 11 768 1439 1810
1631 2 2 7 11 766 1438 1809
1632 2 2 7 11 767 1440 1811
1633 2 2 7 11 362 1417 2538
1634 2 2 7 11 361 1418 2537
1635 2 2 7 11 363 1420 2540
1636 2 2 7 11 364 1419 2539
1637 2 2 7 11 717 1012 2057
1638 2 2 7 11 719 1010 2058
1639 2 2 7 11 720 1011 2059
1640 2 2 7 11 718 1009 2060
1641 2 2 7 11 260 2028 1141
1642 2 2 7 11 257 2025 1144
1643 2 2 7 11 258 2026 1142
1644 2 2 7 11 259 2027 1143
1645 2 2 7 11 106 2498 1386
1646 2 2 7 11 22 2499 1387
1647 2 2 7 11 64 2497 1385
1648 2 2 7 11 147 2500 1388
1649 2 2 7 11 8 1010 1697
1650 2 2 7 11 133 1011 1698
1651 2 2 7 11 92 1012 1700
1652 2 2 7 11 50 1009 1699
1653 2 2 7 11 105 106 1386
1654 2 2 7 11 63 64 1385
1655 2 2 7 11 21 22 1387
1656 2 2 7 11 146 147 1388
1657 2 2 7 11 534 1305 1136
1658 2 2 7 11 535 1307 1134
1659 2 2 7 11 533 1306 1133
1660 2 2 7 11 536 1308 1135
1661 2 2 7 11 148 149 1725
1662 2 2 7 11 107 108 1728
1663 2 2 7 11 23 24 1726
1664 2 2 7 11 65 66 1727
1665 2 2 7 11 306 2549 985
1666 2 2 7 11 308 2551 988
1667 2 2 7 11 305 2550 986
1668 2 2 7 11 307 2552 987
1669 2 2 7 11 1063 2501 1236
1670 2 2 7 11 1061 2502 1233
1671 2 2 7 11 1062 2503 1234
1672 2 2 7 11 1064 2504 1235
1673 2 2 7 11 306 985 2239
1674 2 2 7 11 305 986 2237
1675 2 2 7 11 308 988 2240
1676 2 2 7 11 307 987 2238
1677 2 2 7 11 414 1936 991
1678 2 2 7 11 415 1933 989
1679 2 2 7 11 413 1935 992
1680 2 2 7 11 416 1934 990
1681 2 2 7 11 572 990 2197
1682 2 2 7 11 570 992 2198
1683 2 2 7 11 571 989 2200
1684 2 2 7 11 569 991 2199
1685 2 2 7 11 242 1045 2186
1686 2 2 7 11 241 1048 2187
1687 2 2 7 11 243 1046 2185
1688 2 2 7 11 244 1047 2188
1689 2 2 7 11 669 1536 1305
1690 2 2 7 11 670 1535 1306
1691 2 2 7 11 671 1534 1307
1692 2 2 7 11 672 1533 1308
1693 2 2 7 11 1045 739 2186
1694 2 2 7 11 1046 738 2185
1695 2 2 7 11 1047 740 2188
1696 2 2 7 11 1048 737 2187
1697 2 2 7 11 427 2430 994
1698 2 2 7 11 425 2431 993
1699 2 2 7 11 428 2432 996
1700 2 2 7 11 426 2429 995
1701 2 2 7 11 429 997 2425
1702 2 2 7 11 430 998 2426
1703 2 2 7 11 432 999 2427
1704 2 2 7 11 431 1000 2428
1705 2 2 7 11 483 1043 1658
1706 2 2 7 11 482 1042 1659
1707 2 2 7 11 481 1041 1657
1708 2 2 7 11 484 1044 1660
1709 2 2 7 11 1042 580 1659
1710 2 2 7 11 1043 579 1658
1711 2 2 7 11 1041 577 1657
1712 2 2 7 11 1044 578 1660
1713 2 2 7 11 895 1728 2683
1714 2 2 7 11 896 1725 2682
1715 2 2 7 11 894 1727 2684
1716 2 2 7 11 893 1726 2681
1717 2 2 7 11 609 2470 1460
1718 2 2 7 11 611 2471 1459
1719 2 2 7 11 610 2472 1458
1720 2 2 7 11 612 2469 1457
1721 2 2 7 11 611 1249 1751
1722 2 2 7 11 610 1251 1750
1723 2 2 7 11 612 1250 1752
1724 2 2 7 11 609 1252 1749
1725 2 2 7 11 422 2225 1014
1726 2 2 7 11 424 2226 1016
1727 2 2 7 11 421 2227 1013
1728 2 2 7 11 423 2228 1015
1729 2 2 7 11 290 2565 1081
1730 2 2 7 11 289 2567 1082
1731 2 2 7 11 291 2566 1083
1732 2 2 7 11 292 2568 1084
1733 2 2 7 11 407 2637 1009
1734 2 2 7 11 408 2638 1012
1735 2 2 7 11 406 2639 1010
1736 2 2 7 11 405 2640 1011
1737 2 2 7 11 921 1153 2686
1738 2 2 7 11 922 1154 2685
1739 2 2 7 11 923 1156 2687
1740 2 2 7 11 924 1155 2688
1741 2 2 7 11 256 1135 1308
1742 2 2 7 11 254 1133 1306
1743 2 2 7 11 255 1134 1307
1744 2 2 7 11 253 1136 1305
1745 2 2 7 11 399 2065 1470
1746 2 2 7 11 398 2067 1469
1747 2 2 7 11 397 2066 1471
1748 2 2 7 11 400 2068 1472
1749 2 2 7 11 740 2254 1312
1750 2 2 7 11 737 2253 1309
1751 2 2 7 11 739 2255 1310
1752 2 2 7 11 738 2256 1311
1753 2 2 7 11 714 2201 1244
1754 2 2 7 11 715 2202 1243
1755 2 2 7 11 713 2203 1241
1756 2 2 7 11 716 2204 1242
1757 2 2 7 11 597 1593 1117
1758 2 2 7 11 599 1594 1120
1759 2 2 7 11 598 1596 1118
1760 2 2 7 11 600 1595 1119
1761 2 2 7 11 272 1088 2574
1762 2 2 7 11 270 1086 2575
1763 2 2 7 11 271 1087 2573
1764 2 2 7 11 269 1085 2576
1765 2 2 7 11 341 1117 1593
1766 2 2 7 11 343 1120 1594
1767 2 2 7 11 342 1118 1596
1768 2 2 7 11 344 1119 1595
1769 2 2 7 11 611 1886 1934
1770 2 2 7 11 610 1887 1936
1771 2 2 7 11 609 1885 1935
1772 2 2 7 11 612 1888 1933
1773 2 2 7 11 1026 1546 545
1774 2 2 7 11 547 1027 1548
1775 2 2 7 11 546 1028 1547
1776 2 2 7 11 548 1025 1545
1777 2 2 7 11 901 2413 1341
1778 2 2 7 11 904 2414 1344
1779 2 2 7 11 902 2416 1342
1780 2 2 7 11 903 2415 1343
1781 2 2 7 11 315 2221 1916
1782 2 2 7 11 313 2224 1913
1783 2 2 7 11 314 2223 1914
1784 2 2 7 11 316 2222 1915
1785 2 2 7 11 805 1518 2158
1786 2 2 7 11 807 1519 2159
1787 2 2 7 11 808 1520 2160
1788 2 2 7 11 806 1517 2157
1789 2 2 7 11 62 1695 1044
1790 2 2 7 11 145 1696 1043
1791 2 2 7 11 20 1694 1042
1792 2 2 7 11 104 1693 1041
1793 2 2 7 11 1077 1937 689
1794 2 2 7 11 1080 1938 692
1795 2 2 7 11 1079 1939 691
1796 2 2 7 11 1078 1940 690
1797 2 2 7 11 490 2686 1153
1798 2 2 7 11 489 2685 1154
1799 2 2 7 11 492 2687 1156
1800 2 2 7 11 491 2688 1155
1801 2 2 7 11 263 1817 1408
1802 2 2 7 11 264 1818 1405
1803 2 2 7 11 262 1819 1407
1804 2 2 7 11 261 1820 1406
1805 2 2 7 11 525 1128 1636
1806 2 2 7 11 526 1127 1633
1807 2 2 7 11 528 1125 1635
1808 2 2 7 11 527 1126 1634
1809 2 2 7 11 224 1189 225
1810 2 2 7 11 209 1190 210
1811 2 2 7 11 177 1191 178
1812 2 2 7 11 193 1192 194
1813 2 2 7 11 199 1193 200
1814 2 2 7 11 183 1194 184
1815 2 2 7 11 215 1195 216
1816 2 2 7 11 230 1196 231
1817 2 2 7 11 1349 2375 2463
1818 2 2 7 11 1351 2373 2461
1819 2 2 7 11 1350 2376 2464
1820 2 2 7 11 1352 2374 2462
1821 2 2 7 11 752 1176 2011
1822 2 2 7 11 749 1173 2009
1823 2 2 7 11 750 1174 2010
1824 2 2 7 11 751 1175 2012
1825 2 2 7 11 613 2180 1731
1826 2 2 7 11 616 2177 1732
1827 2 2 7 11 615 2179 1729
1828 2 2 7 11 614 2178 1730
1829 2 2 7 11 329 2011 1176
1830 2 2 7 11 332 2009 1173
1831 2 2 7 11 331 2010 1174
1832 2 2 7 11 330 2012 1175
1833 2 2 7 11 759 2620 2053
1834 2 2 7 11 757 2617 2054
1835 2 2 7 11 758 2618 2055
1836 2 2 7 11 760 2619 2056
1837 2 2 7 11 1003 1731 2180
1838 2 2 7 11 1001 1732 2177
1839 2 2 7 11 1004 1729 2179
1840 2 2 7 11 1002 1730 2178
1841 2 2 7 11 822 2253 1654
1842 2 2 7 11 821 2254 1653
1843 2 2 7 11 823 2256 1655
1844 2 2 7 11 824 2255 1656
1845 2 2 7 11 1314 2623 2381
1846 2 2 7 11 1315 2621 2383
1847 2 2 7 11 1316 2622 2382
1848 2 2 7 11 1313 2624 2384
1849 2 2 7 11 1250 2380 1752
1850 2 2 7 11 1249 2378 1751
1851 2 2 7 11 1251 2377 1750
1852 2 2 7 11 1252 2379 1749
1853 2 2 7 11 765 1197 1437
1854 2 2 7 11 766 1200 1438
1855 2 2 7 11 767 1199 1440
1856 2 2 7 11 768 1198 1439
1857 2 2 7 11 1320 2495 2390
1858 2 2 7 11 1319 2494 2389
1859 2 2 7 11 1317 2496 2392
1860 2 2 7 11 1318 2493 2391
1861 2 2 7 11 325 1329 1426
1862 2 2 7 11 328 1332 1428
1863 2 2 7 11 326 1330 1427
1864 2 2 7 11 327 1331 1425
1865 2 2 7 11 489 1555 1110
1866 2 2 7 11 490 1553 1109
1867 2 2 7 11 492 1556 1111
1868 2 2 7 11 491 1554 1112
1869 2 2 7 11 575 1110 1555
1870 2 2 7 11 576 1109 1553
1871 2 2 7 11 573 1112 1554
1872 2 2 7 11 574 1111 1556
1873 2 2 7 11 257 1150 2025
1874 2 2 7 11 259 1152 2027
1875 2 2 7 11 260 1149 2028
1876 2 2 7 11 258 1151 2026
1877 2 2 7 11 68 1613 1054
1878 2 2 7 11 151 1615 1056
1879 2 2 7 11 26 1616 1053
1880 2 2 7 11 110 1614 1055
1881 2 2 7 11 692 2487 1025
1882 2 2 7 11 1026 689 2488
1883 2 2 7 11 1028 690 2486
1884 2 2 7 11 1027 691 2485
1885 2 2 7 11 335 1093 2694
1886 2 2 7 11 336 1094 2693
1887 2 2 7 11 333 1095 2695
1888 2 2 7 11 334 1096 2696
1889 2 2 7 11 280 2463 2375
1890 2 2 7 11 279 2464 2376
1891 2 2 7 11 277 2462 2374
1892 2 2 7 11 278 2461 2373
1893 2 2 7 11 759 1450 2620
1894 2 2 7 11 757 1449 2617
1895 2 2 7 11 760 1451 2619
1896 2 2 7 11 758 1452 2618
1897 2 2 7 11 808 2678 1520
1898 2 2 7 11 807 2679 1519
1899 2 2 7 11 805 2677 1518
1900 2 2 7 11 806 2680 1517
1901 2 2 7 11 351 1812 1437
1902 2 2 7 11 349 1809 1438
1903 2 2 7 11 350 1810 1439
1904 2 2 7 11 352 1811 1440
1905 2 2 7 11 902 1329 1960
1906 2 2 7 11 901 1330 1958
1907 2 2 7 11 903 1332 1959
1908 2 2 7 11 904 1331 1957
1909 2 2 7 11 885 1432 2558
1910 2 2 7 11 888 1430 2559
1911 2 2 7 11 887 1431 2560
1912 2 2 7 11 886 1429 2557
1913 2 2 7 11 892 2564 1430
1914 2 2 7 11 889 2561 1429
1915 2 2 7 11 890 2563 1431
1916 2 2 7 11 891 2562 1432
1917 2 2 7 11 370 1789 2196
1918 2 2 7 11 372 1790 2193
1919 2 2 7 11 371 1792 2194
1920 2 2 7 11 369 1791 2195
1921 2 2 7 11 514 1314 2381
1922 2 2 7 11 515 1315 2383
1923 2 2 7 11 516 1316 2382
1924 2 2 7 11 513 1313 2384
1925 2 2 7 11 530 1488 1093
1926 2 2 7 11 529 1485 1096
1927 2 2 7 11 531 1486 1095
1928 2 2 7 11 532 1487 1094
1929 2 2 7 11 511 1353 1187
1930 2 2 7 11 512 1354 1188
1931 2 2 7 11 510 1355 1186
1932 2 2 7 11 509 1356 1185
1933 2 2 7 11 1272 1660 931
1934 2 2 7 11 1270 1658 930
1935 2 2 7 11 1269 1659 929
1936 2 2 7 11 1271 1657 932
1937 2 2 7 11 1116 2085 1441
1938 2 2 7 11 1115 2086 1442
1939 2 2 7 11 1114 2087 1444
1940 2 2 7 11 1113 2088 1443
1941 2 2 7 11 500 1928 2040
1942 2 2 7 11 499 1926 2039
1943 2 2 7 11 498 1927 2038
1944 2 2 7 11 497 1925 2037
1945 2 2 7 11 869 1593 1849
1946 2 2 7 11 870 1595 1852
1947 2 2 7 11 872 1596 1851
1948 2 2 7 11 871 1594 1850
1949 2 2 7 11 278 2401 1928
1950 2 2 7 11 277 2402 1926
1951 2 2 7 11 280 2404 1927
1952 2 2 7 11 279 2403 1925
1953 2 2 7 11 56 1025 2487
1954 2 2 7 11 139 1027 2485
1955 2 2 7 11 14 1028 2486
1956 2 2 7 11 98 1026 2488
1957 2 2 7 11 842 2596 1312
1958 2 2 7 11 841 2595 1309
1959 2 2 7 11 843 2594 1310
1960 2 2 7 11 844 2593 1311
1961 2 2 7 11 597 1849 1593
1962 2 2 7 11 600 1852 1595
1963 2 2 7 11 598 1851 1596
1964 2 2 7 11 599 1850 1594
1965 2 2 7 11 1036 741 1737
1966 2 2 7 11 1033 743 1740
1967 2 2 7 11 1034 742 1739
1968 2 2 7 11 1035 744 1738
1969 2 2 7 11 596 1030 1847
1970 2 2 7 11 594 1031 1846
1971 2 2 7 11 593 1029 1845
1972 2 2 7 11 1032 1848 595
1973 2 2 7 11 56 57 1545
1974 2 2 7 11 14 15 1547
1975 2 2 7 11 139 140 1548
1976 2 2 7 11 98 99 1546
1977 2 2 7 11 284 1453 2205
1978 2 2 7 11 281 1455 2207
1979 2 2 7 11 282 1454 2206
1980 2 2 7 11 283 1456 2208
1981 2 2 7 11 841 2433 2595
1982 2 2 7 11 843 2434 2594
1983 2 2 7 11 842 2436 2596
1984 2 2 7 11 844 2435 2593
1985 2 2 7 11 1042 1694 580
1986 2 2 7 11 1043 1696 579
1987 2 2 7 11 1044 1695 578
1988 2 2 7 11 1041 1693 577
1989 2 2 7 11 318 1394 1178
1990 2 2 7 11 319 1393 1177
1991 2 2 7 11 317 1395 1179
1992 2 2 7 11 320 1396 1180
1993 2 2 7 11 512 1319 2389
1994 2 2 7 11 511 1320 2390
1995 2 2 7 11 509 1317 2392
1996 2 2 7 11 510 1318 2391
1997 2 2 7 11 883 1888 1457
1998 2 2 7 11 881 1887 1458
1999 2 2 7 11 884 1886 1459
2000 2 2 7 11 882 1885 1460
2001 2 2 7 11 671 1178 1394
2002 2 2 7 11 670 1179 1395
2003 2 2 7 11 669 1180 1396
2004 2 2 7 11 672 1177 1393
2005 2 2 7 11 186 1370 203
2006 2 2 7 11 170 1369 187
2007 2 2 7 11 169 1371 171
2008 2 2 7 11 202 1372 218
2009 2 2 7 11 206 1373 207
2010 2 2 7 11 174 1375 175
2011 2 2 7 11 221 1376 222
2012 2 2 7 11 190 1374 191
2013 2 2 7 11 1141 2028 1555
2014 2 2 7 11 1142 2026 1553
2015 2 2 7 11 1144 2025 1554
2016 2 2 7 11 1143 2027 1556
2017 2 2 7 11 1067 2368 728
2018 2 2 7 11 1068 2367 727
2019 2 2 7 11 1065 2365 725
2020 2 2 7 11 1066 2366 726
2021 2 2 7 11 628 1954 1119
2022 2 2 7 11 627 1955 1118
2023 2 2 7 11 626 1953 1120
2024 2 2 7 11 625 1956 1117
2025 2 2 7 11 487 1106 2675
2026 2 2 7 11 485 1108 2676
2027 2 2 7 11 488 1105 2674
2028 2 2 7 11 486 1107 2673
2029 2 2 7 11 1033 2097 743
2030 2 2 7 11 1036 2098 741
2031 2 2 7 11 1034 2099 742
2032 2 2 7 11 1035 2100 744
2033 2 2 7 11 477 1214 2691
2034 2 2 7 11 480 1213 2689
2035 2 2 7 11 478 1216 2690
2036 2 2 7 11 479 1215 2692
2037 2 2 7 11 936 2691 1214
2038 2 2 7 11 933 2689 1213
2039 2 2 7 11 935 2690 1216
2040 2 2 7 11 934 2692 1215
2041 2 2 7 11 489 1110 2685
2042 2 2 7 11 492 1111 2687
2043 2 2 7 11 491 1112 2688
2044 2 2 7 11 490 1109 2686
2045 2 2 7 11 222 1570 223
2046 2 2 7 11 207 1569 208
2047 2 2 7 11 191 1572 192
2048 2 2 7 11 175 1571 176
2049 2 2 7 11 170 185 1576
2050 2 2 7 11 202 217 1573
2051 2 2 7 11 169 232 1575
2052 2 2 7 11 186 201 1574
2053 2 2 7 11 930 1658 2555
2054 2 2 7 11 931 1660 2553
2055 2 2 7 11 929 1659 2556
2056 2 2 7 11 932 1657 2554
2057 2 2 7 11 501 1389 1170
2058 2 2 7 11 502 1390 1169
2059 2 2 7 11 504 1391 1172
2060 2 2 7 11 503 1392 1171
2061 2 2 7 11 306 1159 1975
2062 2 2 7 11 308 1157 1974
2063 2 2 7 11 307 1158 1976
2064 2 2 7 11 305 1160 1973
2065 2 2 7 11 1084 1274 2008
2066 2 2 7 11 1082 1275 2005
2067 2 2 7 11 1081 1273 2006
2068 2 2 7 11 1083 1276 2007
2069 2 2 7 11 683 1299 1929
2070 2 2 7 11 681 1297 1930
2071 2 2 7 11 682 1298 1932
2072 2 2 7 11 684 1300 1931
2073 2 2 7 11 1081 2565 1266
2074 2 2 7 11 1082 2567 1265
2075 2 2 7 11 1083 2566 1267
2076 2 2 7 11 1084 2568 1268
2077 2 2 7 11 222 2533 1570
2078 2 2 7 11 207 2536 1569
2079 2 2 7 11 191 2534 1572
2080 2 2 7 11 175 2535 1571
2081 2 2 7 11 170 1576 2542
2082 2 2 7 11 202 1573 2544
2083 2 2 7 11 169 1575 2543
2084 2 2 7 11 186 1574 2541
2085 2 2 7 11 628 1978 1123
2086 2 2 7 11 626 1977 1121
2087 2 2 7 11 625 1980 1124
2088 2 2 7 11 627 1979 1122
2089 2 2 7 11 381 1981 2554
2090 2 2 7 11 384 1982 2553
2091 2 2 7 11 383 1983 2556
2092 2 2 7 11 382 1984 2555
2093 2 2 7 11 1045 2092 739
2094 2 2 7 11 1046 2089 738
2095 2 2 7 11 1047 2091 740
2096 2 2 7 11 1048 2090 737
2097 2 2 7 11 656 1773 1623
2098 2 2 7 11 655 1774 1624
2099 2 2 7 11 653 1775 1622
2100 2 2 7 11 654 1776 1621
2101 2 2 7 11 2134 2356 1190
2102 2 2 7 11 2133 2354 1189
2103 2 2 7 11 2136 2355 1192
2104 2 2 7 11 2135 2353 1191
2105 2 2 7 11 2140 1194 2358
2106 2 2 7 11 2139 1193 2357
2107 2 2 7 11 2137 1195 2359
2108 2 2 7 11 2138 1196 2360
2109 2 2 7 11 908 1916 2221
2110 2 2 7 11 905 1914 2223
2111 2 2 7 11 907 1915 2222
2112 2 2 7 11 906 1913 2224
2113 2 2 7 11 381 2554 1587
2114 2 2 7 11 384 2553 1585
2115 2 2 7 11 383 2556 1586
2116 2 2 7 11 382 2555 1588
2117 2 2 7 11 561 1858 1535
2118 2 2 7 11 564 1859 1534
2119 2 2 7 11 562 1860 1536
2120 2 2 7 11 563 1857 1533
2121 2 2 7 11 1061 2176 568
2122 2 2 7 11 1064 2173 567
2123 2 2 7 11 1062 2174 565
2124 2 2 7 11 1063 2175 566
2125 2 2 7 11 545 1232 1527
2126 2 2 7 11 547 1229 1526
2127 2 2 7 11 546 1230 1525
2128 2 2 7 11 548 1231 1528
2129 2 2 7 11 301 2613 2609
2130 2 2 7 11 302 2614 2610
2131 2 2 7 11 304 2615 2611
2132 2 2 7 11 303 2616 2612
2133 2 2 7 11 468 2175 1063
2134 2 2 7 11 466 2174 1062
2135 2 2 7 11 467 2176 1061
2136 2 2 7 11 465 2173 1064
2137 2 2 7 11 742 2370 1293
2138 2 2 7 11 741 2369 1295
2139 2 2 7 11 743 2372 1294
2140 2 2 7 11 744 2371 1296
2141 2 2 7 11 858 1822 2476
2142 2 2 7 11 857 1821 2475
2143 2 2 7 11 859 1823 2473
2144 2 2 7 11 860 1824 2474
2145 2 2 7 11 209 2134 1190
2146 2 2 7 11 177 2135 1191
2147 2 2 7 11 224 2133 1189
2148 2 2 7 11 193 2136 1192
2149 2 2 7 11 231 1196 2138
2150 2 2 7 11 216 1195 2137
2151 2 2 7 11 200 1193 2139
2152 2 2 7 11 184 1194 2140
2153 2 2 7 11 1005 1592 2203
2154 2 2 7 11 1008 1591 2204
2155 2 2 7 11 1007 1590 2201
2156 2 2 7 11 1006 1589 2202
2157 2 2 7 11 230 2166 1196
2158 2 2 7 11 183 2165 1194
2159 2 2 7 11 199 2167 1193
2160 2 2 7 11 215 2168 1195
2161 2 2 7 11 66 67 1362
2162 2 2 7 11 108 109 1363
2163 2 2 7 11 149 150 1361
2164 2 2 7 11 24 25 1364
2165 2 2 7 11 887 1369 2042
2166 2 2 7 11 886 1370 2044
2167 2 2 7 11 885 1371 2041
2168 2 2 7 11 888 1372 2043
2169 2 2 7 11 889 2047 1373
2170 2 2 7 11 890 2046 1374
2171 2 2 7 11 892 2048 1376
2172 2 2 7 11 891 2045 1375
2173 2 2 7 11 1058 1818 629
2174 2 2 7 11 1057 1817 631
2175 2 2 7 11 1059 1819 630
2176 2 2 7 11 1060 1820 632
2177 2 2 7 11 783 1477 1770
2178 2 2 7 11 782 1478 1771
2179 2 2 7 11 781 1479 1772
2180 2 2 7 11 784 1480 1769
2181 2 2 7 11 384 1770 1477
2182 2 2 7 11 382 1771 1478
2183 2 2 7 11 383 1769 1480
2184 2 2 7 11 381 1772 1479
2185 2 2 7 11 1013 2635 2315
2186 2 2 7 11 1014 2633 2314
2187 2 2 7 11 1015 2636 2316
2188 2 2 7 11 1016 2634 2313
2189 2 2 7 11 1623 1773 2508
2190 2 2 7 11 1624 1774 2505
2191 2 2 7 11 1622 1775 2506
2192 2 2 7 11 1621 1776 2507
2193 2 2 7 11 893 1387 2499
2194 2 2 7 11 894 1385 2497
2195 2 2 7 11 895 1386 2498
2196 2 2 7 11 896 1388 2500
2197 2 2 7 11 504 1172 1462
2198 2 2 7 11 501 1170 1464
2199 2 2 7 11 503 1171 1463
2200 2 2 7 11 502 1169 1461
2201 2 2 7 11 596 1847 1347
2202 2 2 7 11 593 1845 1346
2203 2 2 7 11 595 1848 1345
2204 2 2 7 11 594 1846 1348
2205 2 2 7 11 785 2417 1511
2206 2 2 7 11 788 2418 1510
2207 2 2 7 11 787 2420 1512
2208 2 2 7 11 786 2419 1509
2209 2 2 7 11 532 1246 1422
2210 2 2 7 11 529 1247 1421
2211 2 2 7 11 530 1245 1423
2212 2 2 7 11 531 1248 1424
2213 2 2 7 11 785 1942 2417
2214 2 2 7 11 788 1941 2418
2215 2 2 7 11 787 1944 2420
2216 2 2 7 11 786 1943 2419
2217 2 2 7 11 135 136 1434
2218 2 2 7 11 10 11 1433
2219 2 2 7 11 94 95 1436
2220 2 2 7 11 52 53 1435
2221 2 2 7 11 755 2214 1139
2222 2 2 7 11 756 2216 1140
2223 2 2 7 11 754 2215 1138
2224 2 2 7 11 753 2213 1137
2225 2 2 7 11 614 1730 1142
2226 2 2 7 11 613 1731 1144
2227 2 2 7 11 616 1732 1143
2228 2 2 7 11 615 1729 1141
2229 2 2 7 11 260 1141 1729
2230 2 2 7 11 258 1142 1730
2231 2 2 7 11 257 1144 1731
2232 2 2 7 11 259 1143 1732
2233 2 2 7 11 320 1832 2035
2234 2 2 7 11 317 1831 2036
2235 2 2 7 11 318 1830 2033
2236 2 2 7 11 319 1829 2034
2237 2 2 7 11 525 1636 1401
2238 2 2 7 11 526 1633 1404
2239 2 2 7 11 528 1635 1402
2240 2 2 7 11 527 1634 1403
2241 2 2 7 11 384 1477 1982
2242 2 2 7 11 381 1479 1981
2243 2 2 7 11 383 1480 1983
2244 2 2 7 11 382 1478 1984
2245 2 2 7 11 366 1635 1125
2246 2 2 7 11 365 1634 1126
2247 2 2 7 11 368 1633 1127
2248 2 2 7 11 367 1636 1128
2249 2 2 7 11 503 1463 1209
2250 2 2 7 11 501 1464 1211
2251 2 2 7 11 504 1462 1210
2252 2 2 7 11 502 1461 1212
2253 2 2 7 11 389 2030 2475
2254 2 2 7 11 392 2032 2476
2255 2 2 7 11 390 2029 2474
2256 2 2 7 11 391 2031 2473
2257 2 2 7 11 1056 1994 2181
2258 2 2 7 11 1053 1995 2182
2259 2 2 7 11 1055 1993 2184
2260 2 2 7 11 1054 1996 2183
2261 2 2 7 11 251 1241 1903
2262 2 2 7 11 252 1242 1901
2263 2 2 7 11 250 1244 1902
2264 2 2 7 11 249 1243 1904
2265 2 2 7 11 559 1212 1461
2266 2 2 7 11 558 1211 1464
2267 2 2 7 11 560 1209 1463
2268 2 2 7 11 557 1210 1462
2269 2 2 7 11 197 1801 1148
2270 2 2 7 11 213 1804 1145
2271 2 2 7 11 228 1803 1146
2272 2 2 7 11 181 1802 1147
2273 2 2 7 11 444 2181 1994
2274 2 2 7 11 442 2182 1995
2275 2 2 7 11 441 2184 1993
2276 2 2 7 11 443 2183 1996
2277 2 2 7 11 648 1148 1801
2278 2 2 7 11 645 1147 1802
2279 2 2 7 11 647 1146 1803
2280 2 2 7 11 646 1145 1804
2281 2 2 7 11 512 1188 2605
2282 2 2 7 11 510 1186 2608
2283 2 2 7 11 509 1185 2607
2284 2 2 7 11 511 1187 2606
2285 2 2 7 11 113 114 1344
2286 2 2 7 11 154 155 1343
2287 2 2 7 11 29 30 1341
2288 2 2 7 11 71 72 1342
2289 2 2 7 11 1015 2316 1340
2290 2 2 7 11 1014 2314 1337
2291 2 2 7 11 1013 2315 1338
2292 2 2 7 11 1016 2313 1339
2293 2 2 7 11 876 1713 2694
2294 2 2 7 11 875 1714 2693
2295 2 2 7 11 873 1716 2695
2296 2 2 7 11 874 1715 2696
2297 2 2 7 11 391 1908 1098
2298 2 2 7 11 390 1905 1097
2299 2 2 7 11 389 1907 1100
2300 2 2 7 11 392 1906 1099
2301 2 2 7 11 1075 942 2094
2302 2 2 7 11 1073 943 2095
2303 2 2 7 11 1074 941 2093
2304 2 2 7 11 1076 944 2096
2305 2 2 7 11 597 1117 2532
2306 2 2 7 11 598 1118 2531
2307 2 2 7 11 600 1119 2529
2308 2 2 7 11 599 1120 2530
2309 2 2 7 11 918 1342 2526
2310 2 2 7 11 917 1341 2527
2311 2 2 7 11 919 1343 2525
2312 2 2 7 11 920 1344 2528
2313 2 2 7 11 614 1097 1905
2314 2 2 7 11 615 1098 1908
2315 2 2 7 11 613 1099 1906
2316 2 2 7 11 616 1100 1907
2317 2 2 7 11 1078 2146 460
2318 2 2 7 11 1079 2145 459
2319 2 2 7 11 1080 2147 457
2320 2 2 7 11 1077 2148 458
2321 2 2 7 11 1077 689 2148
2322 2 2 7 11 1079 691 2145
2323 2 2 7 11 1078 690 2146
2324 2 2 7 11 1080 692 2147
2325 2 2 7 11 376 2073 1703
2326 2 2 7 11 374 2076 1702
2327 2 2 7 11 375 2074 1704
2328 2 2 7 11 373 2075 1701
2329 2 2 7 11 1152 1583 2027
2330 2 2 7 11 1150 1582 2025
2331 2 2 7 11 1149 1581 2028
2332 2 2 7 11 1151 1584 2026
2333 2 2 7 11 321 1985 1074
2334 2 2 7 11 324 1988 1075
2335 2 2 7 11 322 1987 1073
2336 2 2 7 11 323 1986 1076
2337 2 2 7 11 572 2673 1107
2338 2 2 7 11 570 2674 1105
2339 2 2 7 11 571 2676 1108
2340 2 2 7 11 569 2675 1106
2341 2 2 7 11 1073 1990 433
2342 2 2 7 11 1076 1989 434
2343 2 2 7 11 1074 1991 435
2344 2 2 7 11 1075 1992 436
2345 2 2 7 11 477 1581 1149
2346 2 2 7 11 479 1582 1150
2347 2 2 7 11 480 1583 1152
2348 2 2 7 11 478 1584 1151
2349 2 2 7 11 853 2039 1926
2350 2 2 7 11 854 2040 1928
2351 2 2 7 11 855 2038 1927
2352 2 2 7 11 856 2037 1925
2353 2 2 7 11 1079 459 2650
2354 2 2 7 11 1078 460 2651
2355 2 2 7 11 1077 458 2652
2356 2 2 7 11 1080 457 2649
2357 2 2 7 11 1082 677 2101
2358 2 2 7 11 1081 678 2102
2359 2 2 7 11 1083 680 2103
2360 2 2 7 11 1084 679 2104
2361 2 2 7 11 291 1139 2214
2362 2 2 7 11 290 1138 2215
2363 2 2 7 11 289 1137 2213
2364 2 2 7 11 292 1140 2216
2365 2 2 7 11 642 1561 1221
2366 2 2 7 11 641 1564 1224
2367 2 2 7 11 643 1563 1223
2368 2 2 7 11 644 1562 1222
2369 2 2 7 11 246 2053 2264
2370 2 2 7 11 247 2054 2263
2371 2 2 7 11 245 2056 2262
2372 2 2 7 11 248 2055 2261
2373 2 2 7 11 333 1400 1760
2374 2 2 7 11 334 1399 1759
2375 2 2 7 11 335 1397 1757
2376 2 2 7 11 336 1398 1758
2377 2 2 7 11 290 1081 2102
2378 2 2 7 11 289 1082 2101
2379 2 2 7 11 291 1083 2103
2380 2 2 7 11 292 1084 2104
2381 2 2 7 11 314 1224 1564
2382 2 2 7 11 313 1223 1563
2383 2 2 7 11 315 1221 1561
2384 2 2 7 11 316 1222 1562
2385 2 2 7 11 694 2575 1086
2386 2 2 7 11 693 2573 1087
2387 2 2 7 11 695 2576 1085
2388 2 2 7 11 696 2574 1088
2389 2 2 7 11 344 1595 2328
2390 2 2 7 11 341 1593 2327
2391 2 2 7 11 342 1596 2326
2392 2 2 7 11 343 1594 2325
2393 2 2 7 11 477 1159 1581
2394 2 2 7 11 480 1157 1583
2395 2 2 7 11 479 1158 1582
2396 2 2 7 11 478 1160 1584
2397 2 2 7 11 535 2159 1519
2398 2 2 7 11 536 2160 1520
2399 2 2 7 11 533 2158 1518
2400 2 2 7 11 534 2157 1517
2401 2 2 7 11 248 1854 1101
2402 2 2 7 11 246 1853 1103
2403 2 2 7 11 247 1856 1104
2404 2 2 7 11 245 1855 1102
2405 2 2 7 11 593 1674 2348
2406 2 2 7 11 595 1676 2347
2407 2 2 7 11 594 1675 2346
2408 2 2 7 11 596 1673 2345
2409 2 2 7 11 712 2087 1114
2410 2 2 7 11 711 2088 1113
2411 2 2 7 11 709 2086 1115
2412 2 2 7 11 710 2085 1116
2413 2 2 7 11 251 2077 1241
2414 2 2 7 11 252 2078 1242
2415 2 2 7 11 249 2080 1243
2416 2 2 7 11 250 2079 1244
2417 2 2 7 11 813 2205 1453
2418 2 2 7 11 815 2207 1455
2419 2 2 7 11 816 2208 1456
2420 2 2 7 11 814 2206 1454
2421 2 2 7 11 470 1455 1806
2422 2 2 7 11 471 1453 1807
2423 2 2 7 11 469 1454 1805
2424 2 2 7 11 472 1456 1808
2425 2 2 7 11 1052 1399 1715
2426 2 2 7 11 1051 1400 1716
2427 2 2 7 11 1049 1398 1714
2428 2 2 7 11 1050 1397 1713
2429 2 2 7 11 768 1806 1455
2430 2 2 7 11 766 1805 1454
2431 2 2 7 11 765 1807 1453
2432 2 2 7 11 767 1808 1456
2433 2 2 7 11 873 2577 1237
2434 2 2 7 11 874 2579 1238
2435 2 2 7 11 875 2578 1239
2436 2 2 7 11 876 2580 1240
2437 2 2 7 11 453 1237 2577
2438 2 2 7 11 454 1238 2579
2439 2 2 7 11 456 1239 2578
2440 2 2 7 11 455 1240 2580
2441 2 2 7 11 351 1724 1812
2442 2 2 7 11 349 1722 1809
2443 2 2 7 11 350 1721 1810
2444 2 2 7 11 352 1723 1811
2445 2 2 7 11 301 1288 2613
2446 2 2 7 11 302 1287 2614
2447 2 2 7 11 304 1285 2615
2448 2 2 7 11 303 1286 2616
2449 2 2 7 11 620 2247 1222
2450 2 2 7 11 619 2248 1221
2451 2 2 7 11 618 2246 1223
2452 2 2 7 11 617 2245 1224
2453 2 2 7 11 841 1309 2333
2454 2 2 7 11 843 1310 2334
2455 2 2 7 11 844 1311 2335
2456 2 2 7 11 842 1312 2336
2457 2 2 7 11 949 1881 2299
2458 2 2 7 11 950 1882 2297
2459 2 2 7 11 951 1884 2300
2460 2 2 7 11 952 1883 2298
2461 2 2 7 11 547 1504 1229
2462 2 2 7 11 546 1503 1230
2463 2 2 7 11 545 1501 1232
2464 2 2 7 11 548 1502 1231
2465 2 2 7 11 437 2333 1309
2466 2 2 7 11 439 2334 1310
2467 2 2 7 11 438 2335 1311
2468 2 2 7 11 440 2336 1312
2469 2 2 7 11 489 1141 1555
2470 2 2 7 11 490 1142 1553
2471 2 2 7 11 492 1143 1556
2472 2 2 7 11 491 1144 1554
2473 2 2 7 11 344 2328 2008
2474 2 2 7 11 341 2327 2006
2475 2 2 7 11 342 2326 2005
2476 2 2 7 11 343 2325 2007
2477 2 2 7 11 624 1129 1989
2478 2 2 7 11 621 1130 1991
2479 2 2 7 11 622 1132 1990
2480 2 2 7 11 623 1131 1992
2481 2 2 7 11 645 1721 1255
2482 2 2 7 11 647 1722 1253
2483 2 2 7 11 648 1724 1254
2484 2 2 7 11 646 1723 1256
2485 2 2 7 11 335 1757 1245
2486 2 2 7 11 336 1758 1246
2487 2 2 7 11 333 1760 1248
2488 2 2 7 11 334 1759 1247
2489 2 2 7 11 350 1255 1721
2490 2 2 7 11 349 1253 1722
2491 2 2 7 11 352 1256 1723
2492 2 2 7 11 351 1254 1724
2493 2 2 7 11 178 1683 179
2494 2 2 7 11 194 1681 195
2495 2 2 7 11 225 1684 226
2496 2 2 7 11 210 1682 211
2497 2 2 7 11 253 1860 1238
2498 2 2 7 11 256 1857 1239
2499 2 2 7 11 254 1858 1237
2500 2 2 7 11 255 1859 1240
2501 2 2 7 11 500 2040 1225
2502 2 2 7 11 499 2039 1226
2503 2 2 7 11 498 2038 1227
2504 2 2 7 11 497 2037 1228
2505 2 2 7 11 659 1246 1758
2506 2 2 7 11 657 1245 1757
2507 2 2 7 11 660 1248 1760
2508 2 2 7 11 658 1247 1759
2509 2 2 7 11 410 1163 1644
2510 2 2 7 11 409 1164 1643
2511 2 2 7 11 411 1161 1642
2512 2 2 7 11 412 1162 1641
2513 2 2 7 11 340 1355 1873
2514 2 2 7 11 337 1353 1875
2515 2 2 7 11 338 1354 1876
2516 2 2 7 11 339 1356 1874
2517 2 2 7 11 796 1642 1161
2518 2 2 7 11 793 1643 1164
2519 2 2 7 11 794 1644 1163
2520 2 2 7 11 795 1641 1162
2521 2 2 7 11 1194 2165 2437
2522 2 2 7 11 1193 2167 2438
2523 2 2 7 11 1195 2168 2440
2524 2 2 7 11 1196 2166 2439
2525 2 2 7 11 473 1524 2357
2526 2 2 7 11 474 1521 2358
2527 2 2 7 11 475 1522 2360
2528 2 2 7 11 476 1523 2359
2529 2 2 7 11 825 1351 2461
2530 2 2 7 11 828 1352 2462
2531 2 2 7 11 826 1349 2463
2532 2 2 7 11 827 1350 2464
2533 2 2 7 11 733 1863 1377
2534 2 2 7 11 734 1861 1380
2535 2 2 7 11 736 1864 1378
2536 2 2 7 11 735 1862 1379
2537 2 2 7 11 624 2291 1129
2538 2 2 7 11 623 2289 1131
2539 2 2 7 11 621 2290 1130
2540 2 2 7 11 622 2292 1132
2541 2 2 7 11 1299 2664 1929
2542 2 2 7 11 1297 2662 1930
2543 2 2 7 11 1300 2661 1931
2544 2 2 7 11 1298 2663 1932
2545 2 2 7 11 574 1583 1157
2546 2 2 7 11 573 1582 1158
2547 2 2 7 11 575 1581 1159
2548 2 2 7 11 576 1584 1160
2549 2 2 7 11 43 1980 1322
2550 2 2 7 11 85 1979 1324
2551 2 2 7 11 127 1977 1323
2552 2 2 7 11 168 1978 1321
2553 2 2 7 11 332 1525 1230
2554 2 2 7 11 331 1526 1229
2555 2 2 7 11 330 1527 1232
2556 2 2 7 11 329 1528 1231
2557 2 2 7 11 1071 2609 2613
2558 2 2 7 11 1072 2610 2614
2559 2 2 7 11 1069 2611 2615
2560 2 2 7 11 1070 2612 2616
2561 2 2 7 11 313 1563 1186
2562 2 2 7 11 314 1564 1185
2563 2 2 7 11 316 1562 1188
2564 2 2 7 11 315 1561 1187
2565 2 2 7 11 141 2098 2296
2566 2 2 7 11 58 2097 2293
2567 2 2 7 11 16 2099 2294
2568 2 2 7 11 100 2100 2295
2569 2 2 7 11 834 1912 2466
2570 2 2 7 11 836 1910 2468
2571 2 2 7 11 833 1911 2467
2572 2 2 7 11 835 1909 2465
2573 2 2 7 11 772 1843 1466
2574 2 2 7 11 771 1844 1468
2575 2 2 7 11 769 1841 1467
2576 2 2 7 11 770 1842 1465
2577 2 2 7 11 236 1333 1622
2578 2 2 7 11 235 1334 1621
2579 2 2 7 11 234 1335 1623
2580 2 2 7 11 233 1336 1624
2581 2 2 7 11 357 1467 1841
2582 2 2 7 11 358 1466 1843
2583 2 2 7 11 360 1468 1844
2584 2 2 7 11 359 1465 1842
2585 2 2 7 11 423 2484 2619
2586 2 2 7 11 424 2483 2617
2587 2 2 7 11 421 2482 2618
2588 2 2 7 11 422 2481 2620
2589 2 2 7 11 331 2122 2010
2590 2 2 7 11 332 2123 2009
2591 2 2 7 11 330 2124 2012
2592 2 2 7 11 329 2121 2011
2593 2 2 7 11 653 1622 1333
2594 2 2 7 11 654 1621 1334
2595 2 2 7 11 656 1623 1335
2596 2 2 7 11 655 1624 1336
2597 2 2 7 11 878 1674 1346
2598 2 2 7 11 877 1676 1345
2599 2 2 7 11 880 1675 1348
2600 2 2 7 11 879 1673 1347
2601 2 2 7 11 818 1366 2194
2602 2 2 7 11 817 1365 2193
2603 2 2 7 11 820 1368 2195
2604 2 2 7 11 819 1367 2196
2605 2 2 7 11 371 2194 1366
2606 2 2 7 11 372 2193 1365
2607 2 2 7 11 370 2196 1367
2608 2 2 7 11 369 2195 1368
2609 2 2 7 11 554 1864 1368
2610 2 2 7 11 553 1862 1367
2611 2 2 7 11 556 1861 1366
2612 2 2 7 11 555 1863 1365
2613 2 2 7 11 390 1097 2029
2614 2 2 7 11 391 1098 2031
2615 2 2 7 11 389 1100 2030
2616 2 2 7 11 392 1099 2032
2617 2 2 7 11 554 1378 1864
2618 2 2 7 11 555 1377 1863
2619 2 2 7 11 553 1379 1862
2620 2 2 7 11 556 1380 1861
2621 2 2 7 11 204 1429 205
2622 2 2 7 11 172 1432 173
2623 2 2 7 11 188 1431 189
2624 2 2 7 11 219 1430 220
2625 2 2 7 11 877 2630 1734
2626 2 2 7 11 880 2629 1733
2627 2 2 7 11 879 2632 1736
2628 2 2 7 11 878 2631 1735
2629 2 2 7 11 522 2432 1409
2630 2 2 7 11 521 2429 1410
2631 2 2 7 11 523 2431 1411
2632 2 2 7 11 524 2430 1412
2633 2 2 7 11 413 1780 1252
2634 2 2 7 11 415 1778 1250
2635 2 2 7 11 414 1779 1251
2636 2 2 7 11 416 1777 1249
2637 2 2 7 11 526 1413 2425
2638 2 2 7 11 528 1416 2428
2639 2 2 7 11 525 1414 2426
2640 2 2 7 11 527 1415 2427
2641 2 2 7 11 798 1252 1780
2642 2 2 7 11 797 1251 1779
2643 2 2 7 11 800 1249 1777
2644 2 2 7 11 799 1250 1778
2645 2 2 7 11 757 1360 2604
2646 2 2 7 11 760 1358 2602
2647 2 2 7 11 758 1357 2603
2648 2 2 7 11 759 1359 2601
2649 2 2 7 11 239 1422 1797
2650 2 2 7 11 238 1423 1798
2651 2 2 7 11 240 1421 1799
2652 2 2 7 11 237 1424 1800
2653 2 2 7 11 554 2127 1378
2654 2 2 7 11 555 2125 1377
2655 2 2 7 11 553 2126 1379
2656 2 2 7 11 556 2128 1380
2657 2 2 7 11 263 2242 1869
2658 2 2 7 11 261 2241 1870
2659 2 2 7 11 264 2243 1871
2660 2 2 7 11 262 2244 1872
2661 2 2 7 11 977 2264 2053
2662 2 2 7 11 979 2263 2054
2663 2 2 7 11 980 2262 2056
2664 2 2 7 11 978 2261 2055
2665 2 2 7 11 859 2031 1154
2666 2 2 7 11 858 2032 1155
2667 2 2 7 11 857 2030 1156
2668 2 2 7 11 860 2029 1153
2669 2 2 7 11 479 1647 1158
2670 2 2 7 11 477 1646 1159
2671 2 2 7 11 480 1645 1157
2672 2 2 7 11 478 1648 1160
2673 2 2 7 11 234 2367 2272
2674 2 2 7 11 233 2368 2271
2675 2 2 7 11 235 2365 2270
2676 2 2 7 11 236 2366 2269
2677 2 2 7 11 1070 2113 2002
2678 2 2 7 11 1071 2114 2003
2679 2 2 7 11 1072 2115 2004
2680 2 2 7 11 1069 2116 2001
2681 2 2 7 11 869 1238 1651
2682 2 2 7 11 872 1237 1652
2683 2 2 7 11 870 1239 1650
2684 2 2 7 11 871 1240 1649
2685 2 2 7 11 389 1865 1907
2686 2 2 7 11 390 1867 1905
2687 2 2 7 11 392 1868 1906
2688 2 2 7 11 391 1866 1908
2689 2 2 7 11 346 2297 1882
2690 2 2 7 11 348 2299 1881
2691 2 2 7 11 345 2300 1884
2692 2 2 7 11 347 2298 1883
2693 2 2 7 11 723 2002 2113
2694 2 2 7 11 721 2003 2114
2695 2 2 7 11 722 2004 2115
2696 2 2 7 11 724 2001 2116
2697 2 2 7 11 117 1129 2291
2698 2 2 7 11 75 1131 2289
2699 2 2 7 11 33 1130 2290
2700 2 2 7 11 158 1132 2292
2701 2 2 7 11 580 2556 1659
2702 2 2 7 11 578 2553 1660
2703 2 2 7 11 579 2555 1658
2704 2 2 7 11 577 2554 1657
2705 2 2 7 11 831 2035 1832
2706 2 2 7 11 832 2036 1831
2707 2 2 7 11 830 2033 1830
2708 2 2 7 11 829 2034 1829
2709 2 2 7 11 1157 1645 1974
2710 2 2 7 11 1159 1646 1975
2711 2 2 7 11 1158 1647 1976
2712 2 2 7 11 1160 1648 1973
2713 2 2 7 11 311 1216 2197
2714 2 2 7 11 310 1215 2198
2715 2 2 7 11 309 1214 2199
2716 2 2 7 11 312 1213 2200
2717 2 2 7 11 2 1980 43
2718 2 2 7 11 44 1979 85
2719 2 2 7 11 86 1977 127
2720 2 2 7 11 1 1978 168
2721 2 2 7 11 522 1442 2432
2722 2 2 7 11 521 1441 2429
2723 2 2 7 11 523 1443 2431
2724 2 2 7 11 524 1444 2430
2725 2 2 7 11 528 2428 1448
2726 2 2 7 11 525 2426 1445
2727 2 2 7 11 527 2427 1446
2728 2 2 7 11 526 2425 1447
2729 2 2 7 11 304 2611 1712
2730 2 2 7 11 302 2610 1710
2731 2 2 7 11 301 2609 1709
2732 2 2 7 11 303 2612 1711
2733 2 2 7 11 733 1967 1863
2734 2 2 7 11 734 1968 1861
2735 2 2 7 11 735 1965 1862
2736 2 2 7 11 736 1966 1864
2737 2 2 7 11 212 1167 1804
2738 2 2 7 11 196 1165 1801
2739 2 2 7 11 180 1166 1802
2740 2 2 7 11 227 1168 1803
2741 2 2 7 11 537 1507 1327
2742 2 2 7 11 538 1505 1326
2743 2 2 7 11 540 1506 1328
2744 2 2 7 11 539 1508 1325
2745 2 2 7 11 647 1803 1168
2746 2 2 7 11 648 1801 1165
2747 2 2 7 11 645 1802 1166
2748 2 2 7 11 646 1804 1167
2749 2 2 7 11 1094 1487 2578
2750 2 2 7 11 1093 1488 2580
2751 2 2 7 11 1096 1485 2579
2752 2 2 7 11 1095 1486 2577
2753 2 2 7 11 456 2578 1487
2754 2 2 7 11 455 2580 1488
2755 2 2 7 11 454 2579 1485
2756 2 2 7 11 453 2577 1486
2757 2 2 7 11 1036 2296 2098
2758 2 2 7 11 1033 2293 2097
2759 2 2 7 11 1034 2294 2099
2760 2 2 7 11 1035 2295 2100
2761 2 2 7 11 569 1201 2675
2762 2 2 7 11 572 1204 2673
2763 2 2 7 11 571 1202 2676
2764 2 2 7 11 570 1203 2674
2765 2 2 7 11 962 2242 1931
2766 2 2 7 11 963 2243 1930
2767 2 2 7 11 964 2244 1932
2768 2 2 7 11 961 2241 1929
2769 2 2 7 11 945 2011 2121
2770 2 2 7 11 947 2009 2123
2771 2 2 7 11 948 2010 2122
2772 2 2 7 11 946 2012 2124
2773 2 2 7 11 105 1386 1693
2774 2 2 7 11 63 1385 1695
2775 2 2 7 11 146 1388 1696
2776 2 2 7 11 21 1387 1694
2777 2 2 7 11 256 1852 1135
2778 2 2 7 11 255 1850 1134
2779 2 2 7 11 254 1851 1133
2780 2 2 7 11 253 1849 1136
2781 2 2 7 11 694 2000 1482
2782 2 2 7 11 693 1997 1481
2783 2 2 7 11 695 1999 1484
2784 2 2 7 11 696 1998 1483
2785 2 2 7 11 540 1285 1558
2786 2 2 7 11 537 1287 1557
2787 2 2 7 11 539 1286 1560
2788 2 2 7 11 538 1288 1559
2789 2 2 7 11 645 1166 1721
2790 2 2 7 11 646 1167 1723
2791 2 2 7 11 647 1168 1722
2792 2 2 7 11 648 1165 1724
2793 2 2 7 11 306 2239 1159
2794 2 2 7 11 308 2240 1157
2795 2 2 7 11 307 2238 1158
2796 2 2 7 11 305 2237 1160
2797 2 2 7 11 598 1133 1851
2798 2 2 7 11 600 1135 1852
2799 2 2 7 11 599 1134 1850
2800 2 2 7 11 597 1136 1849
2801 2 2 7 11 709 1125 1899
2802 2 2 7 11 710 1126 1898
2803 2 2 7 11 712 1128 1897
2804 2 2 7 11 711 1127 1900
2805 2 2 7 11 936 1836 2646
2806 2 2 7 11 934 1833 2645
2807 2 2 7 11 933 1834 2648
2808 2 2 7 11 935 1835 2647
2809 2 2 7 11 805 2158 1543
2810 2 2 7 11 806 2157 1544
2811 2 2 7 11 808 2160 1542
2812 2 2 7 11 807 2159 1541
2813 2 2 7 11 319 1177 1829
2814 2 2 7 11 318 1178 1830
2815 2 2 7 11 317 1179 1831
2816 2 2 7 11 320 1180 1832
2817 2 2 7 11 205 1429 2561
2818 2 2 7 11 173 1432 2562
2819 2 2 7 11 189 1431 2563
2820 2 2 7 11 220 1430 2564
2821 2 2 7 11 204 2557 1429
2822 2 2 7 11 172 2558 1432
2823 2 2 7 11 188 2560 1431
2824 2 2 7 11 219 2559 1430
2825 2 2 7 11 605 1829 1177
2826 2 2 7 11 607 1830 1178
2827 2 2 7 11 608 1831 1179
2828 2 2 7 11 606 1832 1180
2829 2 2 7 11 225 1189 1684
2830 2 2 7 11 194 1192 1681
2831 2 2 7 11 178 1191 1683
2832 2 2 7 11 210 1190 1682
2833 2 2 7 11 651 2052 1688
2834 2 2 7 11 649 2049 1685
2835 2 2 7 11 650 2051 1686
2836 2 2 7 11 652 2050 1687
2837 2 2 7 11 422 1337 2481
2838 2 2 7 11 421 1338 2482
2839 2 2 7 11 423 1340 2484
2840 2 2 7 11 424 1339 2483
2841 2 2 7 11 628 1123 1954
2842 2 2 7 11 626 1121 1953
2843 2 2 7 11 625 1124 1956
2844 2 2 7 11 627 1122 1955
2845 2 2 7 11 1188 1562 2605
2846 2 2 7 11 1186 1563 2608
2847 2 2 7 11 1185 1564 2607
2848 2 2 7 11 1187 1561 2606
2849 2 2 7 11 745 1322 1538
2850 2 2 7 11 748 1323 1540
2851 2 2 7 11 746 1324 1537
2852 2 2 7 11 747 1321 1539
2853 2 2 7 11 962 1869 2242
2854 2 2 7 11 961 1870 2241
2855 2 2 7 11 963 1871 2243
2856 2 2 7 11 964 1872 2244
2857 2 2 7 11 1068 2272 2367
2858 2 2 7 11 1067 2271 2368
2859 2 2 7 11 1065 2270 2365
2860 2 2 7 11 1066 2269 2366
2861 2 2 7 11 1329 2441 1426
2862 2 2 7 11 1332 2444 1428
2863 2 2 7 11 1330 2442 1427
2864 2 2 7 11 1331 2443 1425
2865 2 2 7 11 256 1308 1533
2866 2 2 7 11 255 1307 1534
2867 2 2 7 11 254 1306 1535
2868 2 2 7 11 253 1305 1536
2869 2 2 7 11 104 105 1693
2870 2 2 7 11 62 63 1695
2871 2 2 7 11 145 146 1696
2872 2 2 7 11 20 21 1694
2873 2 2 7 11 868 2481 1337
2874 2 2 7 11 867 2482 1338
2875 2 2 7 11 865 2483 1339
2876 2 2 7 11 866 2484 1340
2877 2 2 7 11 651 1607 2052
2878 2 2 7 11 649 1606 2049
2879 2 2 7 11 650 1605 2051
2880 2 2 7 11 652 1608 2050
2881 2 2 7 11 628 1539 1321
2882 2 2 7 11 627 1537 1324
2883 2 2 7 11 626 1540 1323
2884 2 2 7 11 625 1538 1322
2885 2 2 7 11 662 2318 1163
2886 2 2 7 11 664 2320 1161
2887 2 2 7 11 661 2317 1162
2888 2 2 7 11 663 2319 1164
2889 2 2 7 11 455 1649 1240
2890 2 2 7 11 453 1652 1237
2891 2 2 7 11 456 1650 1239
2892 2 2 7 11 454 1651 1238
2893 2 2 7 11 777 1391 2061
2894 2 2 7 11 779 1390 2064
2895 2 2 7 11 780 1392 2063
2896 2 2 7 11 778 1389 2062
2897 2 2 7 11 251 1903 1579
2898 2 2 7 11 252 1901 1578
2899 2 2 7 11 250 1902 1580
2900 2 2 7 11 249 1904 1577
2901 2 2 7 11 117 2341 1129
2902 2 2 7 11 75 2342 1131
2903 2 2 7 11 158 2343 1132
2904 2 2 7 11 33 2344 1130
2905 2 2 7 11 45 2108 1124
2906 2 2 7 11 128 2106 1121
2907 2 2 7 11 87 2105 1122
2908 2 2 7 11 3 2107 1123
2909 2 2 7 11 186 2541 1370
2910 2 2 7 11 170 2542 1369
2911 2 2 7 11 169 2543 1371
2912 2 2 7 11 202 2544 1372
2913 2 2 7 11 207 1373 2536
2914 2 2 7 11 175 1375 2535
2915 2 2 7 11 222 1376 2533
2916 2 2 7 11 191 1374 2534
2917 2 2 7 11 639 1874 2340
2918 2 2 7 11 640 1873 2339
2919 2 2 7 11 638 1875 2337
2920 2 2 7 11 637 1876 2338
2921 2 2 7 11 410 2017 1163
2922 2 2 7 11 412 2019 1162
2923 2 2 7 11 409 2018 1164
2924 2 2 7 11 411 2020 1161
2925 2 2 7 11 662 1163 2017
2926 2 2 7 11 661 1162 2019
2927 2 2 7 11 664 1161 2020
2928 2 2 7 11 663 1164 2018
2929 2 2 7 11 393 1171 2657
2930 2 2 7 11 396 1169 2658
2931 2 2 7 11 394 1172 2660
2932 2 2 7 11 395 1170 2659
2933 2 2 7 11 2134 771 2356
2934 2 2 7 11 2133 769 2354
2935 2 2 7 11 2136 770 2355
2936 2 2 7 11 2135 772 2353
2937 2 2 7 11 2140 2358 775
2938 2 2 7 11 2139 2357 773
2939 2 2 7 11 2138 2360 774
2940 2 2 7 11 2137 2359 776
2941 2 2 7 11 166 2072 1236
2942 2 2 7 11 125 2071 1233
2943 2 2 7 11 83 2070 1234
2944 2 2 7 11 41 2069 1235
2945 2 2 7 11 504 2061 1391
2946 2 2 7 11 502 2064 1390
2947 2 2 7 11 501 2062 1389
2948 2 2 7 11 503 2063 1392
2949 2 2 7 11 571 2200 1213
2950 2 2 7 11 569 2199 1214
2951 2 2 7 11 572 2197 1216
2952 2 2 7 11 570 2198 1215
2953 2 2 7 11 776 1523 1840
2954 2 2 7 11 774 1522 1837
2955 2 2 7 11 773 1524 1838
2956 2 2 7 11 775 1521 1839
2957 2 2 7 11 324 1292 1988
2958 2 2 7 11 321 1289 1985
2959 2 2 7 11 322 1291 1987
2960 2 2 7 11 323 1290 1986
2961 2 2 7 11 356 1840 1523
2962 2 2 7 11 355 1837 1522
2963 2 2 7 11 353 1838 1524
2964 2 2 7 11 354 1839 1521
2965 2 2 7 11 27 28 1599
2966 2 2 7 11 152 153 1600
2967 2 2 7 11 111 112 1598
2968 2 2 7 11 69 70 1597
2969 2 2 7 11 1360 1661 2604
2970 2 2 7 11 1357 1662 2603
2971 2 2 7 11 1358 1664 2602
2972 2 2 7 11 1359 1663 2601
2973 2 2 7 11 648 1868 1148
2974 2 2 7 11 645 1865 1147
2975 2 2 7 11 647 1867 1146
2976 2 2 7 11 646 1866 1145
2977 2 2 7 11 820 1872 1368
2978 2 2 7 11 818 1870 1366
2979 2 2 7 11 819 1871 1367
2980 2 2 7 11 817 1869 1365
2981 2 2 7 11 580 1387 1586
2982 2 2 7 11 577 1386 1587
2983 2 2 7 11 579 1388 1588
2984 2 2 7 11 578 1385 1585
2985 2 2 7 11 895 1587 1386
2986 2 2 7 11 893 1586 1387
2987 2 2 7 11 894 1585 1385
2988 2 2 7 11 896 1588 1388
2989 2 2 7 11 274 2636 1745
2990 2 2 7 11 276 2634 1746
2991 2 2 7 11 275 2635 1748
2992 2 2 7 11 273 2633 1747
2993 2 2 7 11 727 1744 1549
2994 2 2 7 11 726 1741 1551
2995 2 2 7 11 725 1742 1552
2996 2 2 7 11 728 1743 1550
2997 2 2 7 11 281 2458 1455
2998 2 2 7 11 282 2459 1454
2999 2 2 7 11 283 2460 1456
3000 2 2 7 11 284 2457 1453
3001 2 2 7 11 634 1362 2183
3002 2 2 7 11 636 1363 2184
3003 2 2 7 11 635 1364 2182
3004 2 2 7 11 633 1361 2181
3005 2 2 7 11 814 1497 2524
3006 2 2 7 11 816 1499 2523
3007 2 2 7 11 815 1498 2522
3008 2 2 7 11 813 1500 2521
3009 2 2 7 11 481 1657 1271
3010 2 2 7 11 482 1659 1269
3011 2 2 7 11 484 1660 1272
3012 2 2 7 11 483 1658 1270
3013 2 2 7 11 644 1785 1207
3014 2 2 7 11 642 1786 1208
3015 2 2 7 11 641 1787 1205
3016 2 2 7 11 643 1788 1206
3017 2 2 7 11 464 1244 2201
3018 2 2 7 11 463 1243 2202
3019 2 2 7 11 461 1241 2203
3020 2 2 7 11 462 1242 2204
3021 2 2 7 11 810 2390 2495
3022 2 2 7 11 809 2389 2494
3023 2 2 7 11 812 2392 2496
3024 2 2 7 11 811 2391 2493
3025 2 2 7 11 535 1134 2159
3026 2 2 7 11 534 1136 2157
3027 2 2 7 11 533 1133 2158
3028 2 2 7 11 536 1135 2160
3029 2 2 7 11 656 1225 2040
3030 2 2 7 11 655 1226 2039
3031 2 2 7 11 654 1228 2037
3032 2 2 7 11 653 1227 2038
3033 2 2 7 11 125 1233 2502
3034 2 2 7 11 166 1236 2501
3035 2 2 7 11 83 1234 2503
3036 2 2 7 11 41 1235 2504
3037 2 2 7 11 684 1931 2242
3038 2 2 7 11 681 1930 2243
3039 2 2 7 11 682 1932 2244
3040 2 2 7 11 683 1929 2241
3041 2 2 7 11 2105 2519 1122
3042 2 2 7 11 2107 2520 1123
3043 2 2 7 11 2106 2518 1121
3044 2 2 7 11 2108 2517 1124
3045 2 2 7 11 357 1761 1497
3046 2 2 7 11 358 1764 1498
3047 2 2 7 11 360 1763 1499
3048 2 2 7 11 359 1762 1500
3049 2 2 7 11 290 2102 1138
3050 2 2 7 11 289 2101 1137
3051 2 2 7 11 291 2103 1139
3052 2 2 7 11 292 2104 1140
3053 2 2 7 11 242 1752 2380
3054 2 2 7 11 243 1751 2378
3055 2 2 7 11 241 1750 2377
3056 2 2 7 11 244 1749 2379
3057 2 2 7 11 677 1137 2101
3058 2 2 7 11 678 1138 2102
3059 2 2 7 11 679 1140 2104
3060 2 2 7 11 680 1139 2103
3061 2 2 7 11 814 2524 2206
3062 2 2 7 11 815 2522 2207
3063 2 2 7 11 816 2523 2208
3064 2 2 7 11 813 2521 2205
3065 2 2 7 11 73 74 1568
3066 2 2 7 11 156 157 1566
3067 2 2 7 11 115 116 1565
3068 2 2 7 11 31 32 1567
3069 2 2 7 11 900 2519 2105
3070 2 2 7 11 897 2520 2107
3071 2 2 7 11 898 2518 2106
3072 2 2 7 11 899 2517 2108
3073 2 2 7 11 244 2188 1749
3074 2 2 7 11 242 2186 1752
3075 2 2 7 11 241 2187 1750
3076 2 2 7 11 243 2185 1751
3077 2 2 7 11 965 1749 2188
3078 2 2 7 11 968 1750 2187
3079 2 2 7 11 966 1752 2186
3080 2 2 7 11 967 1751 2185
3081 2 2 7 11 670 1878 1179
3082 2 2 7 11 671 1879 1178
3083 2 2 7 11 672 1880 1177
3084 2 2 7 11 669 1877 1180
3085 2 2 7 11 239 2322 1422
3086 2 2 7 11 237 2324 1424
3087 2 2 7 11 240 2321 1421
3088 2 2 7 11 238 2323 1423
3089 2 2 7 11 1054 1613 1996
3090 2 2 7 11 1053 1616 1995
3091 2 2 7 11 1056 1615 1994
3092 2 2 7 11 1055 1614 1993
3093 2 2 7 11 847 2117 1495
3094 2 2 7 11 845 2119 1494
3095 2 2 7 11 848 2120 1493
3096 2 2 7 11 846 2118 1496
3097 2 2 7 11 466 1265 2174
3098 2 2 7 11 467 1267 2176
3099 2 2 7 11 468 1268 2175
3100 2 2 7 11 465 1266 2173
3101 2 2 7 11 248 1260 1854
3102 2 2 7 11 246 1257 1853
3103 2 2 7 11 245 1259 1855
3104 2 2 7 11 247 1258 1856
3105 2 2 7 11 246 2264 1257
3106 2 2 7 11 248 2261 1260
3107 2 2 7 11 245 2262 1259
3108 2 2 7 11 247 2263 1258
3109 2 2 7 11 585 1218 1973
3110 2 2 7 11 588 1217 1974
3111 2 2 7 11 586 1219 1975
3112 2 2 7 11 587 1220 1976
3113 2 2 7 11 1119 1954 2529
3114 2 2 7 11 1118 1955 2531
3115 2 2 7 11 1120 1953 2530
3116 2 2 7 11 1117 1956 2532
3117 2 2 7 11 633 1771 2682
3118 2 2 7 11 636 1772 2683
3119 2 2 7 11 634 1770 2684
3120 2 2 7 11 635 1769 2681
3121 2 2 7 11 783 1770 1639
3122 2 2 7 11 784 1769 1638
3123 2 2 7 11 782 1771 1637
3124 2 2 7 11 781 1772 1640
3125 2 2 7 11 102 1184 1964
3126 2 2 7 11 18 1182 1963
3127 2 2 7 11 60 1183 1961
3128 2 2 7 11 143 1181 1962
3129 2 2 7 11 315 1489 2221
3130 2 2 7 11 316 1490 2222
3131 2 2 7 11 314 1491 2223
3132 2 2 7 11 313 1492 2224
3133 2 2 7 11 635 1638 1769
3134 2 2 7 11 633 1637 1771
3135 2 2 7 11 634 1639 1770
3136 2 2 7 11 636 1640 1772
3137 2 2 7 11 656 1335 2303
3138 2 2 7 11 655 1336 2304
3139 2 2 7 11 654 1334 2302
3140 2 2 7 11 653 1333 2301
3141 2 2 7 11 686 1919 1283
3142 2 2 7 11 688 1917 1281
3143 2 2 7 11 687 1918 1282
3144 2 2 7 11 685 1920 1284
3145 2 2 7 11 741 1962 1181
3146 2 2 7 11 743 1961 1183
3147 2 2 7 11 742 1963 1182
3148 2 2 7 11 744 1964 1184
3149 2 2 7 11 345 1501 1738
3150 2 2 7 11 347 1503 1739
3151 2 2 7 11 346 1502 1740
3152 2 2 7 11 348 1504 1737
3153 2 2 7 11 187 1369 2560
3154 2 2 7 11 171 1371 2558
3155 2 2 7 11 218 1372 2559
3156 2 2 7 11 203 1370 2557
3157 2 2 7 11 206 2561 1373
3158 2 2 7 11 190 2563 1374
3159 2 2 7 11 174 2562 1375
3160 2 2 7 11 221 2564 1376
3161 2 2 7 11 529 1421 2321
3162 2 2 7 11 530 1423 2323
3163 2 2 7 11 531 1424 2324
3164 2 2 7 11 532 1422 2322
3165 2 2 7 11 440 1312 2254
3166 2 2 7 11 437 1309 2253
3167 2 2 7 11 439 1310 2255
3168 2 2 7 11 438 1311 2256
3169 2 2 7 11 267 1283 1919
3170 2 2 7 11 266 1281 1917
3171 2 2 7 11 265 1282 1918
3172 2 2 7 11 268 1284 1920
3173 2 2 7 11 1015 1745 2636
3174 2 2 7 11 1013 1748 2635
3175 2 2 7 11 1016 1746 2634
3176 2 2 7 11 1014 1747 2633
3177 2 2 7 11 885 2558 1371
3178 2 2 7 11 887 2560 1369
3179 2 2 7 11 888 2559 1372
3180 2 2 7 11 886 2557 1370
3181 2 2 7 11 889 1373 2561
3182 2 2 7 11 890 1374 2563
3183 2 2 7 11 892 1376 2564
3184 2 2 7 11 891 1375 2562
3185 2 2 7 11 363 1794 1880
3186 2 2 7 11 361 1793 1878
3187 2 2 7 11 364 1796 1879
3188 2 2 7 11 362 1795 1877
3189 2 2 7 11 331 1229 2122
3190 2 2 7 11 332 1230 2123
3191 2 2 7 11 329 1231 2121
3192 2 2 7 11 330 1232 2124
3193 2 2 7 11 28 2413 1599
3194 2 2 7 11 112 2414 1598
3195 2 2 7 11 153 2415 1600
3196 2 2 7 11 70 2416 1597
3197 2 2 7 11 317 2036 1384
3198 2 2 7 11 320 2035 1382
3199 2 2 7 11 318 2033 1381
3200 2 2 7 11 319 2034 1383
3201 2 2 7 11 818 2382 2622
3202 2 2 7 11 820 2381 2623
3203 2 2 7 11 817 2383 2621
3204 2 2 7 11 819 2384 2624
3205 2 2 7 11 777 2300 1296
3206 2 2 7 11 778 2298 1293
3207 2 2 7 11 780 2297 1294
3208 2 2 7 11 779 2299 1295
3209 2 2 7 11 731 1666 2511
3210 2 2 7 11 730 1667 2510
3211 2 2 7 11 732 1665 2512
3212 2 2 7 11 729 1668 2509
3213 2 2 7 11 347 1293 2298
3214 2 2 7 11 346 1294 2297
3215 2 2 7 11 348 1295 2299
3216 2 2 7 11 345 1296 2300
3217 2 2 7 11 619 1679 2248
3218 2 2 7 11 620 1680 2247
3219 2 2 7 11 618 1677 2246
3220 2 2 7 11 617 1678 2245
3221 2 2 7 11 873 1237 1858
3222 2 2 7 11 875 1239 1857
3223 2 2 7 11 876 1240 1859
3224 2 2 7 11 874 1238 1860
3225 2 2 7 11 796 1161 2455
3226 2 2 7 11 795 1162 2453
3227 2 2 7 11 793 1164 2454
3228 2 2 7 11 794 1163 2456
3229 2 2 7 11 984 2340 1874
3230 2 2 7 11 983 2339 1873
3231 2 2 7 11 981 2337 1875
3232 2 2 7 11 982 2338 1876
3233 2 2 7 11 151 152 1615
3234 2 2 7 11 26 27 1616
3235 2 2 7 11 110 111 1614
3236 2 2 7 11 68 69 1613
3237 2 2 7 11 773 1838 1574
3238 2 2 7 11 774 1837 1575
3239 2 2 7 11 775 1839 1576
3240 2 2 7 11 776 1840 1573
3241 2 2 7 11 700 1574 1838
3242 2 2 7 11 698 1576 1839
3243 2 2 7 11 697 1575 1837
3244 2 2 7 11 699 1573 1840
3245 2 2 7 11 771 1569 1844
3246 2 2 7 11 772 1571 1843
3247 2 2 7 11 770 1572 1842
3248 2 2 7 11 769 1570 1841
3249 2 2 7 11 704 1842 1572
3250 2 2 7 11 703 1843 1571
3251 2 2 7 11 701 1841 1570
3252 2 2 7 11 702 1844 1569
3253 2 2 7 11 697 1297 2041
3254 2 2 7 11 699 1298 2043
3255 2 2 7 11 700 1300 2044
3256 2 2 7 11 698 1299 2042
3257 2 2 7 11 704 2046 1301
3258 2 2 7 11 701 2048 1304
3259 2 2 7 11 703 2045 1303
3260 2 2 7 11 702 2047 1302
3261 2 2 7 11 7 8 1697
3262 2 2 7 11 132 133 1698
3263 2 2 7 11 91 92 1700
3264 2 2 7 11 49 50 1699
3265 2 2 7 11 426 2041 1297
3266 2 2 7 11 428 2043 1298
3267 2 2 7 11 425 2042 1299
3268 2 2 7 11 427 2044 1300
3269 2 2 7 11 429 1301 2046
3270 2 2 7 11 432 1303 2045
3271 2 2 7 11 430 1302 2047
3272 2 2 7 11 431 1304 2048
3273 2 2 7 11 688 1281 1761
3274 2 2 7 11 687 1282 1764
3275 2 2 7 11 686 1283 1763
3276 2 2 7 11 685 1284 1762
3277 2 2 7 11 705 1168 2285
3278 2 2 7 11 707 1167 2288
3279 2 2 7 11 708 1166 2286
3280 2 2 7 11 706 1165 2287
3281 2 2 7 11 574 1157 2240
3282 2 2 7 11 573 1158 2238
3283 2 2 7 11 576 1160 2237
3284 2 2 7 11 575 1159 2239
3285 2 2 7 11 114 2528 1344
3286 2 2 7 11 155 2525 1343
3287 2 2 7 11 72 2526 1342
3288 2 2 7 11 30 2527 1341
3289 2 2 7 11 803 2315 2635
3290 2 2 7 11 801 2314 2633
3291 2 2 7 11 804 2313 2634
3292 2 2 7 11 802 2316 2636
3293 2 2 7 11 154 1343 2415
3294 2 2 7 11 113 1344 2414
3295 2 2 7 11 71 1342 2416
3296 2 2 7 11 29 1341 2413
3297 2 2 7 11 620 1222 1915
3298 2 2 7 11 619 1221 1916
3299 2 2 7 11 618 1223 1913
3300 2 2 7 11 617 1224 1914
3301 2 2 7 11 316 1915 1222
3302 2 2 7 11 313 1913 1223
3303 2 2 7 11 314 1914 1224
3304 2 2 7 11 315 1916 1221
3305 2 2 7 11 329 1176 2143
3306 2 2 7 11 332 1173 2141
3307 2 2 7 11 331 1174 2142
3308 2 2 7 11 330 1175 2144
3309 2 2 7 11 662 1279 2318
3310 2 2 7 11 664 1278 2320
3311 2 2 7 11 661 1280 2317
3312 2 2 7 11 663 1277 2319
3313 2 2 7 11 460 2146 1173
3314 2 2 7 11 459 2145 1174
3315 2 2 7 11 458 2148 1175
3316 2 2 7 11 457 2147 1176
3317 2 2 7 11 598 2531 1543
3318 2 2 7 11 597 2532 1544
3319 2 2 7 11 599 2530 1541
3320 2 2 7 11 600 2529 1542
3321 2 2 7 11 947 1904 1243
3322 2 2 7 11 945 1901 1242
3323 2 2 7 11 946 1903 1241
3324 2 2 7 11 948 1902 1244
3325 2 2 7 11 589 1853 1257
3326 2 2 7 11 591 1855 1259
3327 2 2 7 11 592 1856 1258
3328 2 2 7 11 590 1854 1260
3329 2 2 7 11 529 2321 1469
3330 2 2 7 11 530 2323 1470
3331 2 2 7 11 531 2324 1471
3332 2 2 7 11 532 2322 1472
3333 2 2 7 11 731 2511 2154
3334 2 2 7 11 730 2510 2153
3335 2 2 7 11 732 2512 2155
3336 2 2 7 11 729 2509 2156
3337 2 2 7 11 866 1972 1705
3338 2 2 7 11 867 1970 1706
3339 2 2 7 11 868 1971 1707
3340 2 2 7 11 865 1969 1708
3341 2 2 7 11 299 1899 1448
3342 2 2 7 11 297 1897 1445
3343 2 2 7 11 298 1900 1447
3344 2 2 7 11 300 1898 1446
3345 2 2 7 11 596 1347 1673
3346 2 2 7 11 594 1348 1675
3347 2 2 7 11 593 1346 1674
3348 2 2 7 11 595 1345 1676
3349 2 2 7 11 481 2371 1184
3350 2 2 7 11 482 2370 1182
3351 2 2 7 11 483 2369 1181
3352 2 2 7 11 484 2372 1183
3353 2 2 7 11 281 1198 2458
3354 2 2 7 11 282 1200 2459
3355 2 2 7 11 283 1199 2460
3356 2 2 7 11 284 1197 2457
3357 2 2 7 11 741 1181 2369
3358 2 2 7 11 743 1183 2372
3359 2 2 7 11 742 1182 2370
3360 2 2 7 11 744 1184 2371
3361 2 2 7 11 80 81 1602
3362 2 2 7 11 163 164 1604
3363 2 2 7 11 122 123 1603
3364 2 2 7 11 38 39 1601
3365 2 2 7 11 322 1661 1360
3366 2 2 7 11 321 1662 1357
3367 2 2 7 11 323 1664 1358
3368 2 2 7 11 324 1663 1359
3369 2 2 7 11 415 1250 1933
3370 2 2 7 11 413 1252 1935
3371 2 2 7 11 416 1249 1934
3372 2 2 7 11 414 1251 1936
3373 2 2 7 11 1171 2232 2657
3374 2 2 7 11 1170 2229 2659
3375 2 2 7 11 1172 2231 2660
3376 2 2 7 11 1169 2230 2658
3377 2 2 7 11 853 1926 2402
3378 2 2 7 11 854 1928 2401
3379 2 2 7 11 855 1927 2404
3380 2 2 7 11 856 1925 2403
3381 2 2 7 11 768 2458 1198
3382 2 2 7 11 765 2457 1197
3383 2 2 7 11 767 2460 1199
3384 2 2 7 11 766 2459 1200
3385 2 2 7 11 614 1905 1253
3386 2 2 7 11 613 1906 1254
3387 2 2 7 11 616 1907 1255
3388 2 2 7 11 615 1908 1256
3389 2 2 7 11 809 1403 1634
3390 2 2 7 11 812 1404 1633
3391 2 2 7 11 810 1402 1635
3392 2 2 7 11 811 1401 1636
3393 2 2 7 11 676 1996 1613
3394 2 2 7 11 673 1993 1614
3395 2 2 7 11 675 1995 1616
3396 2 2 7 11 674 1994 1615
3397 2 2 7 11 362 1225 2303
3398 2 2 7 11 361 1226 2304
3399 2 2 7 11 364 1227 2301
3400 2 2 7 11 363 1228 2302
3401 2 2 7 11 755 2267 2065
3402 2 2 7 11 756 2268 2068
3403 2 2 7 11 753 2266 2066
3404 2 2 7 11 754 2265 2067
3405 2 2 7 11 263 1315 1817
3406 2 2 7 11 261 1316 1820
3407 2 2 7 11 264 1313 1818
3408 2 2 7 11 262 1314 1819
3409 2 2 7 11 422 1450 2225
3410 2 2 7 11 424 1449 2226
3411 2 2 7 11 421 1452 2227
3412 2 2 7 11 423 1451 2228
3413 2 2 7 11 614 1253 2178
3414 2 2 7 11 616 1255 2177
3415 2 2 7 11 613 1254 2180
3416 2 2 7 11 615 1256 2179
3417 2 2 7 11 821 2657 2232
3418 2 2 7 11 824 2659 2229
3419 2 2 7 11 822 2660 2231
3420 2 2 7 11 823 2658 2230
3421 2 2 7 11 1004 2626 1729
3422 2 2 7 11 1001 2628 1732
3423 2 2 7 11 1003 2625 1731
3424 2 2 7 11 1002 2627 1730
3425 2 2 7 11 632 1820 1316
3426 2 2 7 11 630 1819 1314
3427 2 2 7 11 629 1818 1313
3428 2 2 7 11 631 1817 1315
3429 2 2 7 11 368 1765 1549
3430 2 2 7 11 367 1768 1550
3431 2 2 7 11 366 1767 1551
3432 2 2 7 11 365 1766 1552
3433 2 2 7 11 947 2123 1904
3434 2 2 7 11 945 2121 1901
3435 2 2 7 11 948 2122 1902
3436 2 2 7 11 946 2124 1903
3437 2 2 7 11 727 1549 1765
3438 2 2 7 11 728 1550 1768
3439 2 2 7 11 725 1552 1766
3440 2 2 7 11 726 1551 1767
3441 2 2 7 11 559 1461 1630
3442 2 2 7 11 557 1462 1632
3443 2 2 7 11 558 1464 1631
3444 2 2 7 11 560 1463 1629
3445 2 2 7 11 612 1933 1250
3446 2 2 7 11 611 1934 1249
3447 2 2 7 11 610 1936 1251
3448 2 2 7 11 609 1935 1252
3449 2 2 7 11 662 1969 1279
3450 2 2 7 11 664 1971 1278
3451 2 2 7 11 661 1970 1280
3452 2 2 7 11 663 1972 1277
3453 2 2 7 11 494 1278 1971
3454 2 2 7 11 495 1279 1969
3455 2 2 7 11 496 1280 1970
3456 2 2 7 11 493 1277 1972
3457 2 2 7 11 601 1904 2123
3458 2 2 7 11 603 1901 2121
3459 2 2 7 11 602 1902 2122
3460 2 2 7 11 604 1903 2124
3461 2 2 7 11 362 2538 1225
3462 2 2 7 11 361 2537 1226
3463 2 2 7 11 364 2539 1227
3464 2 2 7 11 363 2540 1228
3465 2 2 7 11 551 1618 2521
3466 2 2 7 11 549 1617 2522
3467 2 2 7 11 550 1620 2524
3468 2 2 7 11 552 1619 2523
3469 2 2 7 11 1018 2521 1618
3470 2 2 7 11 1020 2523 1619
3471 2 2 7 11 1019 2522 1617
3472 2 2 7 11 1017 2524 1620
3473 2 2 7 11 179 1683 2286
3474 2 2 7 11 226 1684 2285
3475 2 2 7 11 195 1681 2287
3476 2 2 7 11 211 1682 2288
3477 2 2 7 11 366 2149 1635
3478 2 2 7 11 365 2150 1634
3479 2 2 7 11 368 2152 1633
3480 2 2 7 11 367 2151 1636
3481 2 2 7 11 577 1693 1386
3482 2 2 7 11 579 1696 1388
3483 2 2 7 11 578 1695 1385
3484 2 2 7 11 580 1694 1387
3485 2 2 7 11 901 1599 2413
3486 2 2 7 11 904 1598 2414
3487 2 2 7 11 903 1600 2415
3488 2 2 7 11 902 1597 2416
3489 2 2 7 11 745 1235 2069
3490 2 2 7 11 746 1234 2070
3491 2 2 7 11 748 1233 2071
3492 2 2 7 11 747 1236 2072
3493 2 2 7 11 468 1236 2362
3494 2 2 7 11 466 1234 2361
3495 2 2 7 11 467 1233 2364
3496 2 2 7 11 465 1235 2363
3497 2 2 7 11 746 2361 1234
3498 2 2 7 11 745 2363 1235
3499 2 2 7 11 748 2364 1233
3500 2 2 7 11 747 2362 1236
3501 2 2 7 11 605 1794 1334
3502 2 2 7 11 608 1793 1336
3503 2 2 7 11 607 1796 1333
3504 2 2 7 11 606 1795 1335
3505 2 2 7 11 335 1713 1397
3506 2 2 7 11 336 1714 1398
3507 2 2 7 11 334 1715 1399
3508 2 2 7 11 333 1716 1400
3509 2 2 7 11 602 2122 1229
3510 2 2 7 11 601 2123 1230
3511 2 2 7 11 603 2121 1231
3512 2 2 7 11 604 2124 1232
3513 2 2 7 11 501 1211 2233
3514 2 2 7 11 502 1212 2235
3515 2 2 7 11 504 1210 2234
3516 2 2 7 11 503 1209 2236
3517 2 2 7 11 700 2661 1300
3518 2 2 7 11 697 2662 1297
3519 2 2 7 11 699 2663 1298
3520 2 2 7 11 698 2664 1299
3521 2 2 7 11 704 1301 2668
3522 2 2 7 11 701 1304 2665
3523 2 2 7 11 702 1302 2667
3524 2 2 7 11 703 1303 2666
3525 2 2 7 11 500 1225 2699
3526 2 2 7 11 497 1228 2698
3527 2 2 7 11 498 1227 2697
3528 2 2 7 11 499 1226 2700
3529 2 2 7 11 634 2183 1639
3530 2 2 7 11 636 2184 1640
3531 2 2 7 11 635 2182 1638
3532 2 2 7 11 633 2181 1637
3533 2 2 7 11 656 2303 1225
3534 2 2 7 11 655 2304 1226
3535 2 2 7 11 654 2302 1228
3536 2 2 7 11 653 2301 1227
3537 2 2 7 11 166 167 2072
3538 2 2 7 11 125 126 2071
3539 2 2 7 11 83 84 2070
3540 2 2 7 11 41 42 2069
3541 2 2 7 11 425 1411 2431
3542 2 2 7 11 427 1412 2430
3543 2 2 7 11 426 1410 2429
3544 2 2 7 11 428 1409 2432
3545 2 2 7 11 429 2425 1413
3546 2 2 7 11 430 2426 1414
3547 2 2 7 11 432 2427 1415
3548 2 2 7 11 431 2428 1416
3549 2 2 7 11 519 2210 1889
3550 2 2 7 11 520 2212 1891
3551 2 2 7 11 517 2211 1890
3552 2 2 7 11 518 2209 1892
3553 2 2 7 11 141 142 2098
3554 2 2 7 11 58 59 2097
3555 2 2 7 11 16 17 2099
3556 2 2 7 11 100 101 2100
3557 2 2 7 11 519 1893 2210
3558 2 2 7 11 517 1894 2211
3559 2 2 7 11 518 1896 2209
3560 2 2 7 11 520 1895 2212
3561 2 2 7 11 341 2006 1273
3562 2 2 7 11 342 2005 1275
3563 2 2 7 11 343 2007 1276
3564 2 2 7 11 344 2008 1274
3565 2 2 7 11 1000 1889 2210
3566 2 2 7 11 997 1890 2211
3567 2 2 7 11 999 1891 2212
3568 2 2 7 11 998 1892 2209
3569 2 2 7 11 994 2209 1896
3570 2 2 7 11 993 2211 1894
3571 2 2 7 11 996 2210 1893
3572 2 2 7 11 995 2212 1895
3573 2 2 7 11 540 1328 2116
3574 2 2 7 11 537 1327 2115
3575 2 2 7 11 539 1325 2113
3576 2 2 7 11 538 1326 2114
3577 2 2 7 11 723 2113 1325
3578 2 2 7 11 724 2116 1328
3579 2 2 7 11 722 2115 1327
3580 2 2 7 11 721 2114 1326
3581 2 2 7 11 236 2269 1333
3582 2 2 7 11 235 2270 1334
3583 2 2 7 11 234 2272 1335
3584 2 2 7 11 233 2271 1336
3585 2 2 7 11 152 1600 1615
3586 2 2 7 11 111 1598 1614
3587 2 2 7 11 27 1599 1616
3588 2 2 7 11 69 1597 1613
3589 2 2 7 11 1466 2709 2353
3590 2 2 7 11 1465 2710 2355
3591 2 2 7 11 1467 2712 2354
3592 2 2 7 11 1468 2711 2356
3593 2 2 7 11 872 1652 2326
3594 2 2 7 11 869 1651 2327
3595 2 2 7 11 871 1649 2325
3596 2 2 7 11 870 1650 2328
3597 2 2 7 11 482 1269 2257
3598 2 2 7 11 483 1270 2259
3599 2 2 7 11 481 1271 2258
3600 2 2 7 11 484 1272 2260
3601 2 2 7 11 73 1568 2526
3602 2 2 7 11 156 1566 2525
3603 2 2 7 11 31 1567 2527
3604 2 2 7 11 115 1565 2528
3605 2 2 7 11 586 2109 1259
3606 2 2 7 11 585 2110 1258
3607 2 2 7 11 588 2112 1260
3608 2 2 7 11 587 2111 1257
3609 2 2 7 11 734 1641 1968
3610 2 2 7 11 733 1642 1967
3611 2 2 7 11 736 1643 1966
3612 2 2 7 11 735 1644 1965
3613 2 2 7 11 251 1261 2077
3614 2 2 7 11 252 1262 2078
3615 2 2 7 11 249 1264 2080
3616 2 2 7 11 250 1263 2079
3617 2 2 7 11 589 1257 2645
3618 2 2 7 11 591 1259 2646
3619 2 2 7 11 592 1258 2647
3620 2 2 7 11 590 1260 2648
3621 2 2 7 11 796 1967 1642
3622 2 2 7 11 795 1968 1641
3623 2 2 7 11 793 1966 1643
3624 2 2 7 11 794 1965 1644
3625 2 2 7 11 6 2311 1327
3626 2 2 7 11 131 2312 1326
3627 2 2 7 11 90 2309 1325
3628 2 2 7 11 48 2310 1328
3629 2 2 7 11 805 2350 1286
3630 2 2 7 11 807 2352 1288
3631 2 2 7 11 806 2349 1285
3632 2 2 7 11 808 2351 1287
3633 2 2 7 11 377 1618 1787
3634 2 2 7 11 378 1619 1788
3635 2 2 7 11 380 1617 1785
3636 2 2 7 11 379 1620 1786
3637 2 2 7 11 138 139 2485
3638 2 2 7 11 13 14 2486
3639 2 2 7 11 97 98 2488
3640 2 2 7 11 55 56 2487
3641 2 2 7 11 349 2178 1253
3642 2 2 7 11 350 2177 1255
3643 2 2 7 11 351 2180 1254
3644 2 2 7 11 352 2179 1256
3645 2 2 7 11 124 125 2502
3646 2 2 7 11 165 166 2501
3647 2 2 7 11 82 83 2503
3648 2 2 7 11 40 41 2504
3649 2 2 7 11 639 1532 1874
3650 2 2 7 11 637 1531 1876
3651 2 2 7 11 638 1530 1875
3652 2 2 7 11 640 1529 1873
3653 2 2 7 11 882 1815 1473
3654 2 2 7 11 881 1816 1474
3655 2 2 7 11 884 1813 1475
3656 2 2 7 11 883 1814 1476
3657 2 2 7 11 652 1783 1493
3658 2 2 7 11 650 1782 1495
3659 2 2 7 11 651 1781 1494
3660 2 2 7 11 649 1784 1496
3661 2 2 7 11 692 1938 2487
3662 2 2 7 11 689 1937 2488
3663 2 2 7 11 690 1940 2486
3664 2 2 7 11 691 1939 2485
3665 2 2 7 11 800 2378 1249
3666 2 2 7 11 797 2377 1251
3667 2 2 7 11 799 2380 1250
3668 2 2 7 11 798 2379 1252
3669 2 2 7 11 288 2130 1378
3670 2 2 7 11 287 2132 1379
3671 2 2 7 11 285 2129 1377
3672 2 2 7 11 286 2131 1380
3673 2 2 7 11 588 1260 2261
3674 2 2 7 11 586 1259 2262
3675 2 2 7 11 585 1258 2263
3676 2 2 7 11 587 1257 2264
3677 2 2 7 11 622 1566 2292
3678 2 2 7 11 623 1568 2289
3679 2 2 7 11 624 1565 2291
3680 2 2 7 11 621 1567 2290
3681 2 2 7 11 666 2477 1263
3682 2 2 7 11 665 2478 1264
3683 2 2 7 11 667 2479 1262
3684 2 2 7 11 668 2480 1261
3685 2 2 7 11 673 1614 1598
3686 2 2 7 11 676 1613 1597
3687 2 2 7 11 674 1615 1600
3688 2 2 7 11 675 1616 1599
3689 2 2 7 11 736 1378 2130
3690 2 2 7 11 734 1380 2131
3691 2 2 7 11 735 1379 2132
3692 2 2 7 11 733 1377 2129
3693 2 2 7 11 482 2257 1293
3694 2 2 7 11 483 2259 1295
3695 2 2 7 11 481 2258 1296
3696 2 2 7 11 484 2260 1294
3697 2 2 7 11 371 1366 1861
3698 2 2 7 11 370 1367 1862
3699 2 2 7 11 372 1365 1863
3700 2 2 7 11 369 1368 1864
3701 2 2 7 11 641 1317 2607
3702 2 2 7 11 642 1320 2606
3703 2 2 7 11 643 1318 2608
3704 2 2 7 11 644 1319 2605
3705 2 2 7 11 32 33 2290
3706 2 2 7 11 74 75 2289
3707 2 2 7 11 116 117 2291
3708 2 2 7 11 157 158 2292
3709 2 2 7 11 919 2525 1566
3710 2 2 7 11 918 2526 1568
3711 2 2 7 11 920 2528 1565
3712 2 2 7 11 917 2527 1567
3713 2 2 7 11 591 2646 1836
3714 2 2 7 11 589 2645 1833
3715 2 2 7 11 592 2647 1835
3716 2 2 7 11 590 2648 1834
3717 2 2 7 11 328 1959 1332
3718 2 2 7 11 326 1958 1330
3719 2 2 7 11 325 1960 1329
3720 2 2 7 11 327 1957 1331
3721 2 2 7 11 628 1321 1978
3722 2 2 7 11 626 1323 1977
3723 2 2 7 11 627 1324 1979
3724 2 2 7 11 625 1322 1980
3725 2 2 7 11 196 1801 197
3726 2 2 7 11 180 1802 181
3727 2 2 7 11 212 1804 213
3728 2 2 7 11 227 1803 228
3729 2 2 7 11 810 1635 2149
3730 2 2 7 11 809 1634 2150
3731 2 2 7 11 812 1633 2152
3732 2 2 7 11 811 1636 2151
3733 2 2 7 11 591 1474 2307
3734 2 2 7 11 590 1476 2306
3735 2 2 7 11 589 1473 2305
3736 2 2 7 11 592 1475 2308
3737 2 2 7 11 301 2679 1288
3738 2 2 7 11 302 2678 1287
3739 2 2 7 11 303 2677 1286
3740 2 2 7 11 304 2680 1285
3741 2 2 7 11 805 1286 2677
3742 2 2 7 11 807 1288 2679
3743 2 2 7 11 808 1287 2678
3744 2 2 7 11 806 1285 2680
3745 2 2 7 11 295 2388 1271
3746 2 2 7 11 293 2386 1270
3747 2 2 7 11 294 2385 1269
3748 2 2 7 11 296 2387 1272
3749 2 2 7 11 306 1705 2549
3750 2 2 7 11 308 1706 2551
3751 2 2 7 11 305 1708 2550
3752 2 2 7 11 307 1707 2552
3753 2 2 7 11 834 1921 2701
3754 2 2 7 11 833 1923 2704
3755 2 2 7 11 836 1924 2703
3756 2 2 7 11 835 1922 2702
3757 2 2 7 11 377 1678 2022
3758 2 2 7 11 378 1677 2021
3759 2 2 7 11 379 1679 2023
3760 2 2 7 11 380 1680 2024
3761 2 2 7 11 798 2022 1678
3762 2 2 7 11 797 2021 1677
3763 2 2 7 11 800 2023 1679
3764 2 2 7 11 799 2024 1680
3765 2 2 7 11 274 1941 1688
3766 2 2 7 11 275 1942 1686
3767 2 2 7 11 273 1944 1685
3768 2 2 7 11 276 1943 1687
3769 2 2 7 11 788 1688 1941
3770 2 2 7 11 785 1686 1942
3771 2 2 7 11 787 1685 1944
3772 2 2 7 11 786 1687 1943
3773 2 2 7 11 341 1273 2653
3774 2 2 7 11 343 1276 2654
3775 2 2 7 11 344 1274 2655
3776 2 2 7 11 342 1275 2656
3777 2 2 7 11 677 2326 1652
3778 2 2 7 11 680 2325 1649
3779 2 2 7 11 678 2327 1651
3780 2 2 7 11 679 2328 1650
3781 2 2 7 11 238 2319 1277
3782 2 2 7 11 239 2318 1279
3783 2 2 7 11 237 2320 1278
3784 2 2 7 11 240 2317 1280
3785 2 2 7 11 366 1551 2337
3786 2 2 7 11 365 1552 2338
3787 2 2 7 11 368 1549 2340
3788 2 2 7 11 367 1550 2339
3789 2 2 7 11 1101 2701 1921
3790 2 2 7 11 1103 2704 1923
3791 2 2 7 11 1104 2703 1924
3792 2 2 7 11 1102 2702 1922
3793 2 2 7 11 963 1930 1611
3794 2 2 7 11 964 1932 1609
3795 2 2 7 11 962 1931 1612
3796 2 2 7 11 961 1929 1610
3797 2 2 7 11 465 2363 1273
3798 2 2 7 11 466 2361 1275
3799 2 2 7 11 468 2362 1274
3800 2 2 7 11 467 2364 1276
3801 2 2 7 11 717 1436 2652
3802 2 2 7 11 718 1435 2649
3803 2 2 7 11 720 1434 2650
3804 2 2 7 11 719 1433 2651
3805 2 2 7 11 723 1325 2309
3806 2 2 7 11 724 1328 2310
3807 2 2 7 11 722 1327 2311
3808 2 2 7 11 721 1326 2312
3809 2 2 7 11 852 2538 2277
3810 2 2 7 11 850 2537 2279
3811 2 2 7 11 849 2539 2278
3812 2 2 7 11 851 2540 2280
3813 2 2 7 11 621 2514 1567
3814 2 2 7 11 622 2513 1566
3815 2 2 7 11 623 2515 1568
3816 2 2 7 11 624 2516 1565
3817 2 2 7 11 919 1566 2513
3818 2 2 7 11 917 1567 2514
3819 2 2 7 11 920 1565 2516
3820 2 2 7 11 918 1568 2515
3821 2 2 7 11 470 2353 2709
3822 2 2 7 11 471 2355 2710
3823 2 2 7 11 469 2354 2712
3824 2 2 7 11 472 2356 2711
3825 2 2 7 11 793 1798 1791
3826 2 2 7 11 796 1800 1790
3827 2 2 7 11 795 1799 1792
3828 2 2 7 11 794 1797 1789
3829 2 2 7 11 660 1790 1800
3830 2 2 7 11 658 1792 1799
3831 2 2 7 11 657 1791 1798
3832 2 2 7 11 659 1789 1797
3833 2 2 7 11 727 2367 1744
3834 2 2 7 11 725 2365 1742
3835 2 2 7 11 726 2366 1741
3836 2 2 7 11 728 2368 1743
3837 2 2 7 11 1073 1987 1990
3838 2 2 7 11 1074 1985 1991
3839 2 2 7 11 1076 1986 1989
3840 2 2 7 11 1075 1988 1992
3841 2 2 7 11 1170 1389 2229
3842 2 2 7 11 1392 2232 1171
3843 2 2 7 11 1172 1391 2231
3844 2 2 7 11 1169 1390 2230
3845 2 2 7 11 621 1991 1985
3846 2 2 7 11 623 1992 1988
3847 2 2 7 11 622 1990 1987
3848 2 2 7 11 624 1989 1986
3849 2 2 7 11 669 1417 1877
3850 2 2 7 11 670 1418 1878
3851 2 2 7 11 671 1419 1879
3852 2 2 7 11 672 1420 1880
3853 2 2 7 11 362 1877 1417
3854 2 2 7 11 363 1880 1420
3855 2 2 7 11 361 1878 1418
3856 2 2 7 11 364 1879 1419
3857 2 2 7 11 1056 2181 1361
3858 2 2 7 11 1053 2182 1364
3859 2 2 7 11 1055 2184 1363
3860 2 2 7 11 1054 2183 1362
3861 2 2 7 11 777 1296 2258
3862 2 2 7 11 779 1295 2259
3863 2 2 7 11 780 1294 2260
3864 2 2 7 11 778 1293 2257
3865 2 2 7 11 540 2615 1285
3866 2 2 7 11 537 2614 1287
3867 2 2 7 11 539 2616 1286
3868 2 2 7 11 538 2613 1288
3869 2 2 7 11 268 1920 1404
3870 2 2 7 11 266 1917 1402
3871 2 2 7 11 267 1919 1401
3872 2 2 7 11 265 1918 1403
3873 2 2 7 11 920 2516 1290
3874 2 2 7 11 917 2514 1289
3875 2 2 7 11 919 2513 1291
3876 2 2 7 11 918 2515 1292
3877 2 2 7 11 1335 1795 2303
3878 2 2 7 11 1336 1793 2304
3879 2 2 7 11 1334 1794 2302
3880 2 2 7 11 1333 1796 2301
3881 2 2 7 11 386 1493 1783
3882 2 2 7 11 388 1494 1781
3883 2 2 7 11 385 1495 1782
3884 2 2 7 11 387 1496 1784
3885 2 2 7 11 90 91 2309
3886 2 2 7 11 6 7 2311
3887 2 2 7 11 131 132 2312
3888 2 2 7 11 48 49 2310
3889 2 2 7 11 246 1516 2053
3890 2 2 7 11 247 1515 2054
3891 2 2 7 11 248 1513 2055
3892 2 2 7 11 245 1514 2056
3893 2 2 7 11 757 2054 1515
3894 2 2 7 11 759 2053 1516
3895 2 2 7 11 760 2056 1514
3896 2 2 7 11 758 2055 1513
3897 2 2 7 11 4 5 2670
3898 2 2 7 11 46 47 2672
3899 2 2 7 11 88 89 2671
3900 2 2 7 11 129 130 2669
3901 2 2 7 11 482 1293 2370
3902 2 2 7 11 483 1295 2369
3903 2 2 7 11 481 1296 2371
3904 2 2 7 11 484 1294 2372
3905 2 2 7 11 473 2357 2438
3906 2 2 7 11 475 2360 2439
3907 2 2 7 11 476 2359 2440
3908 2 2 7 11 474 2358 2437
3909 2 2 7 11 1196 2439 2360
3910 2 2 7 11 1193 2438 2357
3911 2 2 7 11 1195 2440 2359
3912 2 2 7 11 1194 2437 2358
3913 2 2 7 11 960 2171 1481
3914 2 2 7 11 959 2172 1483
3915 2 2 7 11 957 2170 1484
3916 2 2 7 11 958 2169 1482
3917 2 2 7 11 588 1645 2112
3918 2 2 7 11 586 1646 2109
3919 2 2 7 11 585 1648 2110
3920 2 2 7 11 587 1647 2111
3921 2 2 7 11 269 1484 2170
3922 2 2 7 11 271 1481 2171
3923 2 2 7 11 272 1483 2172
3924 2 2 7 11 270 1482 2169
3925 2 2 7 11 939 2082 1530
3926 2 2 7 11 938 2081 1531
3927 2 2 7 11 937 2084 1529
3928 2 2 7 11 940 2083 1532
3929 2 2 7 11 700 2044 1370
3930 2 2 7 11 698 2042 1369
3931 2 2 7 11 699 2043 1372
3932 2 2 7 11 697 2041 1371
3933 2 2 7 11 703 1375 2045
3934 2 2 7 11 701 1376 2048
3935 2 2 7 11 704 1374 2046
3936 2 2 7 11 702 1373 2047
3937 2 2 7 11 964 1609 2641
3938 2 2 7 11 963 1611 2642
3939 2 2 7 11 962 1612 2643
3940 2 2 7 11 961 1610 2644
3941 2 2 7 11 554 2641 1609
3942 2 2 7 11 553 2642 1611
3943 2 2 7 11 555 2643 1612
3944 2 2 7 11 556 2644 1610
3945 2 2 7 11 779 2386 1390
3946 2 2 7 11 778 2385 1389
3947 2 2 7 11 777 2388 1391
3948 2 2 7 11 780 2387 1392
3949 2 2 7 11 639 1549 1744
3950 2 2 7 11 640 1550 1743
3951 2 2 7 11 637 1552 1742
3952 2 2 7 11 638 1551 1741
3953 2 2 7 11 163 1604 2275
3954 2 2 7 11 38 1601 2273
3955 2 2 7 11 80 1602 2274
3956 2 2 7 11 122 1603 2276
3957 2 2 7 11 732 2155 1981
3958 2 2 7 11 729 2156 1982
3959 2 2 7 11 730 2153 1984
3960 2 2 7 11 731 2154 1983
3961 2 2 7 11 930 1984 2153
3962 2 2 7 11 932 1981 2155
3963 2 2 7 11 929 1983 2154
3964 2 2 7 11 931 1982 2156
3965 2 2 7 11 797 1677 1719
3966 2 2 7 11 798 1678 1720
3967 2 2 7 11 799 1680 1718
3968 2 2 7 11 800 1679 1717
3969 2 2 7 11 630 1381 2033
3970 2 2 7 11 632 1382 2035
3971 2 2 7 11 629 1383 2034
3972 2 2 7 11 631 1384 2036
3973 2 2 7 11 527 1403 2582
3974 2 2 7 11 528 1402 2581
3975 2 2 7 11 525 1401 2584
3976 2 2 7 11 526 1404 2583
3977 2 2 7 11 650 1686 1782
3978 2 2 7 11 652 1687 1783
3979 2 2 7 11 649 1685 1784
3980 2 2 7 11 651 1688 1781
3981 2 2 7 11 267 1401 2493
3982 2 2 7 11 268 1404 2496
3983 2 2 7 11 265 1403 2494
3984 2 2 7 11 266 1402 2495
3985 2 2 7 11 809 2494 1403
3986 2 2 7 11 812 2496 1404
3987 2 2 7 11 810 2495 1402
3988 2 2 7 11 811 2493 1401
3989 2 2 7 11 101 102 1964
3990 2 2 7 11 17 18 1963
3991 2 2 7 11 142 143 1962
3992 2 2 7 11 59 60 1961
3993 2 2 7 11 1080 2649 1435
3994 2 2 7 11 1079 2650 1434
3995 2 2 7 11 1078 2651 1433
3996 2 2 7 11 1077 2652 1436
3997 2 2 7 11 710 1701 1766
3998 2 2 7 11 709 1702 1767
3999 2 2 7 11 711 1703 1765
4000 2 2 7 11 712 1704 1768
4001 2 2 7 11 96 97 1937
4002 2 2 7 11 54 55 1938
4003 2 2 7 11 137 138 1939
4004 2 2 7 11 12 13 1940
4005 2 2 7 11 728 1768 1704
4006 2 2 7 11 727 1765 1703
4007 2 2 7 11 725 1766 1701
4008 2 2 7 11 726 1767 1702
4009 2 2 7 11 1190 2356 2398
4010 2 2 7 11 1189 2354 2397
4011 2 2 7 11 1191 2353 2399
4012 2 2 7 11 1192 2355 2400
4013 2 2 7 11 914 1477 2013
4014 2 2 7 11 916 1478 2015
4015 2 2 7 11 913 1479 2014
4016 2 2 7 11 915 1480 2016
4017 2 2 7 11 770 1465 2355
4018 2 2 7 11 772 1466 2353
4019 2 2 7 11 771 1468 2356
4020 2 2 7 11 769 1467 2354
4021 2 2 7 11 263 1408 2242
4022 2 2 7 11 261 1406 2241
4023 2 2 7 11 264 1405 2243
4024 2 2 7 11 262 1407 2244
4025 2 2 7 11 472 2398 2356
4026 2 2 7 11 469 2397 2354
4027 2 2 7 11 470 2399 2353
4028 2 2 7 11 471 2400 2355
4029 2 2 7 11 335 2694 1713
4030 2 2 7 11 336 2693 1714
4031 2 2 7 11 333 2695 1716
4032 2 2 7 11 334 2696 1715
4033 2 2 7 11 782 2015 1478
4034 2 2 7 11 781 2014 1479
4035 2 2 7 11 784 2016 1480
4036 2 2 7 11 783 2013 1477
4037 2 2 7 11 299 1442 2086
4038 2 2 7 11 300 1441 2085
4039 2 2 7 11 297 1444 2087
4040 2 2 7 11 298 1443 2088
4041 2 2 7 11 358 2666 1764
4042 2 2 7 11 357 2665 1761
4043 2 2 7 11 359 2668 1762
4044 2 2 7 11 360 2667 1763
4045 2 2 7 11 836 1999 1910
4046 2 2 7 11 835 2000 1909
4047 2 2 7 11 834 1998 1912
4048 2 2 7 11 833 1997 1911
4049 2 2 7 11 293 1390 2386
4050 2 2 7 11 294 1389 2385
4051 2 2 7 11 295 1391 2388
4052 2 2 7 11 296 1392 2387
4053 2 2 7 11 695 1910 1999
4054 2 2 7 11 694 1909 2000
4055 2 2 7 11 693 1911 1997
4056 2 2 7 11 696 1912 1998
4057 2 2 7 11 612 1457 1888
4058 2 2 7 11 611 1459 1886
4059 2 2 7 11 610 1458 1887
4060 2 2 7 11 609 1460 1885
4061 2 2 7 11 370 1862 1965
4062 2 2 7 11 372 1863 1967
4063 2 2 7 11 371 1861 1968
4064 2 2 7 11 369 1864 1966
4065 2 2 7 11 346 1882 1502
4066 2 2 7 11 348 1881 1504
4067 2 2 7 11 345 1884 1501
4068 2 2 7 11 347 1883 1503
4069 2 2 7 11 573 1554 2025
4070 2 2 7 11 576 1553 2026
4071 2 2 7 11 574 1556 2027
4072 2 2 7 11 575 1555 2028
4073 2 2 7 11 567 1733 2629
4074 2 2 7 11 565 1734 2630
4075 2 2 7 11 566 1736 2632
4076 2 2 7 11 568 1735 2631
4077 2 2 7 11 391 2473 1866
4078 2 2 7 11 390 2474 1867
4079 2 2 7 11 389 2475 1865
4080 2 2 7 11 392 2476 1868
4081 2 2 7 11 967 1311 2593
4082 2 2 7 11 968 1309 2595
4083 2 2 7 11 965 1312 2596
4084 2 2 7 11 966 1310 2594
4085 2 2 7 11 576 2026 1584
4086 2 2 7 11 573 2025 1582
4087 2 2 7 11 574 2027 1583
4088 2 2 7 11 575 2028 1581
4089 2 2 7 11 420 2434 1814
4090 2 2 7 11 417 2435 1813
4091 2 2 7 11 418 2436 1815
4092 2 2 7 11 419 2433 1816
4093 2 2 7 11 686 1414 2584
4094 2 2 7 11 685 1413 2583
4095 2 2 7 11 687 1415 2582
4096 2 2 7 11 688 1416 2581
4097 2 2 7 11 959 1814 2434
4098 2 2 7 11 957 1813 2435
4099 2 2 7 11 960 1815 2436
4100 2 2 7 11 958 1816 2433
4101 2 2 7 11 789 2437 2165
4102 2 2 7 11 790 2440 2168
4103 2 2 7 11 792 2438 2167
4104 2 2 7 11 791 2439 2166
4105 2 2 7 11 763 2023 1777
4106 2 2 7 11 764 2024 1778
4107 2 2 7 11 762 2021 1779
4108 2 2 7 11 761 2022 1780
4109 2 2 7 11 800 1777 2023
4110 2 2 7 11 797 1779 2021
4111 2 2 7 11 799 1778 2024
4112 2 2 7 11 798 1780 2022
4113 2 2 7 11 263 2621 1315
4114 2 2 7 11 264 2624 1313
4115 2 2 7 11 261 2622 1316
4116 2 2 7 11 262 2623 1314
4117 2 2 7 11 372 1967 1790
4118 2 2 7 11 370 1965 1789
4119 2 2 7 11 371 1968 1792
4120 2 2 7 11 369 1966 1791
4121 2 2 7 11 620 1718 1680
4122 2 2 7 11 619 1717 1679
4123 2 2 7 11 618 1719 1677
4124 2 2 7 11 617 1720 1678
4125 2 2 7 11 605 1334 2270
4126 2 2 7 11 607 1333 2269
4127 2 2 7 11 608 1336 2271
4128 2 2 7 11 606 1335 2272
4129 2 2 7 11 796 1790 1967
4130 2 2 7 11 795 1792 1968
4131 2 2 7 11 793 1791 1966
4132 2 2 7 11 794 1789 1965
4133 2 2 7 11 268 2496 1317
4134 2 2 7 11 267 2493 1318
4135 2 2 7 11 265 2494 1319
4136 2 2 7 11 266 2495 1320
4137 2 2 7 11 130 1505 2669
4138 2 2 7 11 89 1508 2671
4139 2 2 7 11 5 1507 2670
4140 2 2 7 11 47 1506 2672
4141 2 2 7 11 512 2605 1319
4142 2 2 7 11 511 2606 1320
4143 2 2 7 11 509 2607 1317
4144 2 2 7 11 510 2608 1318
4145 2 2 7 11 861 1709 2609
4146 2 2 7 11 864 1712 2611
4147 2 2 7 11 862 1710 2610
4148 2 2 7 11 863 1711 2612
4149 2 2 7 11 288 1378 2127
4150 2 2 7 11 285 1377 2125
4151 2 2 7 11 287 1379 2126
4152 2 2 7 11 286 1380 2128
4153 2 2 7 11 75 76 2342
4154 2 2 7 11 117 118 2341
4155 2 2 7 11 158 159 2343
4156 2 2 7 11 33 34 2344
4157 2 2 7 11 773 2357 1524
4158 2 2 7 11 776 2359 1523
4159 2 2 7 11 774 2360 1522
4160 2 2 7 11 775 2358 1521
4161 2 2 7 11 495 1339 2313
4162 2 2 7 11 494 1337 2314
4163 2 2 7 11 496 1338 2315
4164 2 2 7 11 493 1340 2316
4165 2 2 7 11 1368 1872 2641
4166 2 2 7 11 1367 1871 2642
4167 2 2 7 11 1366 1870 2644
4168 2 2 7 11 1365 1869 2643
4169 2 2 7 11 506 2441 1329
4170 2 2 7 11 505 2442 1330
4171 2 2 7 11 508 2444 1332
4172 2 2 7 11 507 2443 1331
4173 2 2 7 11 700 1370 2541
4174 2 2 7 11 698 1369 2542
4175 2 2 7 11 697 1371 2543
4176 2 2 7 11 699 1372 2544
4177 2 2 7 11 704 2534 1374
4178 2 2 7 11 703 2535 1375
4179 2 2 7 11 702 2536 1373
4180 2 2 7 11 701 2533 1376
4181 2 2 7 11 831 2412 2073
4182 2 2 7 11 830 2410 2076
4183 2 2 7 11 829 2409 2075
4184 2 2 7 11 832 2411 2074
4185 2 2 7 11 1068 2073 2412
4186 2 2 7 11 1067 2074 2411
4187 2 2 7 11 1066 2076 2410
4188 2 2 7 11 1065 2075 2409
4189 2 2 7 11 366 2337 2149
4190 2 2 7 11 365 2338 2150
4191 2 2 7 11 368 2340 2152
4192 2 2 7 11 367 2339 2151
4193 2 2 7 11 256 1533 1857
4194 2 2 7 11 255 1534 1859
4195 2 2 7 11 254 1535 1858
4196 2 2 7 11 253 1536 1860
4197 2 2 7 11 2144 1175 2148
4198 2 2 7 11 2143 1176 2147
4199 2 2 7 11 2142 1174 2145
4200 2 2 7 11 2141 1173 2146
4201 2 2 7 11 403 2517 1558
4202 2 2 7 11 401 2518 1559
4203 2 2 7 11 402 2520 1557
4204 2 2 7 11 404 2519 1560
4205 2 2 7 11 2144 2148 689
4206 2 2 7 11 2143 2147 692
4207 2 2 7 11 2142 2145 691
4208 2 2 7 11 2141 2146 690
4209 2 2 7 11 899 1558 2517
4210 2 2 7 11 898 1559 2518
4211 2 2 7 11 897 1557 2520
4212 2 2 7 11 900 1560 2519
4213 2 2 7 11 3 4 2107
4214 2 2 7 11 128 129 2106
4215 2 2 7 11 45 46 2108
4216 2 2 7 11 87 88 2105
4217 2 2 7 11 712 1897 2087
4218 2 2 7 11 711 1900 2088
4219 2 2 7 11 710 1898 2085
4220 2 2 7 11 709 1899 2086
4221 2 2 7 11 752 2373 1351
4222 2 2 7 11 750 2375 1349
4223 2 2 7 11 749 2376 1350
4224 2 2 7 11 751 2374 1352
4225 2 2 7 11 543 1514 1922
4226 2 2 7 11 542 1516 1923
4227 2 2 7 11 541 1515 1924
4228 2 2 7 11 544 1513 1921
4229 2 2 7 11 787 1784 1685
4230 2 2 7 11 788 1781 1688
4231 2 2 7 11 785 1782 1686
4232 2 2 7 11 786 1783 1687
4233 2 2 7 11 340 1873 1529
4234 2 2 7 11 337 1875 1530
4235 2 2 7 11 338 1876 1531
4236 2 2 7 11 339 1874 1532
4237 2 2 7 11 1129 2706 1989
4238 2 2 7 11 1131 2708 1992
4239 2 2 7 11 1132 2707 1990
4240 2 2 7 11 1130 2705 1991
4241 2 2 7 11 1039 1428 2444
4242 2 2 7 11 1040 1426 2441
4243 2 2 7 11 1038 1427 2442
4244 2 2 7 11 1037 1425 2443
4245 2 2 7 11 557 2224 1492
4246 2 2 7 11 560 2223 1491
4247 2 2 7 11 558 2222 1490
4248 2 2 7 11 559 2221 1489
4249 2 2 7 11 293 2230 1390
4250 2 2 7 11 294 2229 1389
4251 2 2 7 11 295 2231 1391
4252 2 2 7 11 296 2232 1392
4253 2 2 7 11 590 2306 1854
4254 2 2 7 11 591 2307 1855
4255 2 2 7 11 589 2305 1853
4256 2 2 7 11 592 2308 1856
4257 2 2 7 11 373 1827 2075
4258 2 2 7 11 376 1826 2073
4259 2 2 7 11 374 1825 2076
4260 2 2 7 11 375 1828 2074
4261 2 2 7 11 829 2075 1827
4262 2 2 7 11 831 2073 1826
4263 2 2 7 11 830 2076 1825
4264 2 2 7 11 832 2074 1828
4265 2 2 7 11 654 2037 1776
4266 2 2 7 11 653 2038 1775
4267 2 2 7 11 655 2039 1774
4268 2 2 7 11 656 2040 1773
4269 2 2 7 11 555 1365 2643
4270 2 2 7 11 553 1367 2642
4271 2 2 7 11 556 1366 2644
4272 2 2 7 11 554 1368 2641
4273 2 2 7 11 706 1681 2400
4274 2 2 7 11 708 1683 2399
4275 2 2 7 11 705 1684 2397
4276 2 2 7 11 707 1682 2398
4277 2 2 7 11 223 2133 224
4278 2 2 7 11 208 2134 209
4279 2 2 7 11 192 2136 193
4280 2 2 7 11 176 2135 177
4281 2 2 7 11 231 2138 232
4282 2 2 7 11 216 2137 217
4283 2 2 7 11 200 2139 201
4284 2 2 7 11 184 2140 185
4285 2 2 7 11 603 1578 1901
4286 2 2 7 11 601 1577 1904
4287 2 2 7 11 602 1580 1902
4288 2 2 7 11 604 1579 1903
4289 2 2 7 11 581 2226 1449
4290 2 2 7 11 582 2225 1450
4291 2 2 7 11 583 2228 1451
4292 2 2 7 11 584 2227 1452
4293 2 2 7 11 807 1541 2352
4294 2 2 7 11 808 1542 2351
4295 2 2 7 11 805 1543 2350
4296 2 2 7 11 806 1544 2349
4297 2 2 7 11 401 2352 1541
4298 2 2 7 11 402 2351 1542
4299 2 2 7 11 403 2349 1544
4300 2 2 7 11 404 2350 1543
4301 2 2 7 11 588 1974 1645
4302 2 2 7 11 587 1976 1647
4303 2 2 7 11 585 1973 1648
4304 2 2 7 11 586 1975 1646
4305 2 2 7 11 682 2244 1407
4306 2 2 7 11 684 2242 1408
4307 2 2 7 11 683 2241 1406
4308 2 2 7 11 681 2243 1405
4309 2 2 7 11 530 2267 1488
4310 2 2 7 11 529 2265 1485
4311 2 2 7 11 531 2266 1486
4312 2 2 7 11 532 2268 1487
4313 2 2 7 11 705 1805 1809
4314 2 2 7 11 707 1808 1811
4315 2 2 7 11 706 1807 1812
4316 2 2 7 11 708 1806 1810
4317 2 2 7 11 950 2236 1578
4318 2 2 7 11 951 2234 1579
4319 2 2 7 11 952 2233 1577
4320 2 2 7 11 949 2235 1580
4321 2 2 7 11 765 1812 1807
4322 2 2 7 11 766 1809 1805
4323 2 2 7 11 768 1810 1806
4324 2 2 7 11 767 1811 1808
4325 2 2 7 11 582 1663 2094
4326 2 2 7 11 581 1661 2095
4327 2 2 7 11 583 1664 2096
4328 2 2 7 11 584 1662 2093
4329 2 2 7 11 641 2607 1564
4330 2 2 7 11 644 2605 1562
4331 2 2 7 11 642 2606 1561
4332 2 2 7 11 643 2608 1563
4333 2 2 7 11 229 2166 230
4334 2 2 7 11 182 2165 183
4335 2 2 7 11 198 2167 199
4336 2 2 7 11 214 2168 215
4337 2 2 7 11 965 2470 1749
4338 2 2 7 11 967 2471 1751
4339 2 2 7 11 968 2472 1750
4340 2 2 7 11 966 2469 1752
4341 2 2 7 11 332 2141 1525
4342 2 2 7 11 331 2142 1526
4343 2 2 7 11 329 2143 1528
4344 2 2 7 11 330 2144 1527
4345 2 2 7 11 694 1482 2575
4346 2 2 7 11 696 1483 2574
4347 2 2 7 11 693 1481 2573
4348 2 2 7 11 695 1484 2576
4349 2 2 7 11 534 2277 1417
4350 2 2 7 11 533 2279 1418
4351 2 2 7 11 536 2280 1420
4352 2 2 7 11 535 2278 1419
4353 2 2 7 11 1292 2515 1988
4354 2 2 7 11 1290 2516 1986
4355 2 2 7 11 1289 2514 1985
4356 2 2 7 11 1291 2513 1987
4357 2 2 7 11 379 2218 1620
4358 2 2 7 11 378 2219 1619
4359 2 2 7 11 377 2220 1618
4360 2 2 7 11 380 2217 1617
4361 2 2 7 11 208 1569 2134
4362 2 2 7 11 223 1570 2133
4363 2 2 7 11 176 1571 2135
4364 2 2 7 11 192 1572 2136
4365 2 2 7 11 217 2137 1573
4366 2 2 7 11 232 2138 1575
4367 2 2 7 11 201 2139 1574
4368 2 2 7 11 185 2140 1576
4369 2 2 7 11 650 2446 1605
4370 2 2 7 11 651 2445 1607
4371 2 2 7 11 649 2447 1606
4372 2 2 7 11 652 2448 1608
4373 2 2 7 11 771 2134 1569
4374 2 2 7 11 772 2135 1571
4375 2 2 7 11 769 2133 1570
4376 2 2 7 11 770 2136 1572
4377 2 2 7 11 776 1573 2137
4378 2 2 7 11 774 1575 2138
4379 2 2 7 11 773 1574 2139
4380 2 2 7 11 775 1576 2140
4381 2 2 7 11 1501 2597 1738
4382 2 2 7 11 1503 2599 1739
4383 2 2 7 11 1502 2598 1740
4384 2 2 7 11 1504 2600 1737
4385 2 2 7 11 753 2066 2213
4386 2 2 7 11 755 2065 2214
4387 2 2 7 11 754 2067 2215
4388 2 2 7 11 756 2068 2216
4389 2 2 7 11 974 2215 2067
4390 2 2 7 11 975 2213 2066
4391 2 2 7 11 976 2216 2068
4392 2 2 7 11 973 2214 2065
4393 2 2 7 11 706 2400 1807
4394 2 2 7 11 708 2399 1806
4395 2 2 7 11 705 2397 1805
4396 2 2 7 11 707 2398 1808
4397 2 2 7 11 353 1612 1931
4398 2 2 7 11 354 1610 1929
4399 2 2 7 11 356 1609 1932
4400 2 2 7 11 355 1611 1930
4401 2 2 7 11 451 2308 1475
4402 2 2 7 11 450 2305 1473
4403 2 2 7 11 449 2307 1474
4404 2 2 7 11 452 2306 1476
4405 2 2 7 11 406 2004 2639
4406 2 2 7 11 405 2003 2640
4407 2 2 7 11 407 2001 2637
4408 2 2 7 11 408 2002 2638
4409 2 2 7 11 121 122 2276
4410 2 2 7 11 162 163 2275
4411 2 2 7 11 37 38 2273
4412 2 2 7 11 79 80 2274
4413 2 2 7 11 697 1837 2662
4414 2 2 7 11 699 1840 2663
4415 2 2 7 11 698 1839 2664
4416 2 2 7 11 700 1838 2661
4417 2 2 7 11 701 2665 1841
4418 2 2 7 11 702 2667 1844
4419 2 2 7 11 703 2666 1843
4420 2 2 7 11 704 2668 1842
4421 2 2 7 11 420 2594 2434
4422 2 2 7 11 417 2593 2435
4423 2 2 7 11 419 2595 2433
4424 2 2 7 11 418 2596 2436
4425 2 2 7 11 15 16 2294
4426 2 2 7 11 140 141 2296
4427 2 2 7 11 57 58 2293
4428 2 2 7 11 99 100 2295
4429 2 2 7 11 754 1485 2265
4430 2 2 7 11 755 1488 2267
4431 2 2 7 11 753 1486 2266
4432 2 2 7 11 756 1487 2268
4433 2 2 7 11 1286 2350 1560
4434 2 2 7 11 1287 2351 1557
4435 2 2 7 11 1285 2349 1558
4436 2 2 7 11 1288 2352 1559
4437 2 2 7 11 716 2479 1628
4438 2 2 7 11 713 2480 1627
4439 2 2 7 11 715 2478 1626
4440 2 2 7 11 714 2477 1625
4441 2 2 7 11 979 2054 2617
4442 2 2 7 11 980 2056 2619
4443 2 2 7 11 978 2055 2618
4444 2 2 7 11 977 2053 2620
4445 2 2 7 11 147 148 2500
4446 2 2 7 11 106 107 2498
4447 2 2 7 11 64 65 2497
4448 2 2 7 11 22 23 2499
4449 2 2 7 11 717 2652 1951
4450 2 2 7 11 718 2649 1952
4451 2 2 7 11 720 2650 1949
4452 2 2 7 11 719 2651 1950
4453 2 2 7 11 768 1455 2458
4454 2 2 7 11 766 1454 2459
4455 2 2 7 11 765 1453 2457
4456 2 2 7 11 767 1456 2460
4457 2 2 7 11 526 2583 1413
4458 2 2 7 11 528 2581 1416
4459 2 2 7 11 525 2584 1414
4460 2 2 7 11 527 2582 1415
4461 2 2 7 11 504 2234 2061
4462 2 2 7 11 502 2235 2064
4463 2 2 7 11 501 2233 2062
4464 2 2 7 11 503 2236 2063
4465 2 2 7 11 949 2064 2235
4466 2 2 7 11 951 2061 2234
4467 2 2 7 11 952 2062 2233
4468 2 2 7 11 950 2063 2236
4469 2 2 7 11 840 1689 2125
4470 2 2 7 11 839 1691 2128
4471 2 2 7 11 838 1692 2126
4472 2 2 7 11 837 1690 2127
4473 2 2 7 11 288 2127 1690
4474 2 2 7 11 287 2126 1692
4475 2 2 7 11 285 2125 1689
4476 2 2 7 11 286 2128 1691
4477 2 2 7 11 273 1685 2049
4478 2 2 7 11 274 1688 2052
4479 2 2 7 11 276 1687 2050
4480 2 2 7 11 275 1686 2051
4481 2 2 7 11 28 29 2413
4482 2 2 7 11 112 113 2414
4483 2 2 7 11 70 71 2416
4484 2 2 7 11 153 154 2415
4485 2 2 7 11 629 2034 1827
4486 2 2 7 11 630 2033 1825
4487 2 2 7 11 631 2036 1828
4488 2 2 7 11 632 2035 1826
4489 2 2 7 11 1602 2630 2274
4490 2 2 7 11 1601 2629 2273
4491 2 2 7 11 1603 2631 2276
4492 2 2 7 11 1604 2632 2275
4493 2 2 7 11 829 1827 2034
4494 2 2 7 11 830 1825 2033
4495 2 2 7 11 831 1826 2035
4496 2 2 7 11 832 1828 2036
4497 2 2 7 11 543 2465 1425
4498 2 2 7 11 544 2466 1427
4499 2 2 7 11 542 2467 1426
4500 2 2 7 11 541 2468 1428
4501 2 2 7 11 2118 2213 975
4502 2 2 7 11 2120 2216 976
4503 2 2 7 11 2119 2214 973
4504 2 2 7 11 2117 2215 974
4505 2 2 7 11 289 2213 2118
4506 2 2 7 11 292 2216 2120
4507 2 2 7 11 290 2215 2117
4508 2 2 7 11 291 2214 2119
4509 2 2 7 11 529 1469 2265
4510 2 2 7 11 530 1470 2267
4511 2 2 7 11 532 1472 2268
4512 2 2 7 11 531 1471 2266
4513 2 2 7 11 498 1709 2450
4514 2 2 7 11 497 1710 2449
4515 2 2 7 11 499 1711 2451
4516 2 2 7 11 500 1712 2452
4517 2 2 7 11 861 2450 1709
4518 2 2 7 11 863 2451 1711
4519 2 2 7 11 862 2449 1710
4520 2 2 7 11 864 2452 1712
4521 2 2 7 11 761 2332 2189
4522 2 2 7 11 763 2330 2190
4523 2 2 7 11 762 2331 2192
4524 2 2 7 11 764 2329 2191
4525 2 2 7 11 661 1706 1970
4526 2 2 7 11 664 1707 1971
4527 2 2 7 11 662 1708 1969
4528 2 2 7 11 663 1705 1972
4529 2 2 7 11 72 73 2526
4530 2 2 7 11 30 31 2527
4531 2 2 7 11 155 156 2525
4532 2 2 7 11 114 115 2528
4533 2 2 7 11 742 2099 1963
4534 2 2 7 11 744 2100 1964
4535 2 2 7 11 743 2097 1961
4536 2 2 7 11 741 2098 1962
4537 2 2 7 11 384 1585 2684
4538 2 2 7 11 383 1586 2681
4539 2 2 7 11 381 1587 2683
4540 2 2 7 11 382 1588 2682
4541 2 2 7 11 203 2557 204
4542 2 2 7 11 218 2559 219
4543 2 2 7 11 171 2558 172
4544 2 2 7 11 187 2560 188
4545 2 2 7 11 205 2561 206
4546 2 2 7 11 173 2562 174
4547 2 2 7 11 220 2564 221
4548 2 2 7 11 189 2563 190
4549 2 2 7 11 801 2049 1606
4550 2 2 7 11 803 2051 1605
4551 2 2 7 11 804 2050 1608
4552 2 2 7 11 802 2052 1607
4553 2 2 7 11 893 2681 1586
4554 2 2 7 11 894 2684 1585
4555 2 2 7 11 895 2683 1587
4556 2 2 7 11 896 2682 1588
4557 2 2 7 11 558 1631 2222
4558 2 2 7 11 557 1632 2224
4559 2 2 7 11 560 1629 2223
4560 2 2 7 11 559 1630 2221
4561 2 2 7 11 995 2429 1441
4562 2 2 7 11 993 2431 1443
4563 2 2 7 11 996 2432 1442
4564 2 2 7 11 994 2430 1444
4565 2 2 7 11 377 1787 2245
4566 2 2 7 11 379 1786 2248
4567 2 2 7 11 378 1788 2246
4568 2 2 7 11 380 1785 2247
4569 2 2 7 11 999 1446 2427
4570 2 2 7 11 997 1447 2425
4571 2 2 7 11 1000 1448 2428
4572 2 2 7 11 998 1445 2426
4573 2 2 7 11 910 1470 2323
4574 2 2 7 11 912 1472 2322
4575 2 2 7 11 909 1471 2324
4576 2 2 7 11 911 1469 2321
4577 2 2 7 11 582 1450 2601
4578 2 2 7 11 581 1449 2604
4579 2 2 7 11 583 1451 2602
4580 2 2 7 11 584 1452 2603
4581 2 2 7 11 845 2588 2566
4582 2 2 7 11 848 2587 2568
4583 2 2 7 11 847 2585 2565
4584 2 2 7 11 846 2586 2567
4585 2 2 7 11 269 2424 2015
4586 2 2 7 11 271 2423 2013
4587 2 2 7 11 270 2421 2014
4588 2 2 7 11 272 2422 2016
4589 2 2 7 11 471 2710 1453
4590 2 2 7 11 469 2712 1454
4591 2 2 7 11 470 2709 1455
4592 2 2 7 11 472 2711 1456
4593 2 2 7 11 2112 1645 2689
4594 2 2 7 11 2109 1646 2691
4595 2 2 7 11 2110 1648 2690
4596 2 2 7 11 2111 1647 2692
4597 2 2 7 11 813 1453 2710
4598 2 2 7 11 816 1456 2711
4599 2 2 7 11 814 1454 2712
4600 2 2 7 11 815 1455 2709
4601 2 2 7 11 451 2703 2308
4602 2 2 7 11 450 2704 2305
4603 2 2 7 11 452 2701 2306
4604 2 2 7 11 449 2702 2307
4605 2 2 7 11 1267 2566 2588
4606 2 2 7 11 1268 2568 2587
4607 2 2 7 11 1265 2567 2586
4608 2 2 7 11 1266 2565 2585
4609 2 2 7 11 715 1626 2491
4610 2 2 7 11 714 1625 2490
4611 2 2 7 11 716 1628 2492
4612 2 2 7 11 713 1627 2489
4613 2 2 7 11 424 2617 1449
4614 2 2 7 11 422 2620 1450
4615 2 2 7 11 423 2619 1451
4616 2 2 7 11 421 2618 1452
4617 2 2 7 11 914 2013 2423
4618 2 2 7 11 913 2014 2421
4619 2 2 7 11 916 2015 2424
4620 2 2 7 11 915 2016 2422
4621 2 2 7 11 757 2604 1449
4622 2 2 7 11 760 2602 1451
4623 2 2 7 11 758 2603 1452
4624 2 2 7 11 759 2601 1450
4625 2 2 7 11 448 1773 2393
4626 2 2 7 11 445 1775 2395
4627 2 2 7 11 446 1776 2396
4628 2 2 7 11 447 1774 2394
4629 2 2 7 11 420 1457 2469
4630 2 2 7 11 419 1458 2472
4631 2 2 7 11 418 1460 2470
4632 2 2 7 11 417 1459 2471
4633 2 2 7 11 723 2309 1700
4634 2 2 7 11 724 2310 1699
4635 2 2 7 11 722 2311 1697
4636 2 2 7 11 721 2312 1698
4637 2 2 7 11 853 2394 1774
4638 2 2 7 11 855 2395 1775
4639 2 2 7 11 856 2396 1776
4640 2 2 7 11 854 2393 1773
4641 2 2 7 11 534 1517 2277
4642 2 2 7 11 535 1519 2278
4643 2 2 7 11 536 1520 2280
4644 2 2 7 11 533 1518 2279
4645 2 2 7 11 828 1946 1951
4646 2 2 7 11 826 1947 1949
4647 2 2 7 11 827 1948 1950
4648 2 2 7 11 825 1945 1952
4649 2 2 7 11 717 1951 1946
4650 2 2 7 11 718 1952 1945
4651 2 2 7 11 720 1949 1947
4652 2 2 7 11 719 1950 1948
4653 2 2 7 11 852 2277 1517
4654 2 2 7 11 849 2278 1519
4655 2 2 7 11 851 2280 1520
4656 2 2 7 11 850 2279 1518
4657 2 2 7 11 738 2089 1655
4658 2 2 7 11 737 2090 1654
4659 2 2 7 11 739 2092 1656
4660 2 2 7 11 740 2091 1653
4661 2 2 7 11 452 1476 2571
4662 2 2 7 11 450 1473 2569
4663 2 2 7 11 451 1475 2572
4664 2 2 7 11 449 1474 2570
4665 2 2 7 11 379 2023 2218
4666 2 2 7 11 378 2021 2219
4667 2 2 7 11 377 2022 2220
4668 2 2 7 11 380 2024 2217
4669 2 2 7 11 99 2295 1546
4670 2 2 7 11 57 2293 1545
4671 2 2 7 11 140 2296 1548
4672 2 2 7 11 15 2294 1547
4673 2 2 7 11 397 1606 2447
4674 2 2 7 11 399 1607 2445
4675 2 2 7 11 400 1608 2448
4676 2 2 7 11 398 1605 2446
4677 2 2 7 11 813 2710 1465
4678 2 2 7 11 814 2712 1467
4679 2 2 7 11 815 2709 1466
4680 2 2 7 11 816 2711 1468
4681 2 2 7 11 271 2573 1481
4682 2 2 7 11 269 2576 1484
4683 2 2 7 11 272 2574 1483
4684 2 2 7 11 270 2575 1482
4685 2 2 7 11 730 2282 1667
4686 2 2 7 11 732 2281 1665
4687 2 2 7 11 731 2283 1666
4688 2 2 7 11 729 2284 1668
4689 2 2 7 11 364 2301 1796
4690 2 2 7 11 363 2302 1794
4691 2 2 7 11 362 2303 1795
4692 2 2 7 11 361 2304 1793
4693 2 2 7 11 410 1644 2252
4694 2 2 7 11 411 1642 2250
4695 2 2 7 11 412 1641 2249
4696 2 2 7 11 409 1643 2251
4697 2 2 7 11 703 1571 2535
4698 2 2 7 11 702 1569 2536
4699 2 2 7 11 704 1572 2534
4700 2 2 7 11 701 1570 2533
4701 2 2 7 11 697 2543 1575
4702 2 2 7 11 698 2542 1576
4703 2 2 7 11 699 2544 1573
4704 2 2 7 11 700 2541 1574
4705 2 2 7 11 855 1775 2038
4706 2 2 7 11 856 1776 2037
4707 2 2 7 11 853 1774 2039
4708 2 2 7 11 854 1773 2040
4709 2 2 7 11 950 2297 2063
4710 2 2 7 11 951 2300 2061
4711 2 2 7 11 949 2299 2064
4712 2 2 7 11 952 2298 2062
4713 2 2 7 11 396 1655 2089
4714 2 2 7 11 394 1654 2090
4715 2 2 7 11 393 1653 2091
4716 2 2 7 11 395 1656 2092
4717 2 2 7 11 930 2555 1984
4718 2 2 7 11 931 2553 1982
4719 2 2 7 11 929 2556 1983
4720 2 2 7 11 932 2554 1981
4721 2 2 7 11 1403 1918 2582
4722 2 2 7 11 1402 1917 2581
4723 2 2 7 11 1401 1919 2584
4724 2 2 7 11 1404 1920 2583
4725 2 2 7 11 1104 2308 2703
4726 2 2 7 11 1101 2306 2701
4727 2 2 7 11 1103 2305 2704
4728 2 2 7 11 1102 2307 2702
4729 2 2 7 11 433 1509 2419
4730 2 2 7 11 434 1510 2418
4731 2 2 7 11 435 1511 2417
4732 2 2 7 11 436 1512 2420
4733 2 2 7 11 752 1756 2373
4734 2 2 7 11 751 1753 2374
4735 2 2 7 11 750 1755 2375
4736 2 2 7 11 749 1754 2376
4737 2 2 7 11 925 2189 2332
4738 2 2 7 11 927 2192 2331
4739 2 2 7 11 926 2190 2330
4740 2 2 7 11 928 2191 2329
4741 2 2 7 11 464 2201 1590
4742 2 2 7 11 463 2202 1589
4743 2 2 7 11 461 2203 1592
4744 2 2 7 11 462 2204 1591
4745 2 2 7 11 868 2548 2481
4746 2 2 7 11 865 2547 2483
4747 2 2 7 11 866 2545 2484
4748 2 2 7 11 867 2546 2482
4749 2 2 7 11 1220 2481 2548
4750 2 2 7 11 1218 2483 2547
4751 2 2 7 11 1219 2484 2545
4752 2 2 7 11 1217 2482 2546
4753 2 2 7 11 869 2327 1593
4754 2 2 7 11 870 2328 1595
4755 2 2 7 11 872 2326 1596
4756 2 2 7 11 871 2325 1594
4757 2 2 7 11 1019 1617 2217
4758 2 2 7 11 1020 1619 2219
4759 2 2 7 11 1018 1618 2220
4760 2 2 7 11 1017 1620 2218
4761 2 2 7 11 495 2313 1670
4762 2 2 7 11 496 2315 1671
4763 2 2 7 11 494 2314 1669
4764 2 2 7 11 493 2316 1672
4765 2 2 7 11 344 2655 1539
4766 2 2 7 11 343 2654 1540
4767 2 2 7 11 341 2653 1538
4768 2 2 7 11 342 2656 1537
4769 2 2 7 11 804 1670 2313
4770 2 2 7 11 803 1671 2315
4771 2 2 7 11 801 1669 2314
4772 2 2 7 11 802 1672 2316
4773 2 2 7 11 545 2597 1501
4774 2 2 7 11 546 2599 1503
4775 2 2 7 11 547 2600 1504
4776 2 2 7 11 548 2598 1502
4777 2 2 7 11 797 1719 2377
4778 2 2 7 11 798 1720 2379
4779 2 2 7 11 800 1717 2378
4780 2 2 7 11 799 1718 2380
4781 2 2 7 11 551 2521 1500
4782 2 2 7 11 550 2524 1497
4783 2 2 7 11 549 2522 1498
4784 2 2 7 11 552 2523 1499
4785 2 2 7 11 354 1929 2664
4786 2 2 7 11 355 1930 2662
4787 2 2 7 11 356 1932 2663
4788 2 2 7 11 353 1931 2661
4789 2 2 7 11 497 2449 1925
4790 2 2 7 11 499 2451 1926
4791 2 2 7 11 498 2450 1927
4792 2 2 7 11 500 2452 1928
4793 2 2 7 11 306 2545 1705
4794 2 2 7 11 308 2546 1706
4795 2 2 7 11 307 2548 1707
4796 2 2 7 11 305 2547 1708
4797 2 2 7 11 1024 1925 2449
4798 2 2 7 11 1021 1928 2452
4799 2 2 7 11 1023 1927 2450
4800 2 2 7 11 1022 1926 2451
4801 2 2 7 11 867 1706 2546
4802 2 2 7 11 866 1705 2545
4803 2 2 7 11 868 1707 2548
4804 2 2 7 11 865 1708 2547
4805 2 2 7 11 157 2292 1566
4806 2 2 7 11 116 2291 1565
4807 2 2 7 11 74 2289 1568
4808 2 2 7 11 32 2290 1567
4809 2 2 7 11 583 1745 2228
4810 2 2 7 11 581 1746 2226
4811 2 2 7 11 584 1748 2227
4812 2 2 7 11 582 1747 2225
4813 2 2 7 11 448 2508 1773
4814 2 2 7 11 447 2505 1774
4815 2 2 7 11 445 2506 1775
4816 2 2 7 11 446 2507 1776
4817 2 2 7 11 716 2078 2479
4818 2 2 7 11 713 2077 2480
4819 2 2 7 11 714 2079 2477
4820 2 2 7 11 715 2080 2478
4821 2 2 7 11 639 2340 1549
4822 2 2 7 11 637 2338 1552
4823 2 2 7 11 638 2337 1551
4824 2 2 7 11 640 2339 1550
4825 2 2 7 11 946 2406 2012
4826 2 2 7 11 948 2408 2010
4827 2 2 7 11 947 2407 2009
4828 2 2 7 11 945 2405 2011
4829 2 2 7 11 686 2584 1919
4830 2 2 7 11 687 2582 1918
4831 2 2 7 11 688 2581 1917
4832 2 2 7 11 685 2583 1920
4833 2 2 7 11 444 1637 2181
4834 2 2 7 11 442 1638 2182
4835 2 2 7 11 441 1640 2184
4836 2 2 7 11 443 1639 2183
4837 2 2 7 11 708 2286 1683
4838 2 2 7 11 706 2287 1681
4839 2 2 7 11 705 2285 1684
4840 2 2 7 11 707 2288 1682
4841 2 2 7 11 403 1558 2349
4842 2 2 7 11 402 1557 2351
4843 2 2 7 11 401 1559 2352
4844 2 2 7 11 404 1560 2350
4845 2 2 7 11 401 2530 1953
4846 2 2 7 11 402 2529 1954
4847 2 2 7 11 403 2532 1956
4848 2 2 7 11 404 2531 1955
4849 2 2 7 11 752 2405 1756
4850 2 2 7 11 749 2407 1754
4851 2 2 7 11 750 2408 1755
4852 2 2 7 11 751 2406 1753
4853 2 2 7 11 825 2161 1945
4854 2 2 7 11 826 2162 1947
4855 2 2 7 11 827 2163 1948
4856 2 2 7 11 828 2164 1946
4857 2 2 7 11 407 1945 2161
4858 2 2 7 11 405 1947 2162
4859 2 2 7 11 406 1948 2163
4860 2 2 7 11 408 1946 2164
4861 2 2 7 11 822 2512 1665
4862 2 2 7 11 824 2511 1666
4863 2 2 7 11 821 2509 1668
4864 2 2 7 11 823 2510 1667
4865 2 2 7 11 1022 2164 2462
4866 2 2 7 11 1023 2162 2463
4867 2 2 7 11 1024 2163 2464
4868 2 2 7 11 1021 2161 2461
4869 2 2 7 11 828 2462 2164
4870 2 2 7 11 826 2463 2162
4871 2 2 7 11 827 2464 2163
4872 2 2 7 11 825 2461 2161
4873 2 2 7 11 908 2221 1630
4874 2 2 7 11 905 2223 1629
4875 2 2 7 11 907 2222 1631
4876 2 2 7 11 906 2224 1632
4877 2 2 7 11 898 2669 1505
4878 2 2 7 11 897 2670 1507
4879 2 2 7 11 900 2671 1508
4880 2 2 7 11 899 2672 1506
4881 2 2 7 11 764 1778 2329
4882 2 2 7 11 763 1777 2330
4883 2 2 7 11 762 1779 2331
4884 2 2 7 11 761 1780 2332
4885 2 2 7 11 745 1538 2653
4886 2 2 7 11 748 1540 2654
4887 2 2 7 11 746 1537 2656
4888 2 2 7 11 747 1539 2655
4889 2 2 7 11 810 2149 2390
4890 2 2 7 11 809 2150 2389
4891 2 2 7 11 812 2152 2392
4892 2 2 7 11 811 2151 2391
4893 2 2 7 11 302 1520 2678
4894 2 2 7 11 303 1518 2677
4895 2 2 7 11 301 1519 2679
4896 2 2 7 11 304 1517 2680
4897 2 2 7 11 983 2391 2151
4898 2 2 7 11 982 2389 2150
4899 2 2 7 11 981 2390 2149
4900 2 2 7 11 984 2392 2152
4901 2 2 7 11 734 2249 1641
4902 2 2 7 11 736 2251 1643
4903 2 2 7 11 735 2252 1644
4904 2 2 7 11 733 2250 1642
4905 2 2 7 11 241 2377 1719
4906 2 2 7 11 244 2379 1720
4907 2 2 7 11 243 2378 1717
4908 2 2 7 11 242 2380 1718
4909 2 2 7 11 738 1655 2256
4910 2 2 7 11 737 1654 2253
4911 2 2 7 11 739 1656 2255
4912 2 2 7 11 740 1653 2254
4913 2 2 7 11 723 1700 2638
4914 2 2 7 11 724 1699 2637
4915 2 2 7 11 721 1698 2640
4916 2 2 7 11 722 1697 2639
4917 2 2 7 11 1009 2637 1699
4918 2 2 7 11 1012 2638 1700
4919 2 2 7 11 1011 2640 1698
4920 2 2 7 11 1010 2639 1697
4921 2 2 7 11 434 1989 2706
4922 2 2 7 11 433 1990 2707
4923 2 2 7 11 436 1992 2708
4924 2 2 7 11 435 1991 2705
4925 2 2 7 11 377 2245 1678
4926 2 2 7 11 378 2246 1677
4927 2 2 7 11 379 2248 1679
4928 2 2 7 11 380 2247 1680
4929 2 2 7 11 401 1541 2530
4930 2 2 7 11 402 1542 2529
4931 2 2 7 11 403 1544 2532
4932 2 2 7 11 404 1543 2531
4933 2 2 7 11 437 1665 2281
4934 2 2 7 11 438 1667 2282
4935 2 2 7 11 439 1666 2283
4936 2 2 7 11 440 1668 2284
4937 2 2 7 11 1031 2705 2344
4938 2 2 7 11 1032 2708 2342
4939 2 2 7 11 1029 2706 2341
4940 2 2 7 11 1030 2707 2343
4941 2 2 7 11 1130 2344 2705
4942 2 2 7 11 1131 2342 2708
4943 2 2 7 11 1129 2341 2706
4944 2 2 7 11 1132 2343 2707
4945 2 2 7 11 299 2086 1899
4946 2 2 7 11 300 2085 1898
4947 2 2 7 11 297 2087 1897
4948 2 2 7 11 298 2088 1900
4949 2 2 7 11 1013 2227 1748
4950 2 2 7 11 1014 2225 1747
4951 2 2 7 11 1016 2226 1746
4952 2 2 7 11 1015 2228 1745
4953 2 2 7 11 2131 923 2249
4954 2 2 7 11 2130 922 2251
4955 2 2 7 11 2129 924 2250
4956 2 2 7 11 2132 921 2252
4957 2 2 7 11 2130 2251 736
4958 2 2 7 11 2131 2249 734
4959 2 2 7 11 2132 2252 735
4960 2 2 7 11 2129 2250 733
4961 2 2 7 11 830 1830 2410
4962 2 2 7 11 829 1829 2409
4963 2 2 7 11 831 1832 2412
4964 2 2 7 11 832 1831 2411
4965 2 2 7 11 605 2409 1829
4966 2 2 7 11 607 2410 1830
4967 2 2 7 11 608 2411 1831
4968 2 2 7 11 606 2412 1832
4969 2 2 7 11 847 1733 2585
4970 2 2 7 11 848 1736 2587
4971 2 2 7 11 845 1735 2588
4972 2 2 7 11 846 1734 2586
4973 2 2 7 11 567 2585 1733
4974 2 2 7 11 565 2586 1734
4975 2 2 7 11 566 2587 1736
4976 2 2 7 11 568 2588 1735
4977 2 2 7 11 961 2644 1870
4978 2 2 7 11 963 2642 1871
4979 2 2 7 11 962 2643 1869
4980 2 2 7 11 964 2641 1872
4981 2 2 7 11 91 1700 2309
4982 2 2 7 11 132 1698 2312
4983 2 2 7 11 7 1697 2311
4984 2 2 7 11 49 1699 2310
4985 2 2 7 11 236 1741 2366
4986 2 2 7 11 235 1742 2365
4987 2 2 7 11 233 1743 2368
4988 2 2 7 11 234 1744 2367
4989 2 2 7 11 386 2345 1673
4990 2 2 7 11 387 2347 1676
4991 2 2 7 11 385 2346 1675
4992 2 2 7 11 388 2348 1674
4993 2 2 7 11 17 1963 2099
4994 2 2 7 11 142 1962 2098
4995 2 2 7 11 59 1961 2097
4996 2 2 7 11 101 1964 2100
4997 2 2 7 11 818 2194 2382
4998 2 2 7 11 820 2195 2381
4999 2 2 7 11 817 2193 2383
5000 2 2 7 11 819 2196 2384
5001 2 2 7 11 578 1585 2553
5002 2 2 7 11 580 1586 2556
5003 2 2 7 11 577 1587 2554
5004 2 2 7 11 579 1588 2555
5005 2 2 7 11 969 2383 2193
5006 2 2 7 11 970 2382 2194
5007 2 2 7 11 972 2384 2196
5008 2 2 7 11 971 2381 2195
5009 2 2 7 11 752 2011 2405
5010 2 2 7 11 751 2012 2406
5011 2 2 7 11 750 2010 2408
5012 2 2 7 11 749 2009 2407
5013 2 2 7 11 1476 1814 2571
5014 2 2 7 11 1474 1816 2570
5015 2 2 7 11 1473 1815 2569
5016 2 2 7 11 1475 1813 2572
5017 2 2 7 11 582 2601 1663
5018 2 2 7 11 581 2604 1661
5019 2 2 7 11 583 2602 1664
5020 2 2 7 11 584 2603 1662
5021 2 2 7 11 958 2433 2169
5022 2 2 7 11 960 2436 2171
5023 2 2 7 11 957 2435 2170
5024 2 2 7 11 959 2434 2172
5025 2 2 7 11 841 2169 2433
5026 2 2 7 11 843 2172 2434
5027 2 2 7 11 842 2171 2436
5028 2 2 7 11 844 2170 2435
5029 2 2 7 11 1190 2398 1682
5030 2 2 7 11 1189 2397 1684
5031 2 2 7 11 1192 2400 1681
5032 2 2 7 11 1191 2399 1683
5033 2 2 7 11 306 1975 2545
5034 2 2 7 11 305 1973 2547
5035 2 2 7 11 308 1974 2546
5036 2 2 7 11 307 1976 2548
5037 2 2 7 11 1218 2547 1973
5038 2 2 7 11 1219 2545 1975
5039 2 2 7 11 1217 2546 1974
5040 2 2 7 11 1220 2548 1976
5041 2 2 7 11 852 1712 2699
5042 2 2 7 11 851 1710 2698
5043 2 2 7 11 849 1709 2697
5044 2 2 7 11 850 1711 2700
5045 2 2 7 11 498 2697 1709
5046 2 2 7 11 497 2698 1710
5047 2 2 7 11 500 2699 1712
5048 2 2 7 11 499 2700 1711
5049 2 2 7 11 148 1725 2500
5050 2 2 7 11 107 1728 2498
5051 2 2 7 11 65 1727 2497
5052 2 2 7 11 23 1726 2499
5053 2 2 7 11 666 1625 2477
5054 2 2 7 11 665 1626 2478
5055 2 2 7 11 668 1627 2480
5056 2 2 7 11 667 1628 2479
5057 2 2 7 11 1020 2208 2523
5058 2 2 7 11 1017 2206 2524
5059 2 2 7 11 1019 2207 2522
5060 2 2 7 11 1018 2205 2521
5061 2 2 7 11 939 1622 2506
5062 2 2 7 11 938 1621 2507
5063 2 2 7 11 937 1624 2505
5064 2 2 7 11 940 1623 2508
5065 2 2 7 11 567 2629 1601
5066 2 2 7 11 565 2630 1602
5067 2 2 7 11 568 2631 1603
5068 2 2 7 11 566 2632 1604
5069 2 2 7 11 786 2345 1783
5070 2 2 7 11 787 2347 1784
5071 2 2 7 11 788 2348 1781
5072 2 2 7 11 785 2346 1782
5073 2 2 7 11 340 2489 1627
5074 2 2 7 11 337 2490 1625
5075 2 2 7 11 338 2491 1626
5076 2 2 7 11 339 2492 1628
5077 2 2 7 11 415 2329 1778
5078 2 2 7 11 416 2330 1777
5079 2 2 7 11 414 2331 1779
5080 2 2 7 11 413 2332 1780
5081 2 2 7 11 386 1783 2345
5082 2 2 7 11 385 1782 2346
5083 2 2 7 11 388 1781 2348
5084 2 2 7 11 387 1784 2347
5085 2 2 7 11 479 2692 1647
5086 2 2 7 11 477 2691 1646
5087 2 2 7 11 478 2690 1648
5088 2 2 7 11 480 2689 1645
5089 2 2 7 11 621 1985 2514
5090 2 2 7 11 623 1988 2515
5091 2 2 7 11 624 1986 2516
5092 2 2 7 11 622 1987 2513
5093 2 2 7 11 462 1756 2405
5094 2 2 7 11 464 1755 2408
5095 2 2 7 11 463 1754 2407
5096 2 2 7 11 461 1753 2406
5097 2 2 7 11 1122 2519 1955
5098 2 2 7 11 1121 2518 1953
5099 2 2 7 11 1123 2520 1954
5100 2 2 7 11 1124 2517 1956
5101 2 2 7 11 1103 1853 2305
5102 2 2 7 11 1101 1854 2306
5103 2 2 7 11 1104 1856 2308
5104 2 2 7 11 1102 1855 2307
5105 2 2 7 11 620 1915 2592
5106 2 2 7 11 619 1916 2591
5107 2 2 7 11 618 1913 2590
5108 2 2 7 11 617 1914 2589
5109 2 2 7 11 397 2447 2066
5110 2 2 7 11 400 2448 2068
5111 2 2 7 11 399 2445 2065
5112 2 2 7 11 398 2446 2067
5113 2 2 7 11 908 2591 1916
5114 2 2 7 11 905 2589 1914
5115 2 2 7 11 906 2590 1913
5116 2 2 7 11 907 2592 1915
5117 2 2 7 11 940 2508 2083
5118 2 2 7 11 939 2506 2082
5119 2 2 7 11 938 2507 2081
5120 2 2 7 11 937 2505 2084
5121 2 2 7 11 448 2083 2508
5122 2 2 7 11 445 2082 2506
5123 2 2 7 11 446 2081 2507
5124 2 2 7 11 447 2084 2505
5125 2 2 7 11 486 2673 2627
5126 2 2 7 11 488 2674 2625
5127 2 2 7 11 487 2675 2626
5128 2 2 7 11 485 2676 2628
5129 2 2 7 11 1201 2626 2675
5130 2 2 7 11 1204 2627 2673
5131 2 2 7 11 1203 2625 2674
5132 2 2 7 11 1202 2628 2676
5133 2 2 7 11 396 2658 1655
5134 2 2 7 11 393 2657 1653
5135 2 2 7 11 394 2660 1654
5136 2 2 7 11 395 2659 1656
5137 2 2 7 11 821 1653 2657
5138 2 2 7 11 824 1656 2659
5139 2 2 7 11 822 1654 2660
5140 2 2 7 11 823 1655 2658
5141 2 2 7 11 471 1807 2400
5142 2 2 7 11 470 1806 2399
5143 2 2 7 11 469 1805 2397
5144 2 2 7 11 472 1808 2398
5145 2 2 7 11 473 2438 1822
5146 2 2 7 11 474 2437 1821
5147 2 2 7 11 475 2439 1824
5148 2 2 7 11 476 2440 1823
5149 2 2 7 11 763 2218 2023
5150 2 2 7 11 764 2217 2024
5151 2 2 7 11 762 2219 2021
5152 2 2 7 11 761 2220 2022
5153 2 2 7 11 239 1797 2456
5154 2 2 7 11 238 1798 2454
5155 2 2 7 11 240 1799 2453
5156 2 2 7 11 237 1800 2455
5157 2 2 7 11 942 2420 1944
5158 2 2 7 11 943 2419 1943
5159 2 2 7 11 941 2417 1942
5160 2 2 7 11 944 2418 1941
5161 2 2 7 11 661 2551 1706
5162 2 2 7 11 663 2549 1705
5163 2 2 7 11 662 2550 1708
5164 2 2 7 11 664 2552 1707
5165 2 2 7 11 793 2454 1798
5166 2 2 7 11 795 2453 1799
5167 2 2 7 11 796 2455 1800
5168 2 2 7 11 794 2456 1797
5169 2 2 7 11 894 2497 1727
5170 2 2 7 11 893 2499 1726
5171 2 2 7 11 895 2498 1728
5172 2 2 7 11 896 2500 1725
5173 2 2 7 11 543 1922 2465
5174 2 2 7 11 541 1924 2468
5175 2 2 7 11 542 1923 2467
5176 2 2 7 11 544 1921 2466
5177 2 2 7 11 789 1821 2437
5178 2 2 7 11 792 1822 2438
5179 2 2 7 11 790 1823 2440
5180 2 2 7 11 791 1824 2439
5181 2 2 7 11 835 2465 1922
5182 2 2 7 11 836 2468 1924
5183 2 2 7 11 834 2466 1921
5184 2 2 7 11 833 2467 1923
5185 2 2 7 11 1035 1738 2597
5186 2 2 7 11 1033 1740 2598
5187 2 2 7 11 1034 1739 2599
5188 2 2 7 11 1036 1737 2600
5189 2 2 7 11 983 2151 2339
5190 2 2 7 11 981 2149 2337
5191 2 2 7 11 982 2150 2338
5192 2 2 7 11 984 2152 2340
5193 2 2 7 11 274 2052 2636
5194 2 2 7 11 273 2049 2633
5195 2 2 7 11 276 2050 2634
5196 2 2 7 11 275 2051 2635
5197 2 2 7 11 1273 2363 2653
5198 2 2 7 11 1276 2364 2654
5199 2 2 7 11 1275 2361 2656
5200 2 2 7 11 1274 2362 2655
5201 2 2 7 11 745 2653 2363
5202 2 2 7 11 746 2656 2361
5203 2 2 7 11 748 2654 2364
5204 2 2 7 11 747 2655 2362
5205 2 2 7 11 677 2005 2326
5206 2 2 7 11 680 2007 2325
5207 2 2 7 11 678 2006 2327
5208 2 2 7 11 679 2008 2328
5209 2 2 7 11 821 2232 2509
5210 2 2 7 11 822 2231 2512
5211 2 2 7 11 824 2229 2511
5212 2 2 7 11 823 2230 2510
5213 2 2 7 11 789 2475 1821
5214 2 2 7 11 790 2473 1823
5215 2 2 7 11 791 2474 1824
5216 2 2 7 11 792 2476 1822
5217 2 2 7 11 384 2684 1770
5218 2 2 7 11 383 2681 1769
5219 2 2 7 11 381 2683 1772
5220 2 2 7 11 382 2682 1771
5221 2 2 7 11 957 2572 1813
5222 2 2 7 11 959 2571 1814
5223 2 2 7 11 958 2570 1816
5224 2 2 7 11 960 2569 1815
5225 2 2 7 11 777 2061 2300
5226 2 2 7 11 780 2063 2297
5227 2 2 7 11 779 2064 2299
5228 2 2 7 11 778 2062 2298
5229 2 2 7 11 263 1869 2621
5230 2 2 7 11 261 1870 2622
5231 2 2 7 11 264 1871 2624
5232 2 2 7 11 262 1872 2623
5233 2 2 7 11 440 2284 2336
5234 2 2 7 11 437 2281 2333
5235 2 2 7 11 439 2283 2334
5236 2 2 7 11 438 2282 2335
5237 2 2 7 11 914 2336 2284
5238 2 2 7 11 913 2333 2281
5239 2 2 7 11 915 2334 2283
5240 2 2 7 11 916 2335 2282
5241 2 2 7 11 1267 2588 2176
5242 2 2 7 11 1265 2586 2174
5243 2 2 7 11 1266 2585 2173
5244 2 2 7 11 1268 2587 2175
5245 2 2 7 11 356 2663 1840
5246 2 2 7 11 353 2661 1838
5247 2 2 7 11 354 2664 1839
5248 2 2 7 11 355 2662 1837
5249 2 2 7 11 568 2176 2588
5250 2 2 7 11 565 2174 2586
5251 2 2 7 11 567 2173 2585
5252 2 2 7 11 566 2175 2587
5253 2 2 7 11 357 1841 2665
5254 2 2 7 11 358 1843 2666
5255 2 2 7 11 360 1844 2667
5256 2 2 7 11 359 1842 2668
5257 2 2 7 11 537 2115 2614
5258 2 2 7 11 539 2113 2616
5259 2 2 7 11 2116 2615 540
5260 2 2 7 11 538 2114 2613
5261 2 2 7 11 777 2258 2388
5262 2 2 7 11 780 2260 2387
5263 2 2 7 11 779 2259 2386
5264 2 2 7 11 778 2257 2385
5265 2 2 7 11 1271 2388 2258
5266 2 2 7 11 1272 2387 2260
5267 2 2 7 11 1269 2385 2257
5268 2 2 7 11 1270 2386 2259
5269 2 2 7 11 55 2487 1938
5270 2 2 7 11 97 2488 1937
5271 2 2 7 11 138 2485 1939
5272 2 2 7 11 13 2486 1940
5273 2 2 7 11 985 2549 2018
5274 2 2 7 11 987 2552 2020
5275 2 2 7 11 986 2550 2017
5276 2 2 7 11 988 2551 2019
5277 2 2 7 11 661 2019 2551
5278 2 2 7 11 664 2020 2552
5279 2 2 7 11 663 2018 2549
5280 2 2 7 11 662 2017 2550
5281 2 2 7 11 817 2621 1869
5282 2 2 7 11 818 2622 1870
5283 2 2 7 11 820 2623 1872
5284 2 2 7 11 819 2624 1871
5285 2 2 7 11 401 1953 2518
5286 2 2 7 11 403 1956 2517
5287 2 2 7 11 402 1954 2520
5288 2 2 7 11 404 1955 2519
5289 2 2 7 11 269 2170 2424
5290 2 2 7 11 272 2172 2422
5291 2 2 7 11 270 2169 2421
5292 2 2 7 11 271 2171 2423
5293 2 2 7 11 975 2066 2447
5294 2 2 7 11 974 2067 2446
5295 2 2 7 11 976 2068 2448
5296 2 2 7 11 973 2065 2445
5297 2 2 7 11 877 2274 2630
5298 2 2 7 11 880 2273 2629
5299 2 2 7 11 879 2275 2632
5300 2 2 7 11 878 2276 2631
5301 2 2 7 11 841 2333 2421
5302 2 2 7 11 843 2334 2422
5303 2 2 7 11 842 2336 2423
5304 2 2 7 11 844 2335 2424
5305 2 2 7 11 914 2423 2336
5306 2 2 7 11 913 2421 2333
5307 2 2 7 11 915 2422 2334
5308 2 2 7 11 916 2424 2335
5309 2 2 7 11 836 2703 1999
5310 2 2 7 11 835 2702 2000
5311 2 2 7 11 834 2701 1998
5312 2 2 7 11 833 2704 1997
5313 2 2 7 11 459 1949 2650
5314 2 2 7 11 460 1950 2651
5315 2 2 7 11 457 1952 2649
5316 2 2 7 11 458 1951 2652
5317 2 2 7 11 1095 2577 2695
5318 2 2 7 11 1096 2579 2696
5319 2 2 7 11 1093 2580 2694
5320 2 2 7 11 1094 2578 2693
5321 2 2 7 11 874 2696 2579
5322 2 2 7 11 873 2695 2577
5323 2 2 7 11 875 2693 2578
5324 2 2 7 11 876 2694 2580
5325 2 2 7 11 841 2421 2169
5326 2 2 7 11 843 2422 2172
5327 2 2 7 11 844 2424 2170
5328 2 2 7 11 842 2423 2171
5329 2 2 7 11 723 2638 2002
5330 2 2 7 11 724 2637 2001
5331 2 2 7 11 722 2639 2004
5332 2 2 7 11 721 2640 2003
5333 2 2 7 11 2120 848 2568
5334 2 2 7 11 2118 846 2567
5335 2 2 7 11 2117 847 2565
5336 2 2 7 11 2119 845 2566
5337 2 2 7 11 1065 2409 2270
5338 2 2 7 11 1066 2410 2269
5339 2 2 7 11 1068 2412 2272
5340 2 2 7 11 1067 2411 2271
5341 2 2 7 11 605 2270 2409
5342 2 2 7 11 607 2269 2410
5343 2 2 7 11 608 2271 2411
5344 2 2 7 11 606 2272 2412
5345 2 2 7 11 1264 2478 2080
5346 2 2 7 11 1263 2477 2079
5347 2 2 7 11 1262 2479 2078
5348 2 2 7 11 1261 2480 2077
5349 2 2 7 11 452 1998 2701
5350 2 2 7 11 449 2000 2702
5351 2 2 7 11 450 1997 2704
5352 2 2 7 11 451 1999 2703
5353 2 2 7 11 294 2154 2511
5354 2 2 7 11 293 2153 2510
5355 2 2 7 11 296 2156 2509
5356 2 2 7 11 295 2155 2512
5357 2 2 7 11 1161 2320 2455
5358 2 2 7 11 1162 2317 2453
5359 2 2 7 11 1164 2319 2454
5360 2 2 7 11 1163 2318 2456
5361 2 2 7 11 853 2402 2394
5362 2 2 7 11 855 2404 2395
5363 2 2 7 11 856 2403 2396
5364 2 2 7 11 854 2401 2393
5365 2 2 7 11 954 2396 2403
5366 2 2 7 11 953 2394 2402
5367 2 2 7 11 955 2395 2404
5368 2 2 7 11 956 2393 2401
5369 2 2 7 11 801 2633 2049
5370 2 2 7 11 2050 804 2634
5371 2 2 7 11 2051 803 2635
5372 2 2 7 11 802 2636 2052
5373 2 2 7 11 239 2456 2318
5374 2 2 7 11 240 2453 2317
5375 2 2 7 11 238 2454 2319
5376 2 2 7 11 237 2455 2320
5377 2 2 7 11 900 2105 2671
5378 2 2 7 11 898 2106 2669
5379 2 2 7 11 899 2108 2672
5380 2 2 7 11 897 2107 2670
5381 2 2 7 11 88 2671 2105
5382 2 2 7 11 129 2669 2106
5383 2 2 7 11 4 2670 2107
5384 2 2 7 11 46 2672 2108
5385 2 2 7 11 292 2120 2568
5386 2 2 7 11 289 2118 2567
5387 2 2 7 11 291 2119 2566
5388 2 2 7 11 290 2117 2565
5389 2 2 7 11 2111 2645 1257
5390 2 2 7 11 2110 2647 1258
5391 2 2 7 11 2109 2646 1259
5392 2 2 7 11 2112 2648 1260
5393 2 2 7 11 1071 2613 2114
5394 2 2 7 11 1072 2614 2115
5395 2 2 7 11 2116 1069 2615
5396 2 2 7 11 1070 2616 2113
5397 2 2 7 11 936 2646 2109
5398 2 2 7 11 2111 934 2645
5399 2 2 7 11 2112 933 2648
5400 2 2 7 11 2110 935 2647
5401 2 2 7 11 293 2510 2230
5402 2 2 7 11 296 2509 2232
5403 2 2 7 11 294 2511 2229
5404 2 2 7 11 295 2512 2231
5405 2 2 7 11 936 2109 2691
5406 2 2 7 11 2110 2690 935
5407 2 2 7 11 2111 2692 934
5408 2 2 7 11 2112 2689 933
5409 2 2 7 11 1226 2537 2700
5410 2 2 7 11 1227 2539 2697
5411 2 2 7 11 1225 2538 2699
5412 2 2 7 11 1228 2540 2698
5413 2 2 7 11 966 2594 2469
5414 2 2 7 11 967 2593 2471
5415 2 2 7 11 968 2595 2472
5416 2 2 7 11 965 2596 2470
5417 2 2 7 11 420 2469 2594
5418 2 2 7 11 417 2471 2593
5419 2 2 7 11 419 2472 2595
5420 2 2 7 11 418 2470 2596
5421 2 2 7 11 852 2699 2538
5422 2 2 7 11 849 2697 2539
5423 2 2 7 11 850 2700 2537
5424 2 2 7 11 851 2698 2540
$EndElements


Revision-number: 25
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-24T16:18:04.286087Z
PROPS-END

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 760
Text-content-md5: 3751e9153aca47d8025e15f1d02f1fb7
Text-content-sha1: d28caf37bbdc604e36676a13989fd9fc7bc0c172
Content-length: 760

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  /*
  // Laplace //
  FormulationLaplace laplace;
  System sys(msh.getAllNodeElements(), laplace);

  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  sys.solve();

  Solution sol(msh, laplace);
  sol.write("sol.pos");
  */
  
  // Projection //
  Vector<double> f(2); 
  f(0) = -1; f(1) = 1; // Vector to project
  
  FormulationProjection projection(f);
  System sys(msh.getAllEdgeElements(), projection);

  sys.solve();
  
  Solution sol(msh, projection);
  sol.write("sol.pos");

  
  return 0;
}



Node-path: basis/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 139
Text-content-md5: e9f738f9c0004c6ce228f5cd8671d30a
Text-content-sha1: 9295e08c7f1f7a0356fcf941b434b78e5fac54e5
Content-length: 139

set(src
  QuadNodeBasis.cpp
  QuadEdgeBasis.cpp
  TriNodeBasis.cpp
  TriEdgeBasis.cpp
  TriNedelecBasis.cpp
)


add_sources(basis "${src}")

Node-path: basis/TriNedelecBasis.cpp
Node-kind: file
Node-action: add
Node-copyfrom-rev: 24
Node-copyfrom-path: basis/TriNedelec.cpp
Text-copy-source-md5: a2f46411b8a0f0e1a9296fb33f71ec41
Text-copy-source-sha1: 7b8c114ddd02410b6c924ce324643cf771fe47c5
Text-content-length: 2518
Text-content-md5: 6a2da83d17b8fc51965e77cf303b6288
Text-content-sha1: 4b1e5c3de0a8778e1fb4212d8fa73d61dcefd127
Content-length: 2518

#include "TriNedelecBasis.h"

TriNedelecBasis::TriNedelecBasis(void){
  // Set Basis Type //
  order   = 1;
  type    = 2;
  size    = 3;
  nodeNbr = 3;
  dim     = 2;

  // Lagrange //
  Polynomial* lagrange    = new Polynomial[3];

  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Basis //
  basis = new Vector<Polynomial>[size];

  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);
  }

  // Free Temporary Sapce //
  delete[] lagrange;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriNedelec b;
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNedelecBasis.h
Node-kind: file
Node-action: add
Node-copyfrom-rev: 24
Node-copyfrom-path: basis/TriNedelec.h
Text-copy-source-md5: ce4b8b0717da090d2c1155a1b0171bff
Text-copy-source-sha1: f00d15feee5915785bb0ba6e4ec0bb7e86e6b9b9
Text-content-length: 543
Text-content-md5: c2f591a8376f9ce945c9a33a584aeebe
Text-content-sha1: d0a788b5c3d9bf8903e20932873ce969334af445
Content-length: 543

#ifndef _TRINEDELECBASIS_H_
#define _TRINEDELECBASIS_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class TriNedelecBasis
   @brief Nedelec Basis for Triangles
   @extends Basis
 
   This class can instantiate a Nedelec Basis 
   for Triangles.@n

   @note
   This is a Basis of Vector%s of Polynomial%s
*/

class TriNedelecBasis: public Basis<Vector<Polynomial> >{
 public:
   TriNedelecBasis(void);
};


/**
   @fn TriNedelecBasis::TriNedelecBasis
   @return Returns a new Nedelec Basis for Triangles
*/

#endif


Node-path: basis/TriNedelec.cpp
Node-action: delete


Node-path: basis/TriNedelec.h
Node-action: delete


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: change
Text-content-length: 1763
Text-content-md5: 368e7ee170912619f2dd414c555b6ceb
Text-content-sha1: bad0dd0e4c0938a7f28cd14a01ba20e9ae9ec145
Content-length: 1763

#include "FormulationProjection.h"
#include <cmath>

FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  // Vector to Project //
  f = &vectorToProject;

  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  baseGen   = new TriNedelecBasis;
  basis     = baseGen->getBasis();
  basisSize = baseGen->getSize(); 
}

FormulationProjection::~FormulationProjection(void){
  delete baseGen;
}

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> phiI = jac.grad(basis[edgeI].at(gx[g], gy[g], 0));
    Vector<double> phiJ = jac.grad(basis[edgeJ].at(gx[g], gy[g], 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jPhiI = jac.grad(basis[equationI].at(gx[g], gy[g], 0));
 
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1470
Text-content-md5: 6cf87a33f2033f17a36de7cb7d51d345
Text-content-sha1: b972901d5ff4899f72dbe2d938dd1ef1c1e84082
Content-length: 1470

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "FormulationVector.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriNedelecBasis.h"

/**
   @class FormulationProjection
   @brief Formulation for the Projection problem

   Vectorial Formulation for the @em Projection problem.
 */

class FormulationProjection: public FormulationVector{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNedelecBasis*          baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Basis<Vector<Polynomial> >& getBasis(void) const;
};

/**
   @fn FormulationProjection::FormulationProjection
   @param vectorToProject A Vector<double>
   @return Returns a new FormulationProjection to project
   the given Vector
 
   @fn FormulationProjection::~FormulationProjection
   @return Deletes the this FormulationProjection
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Basis<Vector<Polynomial> >& 
FormulationProjection::getBasis(void) const{
  return *baseGen;
}


#endif


Node-path: formulation/FormulationScalar.h
Node-kind: file
Node-action: change
Text-content-length: 844
Text-content-md5: d9c96fd180c2e9f23c202ce02aeb2be9
Text-content-sha1: b154c0e490920bea92518ded6d0da5cd1f62e3bd
Content-length: 844

#ifndef _FORMULATIONSCALAR_H_
#define _FORMULATIONSCALAR_H_

#include "Formulation.h"
#include "Basis.h"
#include "Polynomial.h"

/**
   @interface FormulationScalar
   @brief Interface for Scalar Formulation%s

   This is an interface for @em Scalar Formulation%s.@n

   This interface @em adds the ability to access the Basis,
   used by the scalar formulation.
 */

class FormulationScalar: public Formulation{
 public:
  virtual ~FormulationScalar(void);

  virtual int type(void) const;

  virtual Basis<Polynomial>& getBasis(void) const = 0; 
};

/**
   @fn FormulationScalar::getBasis
   @return Returns the Basis used by the Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline FormulationScalar::~FormulationScalar(void){
}

inline int FormulationScalar::type(void) const{
  return 0;
}

#endif


Node-path: formulation/FormulationVector.h
Node-kind: file
Node-action: change
Text-content-length: 882
Text-content-md5: 78b1c80e7ea4db7b1a78cf25e9740a93
Text-content-sha1: 60aa1786dbb9f969907acf5106bf75e07637a276
Content-length: 882

#ifndef _FORMULATIONVECTOR_H_
#define _FORMULATIONVECTOR_H_

#include "Formulation.h"
#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @interface FormulationVector
   @brief Interface for Vectorial Formulation%s

   This is an interface for @em Vectorial Formulation%s.@n

   This interface @em adds the ability to access the Basis,
   used by the vectorial formulation.
 */

class FormulationVector: public Formulation{
 public:
  virtual ~FormulationVector(void);

  virtual int type(void) const;

  virtual Basis<Vector<Polynomial> >& getBasis(void) const = 0; 
};

/**
   @fn FormulationVector::getBasis
   @return Returns the Basis used by the Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline FormulationVector::~FormulationVector(void){
}

inline int FormulationVector::type(void) const{
  return 1;
}

#endif


Node-path: postprocessing/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 87
Text-content-md5: 76a1c28fa640ba4aca1bacd8788787c4
Text-content-sha1: b6f1c3dd7eeb4b594e87a9e93508e8cc2acd1384
Content-length: 87

set(src
  InterpolatorEdge.cpp
  Solution.cpp
)


add_sources(postprocessing "${src}")


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: change
Text-content-length: 2870
Text-content-md5: d75d27d93cae0f74b213fce5c23047c4
Text-content-sha1: 8acddac6b6d3bb73880f5e73b1a5ffaafa36deb6
Content-length: 2870

#include "Interpolator.h"
#include "Jacobian.h"
#include "Exception.h"
#include "FormulationScalar.h"
#include "FormulationVector.h"

using namespace std;

Interpolator::Interpolator(const Formulation& formulation, const Mesh& mesh){
  f     = &formulation;
  fType = f->type();
  
  if(!fType){
    const FormulationScalar& fc = 
      dynamic_cast<const FormulationScalar&>(formulation);
    
    bSize = fc.getBasis().getSize();
  }

  else{ 
    const FormulationVector& fv = 
      dynamic_cast<const FormulationVector&>(formulation);

    bSize     = fv.getBasis().getSize();
    vectBasis = fv.getBasis().getBasis();
  }

  msh = &mesh;

  nNode = msh->getNbNode();
  nodeVectorValue = new vector<Vector<double>*>(nNode);
  isInterpolated  = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    Vector<double>* v = new Vector<double>(2);
    (*v)(0) = 0.0; 
    (*v)(1) = 0.0;
    (*nodeVectorValue)[i] = v;
    (*isInterpolated)[i] = false;
  }

 switch(fType){
 case 0 : break;
 case 1 : interpolateEdgeElement(); break;
 default: throw Exception("Unknown Basis Type"); break;
 }
}

Interpolator::~Interpolator(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeVectorValue)[i];
  delete nodeVectorValue;

  delete isInterpolated;
}

void Interpolator::interpolateEdgeElement(void){

  const FormulationProjection& fv = 
    dynamic_cast<const FormulationProjection&>(*f);

  
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeVectorValue)[id];
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> uv = jac.invMap(x, y);
	  Vector<double> vk = jac.grad(vectBasis[k].at(uv(0), uv(1), 0));

	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
 
}

const std::vector<Vector<double>*>& Interpolator::getVectorNodeValue(void) const{
  if(fType != 1 && fType != 2)
    throw Exception("The Basis Functions are scalar");
    
    return *nodeVectorValue;
}

const std::vector<double>& Interpolator::getScalarNodeValue(void) const{
  if(fType != 0 && fType != 3)
    throw Exception("The Basis Functions are vectorial");
    
  if(fType == 0)
    throw Exception("Interpolation of Nodal function is not implemented");

  if(fType == 3)
    throw Exception("Interpolation of Volume function is not implemented");
}


Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: change
Text-content-length: 1216
Text-content-md5: d9fcd2bcef94326db8e197f2b1177804
Text-content-sha1: 3c9891ef42615959e228d86f17fd00f9e318c081
Content-length: 1216

#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

#include <vector>

/**
   @class Interpolator
   @brief Interpolates Entity values on Node%s
   
   This @em class is the mother (by @em inheritence) 
   of all Interpolator%s. 

   An Interpolator interpolates Entity values 
   (of a  Mesh) on the @em Node%s 
   (of the same Mesh).@n

   The Entity @em type to concider is given
   by the @em different @em implementations 
   of this class.
 
   @note
   This interface is @em templated on:
   @li double for @em scalar fields
   @li Vector<double> for @em vectorial fields
*/

template<class T>
class Interpolator{
 protected:
  std::vector<T>* nodeValue;

 public:
  ~Interpolator(void);

  std::vector<T>& getNodeValue(void) const;
};

/**
   @fn Interpolator::~Interpolator
   @return Deletes the Interpolator

   @fn Interpolator::getNodeValue
   @return Returns the interpolated field
 */

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline std::vector<T>& 
Interpolator<T>::getNodeValue(void) const{
  return *nodeValue;
}

//////////////////////
// In .h Functions  //
//////////////////////

template<class T>
Interpolator<T>::~Interpolator(void){
}


#endif


Node-path: postprocessing/InterpolatorEdge.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1746
Text-content-md5: 54e8ad59675cda0eb16c29a481d597d8
Text-content-sha1: 6132d2ec93bcf33652695a590cb6164f88d0b0be
Content-length: 1756

PROPS-END
#include "InterpolatorEdge.h"
#include "Jacobian.h"
#include <cstdio>

using namespace std;

InterpolatorEdge::InterpolatorEdge
(const Basis<Vector<Polynomial> >& basis, const Mesh& mesh){
  
  this->basis = basis.getBasis();
  this->bSize = basis.getSize();
  this->msh   = &mesh;
  this->nNode = msh->getNbNode();
  
  nodeValue      = new vector<Vector<double> >(nNode);
  isInterpolated = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    (*nodeValue)[i].set(0, 0.0); 
    (*nodeValue)[i].set(1, 0.0);
    (*nodeValue)[i].set(2, 0.0);
    
    (*isInterpolated)[i] = false;
  }
  
  interpolateEdgeElement();
}

InterpolatorEdge::~InterpolatorEdge(void){
  delete nodeValue;
  delete isInterpolated;
}

void InterpolatorEdge::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>& vn = (*nodeValue)[id];
	Vector<double> uv  = jac.invMap(x, y);
	
	for(int k = 0; k < bSize; k++){
	  printf("pif\n");
	  Vector<double> vk = jac.grad(basis[k].at(uv(0), uv(1), 0));
	  printf("paf\n");
	  vk.mul(entity[k]->getValue() * orient[k]);
	  printf("paf\n");
	  vn.add(vk);
	  printf("pouf\n");
	}

	(*isInterpolated)[id] = true;
      }
    }
  }
}


Node-path: postprocessing/InterpolatorEdge.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 831
Text-content-md5: 259ecd274c9fd82f84a58d5826194d20
Text-content-sha1: 8fb9a12e7b0dd46228807ab03fb91dfab97d26b5
Content-length: 841

PROPS-END
#ifndef _INTERPOLATOREDGE_H_
#define _INTERPOLATOREDGE_H_

#include "Interpolator.h"
#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"
#include "Mesh.h"

class InterpolatorEdge: public Interpolator<Vector<double> >{
 private:
  const Vector<Polynomial>* basis;
  int bSize;

  const Mesh* msh;  
  int nNode;

  std::vector<bool>* isInterpolated;

 public:
   InterpolatorEdge(const Basis<Vector<Polynomial> >& basis,
                    const Mesh& mesh);
  ~InterpolatorEdge(void);

 private:
  void interpolateEdgeElement(void);
};

/**
   @fn InterpolatorEdge::InterpolatorEdge
   @param basis The Basis to use for 
   interpolation
   @param mesh The Mesh to interpolate on
   @return Returns a new InterpolatorEdge

   @fn InterpolatorEdge::~InterpolatorEdge
   @return Deletes this InterpolatorEdge
 */

#endif


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 3259
Text-content-md5: 7e20bcf3b6d2221c8f120ae9def89d47
Text-content-sha1: cb3cdc0c2cab982760725a8adb87f66673fad726
Content-length: 3259

#include "Solution.h"
#include "Exception.h"
#include "FormulationVector.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();


  fType = formulation.type();
  
  //
  if(fType == 0){
    nodalVectorValue = NULL;
    nodalScalarValue = new vector<double>(N);
  
    for(int i = 0; i < N; i++)
      (*nodalScalarValue)[i] = (*node)[i]->getValue();

    intrpEdge = NULL;
  }
  
  if(fType == 1){
    const FormulationVector& fv = 
      static_cast<const FormulationVector&>(formulation);

    intrpEdge = new InterpolatorEdge(fv.getBasis(), mesh);

    nodalVectorValue = &(intrpEdge->getNodeValue());
    nodalScalarValue = NULL; 
 }
}

Solution::~Solution(void){
  if(nodalScalarValue)
    delete nodalScalarValue;

  if(intrpEdge)
    delete intrpEdge;
  // Interpolator is responsible for deleting 'nodalVectorValue'
}

void Solution::getNodalScalarValue(void){

}

void Solution::getNodalVectorValue(void){
  //nodalVectorValue = &(interpolator->getVectorNodeValue());
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  bool isScalar;
  if(fType == 0 || fType == 3)
    isScalar = true;
  else
    isScalar = false;

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, isScalar);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id].get(0) << " "
	    << (*nodalVectorValue)[id].get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1832
Text-content-md5: 4bcf94f1f70894d2c58aa2a22c01ec5c
Text-content-sha1: 5ccf0ae7b38a53f168be1b50e03aac64d0795225
Content-length: 1832

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"

#include "InterpolatorEdge.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   Choose Interpolator Type at runtime IN SOLUTION@n
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  int fType;
  InterpolatorEdge* intrpEdge;



  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double> >* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void getNodalScalarValue(void);
  void getNodalVectorValue(void);

  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @return Writes the solution in the given @c .msh file
 */

#endif


Revision-number: 26
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-24T16:18:39.850767Z
PROPS-END

Node-path: postprocessing/Interpolator.cpp
Node-action: delete


Revision-number: 27
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T09:35:13.619229Z
PROPS-END

Node-path: CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 1086
Text-content-md5: c6e81cacc2be7fb9e94d758d07187721
Text-content-sha1: 9efb968a8b88d1958dd62fa132353c9eb5d5fbe9
Content-length: 1086

cmake_minimum_required(VERSION 2.6)
project(SmallFem)

## Add Source Macro
macro(add_sources dir files)
  foreach(file ${files})
    list(APPEND list ${dir}/${file})
  endforeach(file)

  set(sources ${sources} ${list} PARENT_SCOPE)
endmacro(add_sources)

## Look for Packages
include(FindPackageHandleStandardArgs)
find_package(BLAS REQUIRED)
find_package(LAPACK REQUIRED)
find_package(Doxygen)

## Add Sources
add_subdirectory(assembler)
add_subdirectory(basis)
add_subdirectory(common)
add_subdirectory(formulation)
add_subdirectory(geometry)
add_subdirectory(mathematics)
add_subdirectory(postprocessing)
add_subdirectory(solver)

## Add Main
list(APPEND sources Main.cpp)

## Include Path
include_directories(
  assembler
  basis
  common
  formulation
  geometry
  mathematics
  postprocessing
  solver
)

## Build Documentation
if(DOXYGEN_FOUND)
  add_custom_target(doc ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile)
endif(DOXYGEN_FOUND)

## Build
add_definitions(-pedantic -Wall -g)
add_executable(sf ${sources}) 

## Link
target_link_libraries(sf cblas lapack)

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 764
Text-content-md5: d490323bda98f32e9c7425d7156b30b2
Text-content-sha1: 0642eb06defdc28e2cb87b2af1dc59f80768964a
Content-length: 764

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  /*
  // Laplace //
  FormulationLaplace laplace;
  System sys(msh.getAllNodeElements(), laplace);

  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  sys.solve();

  Solution sol(msh, laplace);
  sol.write("sol.pos");
  */
    
  // Projection //
  Vector<double> f(2); 
  f(0) = -1; f(1) = 1; // Vector to project
  
  FormulationProjection projection(f);
  System sys(msh.getAllEdgeElements(), projection);

  sys.solve();
  
  Solution sol(msh, projection);
  sol.write("sol.pos");
  
  
  return 0;
}



Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1214
Text-content-md5: 718e290e72bc8919e63a7e53e97fc82b
Text-content-sha1: 3e37b568d13ce6829aa25d5b4662130e095fa801
Content-length: 1214

#include "FormulationLaplace.h"
#include <cmath>

FormulationLaplace::FormulationLaplace(void){
  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  // Generate Basis
  base = new TriNodeBasis(1);  
  const Polynomial* basis = base->getBasis();

  // Take gradient
  basisSize = base->getSize();  
  gradBasis = new Vector<Polynomial> [basisSize];

  for(int i = 0; i < basisSize; i++)
    gradBasis[i] = basis[i].gradient();
}

FormulationLaplace::~FormulationLaplace(void){
  delete   base;
  delete[] gradBasis;
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> phiI = jac.grad(gradBasis[nodeI].at(gx[g], gy[g], 0));
    Vector<double> phiJ = jac.grad(gradBasis[nodeJ].at(gx[g], gy[g], 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}


Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: change
Text-content-length: 1214
Text-content-md5: e6e7b3593542a8c2155f12dcded47f96
Text-content-sha1: 34ac4f1be0e223fe95d4f1efdee38c301dbc8eb2
Content-length: 1214

#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

#include <vector>

/**
   @class Interpolator
   @brief Interpolates Entity values on Node%s
   
   This @em class is the mother (by @em inheritence) 
   of all Interpolator%s. 

   An Interpolator interpolates Entity values 
   (of a  Mesh) on the @em Node%s 
   (of the same Mesh).@n

   The Entity @em type to concider is given
   by the @em different @em implementations 
   of this class.
 
   @note
   This interface is @em templated on:
   @li double for @em scalar fields
   @li Vector<double> for @em vectorial fields
*/

template<class T>
class Interpolator{
 protected:
  std::vector<T>* nodeValue;

 public:
  ~Interpolator(void);

  std::vector<T>* getNodeValue(void) const;
};

/**
   @fn Interpolator::~Interpolator
   @return Deletes the Interpolator

   @fn Interpolator::getNodeValue
   @return Returns the interpolated field
 */

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline std::vector<T>*
Interpolator<T>::getNodeValue(void) const{
  return nodeValue;
}

//////////////////////
// In .h Functions  //
//////////////////////

template<class T>
Interpolator<T>::~Interpolator(void){
}


#endif


Node-path: postprocessing/InterpolatorEdge.cpp
Node-kind: file
Node-action: change
Text-content-length: 1727
Text-content-md5: 14a7cb84093a5e9b31862999d25e192c
Text-content-sha1: 8afb47aec11a431d975bc12d5c3bf8c692279a76
Content-length: 1727

#include "InterpolatorEdge.h"
#include "Jacobian.h"

using namespace std;

InterpolatorEdge::InterpolatorEdge
(const Basis<Vector<Polynomial> >& basis, const Mesh& mesh){
  
  this->basis = basis.getBasis();
  this->bSize = basis.getSize();
  this->msh   = &mesh;
  this->nNode = msh->getNbNode();
  
  nodeValue      = new vector<Vector<double>*>(nNode);
  isInterpolated = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    (*nodeValue)[i] = new Vector<double>(2);

    (*nodeValue)[i]->set(0, 0.0); 
    (*nodeValue)[i]->set(1, 0.0);
    
    (*isInterpolated)[i] = false;
  }
  
  interpolateEdgeElement();
}

InterpolatorEdge::~InterpolatorEdge(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeValue)[i];

  delete nodeValue;
  delete isInterpolated;
}

void InterpolatorEdge::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeValue)[id];
	Vector<double>  uv = jac.invMap(x, y);
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = jac.grad(basis[k].at(uv(0), uv(1), 0));

	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}
	
	(*isInterpolated)[id] = true;
      }
    }
  }
}


Node-path: postprocessing/InterpolatorEdge.h
Node-kind: file
Node-action: change
Text-content-length: 831
Text-content-md5: bcd39d46cb54d5e81faff898ae327b71
Text-content-sha1: 15e0483798bf161509541cd326bd6d00e24446bc
Content-length: 831

#ifndef _INTERPOLATOREDGE_H_
#define _INTERPOLATOREDGE_H_

#include "Interpolator.h"
#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"
#include "Mesh.h"

class InterpolatorEdge: public Interpolator<Vector<double>*>{
 private:
  const Vector<Polynomial>* basis;
  int bSize;

  const Mesh* msh;  
  int nNode;

  std::vector<bool>* isInterpolated;

 public:
   InterpolatorEdge(const Basis<Vector<Polynomial> >& basis,
                    const Mesh& mesh);
  ~InterpolatorEdge(void);

 private:
  void interpolateEdgeElement(void);
};

/**
   @fn InterpolatorEdge::InterpolatorEdge
   @param basis The Basis to use for 
   interpolation
   @param mesh The Mesh to interpolate on
   @return Returns a new InterpolatorEdge

   @fn InterpolatorEdge::~InterpolatorEdge
   @return Deletes this InterpolatorEdge
 */

#endif


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 3258
Text-content-md5: da3af8b58b4ea6e240891ca3bb912651
Text-content-sha1: 51de2d51fb12fa2623ee98a80d7dac83760ac573
Content-length: 3258

#include "Solution.h"
#include "Exception.h"
#include "FormulationVector.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();


  fType = formulation.type();
  
  //
  if(fType == 0){
    nodalVectorValue = NULL;
    nodalScalarValue = new vector<double>(N);
  
    for(int i = 0; i < N; i++)
      (*nodalScalarValue)[i] = (*node)[i]->getValue();

    intrpEdge = NULL;
  }
  
  if(fType == 1){
    const FormulationVector& fv = 
      static_cast<const FormulationVector&>(formulation);

    intrpEdge = new InterpolatorEdge(fv.getBasis(), mesh);

    nodalVectorValue = intrpEdge->getNodeValue();
    nodalScalarValue = NULL; 
 }
}

Solution::~Solution(void){
  if(nodalScalarValue)
    delete nodalScalarValue;

  if(intrpEdge)
    delete intrpEdge;
  // Interpolator is responsible for deleting 'nodalVectorValue'
}

void Solution::getNodalScalarValue(void){

}

void Solution::getNodalVectorValue(void){
  //nodalVectorValue = &(interpolator->getVectorNodeValue());
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  bool isScalar;
  if(fType == 0 || fType == 3)
    isScalar = true;
  else
    isScalar = false;

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, isScalar);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1832
Text-content-md5: 7bb90070523bd507612ec1ee9eb324e5
Text-content-sha1: 94cb998b8d475787998d6abef0b3427506863737
Content-length: 1832

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"

#include "InterpolatorEdge.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   Choose Interpolator Type at runtime IN SOLUTION@n
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  int fType;
  InterpolatorEdge* intrpEdge;



  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void getNodalScalarValue(void);
  void getNodalVectorValue(void);

  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @return Writes the solution in the given @c .msh file
 */

#endif


Node-path: tests/circle.geo
Node-kind: file
Node-action: change
Text-content-length: 675
Text-content-md5: 5298391a7df15166e14006e6c750b808
Text-content-sha1: 0192f59ffc7014bb9343af20df0381bf56c15c07
Content-length: 675

cl = 2.75;
//cl = 1;
//cl = 0.75;

L = 2;
l = 0.75;

Point(0) = {0, 0, 0, cl};

Point(1) = {+L, -L, 0, cl};
Point(2) = {+L, +L, 0, cl};
Point(3) = {-L, +L, 0, cl};
Point(4) = {-L, -L, 0, cl};

Circle(1) = {1, 0, 2};
Circle(2) = {2, 0, 3};
Circle(3) = {3, 0, 4};
Circle(4) = {4, 0, 1};

Point(5) = {+l, -l, 0, cl};
Point(6) = {+l, +l, 0, cl};
Point(7) = {-l, +l, 0, cl};
Point(8) = {-l, -l, 0, cl};

Circle(5) = {5, 0, 6};
Circle(6) = {6, 0, 7};
Circle(7) = {7, 0, 8};
Circle(8) = {8, 0, 5};

Line Loop(9) = {3, 4, 1, 2};
Line Loop(10) = {7, 8, 5, 6};
Plane Surface(11) = {9, 10};

Physical Line(5) = {1, 2, 3, 4};
Physical Line(6) = {5, 6, 7, 8};
Physical Surface(7) = {11};


Node-path: tests/circle.msh
Node-kind: file
Node-action: change
Text-content-length: 21214
Text-content-md5: faa91274c4f75256465107793819f3d8
Text-content-sha1: df62d4deb3ac31436e8fee4ba2257d944ca1dc27
Content-length: 21214

$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
240
1 2 -2 0
2 2 2 0
3 -2 2 0
4 -2 -2 0
5 0.75 -0.75 0
6 0.75 0.75 0
7 -0.75 0.75 0
8 -0.75 -0.75 0
9 2.243942107185828 -1.721837338309988 0
10 2.449489742780063 -1.414213562378489 0
11 2.613125929749177 -1.082392200301025 0
12 2.732050807567089 -0.7320508075755515 0
13 2.804229538599327 -0.3691838225694668 0
14 2.82842712474619 -2.042810365310288e-12 0
15 2.804229538599814 0.3691838225657669 0
16 2.732050807567963 0.7320508075722882 0
17 2.613125929750335 1.082392200298232 0
18 2.449489742781072 1.414213562376743 0
19 2.243942107186442 1.721837338309189 0
20 1.721837338309988 2.243942107185828 0
21 1.414213562378489 2.449489742780063 0
22 1.082392200301025 2.613125929749177 0
23 0.7320508075755515 2.732050807567089 0
24 0.3691838225694668 2.804229538599327 0
25 2.042810365310288e-12 2.82842712474619 0
26 -0.3691838225657669 2.804229538599814 0
27 -0.7320508075722882 2.732050807567963 0
28 -1.082392200298232 2.613125929750335 0
29 -1.414213562376743 2.449489742781072 0
30 -1.721837338309189 2.243942107186442 0
31 -2.243942107185828 1.721837338309988 0
32 -2.449489742780063 1.414213562378489 0
33 -2.613125929749177 1.082392200301025 0
34 -2.732050807567089 0.7320508075755515 0
35 -2.804229538599327 0.3691838225694668 0
36 -2.82842712474619 2.042810365310288e-12 0
37 -2.804229538599814 -0.3691838225657669 0
38 -2.732050807567963 -0.7320508075722882 0
39 -2.613125929750335 -1.082392200298232 0
40 -2.449489742781072 -1.414213562376743 0
41 -2.243942107186442 -1.721837338309189 0
42 -1.721837338309988 -2.243942107185828 0
43 -1.414213562378489 -2.449489742780063 0
44 -1.082392200301025 -2.613125929749177 0
45 -0.7320508075755515 -2.732050807567089 0
46 -0.3691838225694668 -2.804229538599327 0
47 -2.042810365310288e-12 -2.82842712474619 0
48 0.3691838225657669 -2.804229538599814 0
49 0.7320508075722882 -2.732050807567963 0
50 1.082392200298232 -2.613125929750335 0
51 1.414213562376743 -2.449489742781072 0
52 1.721837338309189 -2.243942107186442 0
53 0.9799222236558836 -0.4058970751130254 0
54 1.060660171779821 -1.17217346939924e-12 0
55 0.9799222236563322 0.4058970751119425 0
56 0.4058970751130254 0.9799222236558836 0
57 1.17217346939924e-12 1.060660171779821 0
58 -0.4058970751119425 0.9799222236563322 0
59 -0.9799222236558836 0.4058970751130254 0
60 -1.060660171779821 1.17217346939924e-12 0
61 -0.9799222236563322 -0.4058970751119425 0
62 -0.4058970751130254 -0.9799222236558836 0
63 -1.17217346939924e-12 -1.060660171779821 0
64 0.4058970751119425 -0.9799222236563322 0
65 -1.603053551837808 1.035931010198212 0
66 1.036577788372759 1.605723664129419 0
67 -1.036577788372759 -1.605723664129419 0
68 1.603053551837808 -1.035931010198211 0
69 -0.4014118666649887 1.861391223022966 0
70 1.861391223022966 0.4014118666649886 0
71 0.4014118666649886 -1.861391223022966 0
72 -1.864557687207496 -0.4026727515019466 0
73 1.154138473928815 -1.730679595767878 0
74 1.732512748297238 1.153777812932465 0
75 -1.155304301156612 1.735356898214211 0
76 -1.735679212481769 -1.155038697769424 0
77 -2.041869137620635 0.3999207875336748 0
78 2.044826586608688 -0.4032166135917449 0
79 0.4005792405678246 2.044509930799427 0
80 -0.4005792405678246 -2.044509930799427 0
81 0.8952504472633332 2.122720546077642 0
82 2.122710649333369 -0.8947969122024874 0
83 -0.8952504472633332 -2.122720546077642 0
84 -2.119516411327709 0.8944743134538751 0
85 1.617029444517882 1.638288716625273 0
86 -1.617029444517882 -1.638288716625273 0
87 1.638288716625273 -1.617029444517882 0
88 -1.638288716625273 1.617029444517883 0
89 -2.134520261171363 -0.8649827639402138 0
90 -0.8653014880048396 2.134133484050294 0
91 2.130720504149927 0.863469702135864 0
92 0.8654881125039046 -2.134184635301302 0
93 -2.298935263512999 -0.0196758845402565 0
94 0.01966187470873467 -2.298900080577615 0
95 -0.01966187470873472 2.298900080577615 0
96 2.299206341770291 0.01964011872137049 0
97 -1.088784557322285 1.158436444448123 0
98 1.162459035459992 1.093230142938433 0
99 1.089240462981675 -1.156001376132773 0
100 -1.158447212141924 -1.088811274087889 0
101 1.488901246608084 -0.6356751918254733 0
102 0.6379134222969599 1.494034914587925 0
103 -0.6361250019511276 -1.489206173038491 0
104 -1.489260868271343 0.6353781098071914 0
105 -1.523900761773187 0.01918594275462009 0
106 1.524126660320931 -0.01921574760369067 0
107 0.01919761761422042 1.523871442660368 0
108 -0.01919761761422043 -1.523871442660368 0
109 -0.5726572407466781 1.451093136919772 0
110 1.451180146051569 0.5729643710179282 0
111 0.5730996819571672 -1.44955839993104 0
112 -1.45167097430954 -0.5725496649707034 0
113 -2.070271601712551 1.383826797297103 0
114 2.070271601712552 -1.383826797297104 0
115 1.383826797297103 2.070271601712551 0
116 -1.383826797297103 -2.070271601712551 0
117 -0.4862306120893571 2.44224914814872 0
118 2.44224914814872 0.4862306120893571 0
119 -2.44224914814872 -0.4862306120893568 0
120 0.4862306120893571 -2.44224914814872 0
121 2.05273979839492 1.36995202103259 0
122 1.369986369698909 -2.052565212439743 0
123 -1.370097400863461 2.053010669815584 0
124 -2.053041366412494 -1.370072105302776 0
125 -2.421931623629217 0.4811586065579935 0
126 2.422213285437603 -0.4814724947540004 0
127 -0.4812213163707699 -2.422183127741483 0
128 0.4812213163707699 2.422183127741483 0
129 0.7662761304239127 1.117235760616998 0
130 -0.7587362543620141 -1.116159418432683 0
131 1.116159418432683 -0.7587362543620146 0
132 -1.116159418432683 0.7587362543620148 0
133 -1.337444170311493 -0.2566438024586724 0
134 1.337444170311494 0.2566438024586729 0
135 -0.256643802458673 1.337444170311494 0
136 0.2566438024586729 -1.337444170311494 0
137 1.807038054662166 0.7987354812149148 0
138 -1.809025287186327 -0.7931201828820965 0
139 0.7969102971097755 -1.80650809316086 0
140 -0.7955106133667879 1.8061244587783 0
141 -1.941503573951054 0.01364218294485497 0
142 0.01374725668126803 1.941239701935676 0
143 -0.01374725668126807 -1.941239701935676 0
144 1.943536660880746 -0.01391042658649948 0
145 1.358378938594602 -1.398140292795051 0
146 1.398531222816724 1.359675003606271 0
147 -1.399985690099442 -1.358405970858358 0
148 -1.358205595116323 1.399904932395933 0
149 1.846193910446221 -0.7067849762229077 0
150 0.710186489179253 1.846268136028276 0
151 -0.710186489179253 -1.846268136028276 0
152 -1.849430505415559 0.7041112380583637 0
153 1.112325524507742 -2.285089179531918 0
154 -2.285089179531918 -1.112325524507742 0
155 2.285089179531918 1.112325524507742 0
156 -1.112325524507742 2.285089179531918 0
157 -1.905017469171253 -1.683476901169955 0
158 1.904983961613745 1.683463558473268 0
159 1.683467374991747 -1.90496456317428 0
160 -1.68347971178781 1.905014058438264 0
161 -0.8264872362770279 -2.404573203645117 0
162 0.8264872362770279 2.404573203645117 0
163 2.404575454861989 -0.8264647522017373 0
164 -2.404189243771539 0.8263940314301128 0
165 -0.155948373639831 -2.537306360520791 0
166 0.155948373639831 2.537306360520791 0
167 2.537343740397324 -0.1559786996810082 0
168 -2.53728232483447 0.1559398492349088 0
169 -1.310509946735339 0.3216763004306342 0
170 1.310495088611394 -0.3217126211936726 0
171 0.3227970630318853 1.311156732222904 0
172 -0.3217605856532485 -1.310500611808043 0
173 -0.7866627321231576 1.098110598215478 0
174 -1.098175998780318 -0.7866537477886718 0
175 1.09940498446054 0.7873104052422367 0
176 0.7871232094383829 -1.095836356207886 0
177 -2.276997346823582 1.124980157761986 0
178 1.125076750946028 2.277396024003972 0
179 -1.125076750946028 -2.277396024003972 0
180 2.277395174500928 -1.125023859930901 0
181 1.674332845561644 1.911408820393052 0
182 -1.67433656862359 -1.911410302914906 0
183 -1.911410615205778 1.674336189653258 0
184 1.911409244450661 -1.674330690179482 0
185 2.406550323854878 0.8146461018737431 0
186 0.8148703696924143 -2.406935227316142 0
187 -0.8148496336369626 2.406929543843808 0
188 -2.406972519079482 -0.814814219852004 0
189 0.168530944973311 -2.533993575803263 0
190 -0.168530944973311 2.533993575803263 0
191 2.534031758144286 0.1685251580812509 0
192 -2.533994814386492 -0.1685334487773601 0
193 1.449057054979459 0.9565799151468541 0
194 0.9510879554236283 -1.446964061591388 0
195 -0.955627895466809 1.448823752448747 0
196 -1.449263519785136 -0.95534506196962 0
197 -0.3387270220634718 -1.699995029163552 0
198 0.3390408995884128 1.700604458270697 0
199 1.700271046630862 -0.3386069537720326 0
200 -1.700092673329867 0.337873507605961 0
201 1.998444214034606 1.068219608351843 0
202 1.068298039808586 -1.99856773819001 0
203 -1.999678216934299 -1.067856772695666 0
204 -1.068256779828625 1.999192801415157 0
205 1.749132194880438 1.43572304393114 0
206 -1.749792995819416 -1.435739747805263 0
207 1.435603412087071 -1.748809785954348 0
208 -1.435752192315088 1.749734705245954 0
209 -2.250803169944966 0.2175967728683715 0
210 2.251550462151136 -0.2181237827564662 0
211 -0.2177099423110098 -2.251152140348515 0
212 0.2177099423110098 2.251152140348515 0
213 -0.6555501412305837 -2.170728572205124 0
214 0.6555501412305837 2.170728572205124 0
215 2.170763897857914 -0.6554182771392063 0
216 -2.170286169201486 0.6545280408806916 0
217 1.924491814990389 -1.085266906362569 0
218 1.085772986052221 1.924797935448276 0
219 -1.085772986052221 -1.924797935448276 0
220 -1.924452318244425 1.084929124242339 0
221 -2.18745382015758 -0.2778432663014699 0
222 -0.2776896582782549 2.187068624855522 0
223 2.18736211401983 0.2776684679688486 0
224 0.2776896582782548 -2.187068624855522 0
225 -0.244158001309803 1.624613862920414 0
226 1.624965754352071 0.2441747786933428 0
227 0.2442169934712016 -1.624409231321916 0
228 -1.625152195280746 -0.2443273423307354 0
229 -1.327045276602698 1.004181334220865 0
230 1.327081226932619 -1.003660984101139 0
231 1.005964113975381 1.328970009255845 0
232 -1.004379360316304 -1.327424277878217 0
233 -2.133232934848308 -0.5925946265464197 0
234 2.1321810065047 0.5928722304776007 0
235 -0.5927424127102093 2.132468241487047 0
236 0.5929209731877095 -2.132517182498813 0
237 -1.747573353265246 1.354712570504157 0
238 1.747596849872927 -1.354553419731443 0
239 1.354725191205669 1.748071502506656 0
240 -1.354887212355076 -1.747930663592649 0
$EndNodes
$Elements
480
1 1 2 5 1 1 9
2 1 2 5 1 9 10
3 1 2 5 1 10 11
4 1 2 5 1 11 12
5 1 2 5 1 12 13
6 1 2 5 1 13 14
7 1 2 5 1 14 15
8 1 2 5 1 15 16
9 1 2 5 1 16 17
10 1 2 5 1 17 18
11 1 2 5 1 18 19
12 1 2 5 1 19 2
13 1 2 5 2 2 20
14 1 2 5 2 20 21
15 1 2 5 2 21 22
16 1 2 5 2 22 23
17 1 2 5 2 23 24
18 1 2 5 2 24 25
19 1 2 5 2 25 26
20 1 2 5 2 26 27
21 1 2 5 2 27 28
22 1 2 5 2 28 29
23 1 2 5 2 29 30
24 1 2 5 2 30 3
25 1 2 5 3 3 31
26 1 2 5 3 31 32
27 1 2 5 3 32 33
28 1 2 5 3 33 34
29 1 2 5 3 34 35
30 1 2 5 3 35 36
31 1 2 5 3 36 37
32 1 2 5 3 37 38
33 1 2 5 3 38 39
34 1 2 5 3 39 40
35 1 2 5 3 40 41
36 1 2 5 3 41 4
37 1 2 5 4 4 42
38 1 2 5 4 42 43
39 1 2 5 4 43 44
40 1 2 5 4 44 45
41 1 2 5 4 45 46
42 1 2 5 4 46 47
43 1 2 5 4 47 48
44 1 2 5 4 48 49
45 1 2 5 4 49 50
46 1 2 5 4 50 51
47 1 2 5 4 51 52
48 1 2 5 4 52 1
49 1 2 6 5 5 53
50 1 2 6 5 53 54
51 1 2 6 5 54 55
52 1 2 6 5 55 6
53 1 2 6 6 6 56
54 1 2 6 6 56 57
55 1 2 6 6 57 58
56 1 2 6 6 58 7
57 1 2 6 7 7 59
58 1 2 6 7 59 60
59 1 2 6 7 60 61
60 1 2 6 7 61 8
61 1 2 6 8 8 62
62 1 2 6 8 62 63
63 1 2 6 8 63 64
64 1 2 6 8 64 5
65 2 2 7 11 66 102 231
66 2 2 7 11 67 103 232
67 2 2 7 11 68 101 230
68 2 2 7 11 65 104 229
69 2 2 7 11 65 152 104
70 2 2 7 11 66 150 102
71 2 2 7 11 67 151 103
72 2 2 7 11 68 149 101
73 2 2 7 11 131 101 170
74 2 2 7 11 102 171 129
75 2 2 7 11 130 103 172
76 2 2 7 11 132 104 169
77 2 2 7 11 98 129 175
78 2 2 7 11 131 176 99
79 2 2 7 11 130 174 100
80 2 2 7 11 132 173 97
81 2 2 7 11 72 138 112
82 2 2 7 11 69 140 109
83 2 2 7 11 70 137 110
84 2 2 7 11 71 139 111
85 2 2 7 11 53 131 170
86 2 2 7 11 56 129 171
87 2 2 7 11 62 130 172
88 2 2 7 11 59 132 169
89 2 2 7 11 6 175 129
90 2 2 7 11 5 176 131
91 2 2 7 11 8 174 130
92 2 2 7 11 7 173 132
93 2 2 7 11 70 110 226
94 2 2 7 11 72 112 228
95 2 2 7 11 69 109 225
96 2 2 7 11 71 111 227
97 2 2 7 11 31 32 113
98 2 2 7 11 42 43 116
99 2 2 7 11 20 21 115
100 2 2 7 11 9 10 114
101 2 2 7 11 37 38 119
102 2 2 7 11 26 27 117
103 2 2 7 11 15 16 118
104 2 2 7 11 48 49 120
105 2 2 7 11 64 136 111
106 2 2 7 11 58 135 109
107 2 2 7 11 55 134 110
108 2 2 7 11 61 133 112
109 2 2 7 11 57 107 135
110 2 2 7 11 54 106 134
111 2 2 7 11 63 108 136
112 2 2 7 11 60 105 133
113 2 2 7 11 64 111 176
114 2 2 7 11 58 109 173
115 2 2 7 11 55 110 175
116 2 2 7 11 61 112 174
117 2 2 7 11 57 171 107
118 2 2 7 11 54 170 106
119 2 2 7 11 63 172 108
120 2 2 7 11 60 169 105
121 2 2 7 11 131 230 101
122 2 2 7 11 130 232 103
123 2 2 7 11 102 129 231
124 2 2 7 11 132 229 104
125 2 2 7 11 29 30 123
126 2 2 7 11 51 52 122
127 2 2 7 11 40 41 124
128 2 2 7 11 18 19 121
129 2 2 7 11 34 35 125
130 2 2 7 11 12 13 126
131 2 2 7 11 45 46 127
132 2 2 7 11 23 24 128
133 2 2 7 11 31 113 183
134 2 2 7 11 20 115 181
135 2 2 7 11 42 116 182
136 2 2 7 11 9 114 184
137 2 2 7 11 32 177 113
138 2 2 7 11 21 178 115
139 2 2 7 11 10 180 114
140 2 2 7 11 43 179 116
141 2 2 7 11 38 188 119
142 2 2 7 11 27 187 117
143 2 2 7 11 49 186 120
144 2 2 7 11 16 185 118
145 2 2 7 11 37 119 192
146 2 2 7 11 48 120 189
147 2 2 7 11 26 117 190
148 2 2 7 11 15 118 191
149 2 2 7 11 5 131 53
150 2 2 7 11 6 129 56
151 2 2 7 11 8 130 62
152 2 2 7 11 7 132 59
153 2 2 7 11 70 226 144
154 2 2 7 11 69 225 142
155 2 2 7 11 71 227 143
156 2 2 7 11 72 228 141
157 2 2 7 11 114 180 217
158 2 2 7 11 116 179 219
159 2 2 7 11 115 178 218
160 2 2 7 11 113 177 220
161 2 2 7 11 118 223 191
162 2 2 7 11 120 224 189
163 2 2 7 11 119 221 192
164 2 2 7 11 117 222 190
165 2 2 7 11 68 145 238
166 2 2 7 11 66 146 239
167 2 2 7 11 67 147 240
168 2 2 7 11 65 148 237
169 2 2 7 11 82 217 180
170 2 2 7 11 83 219 179
171 2 2 7 11 81 218 178
172 2 2 7 11 84 220 177
173 2 2 7 11 96 191 223
174 2 2 7 11 94 189 224
175 2 2 7 11 93 192 221
176 2 2 7 11 95 190 222
177 2 2 7 11 69 235 140
178 2 2 7 11 70 234 137
179 2 2 7 11 71 236 139
180 2 2 7 11 138 72 233
181 2 2 7 11 65 220 152
182 2 2 7 11 150 66 218
183 2 2 7 11 151 67 219
184 2 2 7 11 68 217 149
185 2 2 7 11 66 231 146
186 2 2 7 11 67 232 147
187 2 2 7 11 65 229 148
188 2 2 7 11 68 230 145
189 2 2 7 11 119 188 233
190 2 2 7 11 118 185 234
191 2 2 7 11 120 186 236
192 2 2 7 11 117 187 235
193 2 2 7 11 113 237 183
194 2 2 7 11 114 238 184
195 2 2 7 11 115 239 181
196 2 2 7 11 116 240 182
197 2 2 7 11 69 142 222
198 2 2 7 11 70 144 223
199 2 2 7 11 71 143 224
200 2 2 7 11 72 141 221
201 2 2 7 11 41 157 124
202 2 2 7 11 19 158 121
203 2 2 7 11 52 159 122
204 2 2 7 11 30 160 123
205 2 2 7 11 40 124 154
206 2 2 7 11 18 121 155
207 2 2 7 11 29 123 156
208 2 2 7 11 51 122 153
209 2 2 7 11 45 127 161
210 2 2 7 11 23 128 162
211 2 2 7 11 34 125 164
212 2 2 7 11 12 126 163
213 2 2 7 11 24 166 128
214 2 2 7 11 46 165 127
215 2 2 7 11 13 167 126
216 2 2 7 11 35 168 125
217 2 2 7 11 89 233 188
218 2 2 7 11 91 234 185
219 2 2 7 11 92 236 186
220 2 2 7 11 90 235 187
221 2 2 7 11 88 183 237
222 2 2 7 11 87 184 238
223 2 2 7 11 85 181 239
224 2 2 7 11 86 182 240
225 2 2 7 11 54 134 55
226 2 2 7 11 63 136 64
227 2 2 7 11 60 133 61
228 2 2 7 11 57 135 58
229 2 2 7 11 141 228 105
230 2 2 7 11 144 226 106
231 2 2 7 11 143 227 108
232 2 2 7 11 142 225 107
233 2 2 7 11 133 228 112
234 2 2 7 11 135 225 109
235 2 2 7 11 136 227 111
236 2 2 7 11 134 226 110
237 2 2 7 11 74 146 193
238 2 2 7 11 75 148 195
239 2 2 7 11 76 147 196
240 2 2 7 11 73 145 194
241 2 2 7 11 149 78 199
242 2 2 7 11 151 80 197
243 2 2 7 11 150 79 198
244 2 2 7 11 77 200 152
245 2 2 7 11 140 235 90
246 2 2 7 11 91 137 234
247 2 2 7 11 139 236 92
248 2 2 7 11 138 233 89
249 2 2 7 11 142 95 222
250 2 2 7 11 144 96 223
251 2 2 7 11 143 94 224
252 2 2 7 11 141 93 221
253 2 2 7 11 85 239 146
254 2 2 7 11 86 240 147
255 2 2 7 11 87 238 145
256 2 2 7 11 88 237 148
257 2 2 7 11 147 100 196
258 2 2 7 11 148 97 195
259 2 2 7 11 98 193 146
260 2 2 7 11 145 99 194
261 2 2 7 11 149 199 101
262 2 2 7 11 151 197 103
263 2 2 7 11 150 198 102
264 2 2 7 11 152 200 104
265 2 2 7 11 100 174 196
266 2 2 7 11 99 176 194
267 2 2 7 11 98 175 193
268 2 2 7 11 97 173 195
269 2 2 7 11 104 200 169
270 2 2 7 11 101 199 170
271 2 2 7 11 103 197 172
272 2 2 7 11 102 198 171
273 2 2 7 11 112 196 174
274 2 2 7 11 111 194 176
275 2 2 7 11 110 193 175
276 2 2 7 11 109 195 173
277 2 2 7 11 105 169 200
278 2 2 7 11 108 172 197
279 2 2 7 11 107 171 198
280 2 2 7 11 106 170 199
281 2 2 7 11 150 218 81
282 2 2 7 11 151 219 83
283 2 2 7 11 149 217 82
284 2 2 7 11 84 152 220
285 2 2 7 11 28 29 156
286 2 2 7 11 39 40 154
287 2 2 7 11 17 18 155
288 2 2 7 11 50 51 153
289 2 2 7 11 44 45 161
290 2 2 7 11 22 23 162
291 2 2 7 11 11 12 163
292 2 2 7 11 33 34 164
293 2 2 7 11 2 158 19
294 2 2 7 11 4 157 41
295 2 2 7 11 1 159 52
296 2 2 7 11 3 160 30
297 2 2 7 11 35 36 168
298 2 2 7 11 46 47 165
299 2 2 7 11 24 25 166
300 2 2 7 11 13 14 167
301 2 2 7 11 53 170 54
302 2 2 7 11 56 171 57
303 2 2 7 11 62 172 63
304 2 2 7 11 59 169 60
305 2 2 7 11 7 58 173
306 2 2 7 11 6 55 175
307 2 2 7 11 5 64 176
308 2 2 7 11 8 61 174
309 2 2 7 11 77 216 125
310 2 2 7 11 80 213 127
311 2 2 7 11 79 214 128
312 2 2 7 11 78 215 126
313 2 2 7 11 75 123 208
314 2 2 7 11 76 124 206
315 2 2 7 11 74 121 205
316 2 2 7 11 73 122 207
317 2 2 7 11 75 204 123
318 2 2 7 11 74 201 121
319 2 2 7 11 73 202 122
320 2 2 7 11 76 203 124
321 2 2 7 11 77 125 209
322 2 2 7 11 80 127 211
323 2 2 7 11 78 126 210
324 2 2 7 11 79 128 212
325 2 2 7 11 147 232 100
326 2 2 7 11 148 229 97
327 2 2 7 11 98 146 231
328 2 2 7 11 145 230 99
329 2 2 7 11 91 201 137
330 2 2 7 11 139 92 202
331 2 2 7 11 140 90 204
332 2 2 7 11 138 89 203
333 2 2 7 11 144 210 96
334 2 2 7 11 143 211 94
335 2 2 7 11 142 212 95
336 2 2 7 11 141 209 93
337 2 2 7 11 74 137 201
338 2 2 7 11 73 139 202
339 2 2 7 11 138 203 76
340 2 2 7 11 140 204 75
341 2 2 7 11 143 80 211
342 2 2 7 11 142 79 212
343 2 2 7 11 78 210 144
344 2 2 7 11 141 77 209
345 2 2 7 11 138 76 196
346 2 2 7 11 74 193 137
347 2 2 7 11 73 194 139
348 2 2 7 11 140 75 195
349 2 2 7 11 141 200 77
350 2 2 7 11 142 198 79
351 2 2 7 11 143 197 80
352 2 2 7 11 78 144 199
353 2 2 7 11 16 17 185
354 2 2 7 11 49 50 186
355 2 2 7 11 27 28 187
356 2 2 7 11 38 39 188
357 2 2 7 11 43 44 179
358 2 2 7 11 32 33 177
359 2 2 7 11 21 22 178
360 2 2 7 11 10 11 180
361 2 2 7 11 2 20 181
362 2 2 7 11 4 42 182
363 2 2 7 11 1 9 184
364 2 2 7 11 3 31 183
365 2 2 7 11 36 37 192
366 2 2 7 11 47 48 189
367 2 2 7 11 25 26 190
368 2 2 7 11 14 15 191
369 2 2 7 11 130 100 232
370 2 2 7 11 98 231 129
371 2 2 7 11 131 99 230
372 2 2 7 11 132 97 229
373 2 2 7 11 87 145 207
374 2 2 7 11 88 148 208
375 2 2 7 11 85 146 205
376 2 2 7 11 86 147 206
377 2 2 7 11 151 83 213
378 2 2 7 11 150 81 214
379 2 2 7 11 149 82 215
380 2 2 7 11 84 216 152
381 2 2 7 11 138 196 112
382 2 2 7 11 139 194 111
383 2 2 7 11 137 193 110
384 2 2 7 11 140 195 109
385 2 2 7 11 141 105 200
386 2 2 7 11 143 108 197
387 2 2 7 11 142 107 198
388 2 2 7 11 144 106 199
389 2 2 7 11 73 207 145
390 2 2 7 11 74 205 146
391 2 2 7 11 76 206 147
392 2 2 7 11 75 208 148
393 2 2 7 11 151 213 80
394 2 2 7 11 150 214 79
395 2 2 7 11 149 215 78
396 2 2 7 11 77 152 216
397 2 2 7 11 33 164 177
398 2 2 7 11 44 161 179
399 2 2 7 11 11 163 180
400 2 2 7 11 22 162 178
401 2 2 7 11 17 155 185
402 2 2 7 11 50 153 186
403 2 2 7 11 39 154 188
404 2 2 7 11 28 156 187
405 2 2 7 11 2 181 158
406 2 2 7 11 4 182 157
407 2 2 7 11 1 184 159
408 2 2 7 11 3 183 160
409 2 2 7 11 25 190 166
410 2 2 7 11 47 189 165
411 2 2 7 11 14 191 167
412 2 2 7 11 36 192 168
413 2 2 7 11 83 179 161
414 2 2 7 11 82 180 163
415 2 2 7 11 81 178 162
416 2 2 7 11 84 177 164
417 2 2 7 11 154 89 188
418 2 2 7 11 155 91 185
419 2 2 7 11 153 92 186
420 2 2 7 11 156 90 187
421 2 2 7 11 88 160 183
422 2 2 7 11 85 158 181
423 2 2 7 11 86 157 182
424 2 2 7 11 87 159 184
425 2 2 7 11 94 165 189
426 2 2 7 11 95 166 190
427 2 2 7 11 96 167 191
428 2 2 7 11 93 168 192
429 2 2 7 11 135 107 225
430 2 2 7 11 133 105 228
431 2 2 7 11 136 108 227
432 2 2 7 11 134 106 226
433 2 2 7 11 125 216 164
434 2 2 7 11 126 215 163
435 2 2 7 11 127 213 161
436 2 2 7 11 128 214 162
437 2 2 7 11 123 160 208
438 2 2 7 11 122 159 207
439 2 2 7 11 121 158 205
440 2 2 7 11 124 157 206
441 2 2 7 11 125 168 209
442 2 2 7 11 126 167 210
443 2 2 7 11 128 166 212
444 2 2 7 11 127 165 211
445 2 2 7 11 156 123 204
446 2 2 7 11 155 121 201
447 2 2 7 11 154 124 203
448 2 2 7 11 153 122 202
449 2 2 7 11 82 163 215
450 2 2 7 11 84 164 216
451 2 2 7 11 83 161 213
452 2 2 7 11 81 162 214
453 2 2 7 11 88 208 160
454 2 2 7 11 85 205 158
455 2 2 7 11 87 207 159
456 2 2 7 11 86 206 157
457 2 2 7 11 156 204 90
458 2 2 7 11 155 201 91
459 2 2 7 11 153 202 92
460 2 2 7 11 154 203 89
461 2 2 7 11 96 210 167
462 2 2 7 11 94 211 165
463 2 2 7 11 95 212 166
464 2 2 7 11 93 209 168
465 2 2 7 11 67 240 219
466 2 2 7 11 66 239 218
467 2 2 7 11 68 238 217
468 2 2 7 11 65 237 220
469 2 2 7 11 69 222 235
470 2 2 7 11 70 223 234
471 2 2 7 11 71 224 236
472 2 2 7 11 72 221 233
473 2 2 7 11 119 233 221
474 2 2 7 11 118 234 223
475 2 2 7 11 117 235 222
476 2 2 7 11 120 236 224
477 2 2 7 11 113 220 237
478 2 2 7 11 114 217 238
479 2 2 7 11 115 218 239
480 2 2 7 11 116 219 240
$EndElements


Revision-number: 28
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T10:52:44.113725Z
PROPS-END

Node-path: basis/Basis.h
Node-kind: file
Node-action: change
Text-content-length: 2372
Text-content-md5: 53b6f9802559dc081ba790174a082993
Text-content-sha1: 05e12ee4cc811318a42828fbc840793a7f3326a2
Content-length: 2372

#ifndef _BASIS_H_
#define _BASIS_H_

/**
   @class Basis
   @brief Mother class of all Basis

   This class is the @em mother (by @em inheritence) of all Basis.@n

   A Basis may be of @em two types:
   @li Polynomial, for @em scalar basis
   @li Vector<Polynomial>, for @em vectorial basis@n

   A Basis is @em set of @em linearly @em independent Polynomial%s (or Vector%s of Polynomial%s).@n
 */

template<class T>
class Basis{
 protected:
  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

  T* basis;

 public:
  ~Basis(void);
  
  int getOrder(void) const;
  int getType(void) const;
  int getSize(void) const;
  int getNodeNbr(void) const;
  int getDim(void) const;

  const T* getBasis(void) const;

 protected:
  Basis(void);
};

/**
   @fn Basis::~Basis(void)
   @return Deletes this Basis

   @fn int Basis<>::getOrder(void) const
   @return Returns the @em polynomial @em order of the Basis

   @fn int Basis<>::getType(void) const
   @return Returns the @em type of the Basis:
   @li 0 for 0-form
   @li 1 for 1-form
   @li 2 for 2-form
   @li 3 for 3-form

   @todo Check if the 'form numbering' is good
   
   @fn int Basis<>::getSize(void) const
   @return Returns the number of Polynomial%s 
   (or Vector%s of Polynomial%s) in the Basis

   @fn int Basis<>::getNodeNbr(void) const
   @return Returns the node number of 
   the @em geometric @em reference @em element
 
   @fn int Basis<>::getDim(void) const
   @return Returns the @em dimension (1D, 2D or 3D) of the Basis

   @fn const T* Basis<>::getBasis(void) const
   @return Returns the Polynomial%s 
   (or Vector%s of Polynomial%s) of the Basis
*/

//////////////////////
// In .h Functions  //
//////////////////////

template<class T>
Basis<T>::Basis(void){
}

template<class T>
Basis<T>::~Basis(void){
  delete[] basis;
}

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline int Basis<T>::getOrder(void) const{
  return order;
}

template<class T>
inline int Basis<T>::getType(void) const{
  return type;
}

template<class T>
inline int Basis<T>::getSize(void) const{
  return size;
}

template<class T>
inline int Basis<T>::getNodeNbr(void) const{
  return nodeNbr;
}

template<class T>
inline int Basis<T>::getDim(void) const{
  return dim;
}

template<class T>
inline const T* Basis<T>::getBasis(void) const{
  return basis;
}

#endif


Node-path: basis/QuadEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 5818
Text-content-md5: 6474272d0eb6176c0950c10a835faf94
Text-content-sha1: f4c934614cdca79f6104155a3a23fa2503978707
Content-length: 5818

#include "QuadEdgeBasis.h"
#include "Legendre.h"

QuadEdgeBasis::QuadEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 1;
  size    = 2 * (order + 2) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  const int  orderPlus = order + 1;
  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];

  Polynomial* iLegendreX  = new Polynomial[orderPlus];
  Polynomial* iLegendreY  = new Polynomial[orderPlus];
  Polynomial* legendreX   = new Polynomial[orderPlus];
  Polynomial* legendreY   = new Polynomial[orderPlus];

  Polynomial* lagrange    = new Polynomial[4];
  Polynomial* lagrangeSum = new Polynomial[4];

  Polynomial* lifting     = new Polynomial[4];
  Polynomial* liftingSub  = new Polynomial[4];

  // Integrated and classical Legendre Polynomial //
  Legendre::integrated(intLegendre, orderPlus);
  Legendre::legendre(legendre, order);

  // Lagrange // 
  lagrange[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  lagrange[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    lagrangeSum[i] = lagrange[i] + lagrange[j];
    
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  // Lifting Sub //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    liftingSub[i] = lifting[j] - lifting[i];


  // Basis //
  basis = new Vector<Polynomial>[size];
  
  // Edge Based (Nedelec) // 
  int i = 0;
  Polynomial oneHalf(0.5, 0, 0, 0);

  for(int e = 0; e < 4; e++){
    basis[i] = 
      (liftingSub[e]).gradient();
    
    basis[i].mul(lagrangeSum[e]);
    basis[i].mul(oneHalf);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 4; e++){
      basis[i] = 
	(intLegendre[l].compose(liftingSub[e]) * lagrangeSum[e]).gradient();
     
      i++;
    }
  }

  
  // Cell Based (Preliminary) //
  Polynomial px   = Polynomial(2, 1, 0, 0);
  Polynomial py   = Polynomial(2, 0, 1, 0);
  Polynomial zero = Polynomial(0, 0, 0, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l = 0; l < orderPlus; l++){
    iLegendreX[l] = intLegendre[l].compose(px);
    iLegendreY[l] = intLegendre[l].compose(py);
     legendreX[l] =    legendre[l].compose(px);
     legendreY[l] =    legendre[l].compose(py);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i] = (iLegendreX[l1] * iLegendreY[l2]).gradient();

      i++;
    }
  }
  
  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i](0) =  legendreX[l1] * iLegendreY[l2];
      basis[i](1) = iLegendreX[l1] *  legendreY[l2] * -1;
      basis[i](2) = zero;

      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 1, iPlus = i + order; l < orderPlus; l++, iPlus++){
    basis[i](0) = iLegendreY[l];
    basis[i](1) = zero;
    basis[i](2) = zero;

    basis[iPlus](0) = zero;
    basis[iPlus](1) = iLegendreX[l];
    basis[iPlus](2) = zero;

    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;

  delete[] iLegendreX;
  delete[] iLegendreY;
  delete[] legendreX;
  delete[] legendreY;

  delete[] lagrange;
  delete[] lagrangeSum;

  delete[] lifting;
  delete[] liftingSub;
}

/*
#include <cstdio>
int main(void){
  const int P = 3;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  QuadEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("close all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++){
    for(int j = 0; j < 2; j++)
      printf("p(%d, %d) = %s;\n", i + 1, j + 1, basis[i](j).toString().c_str());
    //printf("p(%d) = %s", i, basis[i].toString().c_str());
    printf("\n");
  }

  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);

  printf("\n");
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/QuadNodeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 3453
Text-content-md5: 210d4169b9f8dc86fa4b602d3fcfc051
Text-content-sha1: 0253917c63dd1c39cbdf0c7837ffde0436c9c2a8
Content-length: 3453

#include "QuadNodeBasis.h"
#include "Legendre.h"

QuadNodeBasis::QuadNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 0;
  size    = (order + 1) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre = new Polynomial[order];
  Polynomial* lifting  = new Polynomial[4];

  // Legendre Polynomial //
  Legendre::integrated(legendre, order);
  
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));



  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  basis[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));
  
  // Edge Based //
  int i = 4;

  for(int l = 1; l < order; l++){
    for(int e1 = 0, e2 = 1; e1 < 4; e1++, e2 = (e2 + 1) % 4){
      basis[i] = 
	legendre[l].compose(lifting[e2] - lifting[e1]) * (basis[e1] + basis[e2]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial px = Polynomial(2, 1, 0, 0);
  Polynomial py = Polynomial(2, 0, 1, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 1; l2 < order; l2++){
      basis[i] = legendre[l1].compose(px) * legendre[l2].compose(py);

      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] lifting;
}


/*
#include <cstdio>
int main(void){
  const int P = 4;
  const double d = 0.05;

  QuadNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());

  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize(); i > 0; i--)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i, i);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/TriEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 4797
Text-content-md5: 1d0b5ff918d3f73869375761be62a2be
Text-content-sha1: 8b0c2b1b6df7da7ce0c6c581ffca4d1d900a25e0
Content-length: 4797

#include "TriEdgeBasis.h"
#include "Legendre.h"

TriEdgeBasis::TriEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 1;
  size    = (order + 1) * (order + 2);
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  const int orderPlus     = order + 1;
  const int orderMinus    = order - 1;

  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];
  
  Polynomial* lagrange    = new Polynomial[3];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  Polynomial* u           = new Polynomial[orderPlus];
  Polynomial* v           = new Polynomial[orderPlus];

  // Classical and Intrated-Scaled Legendre Polynomial //
  Legendre::legendre(legendre, order);
  Legendre::intScaled(intLegendre, orderPlus);

  // Lagrange //
  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = lagrange[j] + lagrange[i];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = lagrange[i] - lagrange[j];


  // Basis //
  basis = new Vector<Polynomial>[size];

  // Edge Based (Nedelec) //
  int i = 0;

  for(int j = 1; i < 3; j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	(intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e])).gradient();

      i++;
    }
  }

  // Cell Based (Preliminary) //
  Polynomial p = lagrange[2] * 2 - Polynomial(1, 0, 0, 0);
  
  for(int l = 0; l < orderPlus; l++){
    u[l] = intLegendre[l].compose(lagrangeSub[0] * -1, lagrangeSum[0]);
    v[l] = legendre[l].compose(p);
    v[l].mul(lagrange[2]);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].add(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].sub(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 0; l < orderMinus; l++){
    basis[i] = basis[0];
    basis[i].mul(v[l]);
    
    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrange;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
  delete[] u;
  delete[] v;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNedelecBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 2518
Text-content-md5: 9ede184ff2c905e8167b3f36b0214235
Text-content-sha1: ef53c113aa9efae94ebb6e479381d8f76f51e906
Content-length: 2518

#include "TriNedelecBasis.h"

TriNedelecBasis::TriNedelecBasis(void){
  // Set Basis Type //
  order   = 1;
  type    = 1;
  size    = 3;
  nodeNbr = 3;
  dim     = 2;

  // Lagrange //
  Polynomial* lagrange    = new Polynomial[3];

  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Basis //
  basis = new Vector<Polynomial>[size];

  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);
  }

  // Free Temporary Sapce //
  delete[] lagrange;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriNedelec b;
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNodeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 3307
Text-content-md5: f977cb2edc68a171ae9dbd07ee6f1a93
Text-content-sha1: 745d1737168c25ac8f0602d9f9dc2fd1930bfa0a
Content-length: 3307

#include "TriNodeBasis.h"
#include "Legendre.h"

TriNodeBasis::TriNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 0;
  size    = (order + 1) * (order + 2) / 2;
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre    = new Polynomial[order];
  Polynomial* intLegendre = new Polynomial[order];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  // Classical and Intrated-Scaled Legendre Polynomial //
  const int orderMinus = order - 1;

  Legendre::legendre(legendre, orderMinus);
  Legendre::intScaled(intLegendre, order);
 

  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  basis[1] = 
    Polynomial(1, 1, 0, 0);

  basis[2] = 
    Polynomial(1, 0, 1, 0);

  
  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = basis[i] + basis[j];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = basis[j] - basis[i];

  
  // Edge Based //
  int i = 3;

  for(int l = 1; l < order; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial p             = basis[2] * 2 - Polynomial(1, 0, 0, 0);
  const int  orderMinusTwo = order - 2;
  
  for(int l1 = 1; l1 < orderMinus; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinusTwo; l2++){
      basis[i] = 
	intLegendre[l1].compose(lagrangeSub[0], lagrangeSum[0]) * 
	   legendre[l2].compose(p) * basis[2];
      
      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
}

/*
#include <cstdio>
int main(void){
  const int P = 5;
  const double d = 0.01;

  TriNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
  
  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: postprocessing/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 130
Text-content-md5: 0919a7ecc0fa50fe6430dfd048ac503c
Text-content-sha1: 3a542f5db8474863605ce4f1e66eb4efdfcad742
Content-length: 130

set(src
  Interpolator.cpp
  InterpolatorTyped.cpp
  InterpolatorEdge.cpp
  Solution.cpp
)


add_sources(postprocessing "${src}")


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 103
Text-content-md5: f84d4bc71eb72ed158105f759f77b01e
Text-content-sha1: b062b87688a49ad5f12419ac55d77e5d01e03562
Content-length: 113

PROPS-END
#include "Interpolator.h"

Interpolator::Interpolator(void){
}

Interpolator::~Interpolator(void){
}




Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: change
Text-content-length: 1160
Text-content-md5: 0b8dcddd8d99b06217cb26bf1164d0ea
Text-content-sha1: 38a953345a4f6faee70dc6c64b30966be797d075
Content-length: 1160

#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

/**
   @class Interpolator
   @brief Interpolates Entity values on Node%s
   
   This @em class is the mother (by @em inheritence) 
   of all Interpolator%s. 

   An Interpolator interpolates Entity values 
   (of a  Mesh) on the @em Node%s 
   (of the same Mesh).@n

   The Entity @em type to concider is given
   by the @em different @em implementations 
   of this class.
 
   @note
   An Interpolator can be of @em two types
   @li InterpolatorScalar, for @em scalar fiels
   @li InterpolatorVector, for @em vectorial fields
*/

class Interpolator{
 protected:
  bool scalar;

 public:
  virtual ~Interpolator(void);

  bool isScalar(void) const;

 protected:
  Interpolator(void);
};

/**
   @fn Interpolator::~Interpolator
   @return Deletes the Interpolator

   @fn Interpolator::isScalar
   @return Returns:
   @li @c true, if this is an 
   Interpolator for @em scalar fields
   @li @c false, if this is an 
   Interpolator for @em vectorial fields
 */ 

//////////////////////
// Inline Functions //
//////////////////////

inline bool Interpolator::isScalar(void) const{
  return scalar;
}

#endif


Node-path: postprocessing/InterpolatorEdge.h
Node-kind: file
Node-action: change
Text-content-length: 1047
Text-content-md5: 0dbf1890f822ca7db93733c5f64f22e1
Text-content-sha1: b458ce4f6657fc94252439fb7123526c08a0b67e
Content-length: 1047

#ifndef _INTERPOLATOREDGE_H_
#define _INTERPOLATOREDGE_H_

#include "InterpolatorTyped.h"
#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"
#include "Mesh.h"

/**
   @class InterpolatorEdge
   @brief Interpolator for Edge%s
   @extends InterpolatorTyped

   This class is a @em vectorial Interpolator
   for values defined on the @em Edge%s of a 
   given Mesh.
 */

class InterpolatorEdge: 
public InterpolatorTyped<Vector<double>* >{
 private:
  const Vector<Polynomial>* basis;
  int bSize;

  const Mesh* msh;  
  int nNode;

  std::vector<bool>* isInterpolated;

 public:
  InterpolatorEdge(const Basis<Vector<Polynomial> >& basis,
		   const Mesh& mesh);
   
  virtual ~InterpolatorEdge(void);

 private:
  void interpolateEdgeElement(void);
};

/**
   @fn InterpolatorEdge::InterpolatorEdge
   @param basis The Basis to use for 
   interpolation
   @param mesh The Mesh to interpolate on
   @return Returns a new InterpolatorEdge

   @fn InterpolatorEdge::~InterpolatorEdge
   @return Deletes this InterpolatorEdge
 */

#endif


Node-path: postprocessing/InterpolatorTyped.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 228
Text-content-md5: 79b7beab423315f08b9910c5d7311228
Text-content-sha1: 13ebe578e81cc1420436f1a121478a158b2a629e
Content-length: 238

PROPS-END
#include "InterpolatorTyped.h"
#include "Vector.h"

template<>
InterpolatorTyped<double>::InterpolatorTyped(void){
  scalar = true;
}

template<>
InterpolatorTyped<Vector<double>* >::InterpolatorTyped(void){
  scalar = false;
}


Node-path: postprocessing/InterpolatorTyped.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 1243
Text-content-md5: 9173390ad1809b54435d7249e2ad9191
Text-content-sha1: 6884cd75091eda4c02bec5ef87e7ded6014212f2
Content-length: 1253

PROPS-END
#ifndef _INTERPOLATORTYPED_H_
#define _INTERPOLATORTYPED_H_

#include <vector>
#include "Interpolator.h"

/**
   @class InterpolatorTyped
   @brief Interpolator for 
   vectorial or scalar fields
   
   This an Interpolator for @em vectorial 
   @em or @em scalar fields

   @note
   Depending on the @em template, this class
   interpolates @em vectors or @em scalars
   
   @warning
   An InterpolatorTyped can't be instantiate (but descendant can)
*/

template<class T>
class InterpolatorTyped: public Interpolator{
 protected:
  std::vector<T>* nodeValue;

 public:
  virtual ~InterpolatorTyped(void);

  std::vector<T>* getNodeValue(void) const;

 protected:
  InterpolatorTyped(void);
};

/**
   @fn InterpolatorTyped::~InterpolatorTyped
   @return Deletes the InterpolatorTyped

   @fn InterpolatorTyped::getNodeValue
   @return Returns the interpolated 
   @em vectorial or @em scalar field
 */

//////////////////////
// Inline Functions //
//////////////////////

template<class T>
inline std::vector<T>*
  InterpolatorTyped<T>::getNodeValue(void) const{
  return nodeValue;
}

/////////////////////////
// Templated Functions //
/////////////////////////

template<class T>
InterpolatorTyped<T>::~InterpolatorTyped(void){
}

#endif


Revision-number: 29
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T12:28:16.894855Z
PROPS-END

Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 3265
Text-content-md5: 34445ede43920e0b29280035048e1b7f
Text-content-sha1: 09f639a4c1281d65573cb18958d84b49145ece79
Content-length: 3265

#include "Solution.h"
#include "Exception.h"
#include "FormulationVector.h"
#include "InterpolatorEdge.h"
#include "InterpolatorTyped.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();


  fType = formulation.type();
  
  //
  if(fType == 0){
    nodalVectorValue = NULL;
    nodalScalarValue = new vector<double>(N);
  
    for(int i = 0; i < N; i++)
      (*nodalScalarValue)[i] = (*node)[i]->getValue();

    intrp = NULL;
  }
  
  if(fType == 1){
    const FormulationVector& fv = 
      static_cast<const FormulationVector&>(formulation);

    intrp = new InterpolatorEdge(fv.getBasis(), mesh);
    
    InterpolatorTyped<Vector<double>*>& vIntrp = 
      static_cast<InterpolatorTyped<Vector<double>*>&>(*intrp);

    nodalVectorValue = vIntrp.getNodeValue();
    nodalScalarValue = NULL; 
 }
}

Solution::~Solution(void){
  if(nodalScalarValue)
    delete nodalScalarValue;

  if(intrp)
    delete intrp;
  // Interpolator is responsible for deleting 'nodalVectorValue'
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  bool isScalar;
  if(fType == 0 || fType == 3)
    isScalar = true;
  else
    isScalar = false;

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, isScalar);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1749
Text-content-md5: 53114e34c3abdd4e4c2939b13fdd3c92
Text-content-sha1: e9faf450350e9e43eac21c2cb13794fea3b2e91d
Content-length: 1749

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"

#include "Interpolator.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   Choose Interpolator Type at runtime IN SOLUTION@n
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  int fType;
  Interpolator* intrp;

  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @return Writes the solution in the given @c .msh file
 */

#endif


Revision-number: 30
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T14:25:04.214637Z
PROPS-END

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 766
Text-content-md5: f77f88dd16b3db24de5e95540c26d9af
Text-content-sha1: 006d7ecc0563580c99d8299c1391d6666d008b96
Content-length: 766

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  /*
  // Laplace //
  FormulationLaplace laplace;
  System sys(msh.getAllNodeElements(), laplace);

  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  sys.solve();

  Solution sol(msh, laplace);
  sol.write("sol.pos");
  */
    
  // Projection //
  Vector<double> f(2); 
  f(0) = -1; f(1) = 1; // Vector to project
  
  FormulationProjection projection(f);
  System sys(msh.getAllEdgeElements(), projection);

  sys.solve();
  
  Solution sol(msh, projection);
  sol.write("sol.pos");
    
  
  return 0;
}



Node-path: basis/Basis.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 66
Text-content-md5: 7a28939c925a23c9efedc3a38b38aaa4
Text-content-sha1: cc78f548afea95f7631b1d5f387873bc69323f37
Content-length: 76

PROPS-END
#include "Basis.h"

Basis::Basis(void){
}

Basis::~Basis(void){
}


Node-path: basis/Basis.h
Node-kind: file
Node-action: change
Text-content-length: 1686
Text-content-md5: 0714116b2db1a4e79a63ca5af233c57f
Text-content-sha1: 4875d3980e5a619db108563db0123f6a5d8c2357
Content-length: 1686

#ifndef _BASIS_H_
#define _BASIS_H_

/**
   @class Basis
   @brief Mother class of all Basis

   This class is the @em mother (by @em inheritence) of all Basis.@n

   A Basis is @em set of @em linearly @em independent Polynomial%s 
   (or Vector%s of Polynomial%s).@n
 */

class Basis{
 protected:
  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

 public:
  virtual ~Basis(void);
  
  int getOrder(void) const;
  int getType(void) const;
  int getSize(void) const;
  int getNodeNbr(void) const;
  int getDim(void) const;

 protected:
  Basis(void);
};

/**
   @fn Basis::~Basis(void)
   @return Deletes this Basis

   @fn int Basis::getOrder(void) const
   @return Returns the @em polynomial @em order of the Basis

   @fn int Basis::getType(void) const
   @return Returns the @em type of the Basis:
   @li 0 for 0-form
   @li 1 for 1-form
   @li 2 for 2-form
   @li 3 for 3-form

   @todo Check if the 'form numbering' is good
   
   @fn int Basis::getSize(void) const
   @return Returns the number of Polynomial%s 
   (or Vector%s of Polynomial%s) in the Basis

   @fn int Basis::getNodeNbr(void) const
   @return Returns the node number of 
   the @em geometric @em reference @em element
 
   @fn int Basis::getDim(void) const
   @return Returns the @em dimension 
   (1D, 2D or 3D) of the Basis
*/

//////////////////////
// Inline Functions //
//////////////////////

inline int Basis::getOrder(void) const{
  return order;
}

inline int Basis::getType(void) const{
  return type;
}

inline int Basis::getSize(void) const{
  return size;
}

inline int Basis::getNodeNbr(void) const{
  return nodeNbr;
}

inline int Basis::getDim(void) const{
  return dim;
}

#endif


Node-path: basis/BasisScalar.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 96
Text-content-md5: e17785111aeb91dfe6116ab794bc0355
Text-content-sha1: eb2fe59c809481df4637d606995612886b9a00d3
Content-length: 106

PROPS-END
#include "BasisScalar.h"

BasisScalar::BasisScalar(void){
}

BasisScalar::~BasisScalar(void){
}


Node-path: basis/BasisScalar.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 769
Text-content-md5: 56ce8c5eeeb5940f37aa817e073355e3
Text-content-sha1: 7952c37aa763f0f0185a7feb64e2fe4849363fb1
Content-length: 779

PROPS-END
#ifndef _BASISSCALAR_H_
#define _BASISSCALAR_H_

#include "Basis.h"
#include "Polynomial.h"

/**
   @class BasisScalar
   @brief Mother class of all 
   @em scalar Basis

   This class is the @em mother (by @em inheritence) 
   of all @em scalar Basis.@n
*/

class BasisScalar: public Basis{
 protected:
  Polynomial* basis;

 public:
  virtual ~BasisScalar(void);

  Polynomial* getBasis(void) const;

 protected:
  BasisScalar(void);
};

/**
   @fn BasisScalar::~BasisScalar
   @return Deletes this Basis

   @fn BasisScalar::getBasis
   @return Returns the set of 
   @em Polynomial%s
   that defines this Basis
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Polynomial* BasisScalar::getBasis(void) const{
  return basis;
}

#endif


Node-path: basis/BasisVector.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 97
Text-content-md5: 082f9171a7f1295713dcab15995ab5da
Text-content-sha1: 947325610c91609fa0c760389a46091363694680
Content-length: 107

PROPS-END
#include "BasisVector.h"

BasisVector::BasisVector(void){
}

BasisVector::~BasisVector(void){
}



Node-path: basis/BasisVector.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 839
Text-content-md5: 414400c7798c36c95a79da9db3542005
Text-content-sha1: e330a34b6de8e3ef8f46dcdf8f2b021de27baff0
Content-length: 849

PROPS-END
#ifndef _BASISVECTOR_H_
#define _BASISVECTOR_H_

#include "Basis.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class BasisVector
   @brief Mother class of all 
   @em vectorial Basis

   This class is the @em mother (by @em inheritence) 
   of all @em vectorial Basis.@n
*/

class BasisVector: public Basis{
 protected:
  Vector<Polynomial>* basis;

 public:
  virtual ~BasisVector(void);

  Vector<Polynomial>* getBasis(void) const;

 protected:
  BasisVector(void);
};

/**
   @fn BasisVector::~BasisVector
   @return Deletes this Basis

   @fn BasisVector::getBasis
   @return Returns the set of 
   @em Vector%s @em of @em Polynomial%s
   that defines this Basis
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Vector<Polynomial>* BasisVector::getBasis(void) const{
  return basis;
}

#endif


Node-path: basis/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 187
Text-content-md5: 715eb225cad5a4d262f83bf1b3ecd8b6
Text-content-sha1: 5d2535fc852c49f893af23ed67037b4a74679f86
Content-length: 187

set(src
  Basis.cpp
  BasisScalar.cpp
  BasisVector.cpp
  QuadNodeBasis.cpp
  QuadEdgeBasis.cpp
  TriNodeBasis.cpp
  TriEdgeBasis.cpp
  TriNedelecBasis.cpp
)


add_sources(basis "${src}")

Node-path: basis/QuadEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 5876
Text-content-md5: aa986bd53510dc62a2209bdbed077019
Text-content-sha1: 6202fa7190592b4c27cc474f5534972312195498
Content-length: 5876

#include "QuadEdgeBasis.h"
#include "Legendre.h"

QuadEdgeBasis::QuadEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 1;
  size    = 2 * (order + 2) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  const int  orderPlus = order + 1;
  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];

  Polynomial* iLegendreX  = new Polynomial[orderPlus];
  Polynomial* iLegendreY  = new Polynomial[orderPlus];
  Polynomial* legendreX   = new Polynomial[orderPlus];
  Polynomial* legendreY   = new Polynomial[orderPlus];

  Polynomial* lagrange    = new Polynomial[4];
  Polynomial* lagrangeSum = new Polynomial[4];

  Polynomial* lifting     = new Polynomial[4];
  Polynomial* liftingSub  = new Polynomial[4];

  // Integrated and classical Legendre Polynomial //
  Legendre::integrated(intLegendre, orderPlus);
  Legendre::legendre(legendre, order);

  // Lagrange // 
  lagrange[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lagrange[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  lagrange[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    lagrangeSum[i] = lagrange[i] + lagrange[j];
    
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  // Lifting Sub //
  for(int i = 0, j = 1; i < 4; i++, j = (j + 1) % 4)
    liftingSub[i] = lifting[j] - lifting[i];


  // Basis //
  basis = new Vector<Polynomial>[size];
  
  // Edge Based (Nedelec) // 
  int i = 0;
  Polynomial oneHalf(0.5, 0, 0, 0);

  for(int e = 0; e < 4; e++){
    basis[i] = 
      (liftingSub[e]).gradient();
    
    basis[i].mul(lagrangeSum[e]);
    basis[i].mul(oneHalf);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 4; e++){
      basis[i] = 
	(intLegendre[l].compose(liftingSub[e]) * lagrangeSum[e]).gradient();
     
      i++;
    }
  }

  
  // Cell Based (Preliminary) //
  Polynomial px   = Polynomial(2, 1, 0, 0);
  Polynomial py   = Polynomial(2, 0, 1, 0);
  Polynomial zero = Polynomial(0, 0, 0, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l = 0; l < orderPlus; l++){
    iLegendreX[l] = intLegendre[l].compose(px);
    iLegendreY[l] = intLegendre[l].compose(py);
     legendreX[l] =    legendre[l].compose(px);
     legendreY[l] =    legendre[l].compose(py);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i] = (iLegendreX[l1] * iLegendreY[l2]).gradient();

      i++;
    }
  }
  
  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < orderPlus; l1++){
    for(int l2 = 1; l2 < orderPlus; l2++){
      basis[i](0) =  legendreX[l1] * iLegendreY[l2];
      basis[i](1) = iLegendreX[l1] *  legendreY[l2] * -1;
      basis[i](2) = zero;

      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 1, iPlus = i + order; l < orderPlus; l++, iPlus++){
    basis[i](0) = iLegendreY[l];
    basis[i](1) = zero;
    basis[i](2) = zero;

    basis[iPlus](0) = zero;
    basis[iPlus](1) = iLegendreX[l];
    basis[iPlus](2) = zero;

    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;

  delete[] iLegendreX;
  delete[] iLegendreY;
  delete[] legendreX;
  delete[] legendreY;

  delete[] lagrange;
  delete[] lagrangeSum;

  delete[] lifting;
  delete[] liftingSub;
}

QuadEdgeBasis::~QuadEdgeBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 3;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  QuadEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("close all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++){
    for(int j = 0; j < 2; j++)
      printf("p(%d, %d) = %s;\n", i + 1, j + 1, basis[i](j).toString().c_str());
    //printf("p(%d) = %s", i, basis[i].toString().c_str());
    printf("\n");
  }

  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);

  printf("\n");
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/QuadEdgeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 756
Text-content-md5: 7e4fcfe60d07ddb3ac41d94836ff5315
Text-content-sha1: 50cef55d0c038c04806ad966553004e5f27918d2
Content-length: 756

#ifndef _QUADEDGEBASIS_H_
#define _QUADEDGEBASIS_H_

#include "BasisVector.h"

/**
   @class QuadEdgeBasis
   @brief An Edge-Basis for Quads
 
   This class can instantiate an Edge-Based Basis 
   (high or low order) for Quads.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n
 */

class QuadEdgeBasis: public BasisVector{
 public:
  QuadEdgeBasis(const int order);
  virtual ~QuadEdgeBasis(void);
};

/**
   @fn QuadEdgeBasis::QuadEdgeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Edge-Basis for Quads of the given order

   @fn QuadEdgeBasis::~QuadEdgeBasis(void)
   @return Deletes this Basis
*/

#endif


Node-path: basis/QuadNodeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 3510
Text-content-md5: 3f8b4d1a3e7d43f89475820826ebb764
Text-content-sha1: bdd41ca699085005af44de196af7bc4410e43275
Content-length: 3510

#include "QuadNodeBasis.h"
#include "Legendre.h"

QuadNodeBasis::QuadNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 0;
  size    = (order + 1) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre = new Polynomial[order];
  Polynomial* lifting  = new Polynomial[4];

  // Legendre Polynomial //
  Legendre::integrated(legendre, order);
  
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));



  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  basis[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));
  
  // Edge Based //
  int i = 4;

  for(int l = 1; l < order; l++){
    for(int e1 = 0, e2 = 1; e1 < 4; e1++, e2 = (e2 + 1) % 4){
      basis[i] = 
	legendre[l].compose(lifting[e2] - lifting[e1]) * (basis[e1] + basis[e2]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial px = Polynomial(2, 1, 0, 0);
  Polynomial py = Polynomial(2, 0, 1, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 1; l2 < order; l2++){
      basis[i] = legendre[l1].compose(px) * legendre[l2].compose(py);

      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] lifting;
}

QuadNodeBasis::~QuadNodeBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 4;
  const double d = 0.05;

  QuadNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());

  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize(); i > 0; i--)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i, i);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/QuadNodeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 754
Text-content-md5: f560ff662f6ec4bfc9067a987932fd50
Text-content-sha1: b3a5ca416b1a0abdf3a44759d8ff7d4f60869806
Content-length: 754

#ifndef _QUADNODEBASIS_H_
#define _QUADNODEBASIS_H_

#include "BasisScalar.h"

/**
   @class QuadNodeBasis
   @brief A Node-Basis for Quads
 
   This class can instantiate a Node-Based Basis 
   (high or low order) for Quads.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n
 */

class QuadNodeBasis: public BasisScalar{
 public:
  QuadNodeBasis(const int order);
  virtual ~QuadNodeBasis(void);
};

/**
   @fn QuadNodeBasis::QuadNodeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Node-Basis for Quads of the given order

   @fn QuadNodeBasis::~QuadNodeBasis(void)
   @return Deletes this Basis
*/

#endif


Node-path: basis/TriEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 4853
Text-content-md5: a8fd81f3a0491cd19a9cee89b00e657e
Text-content-sha1: 13a076e6664b48b4104c7522215ce916412401d2
Content-length: 4853

#include "TriEdgeBasis.h"
#include "Legendre.h"

TriEdgeBasis::TriEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 1;
  size    = (order + 1) * (order + 2);
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  const int orderPlus     = order + 1;
  const int orderMinus    = order - 1;

  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];
  
  Polynomial* lagrange    = new Polynomial[3];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  Polynomial* u           = new Polynomial[orderPlus];
  Polynomial* v           = new Polynomial[orderPlus];

  // Classical and Intrated-Scaled Legendre Polynomial //
  Legendre::legendre(legendre, order);
  Legendre::intScaled(intLegendre, orderPlus);

  // Lagrange //
  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = lagrange[j] + lagrange[i];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = lagrange[i] - lagrange[j];


  // Basis //
  basis = new Vector<Polynomial>[size];

  // Edge Based (Nedelec) //
  int i = 0;

  for(int j = 1; i < 3; j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	(intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e])).gradient();

      i++;
    }
  }

  // Cell Based (Preliminary) //
  Polynomial p = lagrange[2] * 2 - Polynomial(1, 0, 0, 0);
  
  for(int l = 0; l < orderPlus; l++){
    u[l] = intLegendre[l].compose(lagrangeSub[0] * -1, lagrangeSum[0]);
    v[l] = legendre[l].compose(p);
    v[l].mul(lagrange[2]);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].add(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].sub(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 0; l < orderMinus; l++){
    basis[i] = basis[0];
    basis[i].mul(v[l]);
    
    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrange;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
  delete[] u;
  delete[] v;
}

TriEdgeBasis::~TriEdgeBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriEdgeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 758
Text-content-md5: d6db5d360dec78b41c38dac980523bf2
Text-content-sha1: f733ee1aeafaf4823f8459d03eb6011579104695
Content-length: 758

#ifndef _TRIEDGEBASIS_H_
#define _TRIEDGEBASIS_H_

#include "BasisVector.h"

/**
   @class TriEdgeBasis
   @brief An Edge-Basis for Triangles
 
   This class can instantiate an Edge-Based Basis 
   (high or low order) for Triangles.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n
*/

class TriEdgeBasis: public BasisVector{
 public:
  TriEdgeBasis(const int order);
  virtual ~TriEdgeBasis(void);
};


/**
   @fn TriEdgeBasis::TriEdgeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Edge-Basis for Triangles of the given order

   @fn TriEdgeBasis::~TriEdgeBasis(void)
   @return Deletes this Basis
*/

#endif


Node-path: basis/TriNedelecBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 2580
Text-content-md5: 94b4fba72a6fe2ee290c53ff7f869516
Text-content-sha1: 3d1cede54c994247eee19fc57b6a8db6a643269a
Content-length: 2580

#include "TriNedelecBasis.h"

TriNedelecBasis::TriNedelecBasis(void){
  // Set Basis Type //
  order   = 1;
  type    = 1;
  size    = 3;
  nodeNbr = 3;
  dim     = 2;

  // Lagrange //
  Polynomial* lagrange    = new Polynomial[3];

  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Basis //
  basis = new Vector<Polynomial>[size];

  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);
  }

  // Free Temporary Sapce //
  delete[] lagrange;
}

TriNedelecBasis::~TriNedelecBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriNedelec b;
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNedelecBasis.h
Node-kind: file
Node-action: change
Text-content-length: 526
Text-content-md5: b4d4050b838080a13f3eca11be748414
Text-content-sha1: 3271118754e1e40f05064d46c9d506dce8a54e6b
Content-length: 526

#ifndef _TRINEDELECBASIS_H_
#define _TRINEDELECBASIS_H_

#include "BasisVector.h"

/**
   @class TriNedelecBasis
   @brief Nedelec Basis for Triangles
 
   This class can instantiate a Nedelec Basis 
   for Triangles.@n
*/

class TriNedelecBasis: public BasisVector{
 public:
  TriNedelecBasis(void);
  virtual ~TriNedelecBasis(void);
};


/**
   @fn TriNedelecBasis::TriNedelecBasis
   @return Returns a new Nedelec Basis for Triangles

   @fn TriNedelecBasis::~TriNedelecBasis(void)
   @return Deletes this Basis
*/

#endif


Node-path: basis/TriNodeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 3363
Text-content-md5: 7086e1030dee6e06fb531030a26c3507
Text-content-sha1: c864e9fa83c0729a8d2bab62f336f26249976cd2
Content-length: 3363

#include "TriNodeBasis.h"
#include "Legendre.h"

TriNodeBasis::TriNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;
  
  type    = 0;
  size    = (order + 1) * (order + 2) / 2;
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre    = new Polynomial[order];
  Polynomial* intLegendre = new Polynomial[order];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  // Classical and Intrated-Scaled Legendre Polynomial //
  const int orderMinus = order - 1;

  Legendre::legendre(legendre, orderMinus);
  Legendre::intScaled(intLegendre, order);
 

  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  basis[1] = 
    Polynomial(1, 1, 0, 0);

  basis[2] = 
    Polynomial(1, 0, 1, 0);

  
  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = basis[i] + basis[j];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = basis[j] - basis[i];

  
  // Edge Based //
  int i = 3;

  for(int l = 1; l < order; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial p             = basis[2] * 2 - Polynomial(1, 0, 0, 0);
  const int  orderMinusTwo = order - 2;
  
  for(int l1 = 1; l1 < orderMinus; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinusTwo; l2++){
      basis[i] = 
	intLegendre[l1].compose(lagrangeSub[0], lagrangeSum[0]) * 
	   legendre[l2].compose(p) * basis[2];
      
      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
}

TriNodeBasis::~TriNodeBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 5;
  const double d = 0.01;

  TriNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
  
  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = 0; i < b.getSize(); i++)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: basis/TriNodeBasis.h
Node-kind: file
Node-action: change
Text-content-length: 756
Text-content-md5: bcb23ad2428db62f5dc477c72fe767e1
Text-content-sha1: 1ab148c3f0b271602dc82320dd6839cd8deda661
Content-length: 756

#ifndef _TRINODEBASIS_H_
#define _TRINODEBASIS_H_

#include "BasisScalar.h"

/**
   @class TriNodeBasis
   @brief A Node-Basis for Triangles
 
   This class can instantiate a Node-Based Basis 
   (high or low order) for Triangles.@n
   
   It uses 
   <a href="http://www.hpfem.jku.at/publications/szthesis.pdf">Zaglmayr's</a>  
   Basis for @em high @em order Polynomial%s generation.@n
 */

class TriNodeBasis: public BasisScalar{
 public:
  TriNodeBasis(const int order);
  virtual ~TriNodeBasis(void);
};

/**
   @fn TriNodeBasis::TriNodeBasis(const int order)
   @param order The order of the Basis
   @return Returns a new Node-Basis for Triangles of the given order

   @fn TriNodeBasis::~TriNodeBasis(void)
   @return Deletes this Basis
*/

#endif


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1331
Text-content-md5: b73cd1e95209810cd886227b20559968
Text-content-sha1: ed1b3df79244a39618ff2f29e076b2a443a82bae
Content-length: 1331

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "FormulationScalar.h"
#include "Polynomial.h"
#include "Vector.h"
#include "TriNodeBasis.h"

/**
   @class FormulationLaplace
   @brief Formulation for the Laplace problem

   Scalar Formulation for the @em Laplace problem.
 */

class FormulationLaplace: public FormulationScalar{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNodeBasis*       base;
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual BasisScalar& getBasis(void) const; 
};

/**
   @fn FormulationLaplace::FormulationLaplace
   @return Returns a new FormulationLaplace
 
   @fn FormulationLaplace::~FormulationLaplace
   @return Deletes the this FormulationLaplace
*/

//////////////////////
// Inline Functions //
//////////////////////

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline BasisScalar& FormulationLaplace::getBasis(void) const{
  return *base;
}

#endif


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1440
Text-content-md5: 4523a056796afc21dab2ca2481011462
Text-content-sha1: b65c30e19ee710988b38aa4d56b54037b79301f0
Content-length: 1440

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "FormulationVector.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriNedelecBasis.h"

/**
   @class FormulationProjection
   @brief Formulation for the Projection problem

   Vectorial Formulation for the @em Projection problem.
 */

class FormulationProjection: public FormulationVector{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNedelecBasis*          baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual BasisVector& getBasis(void) const;
};

/**
   @fn FormulationProjection::FormulationProjection
   @param vectorToProject A Vector<double>
   @return Returns a new FormulationProjection to project
   the given Vector
 
   @fn FormulationProjection::~FormulationProjection
   @return Deletes the this FormulationProjection
*/

//////////////////////
// Inline Functions //
//////////////////////

inline BasisVector& 
FormulationProjection::getBasis(void) const{
  return *baseGen;
}


#endif


Node-path: formulation/FormulationScalar.h
Node-kind: file
Node-action: change
Text-content-length: 844
Text-content-md5: b35049c02b0cb134bf351547c563f212
Text-content-sha1: 6ec880ff5f6acf35dec9d62ffc37888fb4b6a422
Content-length: 844

#ifndef _FORMULATIONSCALAR_H_
#define _FORMULATIONSCALAR_H_

#include "Formulation.h"
#include "BasisScalar.h"
#include "Polynomial.h"

/**
   @interface FormulationScalar
   @brief Interface for Scalar Formulation%s

   This is an interface for @em Scalar Formulation%s.@n

   This interface @em adds the ability to access the Basis,
   used by the scalar formulation.
 */

class FormulationScalar: public Formulation{
 public:
  virtual ~FormulationScalar(void);

  virtual int type(void) const;

  virtual BasisScalar& getBasis(void) const = 0; 
};

/**
   @fn FormulationScalar::getBasis
   @return Returns the Basis used by the Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline FormulationScalar::~FormulationScalar(void){
}

inline int FormulationScalar::type(void) const{
  return 0;
}

#endif


Node-path: formulation/FormulationVector.h
Node-kind: file
Node-action: change
Text-content-length: 873
Text-content-md5: 49fe23df82dace1f48f1afdfce57f477
Text-content-sha1: 784ed27f12596f9bf96abd8cd4e58a2193edff95
Content-length: 873

#ifndef _FORMULATIONVECTOR_H_
#define _FORMULATIONVECTOR_H_

#include "Formulation.h"
#include "BasisVector.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @interface FormulationVector
   @brief Interface for Vectorial Formulation%s

   This is an interface for @em Vectorial Formulation%s.@n

   This interface @em adds the ability to access the Basis,
   used by the vectorial formulation.
 */

class FormulationVector: public Formulation{
 public:
  virtual ~FormulationVector(void);

  virtual int type(void) const;

  virtual BasisVector& getBasis(void) const = 0; 
};

/**
   @fn FormulationVector::getBasis
   @return Returns the Basis used by the Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline FormulationVector::~FormulationVector(void){
}

inline int FormulationVector::type(void) const{
  return 1;
}

#endif


Node-path: postprocessing/InterpolatorEdge.cpp
Node-kind: file
Node-action: change
Text-content-length: 1709
Text-content-md5: f04e0e3c7f726ca12ea291ce228bcffc
Text-content-sha1: a8bad3b98a9d54952c6e21996e05f04c8f9ac2fc
Content-length: 1709

#include "InterpolatorEdge.h"
#include "Jacobian.h"

using namespace std;

InterpolatorEdge::InterpolatorEdge
(const BasisVector& basis, const Mesh& mesh){
  this->basis = basis.getBasis();
  this->bSize = basis.getSize();
  this->msh   = &mesh;
  this->nNode = msh->getNbNode();
  
  nodeValue      = new vector<Vector<double>*>(nNode);
  isInterpolated = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    (*nodeValue)[i] = new Vector<double>(2);

    (*nodeValue)[i]->set(0, 0.0); 
    (*nodeValue)[i]->set(1, 0.0);
    
    (*isInterpolated)[i] = false;
  }
  
  interpolateEdgeElement();
}

InterpolatorEdge::~InterpolatorEdge(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeValue)[i];

  delete nodeValue;
  delete isInterpolated;
}

void InterpolatorEdge::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeValue)[id];
	Vector<double>  uv = jac.invMap(x, y);
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = jac.grad(basis[k].at(uv(0), uv(1), 0));

	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}
	
	(*isInterpolated)[id] = true;
      }
    }
  }
}


Node-path: postprocessing/InterpolatorEdge.h
Node-kind: file
Node-action: change
Text-content-length: 1038
Text-content-md5: 360263a9f8d8afdd365412cd6c6b3367
Text-content-sha1: 4a9da7b19d7f3d2e8eb7d67f3e7a86d3da792853
Content-length: 1038

#ifndef _INTERPOLATOREDGE_H_
#define _INTERPOLATOREDGE_H_

#include "InterpolatorTyped.h"
#include "BasisVector.h"
#include "Polynomial.h"
#include "Vector.h"
#include "Mesh.h"

/**
   @class InterpolatorEdge
   @brief Interpolator for Edge%s
   @extends InterpolatorTyped

   This class is a @em vectorial Interpolator
   for values defined on the @em Edge%s of a 
   given Mesh.
 */

class InterpolatorEdge: 
public InterpolatorTyped<Vector<double>* >{
 private:
  const Vector<Polynomial>* basis;
  int bSize;

  const Mesh* msh;  
  int nNode;

  std::vector<bool>* isInterpolated;

 public:
  InterpolatorEdge(const BasisVector& basis,
		   const Mesh& mesh);
   
  virtual ~InterpolatorEdge(void);

 private:
  void interpolateEdgeElement(void);
};

/**
   @fn InterpolatorEdge::InterpolatorEdge
   @param basis The Basis to use for 
   interpolation
   @param mesh The Mesh to interpolate on
   @return Returns a new InterpolatorEdge

   @fn InterpolatorEdge::~InterpolatorEdge
   @return Deletes this InterpolatorEdge
 */

#endif


Revision-number: 31
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T16:18:30.012415Z
PROPS-END

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 768
Text-content-md5: c0264ab43bb283995205a994a4962619
Text-content-sha1: 2caff0701894cd4bdf35588f048e6cfb33e87d96
Content-length: 768

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  
  // Laplace //
  FormulationLaplace laplace;
  System sys(msh.getAllNodeElements(), laplace);

  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  sys.solve();

  Solution sol(msh, laplace);
  sol.write("sol.pos");
  
  /*  
  // Projection //
  Vector<double> f(2); 
  f(0) = -1; f(1) = 1; // Vector to project
  
  FormulationProjection projection(f);
  System sys(msh.getAllEdgeElements(), projection);

  sys.solve();
  
  Solution sol(msh, projection);
  sol.write("sol.pos");
  */    
  
  return 0;
}



Node-path: basis/Basis.h
Node-kind: file
Node-action: change
Text-content-length: 2104
Text-content-md5: 93c0ce65bfb8e94bf59ec8d9713341ee
Text-content-sha1: 1ff02668f884b1cbe04ccffe60e56a54f750c755
Content-length: 2104

#ifndef _BASIS_H_
#define _BASIS_H_

/**
   @class Basis
   @brief Mother class of all Basis

   This class is the @em mother (by @em inheritence) of all Basis.@n

   A Basis is @em set of @em linearly @em independent Polynomial%s 
   (or Vector%s of Polynomial%s).@n
 */

class Basis{
 protected:
  bool scalar;

  int order;
  int type;
  int size;
  int nodeNbr;
  int dim;

 public:
  virtual ~Basis(void);
  
  int getOrder(void) const;
  int getType(void) const;
  int getSize(void) const;
  int getNodeNbr(void) const;
  int getDim(void) const;
  
  bool isScalar(void) const;

 protected:
  Basis(void);
};

/**
   @fn Basis::~Basis(void)
   @return Deletes this Basis

   @fn int Basis::getOrder(void) const
   @return Returns the @em polynomial @em order of the Basis

   @fn int Basis::getType(void) const
   @return Returns the @em type of the Basis:
   @li 0 for 0-form
   @li 1 for 1-form
   @li 2 for 2-form
   @li 3 for 3-form

   @todo Check if the 'form numbering' is good
   
   @fn int Basis::getSize(void) const
   @return Returns the number of Polynomial%s 
   (or Vector%s of Polynomial%s) in the Basis

   @fn int Basis::getNodeNbr(void) const
   @return Returns the node number of 
   the @em geometric @em reference @em element
 
   @fn int Basis::getDim(void) const
   @return Returns the @em dimension 
   (1D, 2D or 3D) of the Basis

   @fn bool Basis::isScalar(void) const
   @return Returns:
   @li @c true, if this is a 
   @em scalar Basis (BasisScalar)
   @li @c false, if this is a
   @em vectorial Basis (BasisVector)

   @note
   Scalar basis are sets of 
   Polynomial%s@n
   Vectorial basis are sets of 
   Vector%s of Polynomial%s
*/

//////////////////////
// Inline Functions //
//////////////////////

inline int Basis::getOrder(void) const{
  return order;
}

inline int Basis::getType(void) const{
  return type;
}

inline int Basis::getSize(void) const{
  return size;
}

inline int Basis::getNodeNbr(void) const{
  return nodeNbr;
}

inline int Basis::getDim(void) const{
  return dim;
}

inline bool Basis::isScalar(void) const{
  return scalar;
}

#endif


Node-path: basis/BasisScalar.cpp
Node-kind: file
Node-action: change
Text-content-length: 113
Text-content-md5: ffe54237758522e0c0b9894eaea35ab8
Text-content-sha1: 1da4a22dffbba2e1e4afb5843c81042db8c29bb3
Content-length: 113

#include "BasisScalar.h"

BasisScalar::BasisScalar(void){
  scalar = true;
}

BasisScalar::~BasisScalar(void){
}


Node-path: basis/BasisVector.cpp
Node-kind: file
Node-action: change
Text-content-length: 115
Text-content-md5: 852a2b7db8e2db82c6f0ae7ebe7dd20e
Text-content-sha1: 051bb160226150bc5419393134b8bf02727b3442
Content-length: 115

#include "BasisVector.h"

BasisVector::BasisVector(void){
  scalar = false;
}

BasisVector::~BasisVector(void){
}



Node-path: basis/QuadNodeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 3508
Text-content-md5: d8304ee70fab86653b4ab4a4ff46a859
Text-content-sha1: b293a462e99d9ace71f83be083c42fcf9c3fd854
Content-length: 3508

#include "QuadNodeBasis.h"
#include "Legendre.h"

QuadNodeBasis::QuadNodeBasis(const int order){
  // Set Basis Type //
  this->order = order;

  type    = 0;
  size    = (order + 1) * (order + 1);
  nodeNbr = 4;
  dim     = 2;

  // Alloc Temporary Space //
  Polynomial* legendre = new Polynomial[order];
  Polynomial* lifting  = new Polynomial[4];

  // Legendre Polynomial //
  Legendre::integrated(legendre, order);
  
  // Lifting //
  lifting[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[1] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  lifting[2] = 
    (Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));

  lifting[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) +
    (Polynomial(1, 0, 1, 0));



  // Basis //
  basis = new Polynomial[size];

  // Vertex Based (Lagrange) // 
  basis[0] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[1] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 0, 1, 0));

  basis[2] = 
    (Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));

  basis[3] = 
    (Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0)) *
    (Polynomial(1, 0, 1, 0));
  
  // Edge Based //
  int i = 4;

  for(int l = 1; l < order; l++){
    for(int e1 = 0, e2 = 1; e1 < 4; e1++, e2 = (e2 + 1) % 4){
      basis[i] = 
	legendre[l].compose(lifting[e2] - lifting[e1]) * (basis[e1] + basis[e2]);
            
      i++;
    }
  }

  // Cell Based //
  Polynomial px = Polynomial(2, 1, 0, 0);
  Polynomial py = Polynomial(2, 0, 1, 0);

  px = px - Polynomial(1, 0, 0, 0);
  py = py - Polynomial(1, 0, 0, 0);

  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 1; l2 < order; l2++){
      basis[i] = legendre[l1].compose(px) * legendre[l2].compose(py);

      i++;
    }
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] lifting;
}

QuadNodeBasis::~QuadNodeBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 4;
  const double d = 0.05;

  QuadNodeBasis b(P);
  
  const Polynomial* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");

  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");

  printf("function r = p(i, x, y)\n");
  printf("p = zeros(%d, 1);\n", b.getSize());
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());

  printf("\n");
  printf("r = p(i, 1);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    printf("p%d = zeros(lx, ly);\n", i + 1);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("p%d(j, i) = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize(); i > 0; i--)
    printf("figure;\ncontourf(x, y, p%d);\ncolorbar;\n", i, i);
  
  printf("\n");

  return 0;
}
*/


Node-path: basis/TriEdgeBasis.cpp
Node-kind: file
Node-action: change
Text-content-length: 4852
Text-content-md5: 7a614708007c4536e45ed3b5a59d254a
Text-content-sha1: 12771e771478fcc07f90feb5f8aa8747da1b87ad
Content-length: 4852

#include "TriEdgeBasis.h"
#include "Legendre.h"

TriEdgeBasis::TriEdgeBasis(const int order){
  // Set Basis Type //
  this->order = order;
 
  type    = 1;
  size    = (order + 1) * (order + 2);
  nodeNbr = 3;
  dim     = 2;

  // Alloc Temporary Space //
  const int orderPlus     = order + 1;
  const int orderMinus    = order - 1;

  Polynomial* legendre    = new Polynomial[orderPlus];
  Polynomial* intLegendre = new Polynomial[orderPlus];
  
  Polynomial* lagrange    = new Polynomial[3];
  Polynomial* lagrangeSub = new Polynomial[3];
  Polynomial* lagrangeSum = new Polynomial[3];

  Polynomial* u           = new Polynomial[orderPlus];
  Polynomial* v           = new Polynomial[orderPlus];

  // Classical and Intrated-Scaled Legendre Polynomial //
  Legendre::legendre(legendre, order);
  Legendre::intScaled(intLegendre, orderPlus);

  // Lagrange //
  lagrange[0] = 
    Polynomial(1, 0, 0, 0) - Polynomial(1, 1, 0, 0) - Polynomial(1, 0, 1, 0);

  lagrange[1] = 
    Polynomial(1, 1, 0, 0);

  lagrange[2] = 
    Polynomial(1, 0, 1, 0);

  // Lagrange Sum //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSum[i] = lagrange[j] + lagrange[i];

  // Lagrange Sub //
  for(int i = 0, j = 1; i < 3; i++, j = (j + 1) % 3)
    lagrangeSub[i] = lagrange[i] - lagrange[j];


  // Basis //
  basis = new Vector<Polynomial>[size];

  // Edge Based (Nedelec) //
  int i = 0;

  for(int j = 1; i < 3; j = (j + 1) % 3){
    Vector<Polynomial> tmp = lagrange[j].gradient();
    tmp.mul(lagrange[i]);

    basis[i] = lagrange[i].gradient();
    basis[i].mul(lagrange[j]);
   
    basis[i].sub(tmp);

    i++;
  }

  // Edge Based (High Order) //
  for(int l = 1; l < orderPlus; l++){
    for(int e = 0; e < 3; e++){
      basis[i] = 
	(intLegendre[l].compose(lagrangeSub[e], lagrangeSum[e])).gradient();

      i++;
    }
  }

  // Cell Based (Preliminary) //
  Polynomial p = lagrange[2] * 2 - Polynomial(1, 0, 0, 0);
  
  for(int l = 0; l < orderPlus; l++){
    u[l] = intLegendre[l].compose(lagrangeSub[0] * -1, lagrangeSum[0]);
    v[l] = legendre[l].compose(p);
    v[l].mul(lagrange[2]);
  }

  // Cell Based (Type 1) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].add(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 2) //
  for(int l1 = 1; l1 < order; l1++){
    for(int l2 = 0; l2 + l1 - 1 < orderMinus; l2++){
      Vector<Polynomial> tmp = v[l2].gradient();
      tmp.mul(u[l1]);

      basis[i] = u[l1].gradient();
      basis[i].mul(v[l2]);

      basis[i].sub(tmp);
      
      i++;
    }
  }

  // Cell Based (Type 3) //
  for(int l = 0; l < orderMinus; l++){
    basis[i] = basis[0];
    basis[i].mul(v[l]);
    
    i++;
  }

  // Free Temporary Sapce //
  delete[] legendre;
  delete[] intLegendre;
  delete[] lagrange;
  delete[] lagrangeSub;
  delete[] lagrangeSum;
  delete[] u;
  delete[] v;
}

TriEdgeBasis::~TriEdgeBasis(void){
  delete[] basis;
}

/*
#include <cstdio>
int main(void){
  const int P = 1;
  const double d = 0.05;
  const char x[2] = {'X', 'Y'};

  TriEdgeBasis b(P);
  
  const Vector<Polynomial>* basis = b.getBasis();
  
  printf("\n");
  printf("clear all;\n");
  printf("\n");
  
  printf("\n");
  printf("Order      = %d\n", b.getOrder());
  printf("Type       = %d\n", b.getType());
  printf("Size       = %d\n", b.getSize());
  printf("NodeNumber = %d\n", b.getNodeNbr());
  printf("Dimension  = %d\n", b.getDim());
  printf("\n");
  
  printf("function [rx ry] = p(i, x, y)\n");
  printf("p = zeros(%d, 2);\n", b.getSize());
  printf("\n");
  
  for(int i = 0; i < b.getSize(); i++){
    //printf("p(%d) = %s;\n", i + 1, basis[i].toString().c_str());
    printf("p(%d, 1) = %s;\n", i + 1, basis[i](0).toString().c_str());
    printf("p(%d, 2) = %s;\n", i + 1, basis[i](1).toString().c_str());
    printf("\n");
  }
  
  printf("\n");
  printf("rx = p(i, 1);\n");
  printf("ry = p(i, 2);\n");
  printf("end\n");
  printf("\n");
  
  printf("d = %lf;\nx = [0:d:1];\ny = x;\n\nlx = length(x);\nly = length(y);\n\n", d);
  
  for(int i = 0; i < b.getSize(); i++)
    for(int j = 0; j < 2; j++)
      printf("p%d%c = zeros(lx, ly);\n", i + 1, x[j]);

  printf("\n");
  printf("for i = 1:lx\n");
  printf("for j = 1:ly - i + 1\n");
  printf("\n");

  for(int i = 0; i < b.getSize(); i++)
    printf("[p%dX(j, i), p%dY(j, i)] = p(%d, x(i), y(j));\n", i + 1, i + 1, i + 1);
  
  printf("end\n");
  printf("end\n");

  printf("\n");
  printf("SizeOfBasis = %lu\n", sizeof(b) + sizeof(basis) * b.getSize()); 
  printf("\n");

  printf("\n");
  for(int i = b.getSize() - 1; i >= 0; i--)
    printf("figure;\nquiver(x, y, p%dX, p%dY);\n", i + 1, i + 1);
  
  printf("\n");
  
  return 0;
}
*/


Node-path: formulation/Formulation.h
Node-kind: file
Node-action: change
Text-content-length: 1701
Text-content-md5: ec81e3933aa8070aa8c5e943ee56a0cd
Text-content-sha1: edd006b67258944806845a34fda22530b41d19b4
Content-length: 1701

#ifndef _FORMULATION_H_
#define _FORMULATION_H_

#include "GroupOfDof.h"
#include "Interpolator.h"

/**
   @interface Formulation
   @brief Base interface of a finite element formulation

   This is the base interface of a finite element formulation.@n

   A Formulation is defined by a @em bilinear @em weak formulation,
   and a @em right @em hand @em side.@n

   A Formulation shall also give an Interpolator, for
   handling solutions of this Formulation.
   
   @warning
   A formulation is defined @em only on @em GroupOfDof%s.

   @todo
   Add quadrature laws as a paramaeter of a Formulation@n
   Remove dependance on GroupOfDof%s
 */

class Formulation{
 public:
  virtual ~Formulation(void);
  
  virtual double weak(const int entityI, const int entityJ,
		      const GroupOfDof& god) const = 0;
  
  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const = 0;
  
  virtual Interpolator& interpolator(void) const = 0;
};

/**
   @fn Formulation::weak
   @param entityI The @em first index of a formulation term 
   @param entityJ The @em second index of the formulation term
   @param god The @em GroupOfDof associated with the formulation term   
   @return The value of the given formulation term

   @fn Formulation::rhs
   @param equationI The @em ith equation of the formulation
   @param god The @em GroupOfDof associated 
   with the @em ith  equation of the formulation
   @return The value of the @em ith equation Right Hand Side

   @fn Formulation::interpolator
   @return Returns the Interpolator associated with
   this Formulation
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Formulation::~Formulation(void){
}

#endif


Node-path: formulation/FormulationLaplace.cpp
Node-kind: file
Node-action: change
Text-content-length: 1290
Text-content-md5: 2c43f178c0f1e864c08080bbc9626cee
Text-content-sha1: 137362cdee1ddaa94b5de7d2bd7d3a56e39919a0
Content-length: 1290

#include "FormulationLaplace.h"
#include <cmath>

FormulationLaplace::FormulationLaplace(void){
  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  // Generate Basis
  base = new TriNodeBasis(1);  
  const Polynomial* basis = base->getBasis();

  // Take gradient
  basisSize = base->getSize();  
  gradBasis = new Vector<Polynomial> [basisSize];

  for(int i = 0; i < basisSize; i++)
    gradBasis[i] = basis[i].gradient();

  // Interpolator //
  interp = new InterpolatorNode();
}

FormulationLaplace::~FormulationLaplace(void){
  delete   interp;
  delete   base;
  delete[] gradBasis;
}


double FormulationLaplace::weak(const int nodeI, const int nodeJ, 
				const GroupOfDof& god) const{
  const Jacobian& jac = god.getJacobian();

  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> phiI = jac.grad(gradBasis[nodeI].at(gx[g], gy[g], 0));
    Vector<double> phiJ = jac.grad(gradBasis[nodeJ].at(gx[g], gy[g], 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g];
  }

  return integral;
}


Node-path: formulation/FormulationLaplace.h
Node-kind: file
Node-action: change
Text-content-length: 1399
Text-content-md5: 07e4c94babdb061d6938d114fd00ea3c
Text-content-sha1: 59246a291387e15d5d037748e35b68910b7767ac
Content-length: 1399

#ifndef _FORMULATIONLAPLACE_H_
#define _FORMULATIONLAPLACE_H_

#include "Formulation.h"
#include "Polynomial.h"
#include "Vector.h"
#include "TriNodeBasis.h"
#include "InterpolatorNode.h"

/**
   @class FormulationLaplace
   @brief Formulation for the Laplace problem

   Formulation for the @em Laplace problem.
 */

class FormulationLaplace: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNodeBasis*       base;
  Vector<Polynomial>* gradBasis;
  int                 basisSize;

  // Interpolator //
  InterpolatorNode* interp;

 public:
  FormulationLaplace(void);

  virtual ~FormulationLaplace(void);

  virtual double weak(const int nodeI, const int nodeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Interpolator& interpolator(void) const;
};

/**
   @fn FormulationLaplace::FormulationLaplace
   @return Returns a new FormulationLaplace
 
   @fn FormulationLaplace::~FormulationLaplace
   @return Deletes this FormulationLaplace
*/

//////////////////////
// Inline Functions //
//////////////////////

inline double FormulationLaplace::rhs(const int equationI,
				      const GroupOfDof& god) const{
  return 0;
}

inline Interpolator& FormulationLaplace::interpolator(void) const{
  return *interp;
}

#endif


Node-path: formulation/FormulationProjection.cpp
Node-kind: file
Node-action: change
Text-content-length: 1845
Text-content-md5: 8e421dabe4ee95b967652d2fcf084ff3
Text-content-sha1: 1d1b640aae3fa03c58669e6bb862613a7dd7f59c
Content-length: 1845

#include "FormulationProjection.h"
#include <cmath>

FormulationProjection::FormulationProjection(Vector<double>& vectorToProject){
  // Vector to Project //
  f = &vectorToProject;

  // Gaussian Quadrature Data //
  G     = 4;

  gx[0] = 0.333333333333333;
  gx[1] = 0.6;
  gx[2] = 0.2;
  gx[3] = 0.2;

  gy[0] = 0.333333333333333;
  gy[1] = 0.2;
  gy[2] = 0.6;
  gy[3] = 0.2;

  gw[0] = -0.28125;
  gw[1] = +0.260416666666;
  gw[2] = +0.260416666666;
  gw[3] = +0.260416666666;

  // Basis //
  baseGen   = new TriNedelecBasis;
  basis     = baseGen->getBasis();
  basisSize = baseGen->getSize(); 

  // Interpolator //
  interp = new InterpolatorEdge(*baseGen);
}

FormulationProjection::~FormulationProjection(void){
  delete baseGen;
  delete interp;
}

double FormulationProjection::weak(const int edgeI, const int edgeJ, 
				   const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientationI = god.getOrientation(edgeI);
  int orientationJ = god.getOrientation(edgeJ);
  int orientation  = orientationI * orientationJ;
  
  // Loop over Integration Point //
  double integral = 0;  
  for(int g = 0; g < G; g++){
    Vector<double> phiI = jac.grad(basis[edgeI].at(gx[g], gy[g], 0));
    Vector<double> phiJ = jac.grad(basis[edgeJ].at(gx[g], gy[g], 0));

    integral += phiI.dot(phiJ) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}

double FormulationProjection::rhs(const int equationI,
				  const GroupOfDof& god) const{
 
  const Jacobian& jac = god.getJacobian();
  int orientation = god.getOrientation(equationI);

  // Loop over Integration Point //
  double integral = 0;
  for(int g = 0; g < G; g++){  
    Vector<double> jPhiI = jac.grad(basis[equationI].at(gx[g], gy[g], 0));
 
    integral += f->dot(jPhiI) * fabs(jac.det()) * gw[g] * orientation;
  }

  return integral;
}


Node-path: formulation/FormulationProjection.h
Node-kind: file
Node-action: change
Text-content-length: 1516
Text-content-md5: 9f17dc598a9c7c663f0beeb9a52e28a1
Text-content-sha1: 58d19511b1febe683f4ab61c09096aa19bea836e
Content-length: 1516

#ifndef _FORMULATIONPROJECTION_H_
#define _FORMULATIONPROJECTION_H_

#include "Formulation.h"
#include "Vector.h"
#include "Polynomial.h"
#include "TriNedelecBasis.h"
#include "InterpolatorEdge.h"

/**
   @class FormulationProjection
   @brief Formulation for the Projection problem

   Vectorial Formulation for the @em Projection problem.
 */

class FormulationProjection: public Formulation{
 private:
  // Gaussian Quadrature Data //
  int G;
  double gx[4];
  double gy[4];
  double gw[4];

  // Basis //
  TriNedelecBasis*          baseGen;
  const Vector<Polynomial>* basis;
  int                       basisSize;

  // Vector to Project //
  Vector<double>* f;

  // Interpolator //
  InterpolatorEdge* interp;

 public:
  FormulationProjection(Vector<double>& vectorToProject);
  
  virtual ~FormulationProjection(void);

  virtual double weak(const int edgeI, const int edgeJ, 
		      const GroupOfDof& god) const;

  virtual double rhs(const int equationI,
		     const GroupOfDof& god) const;

  virtual Interpolator& interpolator(void) const;
};

/**
   @fn FormulationProjection::FormulationProjection
   @param vectorToProject A Vector<double>
   @return Returns a new FormulationProjection to project
   the given Vector
 
   @fn FormulationProjection::~FormulationProjection
   @return Deletes the this FormulationProjection
*/

//////////////////////
// Inline Functions //
//////////////////////

inline Interpolator& FormulationProjection::interpolator(void) const{
  return *interp;
}


#endif


Node-path: formulation/FormulationVector.h
Node-action: delete


Node-path: formulation/FormulationScalar.h
Node-action: delete


Node-path: postprocessing/CMakeLists.txt
Node-kind: file
Node-action: change
Text-content-length: 179
Text-content-md5: 676da0d88462eabce3267f13e07eab2a
Text-content-sha1: ed0e9a032cda96b361d7dae1c63008aba96ed6a9
Content-length: 179

set(src
  Interpolator.cpp
  InterpolatorScalar.cpp
  InterpolatorVector.cpp
  InterpolatorNode.cpp
  InterpolatorEdge.cpp
  Solution.cpp
)


add_sources(postprocessing "${src}")


Node-path: postprocessing/Interpolator.cpp
Node-kind: file
Node-action: change
Text-content-length: 131
Text-content-md5: 0c0309547f8ee2ffc673947c36afc319
Text-content-sha1: ad6d366d4564c65177d6797937e4c4c76c2c0b76
Content-length: 131

#include "Interpolator.h"

Interpolator::Interpolator(void){
  gotInterpolation = false;
}

Interpolator::~Interpolator(void){
}




Node-path: postprocessing/Interpolator.h
Node-kind: file
Node-action: change
Text-content-length: 1439
Text-content-md5: 77b31eb2ba7d054b95a7e46a106e443a
Text-content-sha1: 5e63dc5f8b670306b3f4dc67ed9bf3648de9bd60
Content-length: 1439

#ifndef _INTERPOLATOR_H_
#define _INTERPOLATOR_H_

#include "Mesh.h"

/**
   @class Interpolator
   @brief Interpolates Entity values on Node%s
   
   This @em class is the mother (by @em inheritence) 
   of all Interpolator%s.@n

   An Interpolator interpolates Entity values 
   (of a  Mesh) on the @em Node%s 
   (of the same Mesh).@n

   The Entity @em type to concider is given
   by the @em different @em implementations 
   of this class.
 
   @note
   An Interpolator can be of @em two types
   @li InterpolatorScalar, for @em scalar fiels
   @li InterpolatorVector, for @em vectorial fields
*/

class Interpolator{
 protected:
  bool scalar;
  bool gotInterpolation;

 public:
  virtual ~Interpolator(void);

  virtual void interpolate(const Mesh& mesh) = 0;

  bool isScalar(void) const;

 protected:
  Interpolator(void);
};

/**
   @fn Interpolator::~Interpolator
   @return Deletes the Interpolator

   @fn Interpolator::interpolate
   @param mesh A Mesh to interpolate on
   @return Computes the interpolation of the
   Entity of the given Mesh on the Node%s
   (of the same Mesh)

   @fn Interpolator::isScalar
   @return Returns:
   @li @c true, if this is an Interpolator for 
   @em scalar fields
   @li @c false, if this is an Interpolator for 
   @em vectorial fields
 */ 

//////////////////////
// Inline Functions //
//////////////////////

inline bool Interpolator::isScalar(void) const{
  return scalar;
}

#endif


Node-path: postprocessing/InterpolatorEdge.cpp
Node-kind: file
Node-action: change
Text-content-length: 1886
Text-content-md5: 210f6192a8d7403893da0aa586ad257c
Text-content-sha1: 790bd62553e14c41959506737df90072352fca5d
Content-length: 1886

#include "InterpolatorEdge.h"
#include "Jacobian.h"

using namespace std;

InterpolatorEdge::InterpolatorEdge(const BasisVector& basis){
  this->basis    = basis.getBasis();
  this->bSize    = basis.getSize();
  nNode          = 0;
  nodeValue      = NULL;
  isInterpolated = NULL;
}

InterpolatorEdge::~InterpolatorEdge(void){
  for(int i = 0; i < nNode; i++)
    delete (*nodeValue)[i];

  if(nodeValue)
    delete nodeValue;
  
  if(isInterpolated)
    delete isInterpolated;
}

void InterpolatorEdge::interpolate(const Mesh& mesh){
  msh   = &mesh;
  nNode =  mesh.getNbNode();
  
  nodeValue      = new vector<Vector<double>*>(nNode);
  isInterpolated = new vector<bool>(nNode);

  for(int i = 0; i < nNode; i++){
    (*nodeValue)[i] = new Vector<double>(2);

    (*nodeValue)[i]->set(0, 0.0); 
    (*nodeValue)[i]->set(1, 0.0);
    
    (*isInterpolated)[i] = false;
  }
  
  interpolateEdgeElement();
}

void InterpolatorEdge::interpolateEdgeElement(void){
  const vector<Element*>& element = msh->getAllEdgeElements();
  const int E = element.size();

  for(int i = 0; i < E; i++){
    const vector<Node*>&   node   = element[i]->getAllNodes();
    const vector<Entity*>& entity = element[i]->getAllEntities();
    const vector<int>&     orient = element[i]->getAllOrientations();

    const int N = node.size();
    const Jacobian& jac = element[i]->getJacobian();

    for(int j = 0; j < N; j++){
      const int id   = node[j]->getId();
      
      if(!(*isInterpolated)[id]){
	const double x = node[j]->getX();
	const double y = node[j]->getY();
	
	Vector<double>* vn = (*nodeValue)[id];
	Vector<double>  uv = jac.invMap(x, y);
	
	for(int k = 0; k < bSize; k++){
	  Vector<double> vk = jac.grad(basis[k].at(uv(0), uv(1), 0));

	  vk.mul(entity[k]->getValue() * orient[k]);
	  vn->add(vk);
	}
	
	(*isInterpolated)[id] = true;
      }
    }
  }

  gotInterpolation = true;
}


Node-path: postprocessing/InterpolatorEdge.h
Node-kind: file
Node-action: change
Text-content-length: 1001
Text-content-md5: b16a00796c1ce1398752c3f896e8e6c8
Text-content-sha1: 39ad2a1fe5f6f567e78db7205f0f6181f12de611
Content-length: 1001

#ifndef _INTERPOLATOREDGE_H_
#define _INTERPOLATOREDGE_H_

#include "InterpolatorVector.h"
#include "BasisVector.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class InterpolatorEdge
   @brief Interpolator for Edge%s

   This class is a @em vectorial Interpolator
   for values defined on the @em Edge%s of a 
   given Mesh.
 */

class InterpolatorEdge: public InterpolatorVector{
 private:
  const Vector<Polynomial>* basis;
  int bSize;

  const Mesh* msh;  
  int nNode;

  std::vector<bool>* isInterpolated;

 public:
  InterpolatorEdge(const BasisVector& basis);
   
  virtual ~InterpolatorEdge(void);
  
  virtual void interpolate(const Mesh& mesh);
  
 private:
  void interpolateEdgeElement(void);
};

/**
   @fn InterpolatorEdge::InterpolatorEdge
   @param basis The Basis to use for 
   interpolation
   @param mesh The Mesh to interpolate on
   @return Returns a new InterpolatorEdge

   @fn InterpolatorEdge::~InterpolatorEdge
   @return Deletes this InterpolatorEdge
 */

#endif


Node-path: postprocessing/InterpolatorNode.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 518
Text-content-md5: 7768ed7c45d0d33cc13bada5fc5cfb78
Text-content-sha1: 2e712b41b1ba1587fb4df6f429095faa5482a2ee
Content-length: 528

PROPS-END
#include "InterpolatorNode.h"
#include "Jacobian.h"

using namespace std;

InterpolatorNode::InterpolatorNode(void){
  nodeValue   = NULL;
}

InterpolatorNode::~InterpolatorNode(void){  
  if(nodeValue)
    delete nodeValue;
}

void InterpolatorNode::interpolate(const Mesh& mesh){
  int nNode = mesh.getNbNode();
  
  const vector<Node*> node = mesh.getAllNodes();
 
  nodeValue = new vector<double>(nNode);
  
  for(int i = 0; i < nNode; i++)
    (*nodeValue)[i] = node[i]->getValue();

  gotInterpolation = true;
}


Node-path: postprocessing/InterpolatorNode.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 727
Text-content-md5: 6f925d77c1e65dd5f243d88d78f3d80f
Text-content-sha1: 335bf7a56e388883f26d7ee21e4bb09498d63f2c
Content-length: 737

PROPS-END
#ifndef _INTERPOLATORNODE_H_
#define _INTERPOLATORNODE_H_

#include "InterpolatorScalar.h"

/**
   @class InterpolatorNode
   @brief Interpolator for Edge%s

   This class is a @em scalar Interpolator
   for values defined on the @em Node%s of a 
   given Mesh.
 */

class InterpolatorNode: public InterpolatorScalar{
 public:
  InterpolatorNode(void);
   
  virtual ~InterpolatorNode(void);
  
  virtual void interpolate(const Mesh& mesh);
};

/**
   @fn InterpolatorNode::InterpolatorNode
   @param basis The Basis to use for 
   interpolation
   @param mesh The Mesh to interpolate on
   @return Returns a new InterpolatorNode

   @fn InterpolatorNode::~InterpolatorNode
   @return Deletes this InterpolatorNode
 */

#endif


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 2836
Text-content-md5: b030c1448ed38c18c5dbdb8907cfbf85
Text-content-sha1: b2db393fc4a02a7723fe918d06cd9f064e65fd23
Content-length: 2836

#include "Solution.h"
#include "Exception.h"
#include "Formulation.h"
#include "InterpolatorScalar.h"
#include "InterpolatorVector.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();
  
  interp = &(formulation.interpolator());
  interp->interpolate(mesh);

  if(interp->isScalar()){
    InterpolatorScalar& ic = 
      static_cast<InterpolatorScalar&>(*interp); 

    nodalVectorValue = NULL;
    nodalScalarValue = ic.getNodeValue(); 
  }
  
  else{
    InterpolatorVector& iv = 
      static_cast<InterpolatorVector&>(*interp); 

    nodalVectorValue = iv.getNodeValue();
    nodalScalarValue = NULL; 
 }
}

Solution::~Solution(void){
}

void Solution::write(const string fileName) const{
  ofstream out;
  out.open(fileName.c_str());

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, interp->isScalar());  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, bool isScalar) const{
  out << "$ElementNodeData" << endl
      << "1"                << endl
      << "\"sol\""          << endl
      << "1"                << endl
      << "0"                << endl
      << "3"                << endl
      << "0"                << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1737
Text-content-md5: 8cd5609b08432d23652517b9e5fa3769
Text-content-sha1: 9e2cb0cb252790c36c074735b5423201cf5c49d0
Content-length: 1737

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"

#include "Interpolator.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   Choose Interpolator Type at runtime IN SOLUTION@n
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  Interpolator* interp;

  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName) const;

 private:
  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, bool isScalar) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @return Writes the solution in the given @c .msh file
 */

#endif


Node-path: postprocessing/InterpolatorTyped.h
Node-action: delete


Node-path: postprocessing/InterpolatorTyped.cpp
Node-action: delete


Revision-number: 32
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T16:29:52.903756Z
PROPS-END

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 768
Text-content-md5: caf5f2d60748979e0c8a41503fad3002
Text-content-sha1: 79cb79325b6c1010c11e2191abcc62ba9b3eba7e
Content-length: 768

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  
  /*
  // Laplace //
  FormulationLaplace laplace;
  System sys(msh.getAllNodeElements(), laplace);

  sys.fixBC(5, -2);
  sys.fixBC(6,  1);

  sys.solve();

  Solution sol(msh, laplace);
  sol.write("sol.pos");
  */
    
  // Projection //
  Vector<double> f(2); 
  f(0) = -1; f(1) = 1; // Vector to project
  
  FormulationProjection projection(f);
  System sys(msh.getAllEdgeElements(), projection);

  sys.solve();
  
  Solution sol(msh, projection);
  sol.write("sol.pos");
      
  
  return 0;
}



Node-path: postprocessing/InterpolatorEdge.h
Node-kind: file
Node-action: change
Text-content-length: 959
Text-content-md5: 276a4454ee8b5b59ed5622a69ea1bf52
Text-content-sha1: 798221625c466656902735103332edfc38030402
Content-length: 959

#ifndef _INTERPOLATOREDGE_H_
#define _INTERPOLATOREDGE_H_

#include "InterpolatorVector.h"
#include "BasisVector.h"
#include "Polynomial.h"
#include "Vector.h"

/**
   @class InterpolatorEdge
   @brief Interpolator for Edge%s

   This class is a @em vectorial Interpolator
   for values defined on the @em Edge%s of a 
   given Mesh.
 */

class InterpolatorEdge: public InterpolatorVector{
 private:
  const Vector<Polynomial>* basis;
  int bSize;

  const Mesh* msh;  
  int nNode;

  std::vector<bool>* isInterpolated;

 public:
  InterpolatorEdge(const BasisVector& basis);
   
  virtual ~InterpolatorEdge(void);
  
  virtual void interpolate(const Mesh& mesh);
  
 private:
  void interpolateEdgeElement(void);
};

/**
   @fn InterpolatorEdge::InterpolatorEdge
   @param basis The Basis to use for 
   interpolation
   @return Returns a new InterpolatorEdge

   @fn InterpolatorEdge::~InterpolatorEdge
   @return Deletes this InterpolatorEdge
 */

#endif


Node-path: postprocessing/InterpolatorNode.h
Node-kind: file
Node-action: change
Text-content-length: 630
Text-content-md5: 0be847ce94225f4671bd4120fdb25548
Text-content-sha1: 0ad37be201faad7eda6284ffda1cabfbec055d56
Content-length: 630

#ifndef _INTERPOLATORNODE_H_
#define _INTERPOLATORNODE_H_

#include "InterpolatorScalar.h"

/**
   @class InterpolatorNode
   @brief Interpolator for Edge%s

   This class is a @em scalar Interpolator
   for values defined on the @em Node%s of a 
   given Mesh.
 */

class InterpolatorNode: public InterpolatorScalar{
 public:
  InterpolatorNode(void);
   
  virtual ~InterpolatorNode(void);
  
  virtual void interpolate(const Mesh& mesh);
};

/**
   @fn InterpolatorNode::InterpolatorNode
   @return Returns a new InterpolatorNode

   @fn InterpolatorNode::~InterpolatorNode
   @return Deletes this InterpolatorNode
 */

#endif


Node-path: tests/circle.geo
Node-kind: file
Node-action: change
Text-content-length: 675
Text-content-md5: 933407db459387aaa68586f748386b49
Text-content-sha1: 3a2e3e1becda4567931d6de8eda17d6d77c618cb
Content-length: 675

//cl = 2.75;
cl = 1;
//cl = 0.75;

L = 2;
l = 0.75;

Point(0) = {0, 0, 0, cl};

Point(1) = {+L, -L, 0, cl};
Point(2) = {+L, +L, 0, cl};
Point(3) = {-L, +L, 0, cl};
Point(4) = {-L, -L, 0, cl};

Circle(1) = {1, 0, 2};
Circle(2) = {2, 0, 3};
Circle(3) = {3, 0, 4};
Circle(4) = {4, 0, 1};

Point(5) = {+l, -l, 0, cl};
Point(6) = {+l, +l, 0, cl};
Point(7) = {-l, +l, 0, cl};
Point(8) = {-l, -l, 0, cl};

Circle(5) = {5, 0, 6};
Circle(6) = {6, 0, 7};
Circle(7) = {7, 0, 8};
Circle(8) = {8, 0, 5};

Line Loop(9) = {3, 4, 1, 2};
Line Loop(10) = {7, 8, 5, 6};
Plane Surface(11) = {9, 10};

Physical Line(5) = {1, 2, 3, 4};
Physical Line(6) = {5, 6, 7, 8};
Physical Surface(7) = {11};


Node-path: tests/circle.msh
Node-kind: file
Node-action: change
Text-content-length: 148248
Text-content-md5: 1120898d3c894ba97688d9f04297897c
Text-content-sha1: bbc404c6d010acbed0b0a91bfd37f9a93db9db6b
Content-length: 148248

$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
1544
1 2 -2 0
2 2 2 0
3 -2 2 0
4 -2 -2 0
5 0.75 -0.75 0
6 0.75 0.75 0
7 -0.75 0.75 0
8 -0.75 -0.75 0
9 2.095726261064396 -1.899455563756373 0
10 2.186403734002033 -1.794335172687078 0
11 2.271813968838198 -1.684892071021652 0
12 2.351751204836122 -1.571389916778088 0
13 2.426022866192613 -1.454102146587569 0
14 2.494450025970039 -1.333311316961673 0
15 2.556867837146986 -1.209308423588991 0
16 2.613125929749177 -1.082392200301025 0
17 2.66308877310461 -0.9528683993942603 0
18 2.706636002346523 -0.8210490550519091 0
19 2.743662708385382 -0.6872517316205082 0
20 2.774079690643184 -0.5517987585714696 0
21 2.797813671945454 -0.4150164539811521 0
22 2.814807475052385 -0.2772343384020324 0
23 2.82502016040381 -0.1387843410188334 0
24 2.82842712474619 -2.043032409915213e-12 0
25 2.825020160404004 0.1387843410148841 0
26 2.81480747505276 0.2772343383982296 0
27 2.797813671945996 0.4150164539775034 0
28 2.774079690643878 0.5517987585679824 0
29 2.743662708386214 0.687251731617188 0
30 2.706636002347478 0.8210490550487606 0
31 2.663088773105674 0.952868399391287 0
32 2.613125929750336 1.082392200298231 0
33 2.556867837148117 1.209308423586599 0
34 2.494450025971108 1.333311316959672 0
35 2.426022866193586 1.454102146585947 0
36 2.351751204836963 1.571389916776831 0
37 2.271813968838874 1.684892071020742 0
38 2.186403734002513 1.794335172686493 0
39 2.09572626106465 1.899455563756094 0
40 1.899455563756373 2.095726261064396 0
41 1.794335172687078 2.186403734002033 0
42 1.684892071021652 2.271813968838198 0
43 1.571389916778088 2.351751204836122 0
44 1.454102146587569 2.426022866192613 0
45 1.333311316961673 2.494450025970039 0
46 1.209308423588991 2.556867837146986 0
47 1.082392200301025 2.613125929749177 0
48 0.9528683993942603 2.66308877310461 0
49 0.8210490550519091 2.706636002346523 0
50 0.6872517316205082 2.743662708385382 0
51 0.5517987585714696 2.774079690643184 0
52 0.4150164539811521 2.797813671945454 0
53 0.2772343384020324 2.814807475052385 0
54 0.1387843410188334 2.82502016040381 0
55 2.043032409915213e-12 2.82842712474619 0
56 -0.1387843410148841 2.825020160404004 0
57 -0.2772343383982296 2.81480747505276 0
58 -0.4150164539775034 2.797813671945996 0
59 -0.5517987585679824 2.774079690643878 0
60 -0.687251731617188 2.743662708386214 0
61 -0.8210490550487606 2.706636002347478 0
62 -0.952868399391287 2.663088773105674 0
63 -1.082392200298231 2.613125929750336 0
64 -1.209308423586599 2.556867837148117 0
65 -1.333311316959672 2.494450025971108 0
66 -1.454102146585947 2.426022866193586 0
67 -1.571389916776831 2.351751204836963 0
68 -1.684892071020742 2.271813968838874 0
69 -1.794335172686493 2.186403734002513 0
70 -1.899455563756094 2.09572626106465 0
71 -2.095726261064396 1.899455563756373 0
72 -2.186403734002033 1.794335172687078 0
73 -2.271813968838198 1.684892071021652 0
74 -2.351751204836122 1.571389916778088 0
75 -2.426022866192613 1.454102146587569 0
76 -2.494450025970039 1.333311316961673 0
77 -2.556867837146986 1.209308423588991 0
78 -2.613125929749177 1.082392200301025 0
79 -2.66308877310461 0.9528683993942603 0
80 -2.706636002346523 0.8210490550519091 0
81 -2.743662708385382 0.6872517316205082 0
82 -2.774079690643184 0.5517987585714696 0
83 -2.797813671945454 0.4150164539811521 0
84 -2.814807475052385 0.2772343384020324 0
85 -2.82502016040381 0.1387843410188334 0
86 -2.82842712474619 2.043032409915213e-12 0
87 -2.825020160404004 -0.1387843410148841 0
88 -2.81480747505276 -0.2772343383982296 0
89 -2.797813671945996 -0.4150164539775034 0
90 -2.774079690643878 -0.5517987585679824 0
91 -2.743662708386214 -0.687251731617188 0
92 -2.706636002347478 -0.8210490550487606 0
93 -2.663088773105674 -0.952868399391287 0
94 -2.613125929750336 -1.082392200298231 0
95 -2.556867837148117 -1.209308423586599 0
96 -2.494450025971108 -1.333311316959672 0
97 -2.426022866193586 -1.454102146585947 0
98 -2.351751204836963 -1.571389916776831 0
99 -2.271813968838874 -1.684892071020742 0
100 -2.186403734002513 -1.794335172686493 0
101 -2.09572626106465 -1.899455563756094 0
102 -1.899455563756373 -2.095726261064396 0
103 -1.794335172687078 -2.186403734002033 0
104 -1.684892071021652 -2.271813968838198 0
105 -1.571389916778088 -2.351751204836122 0
106 -1.454102146587569 -2.426022866192613 0
107 -1.333311316961673 -2.494450025970039 0
108 -1.209308423588991 -2.556867837146986 0
109 -1.082392200301025 -2.613125929749177 0
110 -0.9528683993942603 -2.66308877310461 0
111 -0.8210490550519091 -2.706636002346523 0
112 -0.6872517316205082 -2.743662708385382 0
113 -0.5517987585714696 -2.774079690643184 0
114 -0.4150164539811521 -2.797813671945454 0
115 -0.2772343384020324 -2.814807475052385 0
116 -0.1387843410188334 -2.82502016040381 0
117 -2.043032409915213e-12 -2.82842712474619 0
118 0.1387843410148841 -2.825020160404004 0
119 0.2772343383982296 -2.81480747505276 0
120 0.4150164539775034 -2.797813671945996 0
121 0.5517987585679824 -2.774079690643878 0
122 0.687251731617188 -2.743662708386214 0
123 0.8210490550487606 -2.706636002347478 0
124 0.952868399391287 -2.663088773105674 0
125 1.082392200298231 -2.613125929750336 0
126 1.209308423586599 -2.556867837148117 0
127 1.333311316959672 -2.494450025971108 0
128 1.454102146585947 -2.426022866193586 0
129 1.571389916776831 -2.351751204836963 0
130 1.684892071020742 -2.271813968838874 0
131 1.794335172686493 -2.186403734002513 0
132 1.899455563756094 -2.09572626106465 0
133 0.8414782901946547 -0.645689001866286 0
134 0.9185586535424733 -0.5303300858920216 0
135 0.9799222236558834 -0.4058970751130254 0
136 1.024519052837597 -0.2745190528410607 0
137 1.051586076974706 -0.1384439334638687 0
138 1.060660171779821 -1.17217346939924e-12 0
139 1.051586076974961 0.1384439334619318 0
140 1.024519052838002 0.2745190528395507 0
141 0.9799222236563322 0.4058970751119425 0
142 0.9185586535428639 0.5303300858913448 0
143 0.8414782901948926 0.6456890018659761 0
144 0.645689001866286 0.8414782901946547 0
145 0.5303300858920216 0.9185586535424733 0
146 0.4058970751130254 0.9799222236558834 0
147 0.2745190528410607 1.024519052837597 0
148 0.1384439334638687 1.051586076974706 0
149 1.17217346939924e-12 1.060660171779821 0
150 -0.1384439334619318 1.051586076974961 0
151 -0.2745190528395507 1.024519052838002 0
152 -0.4058970751119425 0.9799222236563322 0
153 -0.5303300858913448 0.9185586535428639 0
154 -0.6456890018659761 0.8414782901948926 0
155 -0.8414782901946547 0.645689001866286 0
156 -0.9185586535424733 0.5303300858920216 0
157 -0.9799222236558834 0.4058970751130254 0
158 -1.024519052837597 0.2745190528410607 0
159 -1.051586076974706 0.1384439334638687 0
160 -1.060660171779821 1.17217346939924e-12 0
161 -1.051586076974961 -0.1384439334619318 0
162 -1.024519052838002 -0.2745190528395507 0
163 -0.9799222236563322 -0.4058970751119425 0
164 -0.9185586535428639 -0.5303300858913448 0
165 -0.8414782901948926 -0.6456890018659761 0
166 -0.645689001866286 -0.8414782901946547 0
167 -0.5303300858920216 -0.9185586535424733 0
168 -0.4058970751130254 -0.9799222236558834 0
169 -0.2745190528410607 -1.024519052837597 0
170 -0.1384439334638687 -1.051586076974706 0
171 -1.17217346939924e-12 -1.060660171779821 0
172 0.1384439334619318 -1.051586076974961 0
173 0.2745190528395507 -1.024519052838002 0
174 0.4058970751119425 -0.9799222236563322 0
175 0.5303300858913448 -0.9185586535428639 0
176 0.6456890018659761 -0.8414782901948926 0
177 -1.730567806397514 0.844301504230192 0
178 0.8443015042301921 1.730567806397514 0
179 -0.8443015042301866 -1.730567806397515 0
180 1.730567806397515 -0.8443015042301864 0
181 -0.8659864605901375 1.74041321435574 0
182 1.74041321435574 0.8659864605901377 0
183 0.8659864605901394 -1.740413214355741 0
184 -1.740413214355741 -0.8659864605901397 0
185 -1.927990230332439 0.002620556470382552 0
186 0.002620556470383183 1.92799023033244 0
187 -0.002620556470379507 -1.927990230332441 0
188 1.927990230332441 -0.002620556470380508 0
189 1.481158437769955 -1.498153871544091 0
190 -1.498153871544091 -1.481158437769954 0
191 1.498153871544094 1.481158437769951 0
192 -1.481158437769952 1.498153871544092 0
193 -2.198869323100164 0.5041109885573164 0
194 0.504110988557317 2.198869323100164 0
195 -0.504110988557312 -2.198869323100165 0
196 2.198869323100167 -0.5041109885573124 0
197 -0.5055142721501976 2.190227035830649 0
198 -2.190227035830648 -0.5055142721501977 0
199 2.190227035830651 0.5055142721502 0
200 0.5055142721502008 -2.19022703583065 0
201 1.043383255924044 1.22968644462116 0
202 -1.22968644462116 1.043383255924043 0
203 -1.043383255924041 -1.229686444621163 0
204 1.228838592003166 -1.044602378714912 0
205 0.369022545200827 1.564959033611221 0
206 -1.564959033611221 0.3690225452008271 0
207 -0.3690225452008216 -1.564959033611221 0
208 1.564959033611221 -0.3690225452008215 0
209 -1.530015900221791 -0.347711114209464 0
210 -0.3477111142094633 1.530015900221791 0
211 0.3477111142094652 -1.530015900221791 0
212 1.530015900221791 0.3477111142094639 0
213 -1.291768078311699 -1.955204081725 0
214 1.955204081725001 -1.291768078311699 0
215 1.291768078311704 1.955204081724998 0
216 -1.955204081724997 1.291768078311703 0
217 -1.278141978810565 1.956992896310925 0
218 1.278141978810568 -1.956992896310923 0
219 -1.956992896310924 -1.278141978810568 0
220 1.956992896310926 1.278141978810564 0
221 0.8339554807771816 -1.26124895583155 0
222 -1.26124895583155 -0.8339554807771816 0
223 1.261248955831551 0.8339554807771786 0
224 -0.833955480777179 1.261248955831551 0
225 0.1148270215599661 2.39213945571988 0
226 -2.39213945571988 0.1148270215599647 0
227 -0.1148270215599598 -2.392139455719879 0
228 2.392139455719881 -0.1148270215599629 0
229 -0.9489489881503334 -2.197889845704507 0
230 -2.197889845704506 0.9489489881503391 0
231 0.9489489881503386 2.197889845704506 0
232 2.197889845704508 -0.9489489881503341 0
233 -2.197889845705387 -0.9489489881483225 0
234 0.9489489881483242 -2.197889845705388 0
235 -0.9489489881483204 2.197889845705388 0
236 2.197889845705389 0.9489489881483214 0
237 -0.673575786131495 -1.303104371502259 0
238 1.303104371502259 -0.673575786131495 0
239 0.6735757861314986 1.303104371502257 0
240 -1.303104371502257 0.673575786131498 0
241 -1.442681728455437 0.01077035615648111 0
242 0.0107703561564818 1.442681728455437 0
243 -0.0107703561564783 -1.442681728455435 0
244 1.442681728455435 -0.01077035615647905 0
245 1.478062590707484 1.139568903274726 0
246 -1.139568903274726 1.478062590707484 0
247 -1.478062590707483 -1.139568903274728 0
248 1.139568903274728 -1.478062590707483 0
249 -0.2653682905840377 2.441453871095984 0
250 -2.441453871095985 -0.2653682905840385 0
251 0.2653682905840425 -2.441453871095985 0
252 2.441453871095985 0.2653682905840408 0
253 1.855153785273451 -1.644089253706639 0
254 -1.644089253706639 -1.855153785273451 0
255 -1.855153785273449 1.644089253706642 0
256 1.644089253706643 1.855153785273449 0
257 1.548893858481787 -1.153829015131295 0
258 -1.153829015131295 -1.548893858481787 0
259 1.153829015131299 1.548893858481783 0
260 -1.548893858481783 1.153829015131298 0
261 1.836495449674779 -0.5467177320687971 0
262 -0.546717732068797 -1.836495449674779 0
263 0.5467177320688031 1.836495449674777 0
264 -1.836495449674779 0.5467177320688036 0
265 1.869239869823768 0.5282557290949732 0
266 -0.5282557290949735 1.869239869823766 0
267 0.5282557290949744 -1.869239869823766 0
268 -1.867214649096446 -0.5296992663071378 0
269 1.620261720626454 -1.908952324087825 0
270 -1.908952324087825 -1.620261720626454 0
271 -1.620261720626451 1.908952324087827 0
272 1.908952324087829 1.62026172062645 0
273 -1.291643202524234 -0.5121214355885978 0
274 0.5121214355885984 -1.291643202524234 0
275 -0.5121214355885961 1.291643202524234 0
276 1.291643202524234 0.5121214355885961 0
277 -2.503981109073642 0.3882822682262356 0
278 0.388282268226237 2.503981109073642 0
279 -0.3882822682262307 -2.503981109073642 0
280 2.503981109073644 -0.3882822682262317 0
281 -0.7329974841679301 -2.394320705708911 0
282 -2.394320705708909 0.7329974841679356 0
283 2.394320705708911 -0.732997484167932 0
284 0.732997484167936 2.394320705708909 0
285 -2.405028047304557 -0.7232690977570009 0
286 -0.7232690977570015 2.405028047304558 0
287 0.7232690977570049 -2.405028047304558 0
288 2.405028047304559 0.7232690977570017 0
289 0.9374000405695077 -0.9896595455080197 0
290 0.9896595455080214 0.9374000405695049 0
291 -0.9914361953177145 -0.9383368688273467 0
292 -0.9374000405695049 0.9896595455080212 0
293 -2.169445027295575 -0.2355241412841914 0
294 -0.2355241412841912 2.169445027295575 0
295 0.235524141284195 -2.169445027295576 0
296 2.169445027295576 0.2355241412841948 0
297 -1.504433234017878 -0.6352234417179921 0
298 1.504433234017877 0.6352234417179913 0
299 -0.6352234417179913 1.504433234017877 0
300 0.6352234417179926 -1.504433234017877 0
301 -2.010762286315529 0.2812834075620699 0
302 0.2812834075620705 2.010762286315531 0
303 -0.2812834075620652 -2.010762286315531 0
304 2.010762286315533 -0.2812834075620657 0
305 -1.23694399943815 -2.230258032138172 0
306 -2.23025803213817 1.236943999438155 0
307 2.230258032138172 -1.23694399943815 0
308 1.236943999438155 2.23025803213817 0
309 -2.244679051917077 -1.232429687643026 0
310 -1.232429687643024 2.244679051917079 0
311 1.23131717283266 -2.242619555584354 0
312 2.244679051917079 1.232429687643025 0
313 0.8677759323258538 1.463830172580693 0
314 -1.463830172580693 0.8677759323258534 0
315 1.463830172580695 -0.8677759323258498 0
316 -0.8677759323258498 -1.463830172580695 0
317 -0.2640351847817082 1.800279057433377 0
318 -1.800279057433376 -0.2640351847817086 0
319 0.2640351847817102 -1.800279057433376 0
320 1.800279057433377 0.2640351847817086 0
321 1.686939826032851 -0.1180426828547682 0
322 -0.1180426828547691 -1.686939826032851 0
323 0.1180426828547742 1.68693982603285 0
324 -1.686939826032849 0.1180426828547741 0
325 1.572650877511895 -0.6449899420974207 0
326 -0.6449899420974208 -1.572650877511895 0
327 0.6449899420974258 1.572650877511895 0
328 -1.572650877511896 0.6449899420974261 0
329 0.3723041409425612 1.275952561613799 0
330 -1.275952561613799 0.3723041409425609 0
331 1.275952561613799 -0.3723041409425579 0
332 -0.3723041409425575 -1.2759525616138 0
333 1.99292972756669 -0.7635641209925997 0
334 -0.7635641209925994 -1.992929727566689 0
335 0.7635641209926047 1.992929727566688 0
336 -1.992929727566687 0.7635641209926056 0
337 0.7644162633958196 -1.992051435562524 0
338 1.992051435562525 0.7644162633958179 0
339 -0.7644162633958179 1.992051435562524 0
340 -1.991900839107897 -0.7644420043071681 0
341 -1.297277722545996 -0.2570030711506882 0
342 -0.2570030711506871 1.297277722545996 0
343 0.2570030711506894 -1.297277722545994 0
344 1.297277722545994 0.257003071150688 0
345 -1.28593377891155 -1.326915623286166 0
346 1.326915623286166 -1.28593377891155 0
347 -1.326915623286163 1.285933778911551 0
348 1.285933778911552 1.326915623286163 0
349 -1.034151744068076 -1.950297155872831 0
350 1.950297155872832 -1.034151744068076 0
351 -1.950297155872829 1.034151744068081 0
352 1.034151744068081 1.95029715587283 0
353 1.945282787285453 1.011173288600725 0
354 -1.011173288600725 1.945282787285452 0
355 -1.945282787285451 -1.011173288600729 0
356 1.011173288600729 -1.945282787285451 0
357 1.675706557688119 1.291719217732575 0
358 -1.291719217732576 1.675706557688119 0
359 -1.675706557688117 -1.291719217732578 0
360 1.291719217732578 -1.675706557688117 0
361 1.036501202254349 -0.7693167344361027 0
362 -0.7713894925474134 -1.037594168555161 0
363 0.7693167344361045 1.036501202254347 0
364 -1.036501202254347 0.7693167344361048 0
365 2.072582811460448 -1.536627402477682 0
366 -1.536627402477682 -2.072582811460448 0
367 -2.072582811460446 1.536627402477685 0
368 1.536627402477686 2.072582811460445 0
369 -0.5153679834581278 2.525727936386442 0
370 -2.525727936386442 -0.5153679834581281 0
371 0.5153679834581311 -2.525727936386442 0
372 2.525727936386443 0.5153679834581294 0
373 -1.251060541257861 -1.058571124250554 0
374 1.058571124250554 -1.251060541257861 0
375 1.251060541257861 1.05857112425055 0
376 -1.05857112425055 1.251060541257861 0
377 2.097657651775676 1.490590379880414 0
378 -1.490590379880414 2.097657651775676 0
379 -2.097657651775676 -1.490590379880415 0
380 1.490590379880415 -2.097657651775675 0
381 -2.590719594635278 -0.04066803085539624 0
382 -0.04066803085539587 2.590719594635278 0
383 2.590719594635279 0.04066803085539802 0
384 0.04066803085540087 -2.59071959463528 0
385 1.714258587614716 -1.346590451942477 0
386 1.34659045194248 1.714258587614713 0
387 -1.346590451942477 -1.714258587614716 0
388 -1.714258587614713 1.346590451942478 0
389 0.9008880388523822 -1.501151061962483 0
390 -1.501151061962483 -0.9008880388523821 0
391 1.501151061962484 0.9008880388523802 0
392 -0.9008880388523799 1.501151061962483 0
393 0.7000611830926083 -1.078207057021967 0
394 -1.078207057021967 -0.7000611830926081 0
395 -0.7000611830926062 1.078207057021968 0
396 1.078207057021968 0.7000611830926062 0
397 -0.1965835993107685 -2.597775829259861 0
398 0.1965835993107739 2.597775829259859 0
399 -2.597775829259861 0.1965835993107736 0
400 2.597775829259862 -0.1965835993107717 0
401 0.09197582082417123 2.142442222685327 0
402 -2.142442222685327 0.09197582082417013 0
403 -0.09197582082416599 -2.142442222685328 0
404 2.14244222268533 -0.09197582082416683 0
405 -1.733763066727384 -1.086888394269516 0
406 1.086888394269515 -1.733763066727384 0
407 -1.086888394269512 1.733763066727385 0
408 1.733763066727386 1.086888394269512 0
409 -0.1054891844434258 1.638040990870653 0
410 -1.638040990870653 -0.105489184443426 0
411 1.638040990870651 0.1054891844434292 0
412 0.1054891844434294 -1.638040990870652 0
413 -0.9515310237222995 -2.430935150431169 0
414 2.430935150431169 -0.9515310237223008 0
415 -2.430173617970497 0.9532385342548333 0
416 0.951531023722304 2.430935150431166 0
417 -2.428570075852477 -0.9522889527358783 0
418 -0.9522889527358774 2.428570075852478 0
419 2.428570075852479 0.9522889527358764 0
420 0.9522849501293787 -2.428408335400497 0
421 -2.258260273453699 0.3060404304474627 0
422 0.3060404304474643 2.2582602734537 0
423 -0.3060404304474586 -2.2582602734537 0
424 2.258260273453702 -0.3060404304474593 0
425 -1.260811408740968 0.1567507944715486 0
426 0.1567507944715488 1.260811408740968 0
427 -0.1567507944715459 -1.260811408740968 0
428 1.260811408740967 -0.1567507944715466 0
429 1.786355325638906 -0.302510206426976 0
430 -1.786355325638904 0.3025102064269827 0
431 0.3025102064269821 1.786355325638904 0
432 -0.3025102064269765 -1.786355325638905 0
433 -2.015013992774209 -0.3836929003458743 0
434 0.3836929003458766 -2.01501399277421 0
435 -0.3836929003458739 2.015013992774209 0
436 2.015013992774212 0.3836929003458767 0
437 -1.859776455090231 -1.839210972755038 0
438 1.839210972755038 -1.859776455090231 0
439 1.859776455090235 1.839210972755035 0
440 -1.839210972755036 1.859776455090234 0
441 1.14744228895901 1.778782772010713 0
442 1.778782772010717 -1.147442288959007 0
443 -1.147442288959007 -1.778782772010717 0
444 -1.778782772010713 1.147442288959009 0
445 1.629486657183307 -1.682994051625033 0
446 -1.682994051625033 -1.629486657183307 0
447 -1.629486657183304 1.682994051625035 0
448 1.682994051625036 1.629486657183304 0
449 -2.213734206386166 0.7232157743994992 0
450 -0.7232157743994932 -2.213734206386168 0
451 0.7232157743994985 2.213734206386166 0
452 2.213734206386169 -0.7232157743994944 0
453 -0.7171448987696007 2.207999035342637 0
454 2.207999035342639 0.7171448987696023 0
455 -2.207999035342637 -0.7171448987696001 0
456 0.7171448987696036 -2.207999035342638 0
457 -0.09198332692182569 2.322745852921846 0
458 2.322745852921848 0.09198332692182777 0
459 -2.322745852921847 -0.09198332692182586 0
460 0.09198332692183045 -2.322745852921848 0
461 -0.6046148731188493 -2.565540272170712 0
462 2.565540272170711 -0.6046148731188494 0
463 -2.56554027217071 0.6046148731188526 0
464 0.6046148731188544 2.565540272170709 0
465 0.5511270395254425 1.115505986699952 0
466 -1.115505986699951 0.5511270395254424 0
467 1.115505986699952 -0.5511270395254415 0
468 -0.5511270395254415 -1.115505986699952 0
469 -0.8543724704146307 -1.253512577451758 0
470 1.253512577451758 -0.8543724704146307 0
471 0.8543724704146339 1.253512577451755 0
472 -1.253512577451754 0.8543724704146335 0
473 1.424756018902022 -0.5107792688220064 0
474 0.5107792688220117 1.424756018902022 0
475 -0.5107792688220065 -1.424756018902022 0
476 -1.424756018902022 0.5107792688220125 0
477 -1.251062364350286 -0.0488757312146896 0
478 -0.04887573121468879 1.251062364350286 0
479 0.04887573121469128 -1.251062364350285 0
480 1.251062364350285 0.04887573121469042 0
481 1.816728038237304 1.440158909424067 0
482 -1.816728038237302 -1.440158909424072 0
483 1.440158909424072 -1.816728038237302 0
484 -1.440158909424069 1.816728038237304 0
485 -0.3239102055083328 2.629856659276847 0
486 -2.629856659276848 -0.3239102055083327 0
487 2.629856659276848 0.3239102055083338 0
488 0.3239102055083344 -2.629856659276848 0
489 -1.456204043738668 0.2012481551304243 0
490 0.2014605697372328 1.456016271000873 0
491 -0.2012481551304207 -1.456204043738668 0
492 1.456204043738667 -0.201248155130421 0
493 1.677609977701975 0.5049167560951576 0
494 -0.5049167560951575 1.677609977701974 0
495 0.5049167560951582 -1.677609977701974 0
496 -1.677609977701974 -0.5049167560951575 0
497 -1.42250182800518 -2.240219911530982 0
498 2.240219911530981 -1.42250182800518 0
499 1.422501828005184 2.240219911530979 0
500 -2.240219911530979 1.422501828005184 0
501 -2.293608981423715 -0.3303523841249745 0
502 -0.3303523841249735 2.293608981423715 0
503 0.3303523841249776 -2.293608981423716 0
504 2.293608981423716 0.3303523841249769 0
505 -1.343562578748434 1.478913015271152 0
506 1.478913015271154 1.343562578748434 0
507 -1.478913015271152 -1.343562578748436 0
508 1.343562578748436 -1.478913015271152 0
509 -1.73671227364308 -2.017309473315531 0
510 2.017309473315531 -1.73671227364308 0
511 -2.017309473315531 1.736712273643081 0
512 1.736712273643081 2.017309473315531 0
513 -2.394315261830755 1.117718082239589 0
514 1.117821823724197 2.394019175118067 0
515 -1.117821823724193 -2.394019175118069 0
516 2.394019175118069 -1.117821823724194 0
517 -2.369185892033342 -1.125780078388478 0
518 2.369185892033344 1.125780078388476 0
519 1.12573805102021 -2.367487617287552 0
520 -1.125780078388477 2.369185892033344 0
521 2.374507491244627 -0.5368411596081 0
522 -2.374507491244624 0.5368411596081039 0
523 -0.5368411596081005 -2.374507491244626 0
524 0.5368411596081059 2.374507491244624 0
525 -1.869166346825472 1.464942904149654 0
526 1.464942904149656 1.869166346825472 0
527 1.869166346825476 -1.46494290414965 0
528 -1.46494290414965 -1.869166346825476 0
529 0.5935082134265989 2.0143578574179 0
530 -2.0143578574179 0.5935082134265999 0
531 2.014357857417902 -0.5935082134265938 0
532 -0.5935082134265934 -2.014357857417902 0
533 2.01188862061197 0.5948968377288837 0
534 -0.5948968377288831 2.011888620611968 0
535 0.5948968377288848 -2.011888620611968 0
536 -2.010307357838379 -0.5951671172980502 0
537 1.396124548761489 -1.071140004271723 0
538 -1.071295766010718 -1.396846643882901 0
539 1.071295766010722 1.396846643882897 0
540 -1.396846643882897 1.071295766010721 0
541 1.602571945787009 -1.005873898328944 0
542 1.005873898328949 1.602571945787007 0
543 -1.005873898328944 -1.60257194578701 0
544 -1.602571945787007 1.005873898328948 0
545 -1.504918779516369 -0.1920547316021401 0
546 -0.1920547316021393 1.504918779516369 0
547 0.1920547316021425 -1.504918779516367 0
548 1.504918779516366 0.1920547316021415 0
549 -1.757589446618218 -0.6804492376732294 0
550 1.757561430138658 0.6804686271243994 0
551 0.680448856326395 -1.757591677676806 0
552 -0.6804488563263936 1.757591677676806 0
553 1.486663430856401 -1.324317790336191 0
554 1.324317790336194 1.486663430856398 0
555 -1.324317790336191 -1.486663430856401 0
556 -1.486663430856397 1.324317790336192 0
557 0.1892595698053653 -1.98738163565623 0
558 -1.987381635656229 -0.1892595698053611 0
559 1.987381635656231 0.1892595698053642 0
560 -0.1892595698053612 1.987381635656229 0
561 -0.473749397741704 -1.683032229326501 0
562 1.683032229326501 -0.4737493977417037 0
563 0.4737493977417094 1.683032229326499 0
564 -1.683032229326501 0.4737493977417098 0
565 -0.6866288161469706 -1.765751792809328 0
566 1.765751792809329 -0.6866288161469707 0
567 0.6866288161469767 1.765751792809327 0
568 -1.765751792809328 0.686628816146977 0
569 -1.175909998518399 -0.3468834808852222 0
570 0.3468834808852234 -1.175909998518397 0
571 -0.3468834808852212 1.175909998518399 0
572 1.175909998518397 0.3468834808852218 0
573 -2.08443277188342 -1.641497999785182 0
574 1.641497999785182 -2.084432771883419 0
575 -1.641497999785181 2.084432771883421 0
576 2.084432771883423 1.641497999785181 0
577 -2.041506381495969 1.166773825770157 0
578 -1.166773825770153 -2.04150638149597 0
579 1.166773825770157 2.041506381495968 0
580 2.041506381495971 -1.166773825770153 0
581 1.17865876699828 -2.059567985298423 0
582 2.059567985298426 1.178658766998276 0
583 -1.178658766998276 2.059567985298425 0
584 -2.059567985298423 -1.17865876699828 0
585 -1.888169808677377 0.1787294313580013 0
586 0.1787294313580017 1.888169808677378 0
587 -0.1787294313579969 -1.888169808677379 0
588 1.888169808677381 -0.1787294313579971 0
589 -1.360065412732552 -0.6663542891277646 0
590 0.666354289127765 -1.360065412732552 0
591 -0.6663542891277626 1.360065412732552 0
592 1.360065412732552 0.6663542891277625 0
593 -1.074364926230829 -0.5403237641533443 0
594 0.5403237641533447 -1.074364926230829 0
595 -0.540323764153343 1.074364926230829 0
596 1.074364926230829 0.5403237641533432 0
597 -1.429754816455685 -0.4795547474996996 0
598 0.4795547474997003 -1.429754816455685 0
599 -0.4795547474996986 1.429754816455685 0
600 1.429754816455685 0.4795547474996987 0
601 -2.377762975392374 -0.5729456762600772 0
602 -0.5729456762600784 2.377762975392375 0
603 0.5729456762600812 -2.377762975392375 0
604 2.377762975392375 0.5729456762600796 0
605 -1.398659122001167 2.237667086069417 0
606 2.237667086069417 1.398659122001168 0
607 -2.237667086069417 -1.398659122001168 0
608 1.398535509244462 -2.237438253143558 0
609 -0.6546652160217364 2.582860790139682 0
610 -2.582860790139681 -0.6546652160217368 0
611 0.654665216021739 -2.582860790139681 0
612 2.582860790139681 0.6546652160217371 0
613 1.52501428057559 1.700818796741146 0
614 1.70081879674115 -1.525014280575586 0
615 -1.525014280575586 -1.70081879674115 0
616 -1.700818796741146 1.525014280575588 0
617 0.9095523973783661 -0.8441827150052834 0
618 -0.8456647568684791 -0.9112507582955016 0
619 0.8441827150052852 0.9095523973783646 0
620 -0.9095523973783644 0.8441827150052852 0
621 0.9578901748711655 1.093050314504891 0
622 -0.9580875804055737 -1.093154406533543 0
623 1.09295610865845 -0.9580256329590379 0
624 -1.093050314504891 0.9578901748711655 0
625 -0.04149264983424723 2.11586398666146 0
626 2.115863986661461 0.04149264983425052 0
627 -2.115863986661459 -0.04149264983424723 0
628 0.04149264983425103 -2.11586398666146 0
629 0.8481327543660054 2.551961869855341 0
630 -2.551889342954325 0.8482953744167224 0
631 2.551961869855342 -0.8481327543660029 0
632 -0.8481327543660012 -2.551961869855342 0
633 0.8523259166415924 -2.552500309006081 0
634 -0.8523262978422094 2.552515712858652 0
635 -2.552515712858651 -0.8523262978422097 0
636 2.552515712858652 0.8523262978422087 0
637 -0.331744011329481 -2.654604489489623 0
638 0.3317440113294851 2.654604489489622 0
639 -2.654604489489622 0.3317440113294851 0
640 2.654604489489624 -0.3317440113294829 0
641 1.788582127628837 0.07188858716772903 0
642 0.07188858716773064 -1.788582127628837 0
643 -0.07188858716772795 1.788582127628838 0
644 -1.788582127628838 -0.07188858716772824 0
645 -1.448812198246751 0.7161110354563812 0
646 0.7161110354563817 1.448812198246751 0
647 -0.7161110354563776 -1.448812198246752 0
648 1.448812198246752 -0.7161110354563773 0
649 -1.159737673950569 -0.9222974335317167 0
650 0.9222082117928752 -1.159568469206789 0
651 1.15956846920679 0.9222082117928714 0
652 -0.9222082117928714 1.15956846920679 0
653 0.7849617600878632 1.579261380634198 0
654 -0.7849617600878585 -1.579261380634199 0
655 1.579261380634199 -0.7849617600878585 0
656 -1.579261380634198 0.7849617600878633 0
657 -0.9434795121403189 -0.7805317640593172 0
658 0.7802807936617007 -0.9431691605524245 0
659 0.9431691605524255 0.780280793661699 0
660 -0.780280793661699 0.9431691605524255 0
661 -1.367880948141552 -0.968697505637433 0
662 0.9686975056374332 -1.367880948141552 0
663 -0.9686975056374298 1.367880948141552 0
664 1.367880948141553 0.9686975056374294 0
665 -1.490222186247379 1.66808423957473 0
666 -1.668084239574727 -1.490222186247381 0
667 1.490222186247381 -1.668084239574727 0
668 1.66808423957473 1.490222186247377 0
669 -1.84987140982704 -1.173057373111108 0
670 1.173057373111108 -1.849871409827039 0
671 -1.173057373111104 1.849871409827041 0
672 1.849871409827042 1.173057373111103 0
673 -2.673319320297796 -0.1899101584317858 0
674 -0.1899101584317852 2.673319320297796 0
675 2.673319320297797 0.1899101584317867 0
676 0.1899101584317879 -2.673319320297797 0
677 -1.303949529734623 -2.102113474335628 0
678 2.102113474335627 -1.303949529734623 0
679 1.303949529734628 2.102113474335625 0
680 -2.102113474335625 1.303949529734628 0
681 2.108083832456029 1.312349327390503 0
682 -1.312349327390503 2.108083832456029 0
683 -2.108083832456027 -1.312349327390504 0
684 1.312231600955546 -2.107865896336162 0
685 1.894106343816206 -0.8863753301287761 0
686 -0.8863753301287761 -1.894106343816206 0
687 0.8863753301287811 1.894106343816204 0
688 -1.894106343816203 0.8863753301287817 0
689 -1.894795928641578 -0.883486718810824 0
690 0.883483540920534 -1.89481452079647 0
691 -0.8834835409205319 1.894814520796469 0
692 1.895228828615004 0.8840499540426762 0
693 0.2637574915779389 2.403405671886871 0
694 -2.403405671886872 0.263757491577937 0
695 -0.263757491577932 -2.40340567188687 0
696 2.403405671886873 -0.2637574915779338 0
697 -0.3790835986826937 1.698536394751498 0
698 1.698536394751498 0.3790835986826937 0
699 -1.698510677662896 -0.3791019293139597 0
700 0.3790835986826949 -1.698536394751497 0
701 -2.048340346452913 0.9145181157031232 0
702 2.048340346452916 -0.914518115703118 0
703 -0.9145181157031169 -2.048340346452915 0
704 0.9145181157031222 2.048340346452914 0
705 2.047810326920957 0.911801261351826 0
706 -0.9117383265604766 2.047764292718897 0
707 -2.047745493984505 -0.9117415397606599 0
708 0.9117383265604787 -2.047764292718897 0
709 -1.970542052144032 0.436298295786001 0
710 0.4362982957860005 1.970542052144032 0
711 -0.4362982957859953 -1.970542052144034 0
712 1.970542052144034 -0.4362982957859954 0
713 -0.8447266663324932 -2.30973696848754 0
714 2.30973696848754 -0.8447266663324946 0
715 -2.309664240122908 0.8448897381055792 0
716 0.8447266663324978 2.309736968487538 0
717 -2.310116039673714 -0.8407633491090314 0
718 0.8407629668495243 -2.310100593032665 0
719 2.310116039673716 0.8407633491090315 0
720 -0.8407633491090308 2.310116039673714 0
721 1.797420674797957 -1.004666101516542 0
722 -1.004666101516543 -1.797420674797957 0
723 1.004666101516547 1.797420674797956 0
724 -1.797420674797955 1.004666101516546 0
725 -0.07445065903019048 -2.685238413621039 0
726 2.685238413621038 -0.07445065903019285 0
727 0.07445065903019457 2.685238413621037 0
728 -2.685238413621037 0.0744506590301942 0
729 -1.600676251189751 -0.7828952015246045 0
730 1.600676251189751 0.7828952015246031 0
731 0.7832038737515987 -1.600592843420364 0
732 -0.7828952015246028 1.600676251189751 0
733 1.39349371289423 0.3505783209574675 0
734 0.350578320957469 -1.39349371289423 0
735 -0.3505783209574672 1.393493712894231 0
736 -1.393493712894232 -0.350578320957468 0
737 -0.2722317181256486 -1.186296284066333 0
738 -1.186296284066333 0.2722317181256508 0
739 0.2722317181256511 1.186296284066333 0
740 1.186296284066333 -0.2722317181256489 0
741 -2.130641651945514 0.3788919599659374 0
742 2.130641651945517 -0.3788919599659333 0
743 -0.3788919599659331 -2.130641651945516 0
744 0.3788919599659378 2.130641651945515 0
745 -1.029211503121397 1.589054552137032 0
746 1.589054552137032 1.029211503121397 0
747 -1.589054552137031 -1.029211503121399 0
748 1.029520175348394 -1.588971144367642 0
749 -1.097309071702146 -1.073734246330785 0
750 1.073504001831921 -1.097221440678908 0
751 1.097070931692382 1.073608674994633 0
752 -1.073608674994633 1.097070931692382 0
753 -2.337608909358274 1.333423759102532 0
754 1.333423759102531 2.337608909358275 0
755 -1.333423759102528 -2.337608909358276 0
756 2.337608909358277 -1.333423759102528 0
757 -1.192856702438629 -1.203076023070635 0
758 1.202956234502095 -1.192982423746144 0
759 1.192830242437547 1.203062070699948 0
760 -1.203062070699949 1.192830242437546 0
761 -1.334588717155179 -1.180711279292087 0
762 1.180697969451138 -1.334602686189348 0
763 1.334585777155059 1.180709729028675 0
764 -1.180709729028676 1.334585777155058 0
765 -1.943106704903843 -1.497685316265798 0
766 1.498623467198997 -1.942785094262911 0
767 1.942787861705705 1.49862496213785 0
768 -1.498624962137852 1.942787861705705 0
769 -1.980783245211492 -1.798226379348538 0
770 1.798226379348538 -1.980783245211492 0
771 1.980361251222263 1.797885008391738 0
772 -1.798226379348537 1.980783245211494 0
773 -1.22100138468952 -0.6248994018347084 0
774 0.624899401834709 -1.22100138468952 0
775 1.221001384689521 0.6248994018347065 0
776 -0.6248994018347065 1.221001384689521 0
777 1.867925544682804 0.3955810308148921 0
778 -1.867704500183161 -0.3957385869550559 0
779 0.3955810308148929 -1.867925544682802 0
780 -0.3955810308148918 1.867925544682802 0
781 2.24700297340825 -1.094854252025362 0
782 -1.094854252025361 -2.247002973408249 0
783 1.094854252025365 2.247002973408248 0
784 -2.24703117214279 1.094844371883974 0
785 1.081865841994516 -2.236486350524009 0
786 -2.236903880643844 -1.081994124458807 0
787 -1.081994124458804 2.236903880643845 0
788 2.236903880643846 1.081994124458805 0
789 1.658675196808753 -0.2567320248705439 0
790 -0.2567320248705449 -1.658675196808753 0
791 -1.658209741585829 0.2554819501561558 0
792 0.2569365722696982 1.658494378616802 0
793 -0.411482080639304 -1.12381322090825 0
794 1.12381322090825 -0.4114820806393041 0
795 -1.12381322090825 0.4114820806393055 0
796 0.4114820806393056 1.12381322090825 0
797 -1.422055085044849 0.3287045233987604 0
798 0.3289068230242916 1.421876253865997 0
799 -0.3287045233987558 -1.422055085044849 0
800 1.422055085044849 -0.3287045233987565 0
801 -1.004294744838622 0.6337391361711303 0
802 0.63373913617113 1.004294744838623 0
803 -0.6339365417055397 -1.004398836867272 0
804 1.004294744838623 -0.6337391361711292 0
805 1.580118670041851 -0.02761208207916422 0
806 0.02763455981533857 1.580098799910868 0
807 -1.580118670041851 0.02761208207916823 0
808 -0.02761208207916464 -1.580118670041851 0
809 -1.669508585515213 -2.127400221057601 0
810 2.127400221057601 -1.669508585515213 0
811 -2.127400221057601 1.669508585515215 0
812 1.669508585515215 2.127400221057601 0
813 0.658264116065742 -1.875474281529609 0
814 -1.875054721090329 -0.6584577604147166 0
815 1.875445714410248 0.6582827884860792 0
816 -0.6582641160657403 1.87547428152961 0
817 -2.417229800453279 -0.4125283215777308 0
818 -0.4125283215777302 2.41722980045328 0
819 2.41722980045328 0.4125283215777331 0
820 0.4125283215777341 -2.41722980045328 0
821 -2.361604146760092 -1.311645038978436 0
822 -1.311645038978436 2.361604146760093 0
823 1.311523309936976 -2.361224470188247 0
824 2.361604146760092 1.311645038978437 0
825 0.4505146612024648 -2.664157565177346 0
826 -2.664157565177347 -0.4505146612024626 0
827 -0.4505146612024632 2.664157565177347 0
828 2.664157565177347 0.450514661202464 0
829 1.623073304899964 1.170685742959095 0
830 -1.170685742959096 1.623073304899964 0
831 -1.623073304899963 -1.170685742959098 0
832 1.170720039873209 -1.623064037370031 0
833 -1.644731189549607 -0.243730569128904 0
834 -0.2437285323920964 1.644734047003897 0
835 0.2437285323920991 -1.644734047003896 0
836 1.644734047003896 0.243728532392098 0
837 1.890667278784581 -0.6709655069709874 0
838 -0.6709655069709871 -1.89066727878458 0
839 0.6709655069709931 1.890667278784579 0
840 -1.890667278784579 0.6709655069709933 0
841 -0.02579818603019248 2.438017189642688 0
842 -2.438017189642688 -0.02579818603019262 0
843 2.438017189642689 0.02579818603019431 0
844 0.0257981860301976 -2.438017189642688 0
845 -1.159171306850008 -0.2123093434208392 0
846 -0.2123093434208383 1.159171306850008 0
847 0.2123093434208401 -1.159171306850006 0
848 1.159171306850007 0.2123093434208392 0
849 -0.4140532662641271 -2.359163153522161 0
850 -2.359163153522162 0.4140532662641305 0
851 0.4140722608196336 2.359195198228188 0
852 2.35919519822819 -0.4140722608196284 0
853 -0.5265340342698672 -1.266087200655279 0
854 1.266087200655278 -0.5265340342698672 0
855 0.5265340342698706 1.266087200655278 0
856 -1.266087200655278 0.5265340342698703 0
857 1.442536176924618 0.7632693912388112 0
858 -0.7632693912388109 1.442536176924618 0
859 -1.442536176924619 -0.7632693912388127 0
860 0.7633036881529232 -1.442526909394687 0
861 -1.90188697696747 1.167263678102161 0
862 1.167263678102162 1.90188697696747 0
863 1.901886976967474 -1.167263678102157 0
864 -1.165630304780561 -1.901882274999099 0
865 1.417716615740116 -1.195389042292752 0
866 -1.195409810524618 -1.417812895089637 0
867 1.19540981052462 1.417812895089634 0
868 -1.417812895089634 1.19540981052462 0
869 -2.021660376758851 0.1304790470739876 0
870 0.1304790470739886 2.021660376758851 0
871 -0.1304790470739836 -2.021660376758853 0
872 2.021660376758854 -0.1304790470739838 0
873 0.3736813406233322 -2.157230245780021 0
874 -0.3736813406233288 2.157230245780019 0
875 -2.157230245780019 -0.3736813406233291 0
876 2.157230245780021 0.373681340623332 0
877 1.752109681541637 -1.746071168336122 0
878 -1.746071168336122 -1.752109681541637 0
879 -1.752109681541635 1.746071168336125 0
880 1.746071168336126 1.752109681541634 0
881 -2.620647092979698 0.7168466609491401 0
882 0.7168285920546167 2.620655151524256 0
883 2.620655151524256 -0.7168285920546141 0
884 -0.716828592054613 -2.620655151524256 0
885 0.06449152586257502 1.799874196965225 0
886 -1.799331165871812 0.06303310536244816 0
887 -0.06449152586257118 -1.799874196965225 0
888 1.799874196965226 -0.06449152586257155 0
889 -0.117492563474568 1.37176161680036 0
890 -1.371761616800361 -0.1174925634745689 0
891 0.117492563474571 -1.371761616800359 0
892 1.371761616800358 0.1174925634745699 0
893 0.4860443727385883 2.642620384727242 0
894 -0.4860253781830829 -2.642588340021218 0
895 -2.642588340021217 0.486025378183086 0
896 2.642620384727245 -0.4860443727385848 0
897 -2.138843597952486 0.2298032192408517 0
898 2.13884359795249 -0.2298032192408482 0
899 -0.2298032192408469 -2.138843597952488 0
900 0.2298032192408531 2.138843597952488 0
901 -0.02029344653702597 -2.267756922494856 0
902 0.0202934465370311 2.267756922494856 0
903 -2.267756922494855 0.02029344653703044 0
904 2.267756922494858 -0.02029344653702833 0
905 -1.158211445475812 0.6793382878210811 0
906 0.6793382878210813 1.158211445475812 0
907 1.158211445475814 -0.6793382878210792 0
908 -0.6795544938825765 -1.158325451031001 0
909 1.045894576810587 2.105374261986095 0
910 -1.045894576810581 -2.105374261986097 0
911 2.105374261986098 -1.045894576810582 0
912 -2.105377395178822 1.045893479017099 0
913 -2.091752000210933 -1.051307108410242 0
914 1.051294585013626 -2.091714025793271 0
915 -1.051306802391173 2.091753790566591 0
916 2.091758174776312 1.051312796180826 0
917 -1.815110350562767 1.265217482343802 0
918 1.265217482343803 1.815110350562767 0
919 1.815110350562771 -1.2652174823438 0
920 -1.265035655094852 -1.815965312892823 0
921 -1.177468250388936 0.05660906355460723 0
922 0.05660906355460749 1.177468250388935 0
923 -0.05660906355460583 -1.177468250388935 0
924 1.177468250388935 -0.05660906355460631 0
925 0.981520566012594 -1.808431887928619 0
926 -1.80842982213363 -0.9815209191115151 0
927 -0.981520566012591 1.808431887928618 0
928 1.808477922130678 0.9815835008039405 0
929 -1.546153447576718 -2.217362913122707 0
930 2.217362913122707 -1.546153447576718 0
931 -2.217362913122706 1.54615344757672 0
932 1.54615344757672 2.217362913122706 0
933 -0.08714738908593027 -2.525733892289508 0
934 -2.525733892289508 0.0871473890859354 0
935 2.525733892289508 -0.08714738908593433 0
936 0.08714738908593607 2.525733892289507 0
937 1.813080416235923 1.304209958902325 0
938 -1.304209958902327 1.813080416235923 0
939 1.30420995890233 -1.81308041623592 0
940 -1.813361748469573 -1.303380859603457 0
941 -1.34066313244913 0.940124529307325 0
942 1.340513613616808 -0.9402258017884529 0
943 -0.9401245293073217 -1.340663132449133 0
944 0.9401245293073253 1.34066313244913 0
945 1.681324153867575 -1.223282694656654 0
946 1.223282694656656 1.681324153867571 0
947 -1.223262491628992 -1.681419149682025 0
948 -1.68132415386757 1.223282694656655 0
949 1.857925641096815 1.973656374174281 0
950 -1.973948977851537 1.858287350230442 0
951 -1.85828735023044 -1.973948977851538 0
952 1.973948977851538 -1.85828735023044 0
953 -1.990121397019508 1.42282526023387 0
954 1.990121397019512 -1.422825260233866 0
955 -1.422825260233866 -1.990121397019512 0
956 1.42282526023387 1.990121397019507 0
957 1.93965666140434 -1.546782554204439 0
958 -1.546782554204439 -1.93965666140434 0
959 -1.939656661404336 1.546782554204442 0
960 1.546782554204443 1.939656661404336 0
961 2.220450124535074 1.564687762223149 0
962 -1.564687762223149 2.220450124535074 0
963 -2.220450124535074 -1.564687762223149 0
964 1.564675989579653 -2.220428330923087 0
965 0.1696847636643803 2.266170221669858 0
966 -0.169684763664374 -2.266170221669858 0
967 -2.266170221669857 0.1696847636643783 0
968 2.26617022166986 -0.1696847636643757 0
969 -2.301025791221468 -0.2030003068593977 0
970 2.301025791221468 0.2030003068594002 0
971 -0.2030003068593971 2.301025791221467 0
972 0.2030003068594017 -2.301025791221468 0
973 2.5276223505141 0.1560705833977761 0
974 0.1560705833977785 -2.5276223505141 0
975 -2.5276223505141 -0.1560705833977738 0
976 -0.156070583397773 2.527622350514099 0
977 -0.5060913463313991 -1.554736611787604 0
978 1.554736611787603 -0.506091346331399 0
979 -1.554736611787603 0.5060913463314053 0
980 0.5060913463314041 1.554736611787603 0
981 -1.074553052557601 -0.8237650308045684 0
982 0.8235947614186624 -1.074252225072086 0
983 1.074252225072087 0.8235947614186597 0
984 -0.8235947614186597 1.074252225072087 0
985 -2.292164315617317 0.6198965739422797 0
986 0.6198965739422803 2.292164315617317 0
987 2.292164315617319 -0.6198965739422755 0
988 -0.6198965739422742 -2.292164315617319 0
989 -1.611814037497773 1.426076938505327 0
990 1.426076938505329 1.611814037497773 0
991 1.611814037497777 -1.426076938505326 0
992 -1.426076938505326 -1.611814037497776 0
993 -2.718478637468487 -0.05713391130368019 0
994 -0.05713391130367962 2.718478637468487 0
995 2.718478637468488 0.05713391130368133 0
996 0.05713391130368276 -2.718478637468489 0
997 1.06399387015823 2.501644257034556 0
998 -2.501582197601492 1.064207706031286 0
999 -1.063993870158227 -2.501644257034557 0
1000 2.501644257034557 -1.063993870158228 0
1001 -2.491884921977283 -1.083215236232682 0
1002 1.083210121791042 -2.491678253621975 0
1003 -1.083215236232681 2.491884921977285 0
1004 2.491884921977285 1.083215236232679 0
1005 -0.6414333286967069 0.9695196362974013 0
1006 0.6414333286967077 -0.9695196362974009 0
1007 0.9695196362974012 0.6414333286967069 0
1008 -0.9695610165091203 -0.6414667914163897 0
1009 1.79802657751359 1.585546925952695 0
1010 -1.585546925952696 1.798026577513589 0
1011 -1.798056943532458 -1.585457435869646 0
1012 1.585546783577569 -1.798026313947607 0
1013 -0.7720539213760894 -1.847945029705728 0
1014 -1.847945029705726 0.7720539213760953 0
1015 1.847945029705728 -0.7720539213760899 0
1016 0.7720539213760951 1.847945029705727 0
1017 2.145815198679502 -0.8218989895088264 0
1018 -2.145807117750096 0.8219171085947293 0
1019 0.8218989895088309 2.145815198679501 0
1020 -0.8218989895088263 -2.145815198679502 0
1021 -2.1443295716586 -0.8201767599538399 0
1022 2.144379165431361 0.8201761500963298 0
1023 0.820169114868459 -2.144372334226571 0
1024 -0.8201691573417356 2.14437405052002 0
1025 -1.626980103470844 -0.9110888356444339 0
1026 0.9106542605363918 -1.628037755193461 0
1027 1.626980103470844 0.9110888356444323 0
1028 -0.9110888356444321 1.626980103470844 0
1029 -1.08544292858398 -1.677085555749396 0
1030 1.677085555749396 -1.085442928583979 0
1031 1.085442928583984 1.677085555749393 0
1032 -1.677085555749392 1.085442928583983 0
1033 0.2046514800652186 2.716176377583181 0
1034 -2.716176377583182 0.2046514800652187 0
1035 2.716176377583183 -0.2046514800652179 0
1036 -0.2046514800652166 -2.716176377583182 0
1037 -1.317165710925331 0.03686700762051816 0
1038 -0.03686700762051579 -1.317165710925329 0
1039 0.03686700762051866 1.31716571092533 0
1040 1.317165710925329 -0.03686700762051677 0
1041 1.829714161719973 0.7741359600552817 0
1042 -0.7739876790702391 1.829941018256086 0
1043 -1.829924285316684 -0.7739905391715023 0
1044 0.7739876790702414 -1.829941018256087 0
1045 1.462419637984699 1.018731114651668 0
1046 -1.018731114651668 1.462419637984698 0
1047 -1.462419637984697 -1.018731114651671 0
1048 1.018731114651671 -1.462419637984697 0
1049 2.10203202360488 -0.6989433220180433 0
1050 0.698943322018048 2.102032023604878 0
1051 -0.6989433220180429 -2.102032023604878 0
1052 -2.102032023604877 0.6989433220180493 0
1053 0.6953366721149244 -2.095872135761962 0
1054 2.095872135761963 0.6953366721149224 0
1055 -0.6953366721149215 2.095872135761961 0
1056 -2.095641221198199 -0.6953761415123244 0
1057 1.573457139689022 -0.1620013705853071 0
1058 -0.162001370585308 -1.573457139689023 0
1059 -1.573457139689023 0.1620013705853124 0
1060 0.1622373868150993 1.573248503313696 0
1061 -1.347714620203483 0.8046126920632773 0
1062 0.8046126920632783 1.347714620203484 0
1063 -0.8046126920632747 -1.347714620203486 0
1064 1.347714620203486 -0.8046126920632747 0
1065 -1.938583044674723 -0.2844104669559672 0
1066 -0.284392960718171 1.938607605174683 0
1067 0.2843929607181742 -1.938607605174684 0
1068 1.938607605174686 0.2843929607181733 0
1069 -1.375409891379859 1.594087036052205 0
1070 -1.594087036052203 -1.375409891379861 0
1071 1.375409891379861 -1.594087036052204 0
1072 1.594087036052206 1.375409891379858 0
1073 1.699997796927607 -0.004169589961361301 0
1074 -0.004169589961361905 -1.699997796927607 0
1075 0.004172586992855542 1.699995147576808 0
1076 -1.699925392781817 0.003975133894682662 0
1077 2.254904672481443 0.6010509579045067 0
1078 -0.6010509579045045 2.254904672481443 0
1079 0.6010509579045079 -2.254904672481442 0
1080 -2.254904672481441 -0.6010509579045032 0
1081 -2.314874291984773 0.9904111801082233 0
1082 -0.9901769186842699 -2.31494228870185 0
1083 2.31494228870185 -0.9901769186842709 0
1084 0.9901769186842745 2.314942288701848 0
1085 2.310019838136724 0.989095950535013 0
1086 -2.310019838136722 -0.9890959505350146 0
1087 -0.9890959505350118 2.310019838136722 0
1088 0.9890726579085396 -2.309714105875568 0
1089 -0.07737759506369558 1.513073585021785 0
1090 -1.513076234372582 -0.07738059209518584 0
1091 0.07738059209518859 -1.513076234372581 0
1092 1.51307623437258 0.07738059209518797 0
1093 1.747365087051508 1.904615909741547 0
1094 -1.904648421261243 1.747405276955243 0
1095 -1.747405276955241 -1.904648421261244 0
1096 1.904648421261244 -1.747405276955241 0
1097 1.151567968268938 1.316175944642019 0
1098 1.315939669537117 -1.151727271486084 0
1099 -1.15157149626908 -1.316177804958113 0
1100 -1.316175944642019 1.151567968268938 0
1101 0.9730962387679495 2.54980566498214 0
1102 -2.549686182476173 0.9733741009621236 0
1103 2.549805664982141 -0.9730962387679476 0
1104 -0.9730962387679468 -2.549805664982141 0
1105 0.9763180174750817 -2.548211747743763 0
1106 -2.548262922765077 -0.9763192839082487 0
1107 -0.9763192839082493 2.548262922765077 0
1108 2.548262922765077 0.9763192839082465 0
1109 -2.658618223209961 -0.5749181950293301 0
1110 0.5749181950293321 -2.658618223209962 0
1111 2.658618223209962 0.5749181950293311 0
1112 -0.5749181950293304 2.658618223209962 0
1113 1.386841823136906 -1.392080491069233 0
1114 -1.392080491069233 -1.386841823136906 0
1115 1.392080491069235 1.386841823136903 0
1116 -1.386841823136903 1.392080491069233 0
1117 1.803254962031494 -0.4192187768841597 0
1118 -0.4192187768841598 -1.803254962031494 0
1119 0.4192187768841653 1.803254962031493 0
1120 -1.803254962031494 0.419218776884166 0
1121 -1.17950864759722 -0.7666625110414722 0
1122 -0.7666336786942756 1.179456421793966 0
1123 0.7666336786942783 -1.179456421793965 0
1124 1.179456421793966 0.7666336786942755 0
1125 -1.897415287373981 0.328829352578625 0
1126 1.897415287373984 -0.3288293525786193 0
1127 -0.3288293525786192 -1.897415287373983 0
1128 0.3288293525786245 1.897415287373982 0
1129 -0.278683132674833 -2.529644294411112 0
1130 0.2786831326748402 2.529644294411113 0
1131 -2.529644294411114 0.2786831326748392 0
1132 2.529644294411115 -0.2786831326748364 0
1133 -1.738517837550669 -1.20464461387712 0
1134 1.204759733372185 -1.738479090915523 0
1135 1.738480326586183 1.2047551604503 0
1136 -1.2047551604503 1.738480326586183 0
1137 0.2521434754400624 1.322735207948464 0
1138 -1.32277594171698 0.2520973960809135 0
1139 1.32277594171698 -0.2520973960809105 0
1140 -0.2520973960809101 -1.32277594171698 0
1141 2.413031967344712 0.1448598245094938 0
1142 -2.413031967344712 -0.1448598245094916 0
1143 -0.1448598245094917 2.413031967344709 0
1144 0.1448598245094962 -2.413031967344712 0
1145 -0.4652107991408803 2.289130139640685 0
1146 0.4652107991408831 -2.289130139640685 0
1147 -2.289130139640683 -0.4652107991408799 0
1148 2.289130139640685 0.4652107991408826 0
1149 1.767114715284869 -0.1899854345981385 0
1150 -0.1899854345981395 -1.767114715284868 0
1151 0.1900127075846978 1.767090606192607 0
1152 -1.768451124364651 0.1886281707441425 0
1153 -2.475299336013932 -0.6352563036493329 0
1154 0.6352563036493366 -2.475299336013932 0
1155 -0.6352563036493334 2.475299336013932 0
1156 2.475299336013932 0.6352563036493341 0
1157 -2.207311773030345 -0.1159181604018615 0
1158 0.1159181604018657 -2.207311773030346 0
1159 -0.1159181604018618 2.207311773030346 0
1160 2.207311773030346 0.1159181604018649 0
1161 0.3995119234267634 -1.293351744894748 0
1162 -1.293351744894749 -0.3995119234267628 0
1163 -0.3995119234267616 1.293351744894749 0
1164 1.293351744894748 0.3995119234267617 0
1165 -1.966388636461565 -0.481132432745677 0
1166 -0.4808829163561441 1.966898973528305 0
1167 0.4808829163561449 -1.966898973528305 0
1168 1.966898973528307 0.4808829163561453 0
1169 -0.486266832933087 2.081429425349536 0
1170 0.4862668329330894 -2.081429425349537 0
1171 -2.081197025367277 -0.4863245880396098 0
1172 2.081429425349539 0.4862668329330891 0
1173 0.4977541989030592 2.093318700789675 0
1174 -2.093318700789675 0.4977541989030601 0
1175 2.093318700789678 -0.4977541989030551 0
1176 -0.4977541989030546 -2.093318700789677 0
1177 -1.695698722914441 0.3664696377963491 0
1178 1.695760783610831 -0.366636314424929 0
1179 0.366663587411488 1.69573667451857 0
1180 -0.3666363144249297 -1.695760783610831 0
1181 -1.242480278099319 -2.423194748716286 0
1182 2.423194748716286 -1.242480278099319 0
1183 -2.423234226944642 1.242466445901374 0
1184 1.242480278099322 2.423194748716284 0
1185 -2.058387137304855 -0.2744677485217471 0
1186 -0.2744658033842141 2.058389866249295 0
1187 0.2744658033842179 -2.058389866249297 0
1188 2.058389866249298 0.2744658033842178 0
1189 -1.48957331669289 0.9896972641145525 0
1190 0.9896972641145526 1.48957331669289 0
1191 1.489476470698033 -0.9896912097525639 0
1192 -0.9896972641145487 -1.489573316692893 0
1193 1.649842404897491 0.6307348475254474 0
1194 -0.6307329645923035 1.64984528561541 0
1195 0.6307623619472562 -1.649837342018325 0
1196 -1.649845073133639 -0.6307330009110497 0
1197 -1.742908100932051 -0.1706566642682101 0
1198 -0.170656392703302 1.742908481925956 0
1199 1.742908481925956 0.170656392703303 0
1200 0.1706563927033047 -1.742908481925955 0
1201 1.958005113794496 1.899725941553072 0
1202 -1.898166995639544 1.960297443896989 0
1203 -1.960297443896988 -1.898166995639545 0
1204 1.898166995639545 -1.960297443896988 0
1205 1.574127602281455 0.4864526533097266 0
1206 -0.4864526533097264 1.574127602281455 0
1207 -1.574127602281455 -0.4864526533097267 0
1208 0.4864526533097274 -1.574127602281455 0
1209 1.77154797984631 0.4684480012486208 0
1210 -1.771277950415999 -0.4686404728769104 0
1211 0.468448001248622 -1.771547979846309 0
1212 -0.4684480012486212 1.771547979846309 0
1213 1.604120723300459 -1.572507494785178 0
1214 -1.572507494785178 -1.604120723300459 0
1215 -1.604120723300456 1.572507494785182 0
1216 1.572507494785182 1.604120723300456 0
1217 0.8293551612934247 2.437685025633126 0
1218 2.437685025633128 -0.8293551612934215 0
1219 -0.8293551612934191 -2.437685025633128 0
1220 -2.437573817718236 0.8296045120378576 0
1221 -0.8287466830851249 2.438847244612943 0
1222 0.8287460985775119 -2.438823625372335 0
1223 -2.438847244612942 -0.8287466830851253 0
1224 2.438847244612943 0.8287466830851239 0
1225 -2.008632023045746 -1.392556190783014 0
1226 -1.393716929801434 2.008238157918633 0
1227 1.393701232943442 -2.008209099769315 0
1228 2.008238157918633 1.393716929801433 0
1229 -1.073458439414785 1.377822644918025 0
1230 1.377822644918025 1.073458439414785 0
1231 -1.377822644918024 -1.073458439414788 0
1232 1.073458439414788 -1.377822644918024 0
1233 -0.5088895961687616 -2.48434691516433 0
1234 -2.484346915164329 0.5088895961687651 0
1235 2.484359138484356 -0.5092427316315185 0
1236 0.5092427316315242 2.484359138484354 0
1237 -2.444735827220907 0.6246250795940218 0
1238 2.444737185367579 -0.6246643168676579 0
1239 -0.6246250795940175 -2.444735827220909 0
1240 0.6246643168676633 2.444737185367577 0
1241 0.3764662643273169 -2.53771342563808 0
1242 -2.537713425638081 -0.3764662643273132 0
1243 2.537713425638082 0.3764662643273157 0
1244 -0.3764662643273134 2.537713425638081 0
1245 -0.6084573147571106 -1.390161339134722 0
1246 1.390161339134722 -0.6084573147571103 0
1247 0.608457314757115 1.390161339134721 0
1248 -1.39016133913472 0.6084573147571147 0
1249 2.45232467025398 1.217911708785988 0
1250 1.217889192672472 -2.452020054297588 0
1251 -2.452324670253979 -1.217911708785987 0
1252 -1.217911708785987 2.452324670253981 0
1253 0.7371631027162615 0.9021388944996693 0
1254 -0.9021388944996692 0.7371631027162615 0
1255 0.90213889449967 -0.7371631027162604 0
1256 -0.7375800144394733 -0.9024606077492918 0
1257 0.6063926127414992 2.671016524983061 0
1258 -2.671011177882984 0.6063924893200351 0
1259 2.671016524983062 -0.6063926127414979 0
1260 -0.6063900801340975 -2.671012252355593 0
1261 1.016782108368989 -0.8784561003488663 0
1262 -1.016794669148512 0.8784380392704851 0
1263 -0.8791752199796312 -1.017305635482439 0
1264 0.8784380392704851 1.016794669148512 0
1265 -1.72784691793838 1.624622185935671 0
1266 -1.624622185935668 -1.727846917938383 0
1267 1.727846917938383 -1.624622185935668 0
1268 1.624622185935672 1.727846917938379 0
1269 -1.152218146722141 -0.0802388214167104 0
1270 -0.08023882141670999 1.152218146722141 0
1271 0.080238821416711 -1.15221814672214 0
1272 1.15221814672214 0.0802388214167106 0
1273 1.679313735502174 -0.5951196984928838 0
1274 -1.679313735502175 0.5951196984928897 0
1275 -0.5951196984928834 -1.679313735502174 0
1276 0.5951196984928893 1.679313735502173 0
1277 0.8534964656726978 -1.36259687347956 0
1278 -1.362597903205108 -0.8534926549044632 0
1279 -0.853492654904461 1.362597903205108 0
1280 1.362597903205109 0.8534926549044608 0
1281 -1.719692484550503 1.870106494989833 0
1282 1.719692468731048 -1.870106465704723 0
1283 1.870059606768809 1.719654554444191 0
1284 -1.870109868991928 -1.719682541207945 0
1285 -1.087579802523607 -0.4120908475143024 0
1286 -0.4120908475143017 1.087579802523607 0
1287 1.087579802523607 0.4120908475143022 0
1288 0.4120908475143035 -1.087579802523606 0
1289 -2.244833966947979 0.4169472364503087 0
1290 2.244838239575452 -0.4169497690577054 0
1291 0.4169497690577104 2.244838239575449 0
1292 -0.4169472364503057 -2.24483396694798 0
1293 -2.619343306923385 -0.7539639663569008 0
1294 -0.7539639663569007 2.619343306923385 0
1295 0.7539639155301534 -2.619341253076375 0
1296 2.619343306923385 0.7539639663569008 0
1297 -0.8388671954803228 -1.141969791142789 0
1298 1.141786096205213 -0.8385748115517411 0
1299 0.8385601906787665 1.141796264455303 0
1300 -1.141796264455302 0.8385601906787665 0
1301 0.5057587033084369 1.026449184499712 0
1302 1.026449184499712 -0.5057587033084363 0
1303 -0.5057850240463578 -1.026463063436865 0
1304 -1.026449184499712 0.5057587033084369 0
1305 -1.999926517563956 1.640504333077756 0
1306 1.640499867532897 1.999922905172879 0
1307 1.999926517563958 -1.640504333077755 0
1308 -1.640504333077755 -1.999926517563958 0
1309 1.762467512693231 0.576010054109971 0
1310 0.5760088397992457 -1.762473485113046 0
1311 -0.5760055734264721 1.762474367734945 0
1312 -1.762172450608581 -0.5762089146325846 0
1313 -2.310976475806986 -0.6970766722023752 0
1314 2.310976475806987 0.6970766722023793 0
1315 -0.6970766722023776 2.310976475806987 0
1316 0.697076621234446 -2.310974416254846 0
1317 -2.304922437995141 0.7338567351419681 0
1318 2.304934559389248 -0.733829556513117 0
1319 -0.7338295565131151 -2.304934559389249 0
1320 0.7338295565131201 2.304934559389247 0
1321 1.429227447713923 2.134329663815469 0
1322 -1.429227447713919 -2.134329663815473 0
1323 2.134329663815473 -1.429227447713919 0
1324 -2.134329663815471 1.429227447713923 0
1325 -1.1446684679997 0.1750086049679732 0
1326 0.1750086049679734 1.1446684679997 0
1327 -0.1750086049679719 -1.1446684679997 0
1328 1.1446684679997 -0.1750086049679722 0
1329 0.9311522252227878 1.2073516985608 0
1330 -1.2073516985608 0.9311522252227877 0
1331 1.207204799154556 -0.9313482884538323 0
1332 -0.9312194799342476 -1.207388714389621 0
1333 0.1011269957966474 1.488646133927132 0
1334 1.488701637826345 -0.1010642079869419 0
1335 -1.488701637826346 0.1010642079869448 0
1336 -0.1010642079869417 -1.488701637826345 0
1337 -2.157586681412588 0.6088355353502988 0
1338 -0.6088355353502922 -2.157586681412589 0
1339 2.157586681412591 -0.6088355353502936 0
1340 0.6088355353502977 2.157586681412588 0
1341 0.978493333521722 -1.699539560628462 0
1342 -1.699409385995366 -0.9785101676523846 0
1343 1.699415799328306 0.9785185118780396 0
1344 -0.9785101205725263 1.699409661434698 0
1345 1.880707159609791 0.1557818315640924 0
1346 0.1557818315640943 -1.88070715960979 0
1347 -1.880704784229422 -0.1557835246881585 0
1348 -0.1557818315640912 1.88070715960979 0
1349 1.129224685138891 -1.960571428228266 0
1350 -1.12922604262528 1.960575846536414 0
1351 -1.960575647608007 -1.129226076627403 0
1352 1.960576333670828 1.129226708601908 0
1353 1.406869890077883 1.271503716681251 0
1354 -1.271503716681251 1.406869890077882 0
1355 -1.406870216744562 -1.271503888932743 0
1356 1.271502410061527 -1.40687176885947 0
1357 -1.372944687466324 0.4289695826644701 0
1358 0.4289965559478734 1.372920843309143 0
1359 -0.4289695826644644 -1.372944687466324 0
1360 1.372944687466324 -0.4289695826644652 0
1361 1.661400929173399 -0.7107128155541435 0
1362 -0.7107128155541432 -1.661400929173398 0
1363 -1.661400929173399 0.7107128155541492 0
1364 0.7107128155541486 1.661400929173397 0
1365 -1.254165967576601 1.538126095393479 0
1366 1.53812609539348 1.2541659675766 0
1367 -1.538126131689776 -1.254165986715656 0
1368 1.254169633164867 -1.53812527442144 0
1369 -1.362771368874372 -0.5765482499370853 0
1370 0.5765482499370858 -1.362771368874371 0
1371 -0.5765482499370838 1.362771368874371 0
1372 1.362771368874371 0.5765482499370835 0
1373 -1.274338546542571 -0.9269709710602387 0
1374 0.9269595829308244 -1.274315848613327 0
1375 -0.92695907482839 1.274315985910067 0
1376 1.274315985910068 0.9269590748283896 0
1377 -1.245785375107176 -0.1469980515960258 0
1378 -0.1469980515960247 1.245785375107175 0
1379 0.1469980515960273 -1.245785375107174 0
1380 1.245785375107174 0.1469980515960262 0
1381 0.1289617569013596 1.379962269146833 0
1382 -1.379993825858558 0.128926058926286 0
1383 -0.1289260589262829 -1.379993825858558 0
1384 1.379993825858556 -0.1289260589262839 0
1385 1.584408045430484 -0.9033440875025305 0
1386 -0.9033447602094178 -1.58441880609658 0
1387 0.9033447602094221 1.584418806096578 0
1388 -1.584418806096578 0.9033447602094221 0
1389 0.4702183959112012 -1.187887909277933 0
1390 -1.187887909277934 -0.4702183959112001 0
1391 1.187887909277934 0.4702183959111992 0
1392 -0.4702183959111987 1.187887909277935 0
1393 1.467572882563878 2.317746375920237 0
1394 -2.317746375920236 1.467572882563878 0
1395 -1.467572882563877 -2.317746375920238 0
1396 2.317746375920238 -1.467572882563877 0
1397 1.162794771229235 2.151968104800826 0
1398 2.151968104800828 -1.162794771229232 0
1399 -1.162794771229231 -2.151968104800828 0
1400 -2.151972282391128 1.162793307504585 0
1401 1.163721675764 -2.153567930157454 0
1402 -2.153932321756133 -1.16390448204483 0
1403 -1.163904441242286 2.153932560470222 0
1404 2.153933145031518 1.16390524041424 0
1405 -1.690073033464575 2.17039442804644 0
1406 -2.17039442804644 -1.690073033464575 0
1407 1.690071463778775 -2.170391522231507 0
1408 2.17039442804644 1.690073033464575 0
1409 -1.807653635479189 1.543568139608352 0
1410 1.543568139608353 1.807653635479187 0
1411 1.807653635479192 -1.543568139608349 0
1412 -1.543568139608349 -1.807653635479192 0
1413 1.300466705656359 1.605559474914735 0
1414 -1.300464011919335 -1.605572141023332 0
1415 1.605559474914739 -1.300466705656357 0
1416 -1.605559474914735 1.300466705656358 0
1417 -1.240527171731414 0.7614295464598905 0
1418 0.7614295464598908 1.240527171731415 0
1419 1.240525815964739 -0.7614314959096179 0
1420 -0.7614993079082952 -1.240565509363774 0
1421 -0.3331578862418254 2.721001009506733 0
1422 2.721001009506734 0.3331578862418259 0
1423 0.3331578862418262 -2.721001009506734 0
1424 -2.721001009506733 -0.3331578862418254 0
1425 -2.136970075216012 -0.5970010473948049 0
1426 -0.5969602136089052 2.137197250473746 0
1427 2.137197250473749 0.5969602136089072 0
1428 0.5969602136089092 -2.137197250473748 0
1429 0.1893152357859566 2.490480006204851 0
1430 -2.490480006204853 0.1893152357859553 0
1431 -0.1893152357859494 -2.490480006204849 0
1432 2.490480006204854 -0.1893152357859535 0
1433 1.998717678271093 1.590482545681413 0
1434 -1.998760190697509 -1.590357259565143 0
1435 1.590482346356236 -1.998717309278717 0
1436 -1.590482545681414 1.998717678271091 0
1437 1.536297932123162 -0.2621424404565708 0
1438 -1.536235871426772 0.2619757638279898 0
1439 -0.2621424404565712 -1.536297932123162 0
1440 0.2612556051566459 1.537063642172327 0
1441 -1.911522719390496 -1.383932794514999 0
1442 1.907899893033514 1.386193144261219 0
1443 -1.386193144261221 1.907899893033514 0
1444 1.386190852021643 -1.90789564962123 0
1445 0.9639596682485131 1.688016575719601 0
1446 1.688015140964123 -0.9639595785542561 0
1447 -0.963959668248508 -1.688016575719603 0
1448 -1.688016575719601 0.9639596682485124 0
1449 -1.209477367824427 -2.326679474973853 0
1450 2.326679474973853 -1.209477367824427 0
1451 -2.326727976797263 1.209460373981236 0
1452 1.209477367824429 2.326679474973851 0
1453 1.444462037129828 1.761745131190533 0
1454 -1.761745131190533 1.444462037129825 0
1455 1.761745131190537 -1.444462037129824 0
1456 -1.444462037129823 -1.761745131190537 0
1457 -2.08196487323809 1.794117509243174 0
1458 1.79406928135869 2.081925859414456 0
1459 -1.794117509243173 -2.08196487323809 0
1460 2.08196487323809 -1.794117509243173 0
1461 -0.2542443580773069 1.414549629367682 0
1462 -1.414549629367683 -0.2542443580773078 0
1463 0.2542443580773093 -1.41454962936768 0
1464 1.41454962936768 0.254244358077308 0
1465 -1.386472779425933 1.721048452743446 0
1466 1.386472779425936 -1.721048452743444 0
1467 -1.721085963707931 -1.386362232852753 0
1468 1.721048452743446 1.386472779425932 0
1469 -1.072874885983585 1.857275126915428 0
1470 1.072874704985403 -1.857274537807675 0
1471 -1.857274824952308 -1.07287493759706 0
1472 1.857281329760292 1.072883366085981 0
1473 -2.085469974006182 -1.754569525077948 0
1474 1.754569350668415 -2.085469651137856 0
1475 -1.754569525077947 2.085469974006184 0
1476 2.085423085785159 1.754531594971636 0
1477 0.02152078000936311 2.042746083667399 0
1478 -2.042746083667398 0.02152078000936237 0
1479 -0.02152078000935873 -2.0427460836674 0
1480 2.042746083667401 -0.02152078000935905 0
1481 -1.469908862795091 0.427089740217274 0
1482 -0.4270897402172675 -1.469908862795091 0
1483 0.427120309938464 1.469881839416953 0
1484 1.469908862795091 -0.4270897402172678 0
1485 0.08435780648343034 -2.004873902056589 0
1486 -0.08435780648342643 2.004873902056588 0
1487 2.004873902056589 0.08435780648342943 0
1488 -2.004873638125436 -0.08435799460832255 0
1489 -0.7988947535019033 0.827420546495241 0
1490 0.827420546495241 0.7988947535019033 0
1491 0.7988947535019044 -0.8274205464952402 0
1492 -0.8277151205184805 -0.7991975594438209 0
1493 0.1559474987409949 -2.085367121995299 0
1494 -2.085366789453566 -0.1559477357701498 0
1495 2.085367121995299 0.1559474987409945 0
1496 -0.1559474987409911 2.085367121995299 0
1497 -0.2619353521707106 2.558405840109149 0
1498 -2.55840584010915 -0.2619353521707111 0
1499 2.558405840109149 0.261935352170713 0
1500 0.2619353521707146 -2.558405840109149 0
1501 -1.482724237939549 0.594230930591456 0
1502 0.5942309305914556 1.482724237939549 0
1503 1.482724237939549 -0.5942309305914495 0
1504 -0.5942309305914502 -1.48272423793955 0
1505 -1.294904359838886 -0.7422704586754458 0
1506 0.7422714892682403 -1.29489741283236 0
1507 1.294898556971859 0.742267255081311 0
1508 -0.7422672550813113 1.294898556971859 0
1509 1.853544549001733 -1.088460452853087 0
1510 -1.088188223966154 -1.853543765340337 0
1511 -1.853544549001729 1.08846045285309 0
1512 1.088460452853092 1.85354454900173 0
1513 -1.688966222357797 1.983341383940927 0
1514 1.983284076115232 1.688919863338971 0
1515 -1.983346482432983 -1.688951196862372 0
1516 1.688966179074002 -1.983341303813614 0
1517 -1.464940603029303 2.322563531856546 0
1518 -2.322563531856547 -1.464940603029304 0
1519 2.322563531856546 1.464940603029304 0
1520 1.464906321103749 -2.322479491441922 0
1521 -2.506210728817983 0.7308421415328944 0
1522 0.7307987190422245 2.506232190096553 0
1523 -0.7307943593451481 -2.506232039191369 0
1524 2.506232190096555 -0.7307987190422212 0
1525 -1.339498081873805 -2.206840433465013 0
1526 2.206840433465012 -1.339498081873805 0
1527 -2.206840433465011 1.33949808187381 0
1528 1.339498081873809 2.20684043346501 0
1529 -1.857869996303713 1.368955542926208 0
1530 1.368955542926209 1.857869996303713 0
1531 -1.368935339898544 -1.857964992118167 0
1532 1.857869996303717 -1.368955542926205 0
1533 0.4973710172949655 2.294498350773201 0
1534 -2.294493508462069 0.497368147006577 0
1535 2.294498350773204 -0.4973710172949602 0
1536 -0.4973681470065738 -2.294493508462069 0
1537 0.7410513133098404 -2.512722717610944 0
1538 -0.7410514262581693 2.51272728171541 0
1539 -2.512727281715409 -0.7410514262581692 0
1540 2.512727281715409 0.7410514262581693 0
1541 1.71236597018452 0.7538035801870238 0
1542 0.7538259981691259 -1.712388454641282 0
1543 -1.71239807795951 -0.7537813592604454 0
1544 -0.7537809222248649 1.712400634823477 0
$EndNodes
$Elements
3088
1 1 2 5 1 1 9
2 1 2 5 1 9 10
3 1 2 5 1 10 11
4 1 2 5 1 11 12
5 1 2 5 1 12 13
6 1 2 5 1 13 14
7 1 2 5 1 14 15
8 1 2 5 1 15 16
9 1 2 5 1 16 17
10 1 2 5 1 17 18
11 1 2 5 1 18 19
12 1 2 5 1 19 20
13 1 2 5 1 20 21
14 1 2 5 1 21 22
15 1 2 5 1 22 23
16 1 2 5 1 23 24
17 1 2 5 1 24 25
18 1 2 5 1 25 26
19 1 2 5 1 26 27
20 1 2 5 1 27 28
21 1 2 5 1 28 29
22 1 2 5 1 29 30
23 1 2 5 1 30 31
24 1 2 5 1 31 32
25 1 2 5 1 32 33
26 1 2 5 1 33 34
27 1 2 5 1 34 35
28 1 2 5 1 35 36
29 1 2 5 1 36 37
30 1 2 5 1 37 38
31 1 2 5 1 38 39
32 1 2 5 1 39 2
33 1 2 5 2 2 40
34 1 2 5 2 40 41
35 1 2 5 2 41 42
36 1 2 5 2 42 43
37 1 2 5 2 43 44
38 1 2 5 2 44 45
39 1 2 5 2 45 46
40 1 2 5 2 46 47
41 1 2 5 2 47 48
42 1 2 5 2 48 49
43 1 2 5 2 49 50
44 1 2 5 2 50 51
45 1 2 5 2 51 52
46 1 2 5 2 52 53
47 1 2 5 2 53 54
48 1 2 5 2 54 55
49 1 2 5 2 55 56
50 1 2 5 2 56 57
51 1 2 5 2 57 58
52 1 2 5 2 58 59
53 1 2 5 2 59 60
54 1 2 5 2 60 61
55 1 2 5 2 61 62
56 1 2 5 2 62 63
57 1 2 5 2 63 64
58 1 2 5 2 64 65
59 1 2 5 2 65 66
60 1 2 5 2 66 67
61 1 2 5 2 67 68
62 1 2 5 2 68 69
63 1 2 5 2 69 70
64 1 2 5 2 70 3
65 1 2 5 3 3 71
66 1 2 5 3 71 72
67 1 2 5 3 72 73
68 1 2 5 3 73 74
69 1 2 5 3 74 75
70 1 2 5 3 75 76
71 1 2 5 3 76 77
72 1 2 5 3 77 78
73 1 2 5 3 78 79
74 1 2 5 3 79 80
75 1 2 5 3 80 81
76 1 2 5 3 81 82
77 1 2 5 3 82 83
78 1 2 5 3 83 84
79 1 2 5 3 84 85
80 1 2 5 3 85 86
81 1 2 5 3 86 87
82 1 2 5 3 87 88
83 1 2 5 3 88 89
84 1 2 5 3 89 90
85 1 2 5 3 90 91
86 1 2 5 3 91 92
87 1 2 5 3 92 93
88 1 2 5 3 93 94
89 1 2 5 3 94 95
90 1 2 5 3 95 96
91 1 2 5 3 96 97
92 1 2 5 3 97 98
93 1 2 5 3 98 99
94 1 2 5 3 99 100
95 1 2 5 3 100 101
96 1 2 5 3 101 4
97 1 2 5 4 4 102
98 1 2 5 4 102 103
99 1 2 5 4 103 104
100 1 2 5 4 104 105
101 1 2 5 4 105 106
102 1 2 5 4 106 107
103 1 2 5 4 107 108
104 1 2 5 4 108 109
105 1 2 5 4 109 110
106 1 2 5 4 110 111
107 1 2 5 4 111 112
108 1 2 5 4 112 113
109 1 2 5 4 113 114
110 1 2 5 4 114 115
111 1 2 5 4 115 116
112 1 2 5 4 116 117
113 1 2 5 4 117 118
114 1 2 5 4 118 119
115 1 2 5 4 119 120
116 1 2 5 4 120 121
117 1 2 5 4 121 122
118 1 2 5 4 122 123
119 1 2 5 4 123 124
120 1 2 5 4 124 125
121 1 2 5 4 125 126
122 1 2 5 4 126 127
123 1 2 5 4 127 128
124 1 2 5 4 128 129
125 1 2 5 4 129 130
126 1 2 5 4 130 131
127 1 2 5 4 131 132
128 1 2 5 4 132 1
129 1 2 6 5 5 133
130 1 2 6 5 133 134
131 1 2 6 5 134 135
132 1 2 6 5 135 136
133 1 2 6 5 136 137
134 1 2 6 5 137 138
135 1 2 6 5 138 139
136 1 2 6 5 139 140
137 1 2 6 5 140 141
138 1 2 6 5 141 142
139 1 2 6 5 142 143
140 1 2 6 5 143 6
141 1 2 6 6 6 144
142 1 2 6 6 144 145
143 1 2 6 6 145 146
144 1 2 6 6 146 147
145 1 2 6 6 147 148
146 1 2 6 6 148 149
147 1 2 6 6 149 150
148 1 2 6 6 150 151
149 1 2 6 6 151 152
150 1 2 6 6 152 153
151 1 2 6 6 153 154
152 1 2 6 6 154 7
153 1 2 6 7 7 155
154 1 2 6 7 155 156
155 1 2 6 7 156 157
156 1 2 6 7 157 158
157 1 2 6 7 158 159
158 1 2 6 7 159 160
159 1 2 6 7 160 161
160 1 2 6 7 161 162
161 1 2 6 7 162 163
162 1 2 6 7 163 164
163 1 2 6 7 164 165
164 1 2 6 7 165 8
165 1 2 6 8 8 166
166 1 2 6 8 166 167
167 1 2 6 8 167 168
168 1 2 6 8 168 169
169 1 2 6 8 169 170
170 1 2 6 8 170 171
171 1 2 6 8 171 172
172 1 2 6 8 172 173
173 1 2 6 8 173 174
174 1 2 6 8 174 175
175 1 2 6 8 175 176
176 1 2 6 8 176 5
177 2 2 7 11 216 680 577
178 2 2 7 11 214 678 580
179 2 2 7 11 213 677 578
180 2 2 7 11 215 679 579
181 2 2 7 11 217 583 682
182 2 2 7 11 220 582 681
183 2 2 7 11 218 581 684
184 2 2 7 11 219 584 683
185 2 2 7 11 877 1012 1282
186 2 2 7 11 878 1011 1284
187 2 2 7 11 880 1009 1283
188 2 2 7 11 879 1010 1281
189 2 2 7 11 163 593 164
190 2 2 7 11 141 596 142
191 2 2 7 11 174 594 175
192 2 2 7 11 152 595 153
193 2 2 7 11 279 894 637
194 2 2 7 11 280 896 640
195 2 2 7 11 277 895 639
196 2 2 7 11 278 893 638
197 2 2 7 11 274 1161 598
198 2 2 7 11 276 1164 600
199 2 2 7 11 273 1162 597
200 2 2 7 11 275 1163 599
201 2 2 7 11 249 502 971
202 2 2 7 11 250 501 969
203 2 2 7 11 251 503 972
204 2 2 7 11 252 504 970
205 2 2 7 11 311 608 684
206 2 2 7 11 312 606 681
207 2 2 7 11 309 607 683
208 2 2 7 11 310 605 682
209 2 2 7 11 379 683 607
210 2 2 7 11 380 684 608
211 2 2 7 11 378 682 605
212 2 2 7 11 377 681 606
213 2 2 7 11 448 1009 880
214 2 2 7 11 446 1011 878
215 2 2 7 11 445 1012 877
216 2 2 7 11 447 1010 879
217 2 2 7 11 369 602 818
218 2 2 7 11 370 601 817
219 2 2 7 11 371 603 820
220 2 2 7 11 372 604 819
221 2 2 7 11 256 1093 1306
222 2 2 7 11 255 1094 1305
223 2 2 7 11 253 1096 1307
224 2 2 7 11 254 1095 1308
225 2 2 7 11 512 1306 1093
226 2 2 7 11 511 1305 1094
227 2 2 7 11 510 1307 1096
228 2 2 7 11 509 1308 1095
229 2 2 7 11 281 1239 988
230 2 2 7 11 282 1237 985
231 2 2 7 11 284 1240 986
232 2 2 7 11 283 1238 987
233 2 2 7 11 577 680 1400
234 2 2 7 11 579 679 1397
235 2 2 7 11 578 677 1399
236 2 2 7 11 580 678 1398
237 2 2 7 11 582 1404 681
238 2 2 7 11 584 1402 683
239 2 2 7 11 583 1403 682
240 2 2 7 11 581 1401 684
241 2 2 7 11 404 904 626
242 2 2 7 11 401 902 625
243 2 2 7 11 402 903 627
244 2 2 7 11 403 901 628
245 2 2 7 11 306 1400 680
246 2 2 7 11 305 1399 677
247 2 2 7 11 308 1397 679
248 2 2 7 11 307 1398 678
249 2 2 7 11 153 595 1005
250 2 2 7 11 142 596 1007
251 2 2 7 11 164 593 1008
252 2 2 7 11 175 594 1006
253 2 2 7 11 312 681 1404
254 2 2 7 11 310 682 1403
255 2 2 7 11 309 683 1402
256 2 2 7 11 311 684 1401
257 2 2 7 11 536 814 268
258 2 2 7 11 265 533 815
259 2 2 7 11 267 535 813
260 2 2 7 11 266 534 816
261 2 2 7 11 536 340 814
262 2 2 7 11 533 338 815
263 2 2 7 11 534 339 816
264 2 2 7 11 535 337 813
265 2 2 7 11 264 530 709
266 2 2 7 11 262 532 711
267 2 2 7 11 263 529 710
268 2 2 7 11 261 531 712
269 2 2 7 11 279 1233 894
270 2 2 7 11 277 1234 895
271 2 2 7 11 280 1235 896
272 2 2 7 11 278 1236 893
273 2 2 7 11 297 589 1369
274 2 2 7 11 300 590 1370
275 2 2 7 11 299 591 1371
276 2 2 7 11 298 592 1372
277 2 2 7 11 191 1115 506
278 2 2 7 11 192 1116 505
279 2 2 7 11 190 1114 507
280 2 2 7 11 189 1113 508
281 2 2 7 11 312 518 824
282 2 2 7 11 310 520 822
283 2 2 7 11 519 823 311
284 2 2 7 11 309 517 821
285 2 2 7 11 83 84 639
286 2 2 7 11 52 53 638
287 2 2 7 11 114 115 637
288 2 2 7 11 21 22 640
289 2 2 7 11 297 1369 597
290 2 2 7 11 299 1371 599
291 2 2 7 11 300 1370 598
292 2 2 7 11 298 1372 600
293 2 2 7 11 600 1164 733
294 2 2 7 11 598 1161 734
295 2 2 7 11 599 1163 735
296 2 2 7 11 597 1162 736
297 2 2 7 11 523 988 1239
298 2 2 7 11 524 986 1240
299 2 2 7 11 522 985 1237
300 2 2 7 11 521 987 1238
301 2 2 7 11 289 750 623
302 2 2 7 11 291 749 622
303 2 2 7 11 290 751 621
304 2 2 7 11 292 752 624
305 2 2 7 11 378 962 575
306 2 2 7 11 379 963 573
307 2 2 7 11 380 964 574
308 2 2 7 11 377 961 576
309 2 2 7 11 482 765 1011
310 2 2 7 11 483 766 1012
311 2 2 7 11 481 767 1009
312 2 2 7 11 484 768 1010
313 2 2 7 11 269 1012 766
314 2 2 7 11 270 1011 765
315 2 2 7 11 272 1009 767
316 2 2 7 11 271 1010 768
317 2 2 7 11 314 656 645
318 2 2 7 11 313 653 646
319 2 2 7 11 315 655 648
320 2 2 7 11 316 654 647
321 2 2 7 11 328 645 656
322 2 2 7 11 327 646 653
323 2 2 7 11 326 647 654
324 2 2 7 11 325 648 655
325 2 2 7 11 712 1126 1117
326 2 2 7 11 711 1127 1118
327 2 2 7 11 710 1128 1119
328 2 2 7 11 709 1125 1120
329 2 2 7 11 262 711 1118
330 2 2 7 11 261 712 1117
331 2 2 7 11 264 709 1120
332 2 2 7 11 263 710 1119
333 2 2 7 11 257 1191 537
334 2 2 7 11 258 1192 538
335 2 2 7 11 259 1190 539
336 2 2 7 11 260 1189 540
337 2 2 7 11 257 541 1191
338 2 2 7 11 258 543 1192
339 2 2 7 11 259 542 1190
340 2 2 7 11 260 544 1189
341 2 2 7 11 250 817 501
342 2 2 7 11 249 818 502
343 2 2 7 11 252 819 504
344 2 2 7 11 251 820 503
345 2 2 7 11 289 617 658
346 2 2 7 11 618 657 291
347 2 2 7 11 290 619 659
348 2 2 7 11 292 620 660
349 2 2 7 11 519 311 785
350 2 2 7 11 309 786 517
351 2 2 7 11 312 788 518
352 2 2 7 11 310 787 520
353 2 2 7 11 212 548 836
354 2 2 7 11 210 546 834
355 2 2 7 11 209 545 833
356 2 2 7 11 211 547 835
357 2 2 7 11 412 835 547
358 2 2 7 11 411 836 548
359 2 2 7 11 409 834 546
360 2 2 7 11 410 833 545
361 2 2 7 11 197 874 1145
362 2 2 7 11 200 873 1146
363 2 2 7 11 199 876 1148
364 2 2 7 11 198 875 1147
365 2 2 7 11 262 561 1275
366 2 2 7 11 261 562 1273
367 2 2 7 11 263 563 1276
368 2 2 7 11 264 564 1274
369 2 2 7 11 262 1275 565
370 2 2 7 11 261 1273 566
371 2 2 7 11 263 1276 567
372 2 2 7 11 264 1274 568
373 2 2 7 11 262 838 532
374 2 2 7 11 264 840 530
375 2 2 7 11 263 839 529
376 2 2 7 11 261 837 531
377 2 2 7 11 531 837 333
378 2 2 7 11 532 838 334
379 2 2 7 11 530 840 336
380 2 2 7 11 529 839 335
381 2 2 7 11 265 1168 533
382 2 2 7 11 536 268 1165
383 2 2 7 11 266 1166 534
384 2 2 7 11 267 1167 535
385 2 2 7 11 276 600 1372
386 2 2 7 11 274 598 1370
387 2 2 7 11 275 599 1371
388 2 2 7 11 273 597 1369
389 2 2 7 11 299 1206 1194
390 2 2 7 11 298 1205 1193
391 2 2 7 11 300 1208 1195
392 2 2 7 11 297 1207 1196
393 2 2 7 11 289 650 750
394 2 2 7 11 291 649 749
395 2 2 7 11 290 651 751
396 2 2 7 11 292 652 752
397 2 2 7 11 296 504 876
398 2 2 7 11 293 501 875
399 2 2 7 11 295 503 873
400 2 2 7 11 294 502 874
401 2 2 7 11 296 970 504
402 2 2 7 11 293 969 501
403 2 2 7 11 295 972 503
404 2 2 7 11 294 971 502
405 2 2 7 11 84 1034 639
406 2 2 7 11 53 1033 638
407 2 2 7 11 22 1035 640
408 2 2 7 11 115 1036 637
409 2 2 7 11 192 505 1069
410 2 2 7 11 191 506 1072
411 2 2 7 11 190 507 1070
412 2 2 7 11 189 508 1071
413 2 2 7 11 516 414 1083
414 2 2 7 11 515 413 1082
415 2 2 7 11 514 416 1084
416 2 2 7 11 415 1081 513
417 2 2 7 11 520 1087 418
418 2 2 7 11 519 1088 420
419 2 2 7 11 517 1086 417
420 2 2 7 11 518 1085 419
421 2 2 7 11 15 1000 516
422 2 2 7 11 108 999 515
423 2 2 7 11 77 998 513
424 2 2 7 11 46 997 514
425 2 2 7 11 466 905 856
426 2 2 7 11 468 908 853
427 2 2 7 11 467 907 854
428 2 2 7 11 465 906 855
429 2 2 7 11 240 856 905
430 2 2 7 11 238 854 907
431 2 2 7 11 237 853 908
432 2 2 7 11 239 855 906
433 2 2 7 11 395 1005 595
434 2 2 7 11 396 1007 596
435 2 2 7 11 394 1008 593
436 2 2 7 11 393 1006 594
437 2 2 7 11 212 1464 548
438 2 2 7 11 211 1463 547
439 2 2 7 11 210 1461 546
440 2 2 7 11 209 1462 545
441 2 2 7 11 299 599 1206
442 2 2 7 11 297 597 1207
443 2 2 7 11 300 598 1208
444 2 2 7 11 298 600 1205
445 2 2 7 11 502 1145 874
446 2 2 7 11 503 1146 873
447 2 2 7 11 504 1148 876
448 2 2 7 11 501 1147 875
449 2 2 7 11 66 1517 822
450 2 2 7 11 97 1518 821
451 2 2 7 11 128 1520 823
452 2 2 7 11 35 1519 824
453 2 2 7 11 626 904 1160
454 2 2 7 11 625 902 1159
455 2 2 7 11 627 903 1157
456 2 2 7 11 628 901 1158
457 2 2 7 11 202 752 760
458 2 2 7 11 201 751 759
459 2 2 7 11 203 749 757
460 2 2 7 11 204 750 758
461 2 2 7 11 301 869 585
462 2 2 7 11 302 870 586
463 2 2 7 11 303 871 587
464 2 2 7 11 304 872 588
465 2 2 7 11 192 556 1116
466 2 2 7 11 191 554 1115
467 2 2 7 11 189 553 1113
468 2 2 7 11 190 555 1114
469 2 2 7 11 15 516 1182
470 2 2 7 11 108 515 1181
471 2 2 7 11 77 513 1183
472 2 2 7 11 46 514 1184
473 2 2 7 11 514 997 416
474 2 2 7 11 415 513 998
475 2 2 7 11 516 1000 414
476 2 2 7 11 515 999 413
477 2 2 7 11 517 417 1001
478 2 2 7 11 519 420 1002
479 2 2 7 11 520 418 1003
480 2 2 7 11 518 419 1004
481 2 2 7 11 318 699 833
482 2 2 7 11 317 697 834
483 2 2 7 11 319 700 835
484 2 2 7 11 320 698 836
485 2 2 7 11 430 1125 585
486 2 2 7 11 429 1126 588
487 2 2 7 11 431 1128 586
488 2 2 7 11 432 1127 587
489 2 2 7 11 301 585 1125
490 2 2 7 11 303 587 1127
491 2 2 7 11 302 586 1128
492 2 2 7 11 304 588 1126
493 2 2 7 11 383 935 726
494 2 2 7 11 384 933 725
495 2 2 7 11 381 934 728
496 2 2 7 11 382 936 727
497 2 2 7 11 56 57 674
498 2 2 7 11 87 88 673
499 2 2 7 11 25 26 675
500 2 2 7 11 118 119 676
501 2 2 7 11 256 1306 960
502 2 2 7 11 255 1305 959
503 2 2 7 11 253 1307 957
504 2 2 7 11 254 1308 958
505 2 2 7 11 346 553 865
506 2 2 7 11 345 555 866
507 2 2 7 11 348 554 867
508 2 2 7 11 347 556 868
509 2 2 7 11 257 865 553
510 2 2 7 11 259 867 554
511 2 2 7 11 258 866 555
512 2 2 7 11 260 868 556
513 2 2 7 11 859 1278 1505
514 2 2 7 11 860 1277 1506
515 2 2 7 11 857 1280 1507
516 2 2 7 11 858 1279 1508
517 2 2 7 11 203 538 943
518 2 2 7 11 537 942 204
519 2 2 7 11 201 539 944
520 2 2 7 11 202 540 941
521 2 2 7 11 393 594 774
522 2 2 7 11 395 595 776
523 2 2 7 11 394 593 773
524 2 2 7 11 396 596 775
525 2 2 7 11 57 1421 674
526 2 2 7 11 88 1424 673
527 2 2 7 11 26 1422 675
528 2 2 7 11 119 1423 676
529 2 2 7 11 201 621 751
530 2 2 7 11 204 623 750
531 2 2 7 11 203 622 749
532 2 2 7 11 202 624 752
533 2 2 7 11 410 545 1090
534 2 2 7 11 412 547 1091
535 2 2 7 11 409 546 1089
536 2 2 7 11 411 548 1092
537 2 2 7 11 530 336 1052
538 2 2 7 11 532 334 1051
539 2 2 7 11 531 333 1049
540 2 2 7 11 529 335 1050
541 2 2 7 11 536 1056 340
542 2 2 7 11 534 1055 339
543 2 2 7 11 533 1054 338
544 2 2 7 11 535 1053 337
545 2 2 7 11 304 898 872
546 2 2 7 11 302 900 870
547 2 2 7 11 301 897 869
548 2 2 7 11 303 899 871
549 2 2 7 11 607 821 1518
550 2 2 7 11 605 822 1517
551 2 2 7 11 608 823 1520
552 2 2 7 11 606 824 1519
553 2 2 7 11 212 600 733
554 2 2 7 11 210 599 735
555 2 2 7 11 209 597 736
556 2 2 7 11 211 598 734
557 2 2 7 11 460 901 844
558 2 2 7 11 459 903 842
559 2 2 7 11 457 902 841
560 2 2 7 11 458 904 843
561 2 2 7 11 227 844 901
562 2 2 7 11 225 841 902
563 2 2 7 11 226 842 903
564 2 2 7 11 228 843 904
565 2 2 7 11 178 567 1364
566 2 2 7 11 179 565 1362
567 2 2 7 11 180 566 1361
568 2 2 7 11 177 568 1363
569 2 2 7 11 378 605 962
570 2 2 7 11 377 606 961
571 2 2 7 11 379 607 963
572 2 2 7 11 380 608 964
573 2 2 7 11 212 698 1205
574 2 2 7 11 210 697 1206
575 2 2 7 11 209 699 1207
576 2 2 7 11 211 700 1208
577 2 2 7 11 493 1205 698
578 2 2 7 11 494 1206 697
579 2 2 7 11 496 1207 699
580 2 2 7 11 495 1208 700
581 2 2 7 11 257 537 865
582 2 2 7 11 258 538 866
583 2 2 7 11 259 539 867
584 2 2 7 11 260 540 868
585 2 2 7 11 178 653 1387
586 2 2 7 11 180 655 1385
587 2 2 7 11 179 654 1386
588 2 2 7 11 177 656 1388
589 2 2 7 11 284 986 1320
590 2 2 7 11 281 988 1319
591 2 2 7 11 282 985 1317
592 2 2 7 11 283 987 1318
593 2 2 7 11 351 861 577
594 2 2 7 11 352 862 579
595 2 2 7 11 349 864 578
596 2 2 7 11 350 863 580
597 2 2 7 11 216 577 861
598 2 2 7 11 215 579 862
599 2 2 7 11 213 578 864
600 2 2 7 11 214 580 863
601 2 2 7 11 110 111 632
602 2 2 7 11 48 49 629
603 2 2 7 11 17 18 631
604 2 2 7 11 79 80 630
605 2 2 7 11 92 93 635
606 2 2 7 11 61 62 634
607 2 2 7 11 123 124 633
608 2 2 7 11 30 31 636
609 2 2 7 11 162 845 569
610 2 2 7 11 151 846 571
611 2 2 7 11 140 848 572
612 2 2 7 11 173 847 570
613 2 2 7 11 302 710 744
614 2 2 7 11 304 712 742
615 2 2 7 11 303 711 743
616 2 2 7 11 301 709 741
617 2 2 7 11 259 1031 542
618 2 2 7 11 257 1030 541
619 2 2 7 11 258 1029 543
620 2 2 7 11 260 1032 544
621 2 2 7 11 589 859 1505
622 2 2 7 11 590 860 1506
623 2 2 7 11 592 857 1507
624 2 2 7 11 591 858 1508
625 2 2 7 11 376 760 752
626 2 2 7 11 375 759 751
627 2 2 7 11 373 757 749
628 2 2 7 11 374 758 750
629 2 2 7 11 178 1387 1445
630 2 2 7 11 179 1386 1447
631 2 2 7 11 180 1385 1446
632 2 2 7 11 177 1388 1448
633 2 2 7 11 221 650 1123
634 2 2 7 11 222 649 1121
635 2 2 7 11 223 651 1124
636 2 2 7 11 224 652 1122
637 2 2 7 11 346 1113 553
638 2 2 7 11 345 1114 555
639 2 2 7 11 348 1115 554
640 2 2 7 11 347 1116 556
641 2 2 7 11 263 567 839
642 2 2 7 11 262 565 838
643 2 2 7 11 261 566 837
644 2 2 7 11 264 568 840
645 2 2 7 11 400 726 935
646 2 2 7 11 397 725 933
647 2 2 7 11 399 728 934
648 2 2 7 11 398 727 936
649 2 2 7 11 174 1288 594
650 2 2 7 11 163 1285 593
651 2 2 7 11 141 1287 596
652 2 2 7 11 152 1286 595
653 2 2 7 11 203 1099 538
654 2 2 7 11 537 204 1098
655 2 2 7 11 201 1097 539
656 2 2 7 11 202 1100 540
657 2 2 7 11 187 1346 642
658 2 2 7 11 186 1348 643
659 2 2 7 11 185 1347 644
660 2 2 7 11 188 1345 641
661 2 2 7 11 6 1490 1253
662 2 2 7 11 5 1491 1255
663 2 2 7 11 8 1492 1256
664 2 2 7 11 7 1489 1254
665 2 2 7 11 349 578 910
666 2 2 7 11 350 580 911
667 2 2 7 11 351 577 912
668 2 2 7 11 352 579 909
669 2 2 7 11 421 694 967
670 2 2 7 11 423 695 966
671 2 2 7 11 422 693 965
672 2 2 7 11 424 696 968
673 2 2 7 11 226 967 694
674 2 2 7 11 225 965 693
675 2 2 7 11 227 966 695
676 2 2 7 11 228 968 696
677 2 2 7 11 473 854 1246
678 2 2 7 11 475 853 1245
679 2 2 7 11 474 855 1247
680 2 2 7 11 476 856 1248
681 2 2 7 11 318 833 1197
682 2 2 7 11 317 834 1198
683 2 2 7 11 319 835 1200
684 2 2 7 11 320 836 1199
685 2 2 7 11 349 703 686
686 2 2 7 11 352 704 687
687 2 2 7 11 350 702 685
688 2 2 7 11 351 701 688
689 2 2 7 11 355 689 707
690 2 2 7 11 356 690 708
691 2 2 7 11 354 691 706
692 2 2 7 11 353 692 705
693 2 2 7 11 329 796 855
694 2 2 7 11 330 795 856
695 2 2 7 11 331 794 854
696 2 2 7 11 332 793 853
697 2 2 7 11 261 1117 562
698 2 2 7 11 263 1119 563
699 2 2 7 11 262 1118 561
700 2 2 7 11 264 1120 564
701 2 2 7 11 343 570 847
702 2 2 7 11 341 569 845
703 2 2 7 11 342 571 846
704 2 2 7 11 344 572 848
705 2 2 7 11 602 1145 818
706 2 2 7 11 603 1146 820
707 2 2 7 11 601 1147 817
708 2 2 7 11 604 1148 819
709 2 2 7 11 257 553 1415
710 2 2 7 11 259 554 1413
711 2 2 7 11 258 555 1414
712 2 2 7 11 260 556 1416
713 2 2 7 11 320 777 698
714 2 2 7 11 318 778 699
715 2 2 7 11 317 780 697
716 2 2 7 11 319 779 700
717 2 2 7 11 238 1064 648
718 2 2 7 11 239 1062 646
719 2 2 7 11 237 1063 647
720 2 2 7 11 240 1061 645
721 2 2 7 11 449 1018 715
722 2 2 7 11 452 1017 714
723 2 2 7 11 450 1020 713
724 2 2 7 11 451 1019 716
725 2 2 7 11 454 719 1022
726 2 2 7 11 455 717 1021
727 2 2 7 11 453 720 1024
728 2 2 7 11 456 718 1023
729 2 2 7 11 359 1070 1367
730 2 2 7 11 360 1071 1368
731 2 2 7 11 358 1069 1365
732 2 2 7 11 357 1072 1366
733 2 2 7 11 185 886 585
734 2 2 7 11 186 885 586
735 2 2 7 11 187 887 587
736 2 2 7 11 188 888 588
737 2 2 7 11 191 990 554
738 2 2 7 11 192 989 556
739 2 2 7 11 190 992 555
740 2 2 7 11 189 991 553
741 2 2 7 11 217 1350 583
742 2 2 7 11 220 1352 582
743 2 2 7 11 218 1349 581
744 2 2 7 11 219 1351 584
745 2 2 7 11 162 569 1285
746 2 2 7 11 173 570 1288
747 2 2 7 11 151 571 1286
748 2 2 7 11 140 572 1287
749 2 2 7 11 186 1486 1348
750 2 2 7 11 187 1485 1346
751 2 2 7 11 185 1488 1347
752 2 2 7 11 188 1487 1345
753 2 2 7 11 593 1390 773
754 2 2 7 11 595 1392 776
755 2 2 7 11 594 1389 774
756 2 2 7 11 596 1391 775
757 2 2 7 11 342 1163 571
758 2 2 7 11 341 1162 569
759 2 2 7 11 343 1161 570
760 2 2 7 11 344 1164 572
761 2 2 7 11 96 97 821
762 2 2 7 11 65 66 822
763 2 2 7 11 127 128 823
764 2 2 7 11 34 35 824
765 2 2 7 11 333 685 702
766 2 2 7 11 334 686 703
767 2 2 7 11 336 688 701
768 2 2 7 11 335 687 704
769 2 2 7 11 339 706 691
770 2 2 7 11 338 705 692
771 2 2 7 11 337 708 690
772 2 2 7 11 340 707 689
773 2 2 7 11 423 849 695
774 2 2 7 11 421 850 694
775 2 2 7 11 424 852 696
776 2 2 7 11 422 851 693
777 2 2 7 11 279 695 849
778 2 2 7 11 278 693 851
779 2 2 7 11 277 694 850
780 2 2 7 11 280 696 852
781 2 2 7 11 298 857 592
782 2 2 7 11 297 859 589
783 2 2 7 11 299 858 591
784 2 2 7 11 300 860 590
785 2 2 7 11 212 733 1464
786 2 2 7 11 211 734 1463
787 2 2 7 11 210 735 1461
788 2 2 7 11 209 736 1462
789 2 2 7 11 273 773 1390
790 2 2 7 11 275 776 1392
791 2 2 7 11 274 774 1389
792 2 2 7 11 276 775 1391
793 2 2 7 11 179 722 686
794 2 2 7 11 180 721 685
795 2 2 7 11 178 723 687
796 2 2 7 11 177 724 688
797 2 2 7 11 350 685 721
798 2 2 7 11 349 686 722
799 2 2 7 11 352 687 723
800 2 2 7 11 351 688 724
801 2 2 7 11 493 1193 1205
802 2 2 7 11 494 1194 1206
803 2 2 7 11 495 1195 1208
804 2 2 7 11 496 1196 1207
805 2 2 7 11 309 821 607
806 2 2 7 11 311 823 608
807 2 2 7 11 310 822 605
808 2 2 7 11 312 824 606
809 2 2 7 11 185 585 869
810 2 2 7 11 186 586 870
811 2 2 7 11 187 587 871
812 2 2 7 11 188 588 872
813 2 2 7 11 180 1015 566
814 2 2 7 11 179 1013 565
815 2 2 7 11 178 1016 567
816 2 2 7 11 177 1014 568
817 2 2 7 11 221 1506 1277
818 2 2 7 11 222 1505 1278
819 2 2 7 11 223 1507 1280
820 2 2 7 11 224 1508 1279
821 2 2 7 11 207 977 561
822 2 2 7 11 206 979 564
823 2 2 7 11 208 978 562
824 2 2 7 11 205 980 563
825 2 2 7 11 207 561 1180
826 2 2 7 11 206 564 1177
827 2 2 7 11 208 562 1178
828 2 2 7 11 205 563 1179
829 2 2 7 11 147 796 739
830 2 2 7 11 169 793 737
831 2 2 7 11 136 794 740
832 2 2 7 11 158 795 738
833 2 2 7 11 373 749 649
834 2 2 7 11 374 750 650
835 2 2 7 11 375 751 651
836 2 2 7 11 376 752 652
837 2 2 7 11 251 972 1144
838 2 2 7 11 250 969 1142
839 2 2 7 11 249 971 1143
840 2 2 7 11 252 970 1141
841 2 2 7 11 465 855 796
842 2 2 7 11 466 856 795
843 2 2 7 11 468 853 793
844 2 2 7 11 467 854 794
845 2 2 7 11 52 638 893
846 2 2 7 11 83 639 895
847 2 2 7 11 114 637 894
848 2 2 7 11 21 640 896
849 2 2 7 11 379 573 1434
850 2 2 7 11 380 574 1435
851 2 2 7 11 378 575 1436
852 2 2 7 11 377 576 1433
853 2 2 7 11 399 639 1034
854 2 2 7 11 400 640 1035
855 2 2 7 11 398 638 1033
856 2 2 7 11 397 637 1036
857 2 2 7 11 619 1253 1490
858 2 2 7 11 620 1254 1489
859 2 2 7 11 617 1255 1491
860 2 2 7 11 618 1256 1492
861 2 2 7 11 573 963 1406
862 2 2 7 11 574 964 1407
863 2 2 7 11 575 962 1405
864 2 2 7 11 576 961 1408
865 2 2 7 11 430 585 1152
866 2 2 7 11 431 586 1151
867 2 2 7 11 429 588 1149
868 2 2 7 11 432 587 1150
869 2 2 7 11 649 981 1121
870 2 2 7 11 650 982 1123
871 2 2 7 11 652 984 1122
872 2 2 7 11 651 983 1124
873 2 2 7 11 5 1255 133
874 2 2 7 11 8 1256 166
875 2 2 7 11 6 1253 144
876 2 2 7 11 7 1254 155
877 2 2 7 11 369 1112 609
878 2 2 7 11 371 1110 611
879 2 2 7 11 370 1109 610
880 2 2 7 11 372 1111 612
881 2 2 7 11 485 674 1421
882 2 2 7 11 487 675 1422
883 2 2 7 11 486 673 1424
884 2 2 7 11 488 676 1423
885 2 2 7 11 178 1364 653
886 2 2 7 11 179 1362 654
887 2 2 7 11 180 1361 655
888 2 2 7 11 177 1363 656
889 2 2 7 11 212 1205 600
890 2 2 7 11 211 1208 598
891 2 2 7 11 210 1206 599
892 2 2 7 11 209 1207 597
893 2 2 7 11 246 745 830
894 2 2 7 11 247 747 831
895 2 2 7 11 248 748 832
896 2 2 7 11 245 746 829
897 2 2 7 11 406 832 748
898 2 2 7 11 405 831 747
899 2 2 7 11 407 830 745
900 2 2 7 11 408 829 746
901 2 2 7 11 404 872 898
902 2 2 7 11 401 870 900
903 2 2 7 11 402 869 897
904 2 2 7 11 403 871 899
905 2 2 7 11 270 1284 1011
906 2 2 7 11 269 1282 1012
907 2 2 7 11 272 1283 1009
908 2 2 7 11 271 1281 1010
909 2 2 7 11 334 1020 1051
910 2 2 7 11 333 1017 1049
911 2 2 7 11 335 1019 1050
912 2 2 7 11 336 1018 1052
913 2 2 7 11 337 1053 1023
914 2 2 7 11 340 1056 1021
915 2 2 7 11 339 1055 1024
916 2 2 7 11 338 1054 1022
917 2 2 7 11 373 761 757
918 2 2 7 11 374 762 758
919 2 2 7 11 376 764 760
920 2 2 7 11 375 763 759
921 2 2 7 11 345 757 761
922 2 2 7 11 346 758 762
923 2 2 7 11 348 759 763
924 2 2 7 11 347 760 764
925 2 2 7 11 33 1249 1004
926 2 2 7 11 64 1252 1003
927 2 2 7 11 95 1251 1001
928 2 2 7 11 126 1250 1002
929 2 2 7 11 489 1138 797
930 2 2 7 11 490 1137 798
931 2 2 7 11 491 1140 799
932 2 2 7 11 492 1139 800
933 2 2 7 11 287 1316 603
934 2 2 7 11 288 1314 604
935 2 2 7 11 285 1313 601
936 2 2 7 11 286 1315 602
937 2 2 7 11 359 1367 831
938 2 2 7 11 360 1368 832
939 2 2 7 11 357 1366 829
940 2 2 7 11 358 1365 830
941 2 2 7 11 230 715 1018
942 2 2 7 11 232 714 1017
943 2 2 7 11 229 713 1020
944 2 2 7 11 231 716 1019
945 2 2 7 11 236 1022 719
946 2 2 7 11 233 1021 717
947 2 2 7 11 234 1023 718
948 2 2 7 11 235 1024 720
949 2 2 7 11 168 793 169
950 2 2 7 11 135 794 136
951 2 2 7 11 146 796 147
952 2 2 7 11 157 795 158
953 2 2 7 11 448 668 1009
954 2 2 7 11 446 666 1011
955 2 2 7 11 445 667 1012
956 2 2 7 11 447 665 1010
957 2 2 7 11 333 702 1017
958 2 2 7 11 335 704 1019
959 2 2 7 11 334 703 1020
960 2 2 7 11 336 701 1018
961 2 2 7 11 340 1021 707
962 2 2 7 11 337 1023 708
963 2 2 7 11 338 1022 705
964 2 2 7 11 339 1024 706
965 2 2 7 11 273 1369 773
966 2 2 7 11 276 1372 775
967 2 2 7 11 274 1370 774
968 2 2 7 11 275 1371 776
969 2 2 7 11 589 773 1369
970 2 2 7 11 592 775 1372
971 2 2 7 11 590 774 1370
972 2 2 7 11 591 776 1371
973 2 2 7 11 383 973 843
974 2 2 7 11 384 974 844
975 2 2 7 11 381 975 842
976 2 2 7 11 382 976 841
977 2 2 7 11 489 1382 1138
978 2 2 7 11 491 1383 1140
979 2 2 7 11 490 1381 1137
980 2 2 7 11 492 1384 1139
981 2 2 7 11 144 802 145
982 2 2 7 11 155 801 156
983 2 2 7 11 166 803 167
984 2 2 7 11 133 804 134
985 2 2 7 11 247 1355 761
986 2 2 7 11 248 1356 762
987 2 2 7 11 246 1354 764
988 2 2 7 11 245 1353 763
989 2 2 7 11 335 1016 687
990 2 2 7 11 334 1013 686
991 2 2 7 11 333 1015 685
992 2 2 7 11 336 1014 688
993 2 2 7 11 246 1365 1354
994 2 2 7 11 248 1368 1356
995 2 2 7 11 247 1367 1355
996 2 2 7 11 245 1366 1353
997 2 2 7 11 339 691 1042
998 2 2 7 11 338 692 1041
999 2 2 7 11 337 690 1044
1000 2 2 7 11 340 689 1043
1001 2 2 7 11 287 603 1154
1002 2 2 7 11 285 601 1153
1003 2 2 7 11 288 604 1156
1004 2 2 7 11 286 602 1155
1005 2 2 7 11 394 981 657
1006 2 2 7 11 393 982 658
1007 2 2 7 11 396 983 659
1008 2 2 7 11 395 984 660
1009 2 2 7 11 289 658 982
1010 2 2 7 11 291 657 981
1011 2 2 7 11 290 659 983
1012 2 2 7 11 292 660 984
1013 2 2 7 11 370 1153 601
1014 2 2 7 11 371 1154 603
1015 2 2 7 11 369 1155 602
1016 2 2 7 11 372 1156 604
1017 2 2 7 11 299 732 858
1018 2 2 7 11 298 730 857
1019 2 2 7 11 297 729 859
1020 2 2 7 11 300 731 860
1021 2 2 7 11 392 858 732
1022 2 2 7 11 391 857 730
1023 2 2 7 11 390 859 729
1024 2 2 7 11 389 860 731
1025 2 2 7 11 331 740 794
1026 2 2 7 11 329 739 796
1027 2 2 7 11 332 737 793
1028 2 2 7 11 330 738 795
1029 2 2 7 11 238 1246 854
1030 2 2 7 11 237 1245 853
1031 2 2 7 11 239 1247 855
1032 2 2 7 11 240 1248 856
1033 2 2 7 11 476 1357 856
1034 2 2 7 11 474 1358 855
1035 2 2 7 11 475 1359 853
1036 2 2 7 11 473 1360 854
1037 2 2 7 11 448 1216 668
1038 2 2 7 11 446 1214 666
1039 2 2 7 11 445 1213 667
1040 2 2 7 11 447 1215 665
1041 2 2 7 11 188 641 888
1042 2 2 7 11 187 642 887
1043 2 2 7 11 185 644 886
1044 2 2 7 11 186 643 885
1045 2 2 7 11 49 882 629
1046 2 2 7 11 111 884 632
1047 2 2 7 11 80 881 630
1048 2 2 7 11 18 883 631
1049 2 2 7 11 238 1419 1064
1050 2 2 7 11 237 1420 1063
1051 2 2 7 11 239 1418 1062
1052 2 2 7 11 240 1417 1061
1053 2 2 7 11 349 910 703
1054 2 2 7 11 350 911 702
1055 2 2 7 11 352 909 704
1056 2 2 7 11 351 912 701
1057 2 2 7 11 355 707 913
1058 2 2 7 11 356 708 914
1059 2 2 7 11 353 705 916
1060 2 2 7 11 354 706 915
1061 2 2 7 11 444 724 1032
1062 2 2 7 11 441 723 1031
1063 2 2 7 11 442 721 1030
1064 2 2 7 11 443 722 1029
1065 2 2 7 11 616 1454 989
1066 2 2 7 11 615 1456 992
1067 2 2 7 11 613 1453 990
1068 2 2 7 11 614 1455 991
1069 2 2 7 11 369 609 1155
1070 2 2 7 11 370 610 1153
1071 2 2 7 11 372 612 1156
1072 2 2 7 11 371 611 1154
1073 2 2 7 11 54 55 727
1074 2 2 7 11 85 86 728
1075 2 2 7 11 23 24 726
1076 2 2 7 11 116 117 725
1077 2 2 7 11 618 362 1256
1078 2 2 7 11 361 1255 617
1079 2 2 7 11 363 1253 619
1080 2 2 7 11 364 1254 620
1081 2 2 7 11 905 1300 1417
1082 2 2 7 11 906 1299 1418
1083 2 2 7 11 907 1298 1419
1084 2 2 7 11 908 1297 1420
1085 2 2 7 11 60 1294 609
1086 2 2 7 11 122 1295 611
1087 2 2 7 11 29 1296 612
1088 2 2 7 11 91 1293 610
1089 2 2 7 11 617 1491 658
1090 2 2 7 11 618 1492 657
1091 2 2 7 11 620 1489 660
1092 2 2 7 11 619 1490 659
1093 2 2 7 11 361 617 1261
1094 2 2 7 11 618 1263 362
1095 2 2 7 11 363 619 1264
1096 2 2 7 11 364 620 1262
1097 2 2 7 11 328 1274 979
1098 2 2 7 11 325 1273 978
1099 2 2 7 11 327 1276 980
1100 2 2 7 11 326 1275 977
1101 2 2 7 11 122 611 1110
1102 2 2 7 11 29 612 1111
1103 2 2 7 11 91 610 1109
1104 2 2 7 11 60 609 1112
1105 2 2 7 11 843 973 1141
1106 2 2 7 11 842 975 1142
1107 2 2 7 11 844 974 1144
1108 2 2 7 11 841 976 1143
1109 2 2 7 11 364 1300 905
1110 2 2 7 11 363 1299 906
1111 2 2 7 11 361 1298 907
1112 2 2 7 11 362 1297 908
1113 2 2 7 11 482 1011 666
1114 2 2 7 11 483 1012 667
1115 2 2 7 11 481 1009 668
1116 2 2 7 11 484 1010 665
1117 2 2 7 11 618 291 1263
1118 2 2 7 11 289 1261 617
1119 2 2 7 11 290 1264 619
1120 2 2 7 11 292 1262 620
1121 2 2 7 11 354 927 691
1122 2 2 7 11 355 926 689
1123 2 2 7 11 356 925 690
1124 2 2 7 11 353 928 692
1125 2 2 7 11 461 894 1233
1126 2 2 7 11 462 896 1235
1127 2 2 7 11 463 895 1234
1128 2 2 7 11 464 893 1236
1129 2 2 7 11 201 1329 621
1130 2 2 7 11 202 1330 624
1131 2 2 7 11 203 1332 622
1132 2 2 7 11 204 1331 623
1133 2 2 7 11 449 715 1317
1134 2 2 7 11 452 714 1318
1135 2 2 7 11 450 713 1319
1136 2 2 7 11 451 716 1320
1137 2 2 7 11 354 915 1350
1138 2 2 7 11 353 916 1352
1139 2 2 7 11 355 913 1351
1140 2 2 7 11 356 914 1349
1141 2 2 7 11 169 737 1327
1142 2 2 7 11 136 740 1328
1143 2 2 7 11 158 738 1325
1144 2 2 7 11 147 739 1326
1145 2 2 7 11 220 672 1352
1146 2 2 7 11 217 671 1350
1147 2 2 7 11 218 670 1349
1148 2 2 7 11 219 669 1351
1149 2 2 7 11 616 989 1215
1150 2 2 7 11 613 990 1216
1151 2 2 7 11 615 992 1214
1152 2 2 7 11 614 991 1213
1153 2 2 7 11 292 624 1262
1154 2 2 7 11 289 623 1261
1155 2 2 7 11 291 622 1263
1156 2 2 7 11 290 621 1264
1157 2 2 7 11 523 1233 849
1158 2 2 7 11 524 1236 851
1159 2 2 7 11 522 1234 850
1160 2 2 7 11 521 1235 852
1161 2 2 7 11 279 849 1233
1162 2 2 7 11 278 851 1236
1163 2 2 7 11 280 852 1235
1164 2 2 7 11 277 850 1234
1165 2 2 7 11 216 953 680
1166 2 2 7 11 215 956 679
1167 2 2 7 11 213 955 677
1168 2 2 7 11 214 954 678
1169 2 2 7 11 13 14 756
1170 2 2 7 11 106 107 755
1171 2 2 7 11 75 76 753
1172 2 2 7 11 44 45 754
1173 2 2 7 11 190 666 1214
1174 2 2 7 11 191 668 1216
1175 2 2 7 11 189 667 1213
1176 2 2 7 11 192 665 1215
1177 2 2 7 11 516 1083 781
1178 2 2 7 11 515 1082 782
1179 2 2 7 11 514 1084 783
1180 2 2 7 11 513 1081 784
1181 2 2 7 11 520 787 1087
1182 2 2 7 11 519 785 1088
1183 2 2 7 11 518 788 1085
1184 2 2 7 11 517 786 1086
1185 2 2 7 11 339 1042 816
1186 2 2 7 11 337 1044 813
1187 2 2 7 11 338 1041 815
1188 2 2 7 11 340 1043 814
1189 2 2 7 11 518 1004 1249
1190 2 2 7 11 520 1003 1252
1191 2 2 7 11 519 1002 1250
1192 2 2 7 11 517 1001 1251
1193 2 2 7 11 564 979 1274
1194 2 2 7 11 562 978 1273
1195 2 2 7 11 563 980 1276
1196 2 2 7 11 561 977 1275
1197 2 2 7 11 210 834 697
1198 2 2 7 11 209 833 699
1199 2 2 7 11 211 835 700
1200 2 2 7 11 212 836 698
1201 2 2 7 11 388 989 1454
1202 2 2 7 11 387 992 1456
1203 2 2 7 11 386 990 1453
1204 2 2 7 11 385 991 1455
1205 2 2 7 11 229 910 782
1206 2 2 7 11 231 909 783
1207 2 2 7 11 230 912 784
1208 2 2 7 11 232 911 781
1209 2 2 7 11 234 785 914
1210 2 2 7 11 233 786 913
1211 2 2 7 11 235 787 915
1212 2 2 7 11 236 788 916
1213 2 2 7 11 333 837 1015
1214 2 2 7 11 334 838 1013
1215 2 2 7 11 335 839 1016
1216 2 2 7 11 336 840 1014
1217 2 2 7 11 169 1327 170
1218 2 2 7 11 136 1328 137
1219 2 2 7 11 158 1325 159
1220 2 2 7 11 147 1326 148
1221 2 2 7 11 197 1169 874
1222 2 2 7 11 198 1171 875
1223 2 2 7 11 199 1172 876
1224 2 2 7 11 200 1170 873
1225 2 2 7 11 477 1037 890
1226 2 2 7 11 479 1038 891
1227 2 2 7 11 480 1040 892
1228 2 2 7 11 478 1039 889
1229 2 2 7 11 241 890 1037
1230 2 2 7 11 244 892 1040
1231 2 2 7 11 243 891 1038
1232 2 2 7 11 242 889 1039
1233 2 2 7 11 583 1350 915
1234 2 2 7 11 584 1351 913
1235 2 2 7 11 582 1352 916
1236 2 2 7 11 581 1349 914
1237 2 2 7 11 710 1173 744
1238 2 2 7 11 712 1175 742
1239 2 2 7 11 711 1176 743
1240 2 2 7 11 709 1174 741
1241 2 2 7 11 110 632 1104
1242 2 2 7 11 17 631 1103
1243 2 2 7 11 48 629 1101
1244 2 2 7 11 79 630 1102
1245 2 2 7 11 62 1107 634
1246 2 2 7 11 93 1106 635
1247 2 2 7 11 31 1108 636
1248 2 2 7 11 124 1105 633
1249 2 2 7 11 297 1196 729
1250 2 2 7 11 300 1195 731
1251 2 2 7 11 298 1193 730
1252 2 2 7 11 299 1194 732
1253 2 2 7 11 549 1312 814
1254 2 2 7 11 551 1310 813
1255 2 2 7 11 552 1311 816
1256 2 2 7 11 550 1309 815
1257 2 2 7 11 268 814 1312
1258 2 2 7 11 267 813 1310
1259 2 2 7 11 265 815 1309
1260 2 2 7 11 266 816 1311
1261 2 2 7 11 51 52 893
1262 2 2 7 11 82 83 895
1263 2 2 7 11 113 114 894
1264 2 2 7 11 20 21 896
1265 2 2 7 11 605 1517 962
1266 2 2 7 11 607 1518 963
1267 2 2 7 11 606 1519 961
1268 2 2 7 11 608 1520 964
1269 2 2 7 11 192 1069 665
1270 2 2 7 11 191 1072 668
1271 2 2 7 11 190 1070 666
1272 2 2 7 11 189 1071 667
1273 2 2 7 11 467 804 907
1274 2 2 7 11 468 803 908
1275 2 2 7 11 466 801 905
1276 2 2 7 11 465 802 906
1277 2 2 7 11 361 907 804
1278 2 2 7 11 362 908 803
1279 2 2 7 11 363 906 802
1280 2 2 7 11 364 905 801
1281 2 2 7 11 123 633 1295
1282 2 2 7 11 92 635 1293
1283 2 2 7 11 61 634 1294
1284 2 2 7 11 30 636 1296
1285 2 2 7 11 222 1373 649
1286 2 2 7 11 221 1374 650
1287 2 2 7 11 224 1375 652
1288 2 2 7 11 223 1376 651
1289 2 2 7 11 1032 724 1448
1290 2 2 7 11 1031 723 1445
1291 2 2 7 11 1030 721 1446
1292 2 2 7 11 1029 722 1447
1293 2 2 7 11 455 1313 717
1294 2 2 7 11 456 1316 718
1295 2 2 7 11 454 1314 719
1296 2 2 7 11 453 1315 720
1297 2 2 7 11 144 1253 802
1298 2 2 7 11 133 1255 804
1299 2 2 7 11 166 1256 803
1300 2 2 7 11 155 1254 801
1301 2 2 7 11 176 658 1491
1302 2 2 7 11 165 657 1492
1303 2 2 7 11 154 660 1489
1304 2 2 7 11 143 659 1490
1305 2 2 7 11 401 625 1477
1306 2 2 7 11 402 627 1478
1307 2 2 7 11 404 626 1480
1308 2 2 7 11 403 628 1479
1309 2 2 7 11 409 1075 643
1310 2 2 7 11 410 1076 644
1311 2 2 7 11 412 1074 642
1312 2 2 7 11 411 1073 641
1313 2 2 7 11 279 637 1129
1314 2 2 7 11 280 640 1132
1315 2 2 7 11 277 639 1131
1316 2 2 7 11 278 638 1130
1317 2 2 7 11 400 1132 640
1318 2 2 7 11 397 1129 637
1319 2 2 7 11 399 1131 639
1320 2 2 7 11 398 1130 638
1321 2 2 7 11 729 1196 1543
1322 2 2 7 11 731 1195 1542
1323 2 2 7 11 732 1194 1544
1324 2 2 7 11 730 1193 1541
1325 2 2 7 11 342 735 1163
1326 2 2 7 11 341 736 1162
1327 2 2 7 11 343 734 1161
1328 2 2 7 11 344 733 1164
1329 2 2 7 11 373 649 1373
1330 2 2 7 11 374 650 1374
1331 2 2 7 11 376 652 1375
1332 2 2 7 11 375 651 1376
1333 2 2 7 11 108 109 999
1334 2 2 7 11 15 16 1000
1335 2 2 7 11 46 47 997
1336 2 2 7 11 77 78 998
1337 2 2 7 11 32 33 1004
1338 2 2 7 11 94 95 1001
1339 2 2 7 11 63 64 1003
1340 2 2 7 11 125 126 1002
1341 2 2 7 11 103 104 809
1342 2 2 7 11 10 11 810
1343 2 2 7 11 72 73 811
1344 2 2 7 11 41 42 812
1345 2 2 7 11 698 777 1209
1346 2 2 7 11 699 778 1210
1347 2 2 7 11 700 779 1211
1348 2 2 7 11 697 780 1212
1349 2 2 7 11 150 846 151
1350 2 2 7 11 161 845 162
1351 2 2 7 11 139 848 140
1352 2 2 7 11 172 847 173
1353 2 2 7 11 289 982 650
1354 2 2 7 11 291 981 649
1355 2 2 7 11 290 983 651
1356 2 2 7 11 292 984 652
1357 2 2 7 11 414 1103 631
1358 2 2 7 11 416 1101 629
1359 2 2 7 11 415 1102 630
1360 2 2 7 11 413 1104 632
1361 2 2 7 11 418 634 1107
1362 2 2 7 11 420 633 1105
1363 2 2 7 11 417 635 1106
1364 2 2 7 11 419 636 1108
1365 2 2 7 11 414 631 1218
1366 2 2 7 11 416 629 1217
1367 2 2 7 11 415 630 1220
1368 2 2 7 11 413 632 1219
1369 2 2 7 11 420 1222 633
1370 2 2 7 11 418 1221 634
1371 2 2 7 11 417 1223 635
1372 2 2 7 11 419 1224 636
1373 2 2 7 11 314 941 1189
1374 2 2 7 11 313 944 1190
1375 2 2 7 11 316 943 1192
1376 2 2 7 11 315 942 1191
1377 2 2 7 11 540 1189 941
1378 2 2 7 11 539 1190 944
1379 2 2 7 11 538 1192 943
1380 2 2 7 11 537 1191 942
1381 2 2 7 11 220 937 672
1382 2 2 7 11 217 938 671
1383 2 2 7 11 219 940 669
1384 2 2 7 11 218 939 670
1385 2 2 7 11 87 673 993
1386 2 2 7 11 56 674 994
1387 2 2 7 11 25 675 995
1388 2 2 7 11 118 676 996
1389 2 2 7 11 165 1008 657
1390 2 2 7 11 176 1006 658
1391 2 2 7 11 143 1007 659
1392 2 2 7 11 154 1005 660
1393 2 2 7 11 394 657 1008
1394 2 2 7 11 393 658 1006
1395 2 2 7 11 395 660 1005
1396 2 2 7 11 396 659 1007
1397 2 2 7 11 460 1144 972
1398 2 2 7 11 459 1142 969
1399 2 2 7 11 458 1141 970
1400 2 2 7 11 457 1143 971
1401 2 2 7 11 482 666 1467
1402 2 2 7 11 483 667 1466
1403 2 2 7 11 484 665 1465
1404 2 2 7 11 481 668 1468
1405 2 2 7 11 368 812 932
1406 2 2 7 11 367 811 931
1407 2 2 7 11 365 810 930
1408 2 2 7 11 366 809 929
1409 2 2 7 11 184 689 926
1410 2 2 7 11 183 690 925
1411 2 2 7 11 182 692 928
1412 2 2 7 11 181 691 927
1413 2 2 7 11 385 1455 1532
1414 2 2 7 11 387 1456 1531
1415 2 2 7 11 388 1454 1529
1416 2 2 7 11 386 1453 1530
1417 2 2 7 11 369 827 1112
1418 2 2 7 11 371 825 1110
1419 2 2 7 11 372 828 1111
1420 2 2 7 11 370 826 1109
1421 2 2 7 11 411 641 1199
1422 2 2 7 11 412 642 1200
1423 2 2 7 11 409 643 1198
1424 2 2 7 11 410 644 1197
1425 2 2 7 11 325 1503 648
1426 2 2 7 11 326 1504 647
1427 2 2 7 11 328 1501 645
1428 2 2 7 11 327 1502 646
1429 2 2 7 11 230 701 912
1430 2 2 7 11 231 704 909
1431 2 2 7 11 232 702 911
1432 2 2 7 11 229 703 910
1433 2 2 7 11 233 913 707
1434 2 2 7 11 234 914 708
1435 2 2 7 11 236 916 705
1436 2 2 7 11 235 915 706
1437 2 2 7 11 313 1387 653
1438 2 2 7 11 314 1388 656
1439 2 2 7 11 316 1386 654
1440 2 2 7 11 315 1385 655
1441 2 2 7 11 379 1434 765
1442 2 2 7 11 380 1435 766
1443 2 2 7 11 378 1436 768
1444 2 2 7 11 377 1433 767
1445 2 2 7 11 387 1531 920
1446 2 2 7 11 385 1532 919
1447 2 2 7 11 388 1529 917
1448 2 2 7 11 386 1530 918
1449 2 2 7 11 444 948 917
1450 2 2 7 11 442 945 919
1451 2 2 7 11 441 946 918
1452 2 2 7 11 443 947 920
1453 2 2 7 11 385 919 945
1454 2 2 7 11 386 918 946
1455 2 2 7 11 388 917 948
1456 2 2 7 11 387 920 947
1457 2 2 7 11 303 743 899
1458 2 2 7 11 302 744 900
1459 2 2 7 11 301 741 897
1460 2 2 7 11 304 742 898
1461 2 2 7 11 421 897 741
1462 2 2 7 11 423 899 743
1463 2 2 7 11 424 898 742
1464 2 2 7 11 422 900 744
1465 2 2 7 11 346 1098 758
1466 2 2 7 11 345 1099 757
1467 2 2 7 11 348 1097 759
1468 2 2 7 11 347 1100 760
1469 2 2 7 11 373 1373 661
1470 2 2 7 11 374 1374 662
1471 2 2 7 11 376 1375 663
1472 2 2 7 11 375 1376 664
1473 2 2 7 11 306 680 1527
1474 2 2 7 11 307 678 1526
1475 2 2 7 11 308 679 1528
1476 2 2 7 11 305 677 1525
1477 2 2 7 11 240 645 1248
1478 2 2 7 11 239 646 1247
1479 2 2 7 11 238 648 1246
1480 2 2 7 11 237 647 1245
1481 2 2 7 11 327 653 1364
1482 2 2 7 11 328 656 1363
1483 2 2 7 11 326 654 1362
1484 2 2 7 11 325 655 1361
1485 2 2 7 11 252 1243 819
1486 2 2 7 11 249 1244 818
1487 2 2 7 11 251 1241 820
1488 2 2 7 11 250 1242 817
1489 2 2 7 11 314 645 1061
1490 2 2 7 11 313 646 1062
1491 2 2 7 11 316 647 1063
1492 2 2 7 11 315 648 1064
1493 2 2 7 11 173 1288 174
1494 2 2 7 11 162 1285 163
1495 2 2 7 11 140 1287 141
1496 2 2 7 11 151 1286 152
1497 2 2 7 11 120 121 825
1498 2 2 7 11 89 90 826
1499 2 2 7 11 58 59 827
1500 2 2 7 11 27 28 828
1501 2 2 7 11 242 1089 889
1502 2 2 7 11 243 1091 891
1503 2 2 7 11 241 1090 890
1504 2 2 7 11 244 1092 892
1505 2 2 7 11 546 889 1089
1506 2 2 7 11 547 891 1091
1507 2 2 7 11 548 892 1092
1508 2 2 7 11 545 890 1090
1509 2 2 7 11 381 993 673
1510 2 2 7 11 383 995 675
1511 2 2 7 11 382 994 674
1512 2 2 7 11 384 996 676
1513 2 2 7 11 383 843 935
1514 2 2 7 11 381 842 934
1515 2 2 7 11 384 844 933
1516 2 2 7 11 382 841 936
1517 2 2 7 11 488 1500 676
1518 2 2 7 11 487 1499 675
1519 2 2 7 11 485 1497 674
1520 2 2 7 11 486 1498 673
1521 2 2 7 11 381 673 975
1522 2 2 7 11 384 676 974
1523 2 2 7 11 382 674 976
1524 2 2 7 11 383 675 973
1525 2 2 7 11 378 1226 682
1526 2 2 7 11 380 1227 684
1527 2 2 7 11 377 1228 681
1528 2 2 7 11 379 1225 683
1529 2 2 7 11 192 1215 989
1530 2 2 7 11 191 1216 990
1531 2 2 7 11 190 1214 992
1532 2 2 7 11 189 1213 991
1533 2 2 7 11 170 923 171
1534 2 2 7 11 159 921 160
1535 2 2 7 11 137 924 138
1536 2 2 7 11 148 922 149
1537 2 2 7 11 442 919 863
1538 2 2 7 11 443 920 864
1539 2 2 7 11 444 917 861
1540 2 2 7 11 441 918 862
1541 2 2 7 11 213 864 920
1542 2 2 7 11 214 863 919
1543 2 2 7 11 215 862 918
1544 2 2 7 11 216 861 917
1545 2 2 7 11 440 1281 772
1546 2 2 7 11 439 1283 771
1547 2 2 7 11 437 1284 769
1548 2 2 7 11 438 1282 770
1549 2 2 7 11 389 1048 662
1550 2 2 7 11 390 1047 661
1551 2 2 7 11 392 1046 663
1552 2 2 7 11 391 1045 664
1553 2 2 7 11 531 1339 1175
1554 2 2 7 11 529 1340 1173
1555 2 2 7 11 530 1337 1174
1556 2 2 7 11 532 1338 1176
1557 2 2 7 11 450 1051 1020
1558 2 2 7 11 452 1049 1017
1559 2 2 7 11 451 1050 1019
1560 2 2 7 11 449 1052 1018
1561 2 2 7 11 455 1021 1056
1562 2 2 7 11 453 1024 1055
1563 2 2 7 11 456 1023 1053
1564 2 2 7 11 454 1022 1054
1565 2 2 7 11 462 1524 883
1566 2 2 7 11 463 1521 881
1567 2 2 7 11 461 1523 884
1568 2 2 7 11 464 1522 882
1569 2 2 7 11 406 670 1134
1570 2 2 7 11 405 669 1133
1571 2 2 7 11 407 671 1136
1572 2 2 7 11 408 672 1135
1573 2 2 7 11 462 1238 1524
1574 2 2 7 11 463 1237 1521
1575 2 2 7 11 461 1239 1523
1576 2 2 7 11 464 1240 1522
1577 2 2 7 11 13 756 1396
1578 2 2 7 11 106 755 1395
1579 2 2 7 11 44 754 1393
1580 2 2 7 11 75 753 1394
1581 2 2 7 11 230 1081 715
1582 2 2 7 11 231 1084 716
1583 2 2 7 11 229 1082 713
1584 2 2 7 11 232 1083 714
1585 2 2 7 11 233 717 1086
1586 2 2 7 11 234 718 1088
1587 2 2 7 11 236 719 1085
1588 2 2 7 11 235 720 1087
1589 2 2 7 11 413 713 1082
1590 2 2 7 11 414 714 1083
1591 2 2 7 11 416 716 1084
1592 2 2 7 11 415 715 1081
1593 2 2 7 11 417 1086 717
1594 2 2 7 11 418 1087 720
1595 2 2 7 11 420 1088 718
1596 2 2 7 11 419 1085 719
1597 2 2 7 11 390 661 1278
1598 2 2 7 11 389 662 1277
1599 2 2 7 11 392 663 1279
1600 2 2 7 11 391 664 1280
1601 2 2 7 11 376 663 1229
1602 2 2 7 11 375 664 1230
1603 2 2 7 11 373 661 1231
1604 2 2 7 11 374 662 1232
1605 2 2 7 11 368 932 1321
1606 2 2 7 11 367 931 1324
1607 2 2 7 11 365 930 1323
1608 2 2 7 11 366 929 1322
1609 2 2 7 11 458 1160 904
1610 2 2 7 11 457 1159 902
1611 2 2 7 11 459 1157 903
1612 2 2 7 11 460 1158 901
1613 2 2 7 11 104 929 809
1614 2 2 7 11 11 930 810
1615 2 2 7 11 73 931 811
1616 2 2 7 11 42 932 812
1617 2 2 7 11 111 112 884
1618 2 2 7 11 18 19 883
1619 2 2 7 11 80 81 881
1620 2 2 7 11 49 50 882
1621 2 2 7 11 346 865 1098
1622 2 2 7 11 345 866 1099
1623 2 2 7 11 348 867 1097
1624 2 2 7 11 347 868 1100
1625 2 2 7 11 324 1152 886
1626 2 2 7 11 323 1151 885
1627 2 2 7 11 322 1150 887
1628 2 2 7 11 321 1149 888
1629 2 2 7 11 585 886 1152
1630 2 2 7 11 586 885 1151
1631 2 2 7 11 587 887 1150
1632 2 2 7 11 588 888 1149
1633 2 2 7 11 55 994 727
1634 2 2 7 11 86 993 728
1635 2 2 7 11 24 995 726
1636 2 2 7 11 117 996 725
1637 2 2 7 11 200 1146 1079
1638 2 2 7 11 197 1145 1078
1639 2 2 7 11 199 1148 1077
1640 2 2 7 11 198 1147 1080
1641 2 2 7 11 603 1079 1146
1642 2 2 7 11 602 1078 1145
1643 2 2 7 11 601 1080 1147
1644 2 2 7 11 604 1077 1148
1645 2 2 7 11 179 686 1013
1646 2 2 7 11 180 685 1015
1647 2 2 7 11 178 687 1016
1648 2 2 7 11 177 688 1014
1649 2 2 7 11 226 694 1430
1650 2 2 7 11 228 696 1432
1651 2 2 7 11 225 693 1429
1652 2 2 7 11 227 695 1431
1653 2 2 7 11 384 725 996
1654 2 2 7 11 382 727 994
1655 2 2 7 11 383 726 995
1656 2 2 7 11 381 728 993
1657 2 2 7 11 484 938 1443
1658 2 2 7 11 481 937 1442
1659 2 2 7 11 482 940 1441
1660 2 2 7 11 483 939 1444
1661 2 2 7 11 305 1449 782
1662 2 2 7 11 307 1450 781
1663 2 2 7 11 308 1452 783
1664 2 2 7 11 306 1451 784
1665 2 2 7 11 515 782 1449
1666 2 2 7 11 516 781 1450
1667 2 2 7 11 514 783 1452
1668 2 2 7 11 513 784 1451
1669 2 2 7 11 507 1367 1070
1670 2 2 7 11 508 1368 1071
1671 2 2 7 11 505 1365 1069
1672 2 2 7 11 506 1366 1072
1673 2 2 7 11 518 1249 824
1674 2 2 7 11 519 1250 823
1675 2 2 7 11 520 1252 822
1676 2 2 7 11 517 1251 821
1677 2 2 7 11 4 102 951
1678 2 2 7 11 1 9 952
1679 2 2 7 11 2 40 949
1680 2 2 7 11 3 71 950
1681 2 2 7 11 397 1036 725
1682 2 2 7 11 399 1034 728
1683 2 2 7 11 400 1035 726
1684 2 2 7 11 398 1033 727
1685 2 2 7 11 116 725 1036
1686 2 2 7 11 23 726 1035
1687 2 2 7 11 85 728 1034
1688 2 2 7 11 54 727 1033
1689 2 2 7 11 498 1396 756
1690 2 2 7 11 497 1395 755
1691 2 2 7 11 499 1393 754
1692 2 2 7 11 500 1394 753
1693 2 2 7 11 484 1465 938
1694 2 2 7 11 481 1468 937
1695 2 2 7 11 482 1467 940
1696 2 2 7 11 483 1466 939
1697 2 2 7 11 361 804 1255
1698 2 2 7 11 362 803 1256
1699 2 2 7 11 363 802 1253
1700 2 2 7 11 364 801 1254
1701 2 2 7 11 252 1499 1243
1702 2 2 7 11 249 1497 1244
1703 2 2 7 11 251 1500 1241
1704 2 2 7 11 250 1498 1242
1705 2 2 7 11 542 1445 1387
1706 2 2 7 11 543 1447 1386
1707 2 2 7 11 544 1448 1388
1708 2 2 7 11 541 1446 1385
1709 2 2 7 11 232 1017 702
1710 2 2 7 11 230 1018 701
1711 2 2 7 11 231 1019 704
1712 2 2 7 11 229 1020 703
1713 2 2 7 11 236 705 1022
1714 2 2 7 11 234 708 1023
1715 2 2 7 11 233 707 1021
1716 2 2 7 11 235 706 1024
1717 2 2 7 11 182 1041 692
1718 2 2 7 11 184 1043 689
1719 2 2 7 11 183 1044 690
1720 2 2 7 11 181 1042 691
1721 2 2 7 11 103 809 1459
1722 2 2 7 11 10 810 1460
1723 2 2 7 11 41 812 1458
1724 2 2 7 11 72 811 1457
1725 2 2 7 11 406 1470 670
1726 2 2 7 11 405 1471 669
1727 2 2 7 11 407 1469 671
1728 2 2 7 11 408 1472 672
1729 2 2 7 11 104 105 929
1730 2 2 7 11 11 12 930
1731 2 2 7 11 73 74 931
1732 2 2 7 11 42 43 932
1733 2 2 7 11 8 165 1492
1734 2 2 7 11 5 176 1491
1735 2 2 7 11 7 154 1489
1736 2 2 7 11 6 143 1490
1737 2 2 7 11 257 1415 945
1738 2 2 7 11 258 1414 947
1739 2 2 7 11 259 1413 946
1740 2 2 7 11 260 1416 948
1741 2 2 7 11 201 944 1329
1742 2 2 7 11 202 941 1330
1743 2 2 7 11 204 942 1331
1744 2 2 7 11 203 943 1332
1745 2 2 7 11 320 1068 777
1746 2 2 7 11 319 1067 779
1747 2 2 7 11 318 1065 778
1748 2 2 7 11 317 1066 780
1749 2 2 7 11 782 910 1399
1750 2 2 7 11 783 909 1397
1751 2 2 7 11 784 912 1400
1752 2 2 7 11 781 911 1398
1753 2 2 7 11 785 1401 914
1754 2 2 7 11 786 1402 913
1755 2 2 7 11 787 1403 915
1756 2 2 7 11 788 1404 916
1757 2 2 7 11 220 681 1228
1758 2 2 7 11 217 682 1226
1759 2 2 7 11 219 683 1225
1760 2 2 7 11 218 684 1227
1761 2 2 7 11 332 853 1359
1762 2 2 7 11 329 855 1358
1763 2 2 7 11 331 854 1360
1764 2 2 7 11 330 856 1357
1765 2 2 7 11 279 1129 695
1766 2 2 7 11 278 1130 693
1767 2 2 7 11 277 1131 694
1768 2 2 7 11 280 1132 696
1769 2 2 7 11 557 1346 1485
1770 2 2 7 11 558 1347 1488
1771 2 2 7 11 560 1348 1486
1772 2 2 7 11 559 1345 1487
1773 2 2 7 11 404 898 968
1774 2 2 7 11 402 897 967
1775 2 2 7 11 401 900 965
1776 2 2 7 11 403 899 966
1777 2 2 7 11 421 967 897
1778 2 2 7 11 424 968 898
1779 2 2 7 11 422 965 900
1780 2 2 7 11 423 966 899
1781 2 2 7 11 380 766 1227
1782 2 2 7 11 379 765 1225
1783 2 2 7 11 377 767 1228
1784 2 2 7 11 378 768 1226
1785 2 2 7 11 285 717 1313
1786 2 2 7 11 286 720 1315
1787 2 2 7 11 287 718 1316
1788 2 2 7 11 288 719 1314
1789 2 2 7 11 204 758 1098
1790 2 2 7 11 203 757 1099
1791 2 2 7 11 202 760 1100
1792 2 2 7 11 201 759 1097
1793 2 2 7 11 426 739 1137
1794 2 2 7 11 427 737 1140
1795 2 2 7 11 425 738 1138
1796 2 2 7 11 428 740 1139
1797 2 2 7 11 329 1137 739
1798 2 2 7 11 332 1140 737
1799 2 2 7 11 331 1139 740
1800 2 2 7 11 330 1138 738
1801 2 2 7 11 453 1426 1078
1802 2 2 7 11 454 1427 1077
1803 2 2 7 11 455 1425 1080
1804 2 2 7 11 456 1428 1079
1805 2 2 7 11 225 936 841
1806 2 2 7 11 226 934 842
1807 2 2 7 11 227 933 844
1808 2 2 7 11 228 935 843
1809 2 2 7 11 370 1242 826
1810 2 2 7 11 369 1244 827
1811 2 2 7 11 372 1243 828
1812 2 2 7 11 371 1241 825
1813 2 2 7 11 488 825 1241
1814 2 2 7 11 486 826 1242
1815 2 2 7 11 487 828 1243
1816 2 2 7 11 485 827 1244
1817 2 2 7 11 429 1117 1126
1818 2 2 7 11 431 1119 1128
1819 2 2 7 11 432 1118 1127
1820 2 2 7 11 430 1120 1125
1821 2 2 7 11 680 953 1324
1822 2 2 7 11 679 956 1321
1823 2 2 7 11 678 954 1323
1824 2 2 7 11 677 955 1322
1825 2 2 7 11 172 1271 847
1826 2 2 7 11 161 1269 845
1827 2 2 7 11 139 1272 848
1828 2 2 7 11 150 1270 846
1829 2 2 7 11 392 732 1028
1830 2 2 7 11 389 731 1026
1831 2 2 7 11 391 730 1027
1832 2 2 7 11 390 729 1025
1833 2 2 7 11 183 1026 731
1834 2 2 7 11 181 1028 732
1835 2 2 7 11 182 1027 730
1836 2 2 7 11 184 1025 729
1837 2 2 7 11 101 1203 769
1838 2 2 7 11 132 1204 770
1839 2 2 7 11 39 1201 771
1840 2 2 7 11 70 1202 772
1841 2 2 7 11 509 1459 809
1842 2 2 7 11 510 1460 810
1843 2 2 7 11 511 1457 811
1844 2 2 7 11 512 1458 812
1845 2 2 7 11 530 1174 709
1846 2 2 7 11 532 1176 711
1847 2 2 7 11 531 1175 712
1848 2 2 7 11 529 1173 710
1849 2 2 7 11 301 1125 709
1850 2 2 7 11 303 1127 711
1851 2 2 7 11 302 1128 710
1852 2 2 7 11 304 1126 712
1853 2 2 7 11 477 921 1037
1854 2 2 7 11 478 922 1039
1855 2 2 7 11 480 924 1040
1856 2 2 7 11 479 923 1038
1857 2 2 7 11 426 1039 922
1858 2 2 7 11 425 1037 921
1859 2 2 7 11 428 1040 924
1860 2 2 7 11 427 1038 923
1861 2 2 7 11 323 806 1060
1862 2 2 7 11 324 807 1059
1863 2 2 7 11 322 808 1058
1864 2 2 7 11 321 805 1057
1865 2 2 7 11 86 87 993
1866 2 2 7 11 55 56 994
1867 2 2 7 11 24 25 995
1868 2 2 7 11 117 118 996
1869 2 2 7 11 493 698 1209
1870 2 2 7 11 494 697 1212
1871 2 2 7 11 495 700 1211
1872 2 2 7 11 496 699 1210
1873 2 2 7 11 442 1509 721
1874 2 2 7 11 444 1511 724
1875 2 2 7 11 441 1512 723
1876 2 2 7 11 443 1510 722
1877 2 2 7 11 501 817 1147
1878 2 2 7 11 504 819 1148
1879 2 2 7 11 502 818 1145
1880 2 2 7 11 503 820 1146
1881 2 2 7 11 391 1027 746
1882 2 2 7 11 392 1028 745
1883 2 2 7 11 390 1025 747
1884 2 2 7 11 389 1026 748
1885 2 2 7 11 390 747 1047
1886 2 2 7 11 389 748 1048
1887 2 2 7 11 392 745 1046
1888 2 2 7 11 391 746 1045
1889 2 2 7 11 265 777 1168
1890 2 2 7 11 268 778 1165
1891 2 2 7 11 266 780 1166
1892 2 2 7 11 267 779 1167
1893 2 2 7 11 435 1166 780
1894 2 2 7 11 433 1165 778
1895 2 2 7 11 436 1168 777
1896 2 2 7 11 434 1167 779
1897 2 2 7 11 306 1527 753
1898 2 2 7 11 308 1528 754
1899 2 2 7 11 305 1525 755
1900 2 2 7 11 307 1526 756
1901 2 2 7 11 499 754 1528
1902 2 2 7 11 498 756 1526
1903 2 2 7 11 500 753 1527
1904 2 2 7 11 497 755 1525
1905 2 2 7 11 208 1178 789
1906 2 2 7 11 206 1177 791
1907 2 2 7 11 207 1180 790
1908 2 2 7 11 205 1179 792
1909 2 2 7 11 604 1314 1077
1910 2 2 7 11 603 1316 1079
1911 2 2 7 11 602 1315 1078
1912 2 2 7 11 601 1313 1080
1913 2 2 7 11 183 731 1542
1914 2 2 7 11 182 730 1541
1915 2 2 7 11 181 732 1544
1916 2 2 7 11 184 729 1543
1917 2 2 7 11 168 1303 793
1918 2 2 7 11 135 1302 794
1919 2 2 7 11 146 1301 796
1920 2 2 7 11 157 1304 795
1921 2 2 7 11 468 793 1303
1922 2 2 7 11 467 794 1302
1923 2 2 7 11 466 795 1304
1924 2 2 7 11 465 796 1301
1925 2 2 7 11 320 1345 1068
1926 2 2 7 11 319 1346 1067
1927 2 2 7 11 317 1348 1066
1928 2 2 7 11 318 1347 1065
1929 2 2 7 11 354 1469 927
1930 2 2 7 11 353 1472 928
1931 2 2 7 11 355 1471 926
1932 2 2 7 11 356 1470 925
1933 2 2 7 11 549 814 1043
1934 2 2 7 11 551 813 1044
1935 2 2 7 11 552 816 1042
1936 2 2 7 11 550 815 1041
1937 2 2 7 11 499 1321 932
1938 2 2 7 11 498 1323 930
1939 2 2 7 11 497 1322 929
1940 2 2 7 11 500 1324 931
1941 2 2 7 11 527 957 954
1942 2 2 7 11 528 958 955
1943 2 2 7 11 526 960 956
1944 2 2 7 11 525 959 953
1945 2 2 7 11 365 954 957
1946 2 2 7 11 366 955 958
1947 2 2 7 11 367 953 959
1948 2 2 7 11 368 956 960
1949 2 2 7 11 179 1447 722
1950 2 2 7 11 180 1446 721
1951 2 2 7 11 178 1445 723
1952 2 2 7 11 177 1448 724
1953 2 2 7 11 245 1045 746
1954 2 2 7 11 246 1046 745
1955 2 2 7 11 248 1048 748
1956 2 2 7 11 247 1047 747
1957 2 2 7 11 245 763 1230
1958 2 2 7 11 246 764 1229
1959 2 2 7 11 247 761 1231
1960 2 2 7 11 248 762 1232
1961 2 2 7 11 549 1543 1196
1962 2 2 7 11 551 1542 1195
1963 2 2 7 11 552 1544 1194
1964 2 2 7 11 550 1541 1193
1965 2 2 7 11 101 769 1473
1966 2 2 7 11 132 770 1474
1967 2 2 7 11 70 772 1475
1968 2 2 7 11 39 771 1476
1969 2 2 7 11 772 1281 1513
1970 2 2 7 11 771 1283 1514
1971 2 2 7 11 770 1282 1516
1972 2 2 7 11 769 1284 1515
1973 2 2 7 11 196 1175 1339
1974 2 2 7 11 193 1174 1337
1975 2 2 7 11 194 1173 1340
1976 2 2 7 11 195 1176 1338
1977 2 2 7 11 401 965 902
1978 2 2 7 11 403 966 901
1979 2 2 7 11 402 967 903
1980 2 2 7 11 404 968 904
1981 2 2 7 11 225 902 965
1982 2 2 7 11 227 901 966
1983 2 2 7 11 226 903 967
1984 2 2 7 11 228 904 968
1985 2 2 7 11 435 874 1169
1986 2 2 7 11 433 875 1171
1987 2 2 7 11 436 876 1172
1988 2 2 7 11 434 873 1170
1989 2 2 7 11 67 68 962
1990 2 2 7 11 36 37 961
1991 2 2 7 11 98 99 963
1992 2 2 7 11 129 130 964
1993 2 2 7 11 265 1209 777
1994 2 2 7 11 267 1211 779
1995 2 2 7 11 268 1210 778
1996 2 2 7 11 266 1212 780
1997 2 2 7 11 489 797 1438
1998 2 2 7 11 492 800 1437
1999 2 2 7 11 490 798 1440
2000 2 2 7 11 491 799 1439
2001 2 2 7 11 206 1438 797
2002 2 2 7 11 208 1437 800
2003 2 2 7 11 205 1440 798
2004 2 2 7 11 207 1439 799
2005 2 2 7 11 109 110 1104
2006 2 2 7 11 16 17 1103
2007 2 2 7 11 47 48 1101
2008 2 2 7 11 78 79 1102
2009 2 2 7 11 31 32 1108
2010 2 2 7 11 93 94 1106
2011 2 2 7 11 124 125 1105
2012 2 2 7 11 62 63 1107
2013 2 2 7 11 156 801 1304
2014 2 2 7 11 145 802 1301
2015 2 2 7 11 167 803 1303
2016 2 2 7 11 134 804 1302
2017 2 2 7 11 466 1304 801
2018 2 2 7 11 465 1301 802
2019 2 2 7 11 468 1303 803
2020 2 2 7 11 467 1302 804
2021 2 2 7 11 413 1219 713
2022 2 2 7 11 416 1217 716
2023 2 2 7 11 414 1218 714
2024 2 2 7 11 415 1220 715
2025 2 2 7 11 418 720 1221
2026 2 2 7 11 417 717 1223
2027 2 2 7 11 420 718 1222
2028 2 2 7 11 419 719 1224
2029 2 2 7 11 283 714 1218
2030 2 2 7 11 282 715 1220
2031 2 2 7 11 281 713 1219
2032 2 2 7 11 284 716 1217
2033 2 2 7 11 286 1221 720
2034 2 2 7 11 285 1223 717
2035 2 2 7 11 287 1222 718
2036 2 2 7 11 288 1224 719
2037 2 2 7 11 120 825 1423
2038 2 2 7 11 58 827 1421
2039 2 2 7 11 27 828 1422
2040 2 2 7 11 89 826 1424
2041 2 2 7 11 282 1317 715
2042 2 2 7 11 283 1318 714
2043 2 2 7 11 281 1319 713
2044 2 2 7 11 284 1320 716
2045 2 2 7 11 122 123 1295
2046 2 2 7 11 91 92 1293
2047 2 2 7 11 60 61 1294
2048 2 2 7 11 29 30 1296
2049 2 2 7 11 376 1229 764
2050 2 2 7 11 375 1230 763
2051 2 2 7 11 373 1231 761
2052 2 2 7 11 374 1232 762
2053 2 2 7 11 350 721 1509
2054 2 2 7 11 349 722 1510
2055 2 2 7 11 352 723 1512
2056 2 2 7 11 351 724 1511
2057 2 2 7 11 488 1423 825
2058 2 2 7 11 487 1422 828
2059 2 2 7 11 485 1421 827
2060 2 2 7 11 486 1424 826
2061 2 2 7 11 343 1463 734
2062 2 2 7 11 344 1464 733
2063 2 2 7 11 342 1461 735
2064 2 2 7 11 341 1462 736
2065 2 2 7 11 321 789 1149
2066 2 2 7 11 323 792 1151
2067 2 2 7 11 322 790 1150
2068 2 2 7 11 324 791 1152
2069 2 2 7 11 429 1149 789
2070 2 2 7 11 431 1151 792
2071 2 2 7 11 432 1150 790
2072 2 2 7 11 430 1152 791
2073 2 2 7 11 194 744 1173
2074 2 2 7 11 196 742 1175
2075 2 2 7 11 193 741 1174
2076 2 2 7 11 195 743 1176
2077 2 2 7 11 453 1055 1426
2078 2 2 7 11 454 1054 1427
2079 2 2 7 11 455 1056 1425
2080 2 2 7 11 456 1053 1428
2081 2 2 7 11 425 1325 738
2082 2 2 7 11 427 1327 737
2083 2 2 7 11 426 1326 739
2084 2 2 7 11 428 1328 740
2085 2 2 7 11 4 1203 101
2086 2 2 7 11 1 1204 132
2087 2 2 7 11 3 1202 70
2088 2 2 7 11 2 1201 39
2089 2 2 7 11 847 1271 1379
2090 2 2 7 11 845 1269 1377
2091 2 2 7 11 848 1272 1380
2092 2 2 7 11 846 1270 1378
2093 2 2 7 11 90 91 1109
2094 2 2 7 11 59 60 1112
2095 2 2 7 11 28 29 1111
2096 2 2 7 11 121 122 1110
2097 2 2 7 11 421 741 1289
2098 2 2 7 11 424 742 1290
2099 2 2 7 11 423 743 1292
2100 2 2 7 11 422 744 1291
2101 2 2 7 11 411 805 1073
2102 2 2 7 11 412 808 1074
2103 2 2 7 11 409 806 1075
2104 2 2 7 11 410 807 1076
2105 2 2 7 11 321 1073 805
2106 2 2 7 11 322 1074 808
2107 2 2 7 11 323 1075 806
2108 2 2 7 11 324 1076 807
2109 2 2 7 11 433 778 1065
2110 2 2 7 11 435 780 1066
2111 2 2 7 11 434 779 1067
2112 2 2 7 11 436 777 1068
2113 2 2 7 11 567 1016 839
2114 2 2 7 11 565 1013 838
2115 2 2 7 11 566 1015 837
2116 2 2 7 11 568 1014 840
2117 2 2 7 11 394 773 1121
2118 2 2 7 11 393 774 1123
2119 2 2 7 11 395 776 1122
2120 2 2 7 11 396 775 1124
2121 2 2 7 11 149 922 1270
2122 2 2 7 11 160 921 1269
2123 2 2 7 11 171 923 1271
2124 2 2 7 11 138 924 1272
2125 2 2 7 11 321 1057 789
2126 2 2 7 11 322 1058 790
2127 2 2 7 11 323 1060 792
2128 2 2 7 11 324 1059 791
2129 2 2 7 11 477 1269 921
2130 2 2 7 11 478 1270 922
2131 2 2 7 11 480 1272 924
2132 2 2 7 11 479 1271 923
2133 2 2 7 11 256 880 1093
2134 2 2 7 11 255 879 1094
2135 2 2 7 11 254 878 1095
2136 2 2 7 11 253 877 1096
2137 2 2 7 11 440 1094 879
2138 2 2 7 11 439 1093 880
2139 2 2 7 11 437 1095 878
2140 2 2 7 11 438 1096 877
2141 2 2 7 11 341 890 1462
2142 2 2 7 11 342 889 1461
2143 2 2 7 11 343 891 1463
2144 2 2 7 11 344 892 1464
2145 2 2 7 11 193 1289 741
2146 2 2 7 11 196 1290 742
2147 2 2 7 11 194 1291 744
2148 2 2 7 11 195 1292 743
2149 2 2 7 11 406 748 1341
2150 2 2 7 11 408 746 1343
2151 2 2 7 11 407 745 1344
2152 2 2 7 11 405 747 1342
2153 2 2 7 11 230 784 1081
2154 2 2 7 11 232 781 1083
2155 2 2 7 11 231 783 1084
2156 2 2 7 11 229 782 1082
2157 2 2 7 11 233 1086 786
2158 2 2 7 11 236 1085 788
2159 2 2 7 11 234 1088 785
2160 2 2 7 11 235 1087 787
2161 2 2 7 11 676 1500 974
2162 2 2 7 11 675 1499 973
2163 2 2 7 11 674 1497 976
2164 2 2 7 11 673 1498 975
2165 2 2 7 11 76 1183 753
2166 2 2 7 11 45 1184 754
2167 2 2 7 11 14 1182 756
2168 2 2 7 11 107 1181 755
2169 2 2 7 11 425 1138 1382
2170 2 2 7 11 427 1140 1383
2171 2 2 7 11 426 1137 1381
2172 2 2 7 11 428 1139 1384
2173 2 2 7 11 1032 1448 544
2174 2 2 7 11 1029 1447 543
2175 2 2 7 11 1030 1446 541
2176 2 2 7 11 1031 1445 542
2177 2 2 7 11 546 1461 889
2178 2 2 7 11 547 1463 891
2179 2 2 7 11 545 1462 890
2180 2 2 7 11 548 1464 892
2181 2 2 7 11 45 46 1184
2182 2 2 7 11 76 77 1183
2183 2 2 7 11 107 108 1181
2184 2 2 7 11 14 15 1182
2185 2 2 7 11 358 1465 1069
2186 2 2 7 11 359 1467 1070
2187 2 2 7 11 360 1466 1071
2188 2 2 7 11 357 1468 1072
2189 2 2 7 11 665 1069 1465
2190 2 2 7 11 666 1070 1467
2191 2 2 7 11 667 1071 1466
2192 2 2 7 11 668 1072 1468
2193 2 2 7 11 258 947 1029
2194 2 2 7 11 257 945 1030
2195 2 2 7 11 259 946 1031
2196 2 2 7 11 260 948 1032
2197 2 2 7 11 442 1030 945
2198 2 2 7 11 443 1029 947
2199 2 2 7 11 441 1031 946
2200 2 2 7 11 444 1032 948
2201 2 2 7 11 241 807 1090
2202 2 2 7 11 243 808 1091
2203 2 2 7 11 242 806 1089
2204 2 2 7 11 244 805 1092
2205 2 2 7 11 410 1090 807
2206 2 2 7 11 412 1091 808
2207 2 2 7 11 411 1092 805
2208 2 2 7 11 409 1089 806
2209 2 2 7 11 327 980 1502
2210 2 2 7 11 325 978 1503
2211 2 2 7 11 326 977 1504
2212 2 2 7 11 328 979 1501
2213 2 2 7 11 644 1076 886
2214 2 2 7 11 643 1075 885
2215 2 2 7 11 642 1074 887
2216 2 2 7 11 641 1073 888
2217 2 2 7 11 164 1008 165
2218 2 2 7 11 175 1006 176
2219 2 2 7 11 153 1005 154
2220 2 2 7 11 142 1007 143
2221 2 2 7 11 244 1384 1334
2222 2 2 7 11 241 1382 1335
2223 2 2 7 11 242 1381 1333
2224 2 2 7 11 243 1383 1336
2225 2 2 7 11 437 769 1203
2226 2 2 7 11 438 770 1204
2227 2 2 7 11 440 772 1202
2228 2 2 7 11 439 771 1201
2229 2 2 7 11 69 70 1475
2230 2 2 7 11 100 101 1473
2231 2 2 7 11 131 132 1474
2232 2 2 7 11 38 39 1476
2233 2 2 7 11 483 1444 766
2234 2 2 7 11 482 1441 765
2235 2 2 7 11 481 1442 767
2236 2 2 7 11 484 1443 768
2237 2 2 7 11 306 753 1451
2238 2 2 7 11 308 754 1452
2239 2 2 7 11 305 755 1449
2240 2 2 7 11 307 756 1450
2241 2 2 7 11 429 789 1178
2242 2 2 7 11 432 790 1180
2243 2 2 7 11 431 792 1179
2244 2 2 7 11 430 791 1177
2245 2 2 7 11 3 950 1202
2246 2 2 7 11 2 949 1201
2247 2 2 7 11 4 951 1203
2248 2 2 7 11 1 952 1204
2249 2 2 7 11 269 766 1435
2250 2 2 7 11 270 765 1434
2251 2 2 7 11 272 767 1433
2252 2 2 7 11 271 768 1436
2253 2 2 7 11 345 761 1355
2254 2 2 7 11 346 762 1356
2255 2 2 7 11 348 763 1353
2256 2 2 7 11 347 764 1354
2257 2 2 7 11 559 1068 1345
2258 2 2 7 11 557 1067 1346
2259 2 2 7 11 560 1066 1348
2260 2 2 7 11 558 1065 1347
2261 2 2 7 11 16 1103 1000
2262 2 2 7 11 109 1104 999
2263 2 2 7 11 47 1101 997
2264 2 2 7 11 78 1102 998
2265 2 2 7 11 32 1004 1108
2266 2 2 7 11 94 1001 1106
2267 2 2 7 11 125 1002 1105
2268 2 2 7 11 63 1003 1107
2269 2 2 7 11 329 798 1137
2270 2 2 7 11 330 797 1138
2271 2 2 7 11 332 799 1140
2272 2 2 7 11 331 800 1139
2273 2 2 7 11 244 1040 1384
2274 2 2 7 11 241 1037 1382
2275 2 2 7 11 242 1039 1381
2276 2 2 7 11 243 1038 1383
2277 2 2 7 11 472 1330 941
2278 2 2 7 11 471 1329 944
2279 2 2 7 11 470 1331 942
2280 2 2 7 11 469 1332 943
2281 2 2 7 11 367 1324 953
2282 2 2 7 11 368 1321 956
2283 2 2 7 11 366 1322 955
2284 2 2 7 11 365 1323 954
2285 2 2 7 11 472 941 1061
2286 2 2 7 11 469 943 1063
2287 2 2 7 11 470 942 1064
2288 2 2 7 11 471 944 1062
2289 2 2 7 11 314 1061 941
2290 2 2 7 11 313 1062 944
2291 2 2 7 11 316 1063 943
2292 2 2 7 11 315 1064 942
2293 2 2 7 11 505 1354 1365
2294 2 2 7 11 508 1356 1368
2295 2 2 7 11 506 1353 1366
2296 2 2 7 11 507 1355 1367
2297 2 2 7 11 53 54 1033
2298 2 2 7 11 84 85 1034
2299 2 2 7 11 115 116 1036
2300 2 2 7 11 22 23 1035
2301 2 2 7 11 226 1430 934
2302 2 2 7 11 225 1429 936
2303 2 2 7 11 228 1432 935
2304 2 2 7 11 227 1431 933
2305 2 2 7 11 359 831 1133
2306 2 2 7 11 358 830 1136
2307 2 2 7 11 357 829 1135
2308 2 2 7 11 360 832 1134
2309 2 2 7 11 589 1505 773
2310 2 2 7 11 590 1506 774
2311 2 2 7 11 592 1507 775
2312 2 2 7 11 591 1508 776
2313 2 2 7 11 170 1327 923
2314 2 2 7 11 159 1325 921
2315 2 2 7 11 137 1328 924
2316 2 2 7 11 148 1326 922
2317 2 2 7 11 90 1109 826
2318 2 2 7 11 59 1112 827
2319 2 2 7 11 121 1110 825
2320 2 2 7 11 28 1111 828
2321 2 2 7 11 391 1280 857
2322 2 2 7 11 390 1278 859
2323 2 2 7 11 392 1279 858
2324 2 2 7 11 389 1277 860
2325 2 2 7 11 464 882 1257
2326 2 2 7 11 463 881 1258
2327 2 2 7 11 462 883 1259
2328 2 2 7 11 461 884 1260
2329 2 2 7 11 50 1257 882
2330 2 2 7 11 81 1258 881
2331 2 2 7 11 19 1259 883
2332 2 2 7 11 112 1260 884
2333 2 2 7 11 437 951 1095
2334 2 2 7 11 438 952 1096
2335 2 2 7 11 440 950 1094
2336 2 2 7 11 439 949 1093
2337 2 2 7 11 509 1095 951
2338 2 2 7 11 510 1096 952
2339 2 2 7 11 511 1094 950
2340 2 2 7 11 512 1093 949
2341 2 2 7 11 410 1197 833
2342 2 2 7 11 409 1198 834
2343 2 2 7 11 412 1200 835
2344 2 2 7 11 411 1199 836
2345 2 2 7 11 207 790 1439
2346 2 2 7 11 205 792 1440
2347 2 2 7 11 208 789 1437
2348 2 2 7 11 206 791 1438
2349 2 2 7 11 408 1135 829
2350 2 2 7 11 406 1134 832
2351 2 2 7 11 405 1133 831
2352 2 2 7 11 407 1136 830
2353 2 2 7 11 672 937 1135
2354 2 2 7 11 670 939 1134
2355 2 2 7 11 671 938 1136
2356 2 2 7 11 669 940 1133
2357 2 2 7 11 526 1410 960
2358 2 2 7 11 527 1411 957
2359 2 2 7 11 528 1412 958
2360 2 2 7 11 525 1409 959
2361 2 2 7 11 256 960 1410
2362 2 2 7 11 253 957 1411
2363 2 2 7 11 254 958 1412
2364 2 2 7 11 255 959 1409
2365 2 2 7 11 308 783 1397
2366 2 2 7 11 306 784 1400
2367 2 2 7 11 305 782 1399
2368 2 2 7 11 307 781 1398
2369 2 2 7 11 311 1401 785
2370 2 2 7 11 310 1403 787
2371 2 2 7 11 309 1402 786
2372 2 2 7 11 312 1404 788
2373 2 2 7 11 459 842 1142
2374 2 2 7 11 458 843 1141
2375 2 2 7 11 457 841 1143
2376 2 2 7 11 460 844 1144
2377 2 2 7 11 470 1419 1298
2378 2 2 7 11 469 1420 1297
2379 2 2 7 11 472 1417 1300
2380 2 2 7 11 471 1418 1299
2381 2 2 7 11 96 821 1251
2382 2 2 7 11 127 823 1250
2383 2 2 7 11 65 822 1252
2384 2 2 7 11 34 824 1249
2385 2 2 7 11 217 1443 938
2386 2 2 7 11 219 1441 940
2387 2 2 7 11 220 1442 937
2388 2 2 7 11 218 1444 939
2389 2 2 7 11 616 1215 1265
2390 2 2 7 11 615 1214 1266
2391 2 2 7 11 614 1213 1267
2392 2 2 7 11 613 1216 1268
2393 2 2 7 11 447 1265 1215
2394 2 2 7 11 446 1266 1214
2395 2 2 7 11 445 1267 1213
2396 2 2 7 11 448 1268 1216
2397 2 2 7 11 537 1098 865
2398 2 2 7 11 538 1099 866
2399 2 2 7 11 539 1097 867
2400 2 2 7 11 540 1100 868
2401 2 2 7 11 37 1408 961
2402 2 2 7 11 130 1407 964
2403 2 2 7 11 99 1406 963
2404 2 2 7 11 68 1405 962
2405 2 2 7 11 293 1157 969
2406 2 2 7 11 295 1158 972
2407 2 2 7 11 296 1160 970
2408 2 2 7 11 294 1159 971
2409 2 2 7 11 459 969 1157
2410 2 2 7 11 458 970 1160
2411 2 2 7 11 460 972 1158
2412 2 2 7 11 457 971 1159
2413 2 2 7 11 129 964 1520
2414 2 2 7 11 98 963 1518
2415 2 2 7 11 36 961 1519
2416 2 2 7 11 67 962 1517
2417 2 2 7 11 531 1049 1339
2418 2 2 7 11 530 1052 1337
2419 2 2 7 11 529 1050 1340
2420 2 2 7 11 532 1051 1338
2421 2 2 7 11 206 797 1481
2422 2 2 7 11 207 799 1482
2423 2 2 7 11 205 798 1483
2424 2 2 7 11 208 800 1484
2425 2 2 7 11 404 1480 872
2426 2 2 7 11 402 1478 869
2427 2 2 7 11 403 1479 871
2428 2 2 7 11 401 1477 870
2429 2 2 7 11 370 817 1242
2430 2 2 7 11 369 818 1244
2431 2 2 7 11 372 819 1243
2432 2 2 7 11 371 820 1241
2433 2 2 7 11 365 1307 810
2434 2 2 7 11 366 1308 809
2435 2 2 7 11 367 1305 811
2436 2 2 7 11 368 1306 812
2437 2 2 7 11 323 885 1075
2438 2 2 7 11 321 888 1073
2439 2 2 7 11 324 886 1076
2440 2 2 7 11 322 887 1074
2441 2 2 7 11 184 926 1342
2442 2 2 7 11 183 925 1341
2443 2 2 7 11 182 928 1343
2444 2 2 7 11 181 927 1344
2445 2 2 7 11 498 930 1396
2446 2 2 7 11 499 932 1393
2447 2 2 7 11 497 929 1395
2448 2 2 7 11 500 931 1394
2449 2 2 7 11 74 1394 931
2450 2 2 7 11 43 1393 932
2451 2 2 7 11 105 1395 929
2452 2 2 7 11 12 1396 930
2453 2 2 7 11 341 1377 890
2454 2 2 7 11 343 1379 891
2455 2 2 7 11 342 1378 889
2456 2 2 7 11 344 1380 892
2457 2 2 7 11 330 1357 797
2458 2 2 7 11 329 1358 798
2459 2 2 7 11 332 1359 799
2460 2 2 7 11 331 1360 800
2461 2 2 7 11 510 810 1307
2462 2 2 7 11 509 809 1308
2463 2 2 7 11 511 811 1305
2464 2 2 7 11 512 812 1306
2465 2 2 7 11 578 1399 910
2466 2 2 7 11 579 1397 909
2467 2 2 7 11 580 1398 911
2468 2 2 7 11 577 1400 912
2469 2 2 7 11 583 915 1403
2470 2 2 7 11 581 914 1401
2471 2 2 7 11 584 913 1402
2472 2 2 7 11 582 916 1404
2473 2 2 7 11 421 1289 850
2474 2 2 7 11 424 1290 852
2475 2 2 7 11 423 1292 849
2476 2 2 7 11 422 1291 851
2477 2 2 7 11 358 938 1465
2478 2 2 7 11 360 939 1466
2479 2 2 7 11 359 940 1467
2480 2 2 7 11 357 937 1468
2481 2 2 7 11 641 1345 1199
2482 2 2 7 11 644 1347 1197
2483 2 2 7 11 643 1348 1198
2484 2 2 7 11 642 1346 1200
2485 2 2 7 11 320 1199 1345
2486 2 2 7 11 318 1197 1347
2487 2 2 7 11 317 1198 1348
2488 2 2 7 11 319 1200 1346
2489 2 2 7 11 477 890 1377
2490 2 2 7 11 479 891 1379
2491 2 2 7 11 480 892 1380
2492 2 2 7 11 478 889 1378
2493 2 2 7 11 244 1334 805
2494 2 2 7 11 241 1335 807
2495 2 2 7 11 243 1336 808
2496 2 2 7 11 242 1333 806
2497 2 2 7 11 471 1062 1418
2498 2 2 7 11 472 1061 1417
2499 2 2 7 11 470 1064 1419
2500 2 2 7 11 469 1063 1420
2501 2 2 7 11 359 1133 940
2502 2 2 7 11 358 1136 938
2503 2 2 7 11 360 1134 939
2504 2 2 7 11 357 1135 937
2505 2 2 7 11 648 1503 1246
2506 2 2 7 11 647 1504 1245
2507 2 2 7 11 646 1502 1247
2508 2 2 7 11 645 1501 1248
2509 2 2 7 11 95 96 1251
2510 2 2 7 11 33 34 1249
2511 2 2 7 11 64 65 1252
2512 2 2 7 11 126 127 1250
2513 2 2 7 11 435 1186 874
2514 2 2 7 11 433 1185 875
2515 2 2 7 11 434 1187 873
2516 2 2 7 11 436 1188 876
2517 2 2 7 11 293 875 1185
2518 2 2 7 11 295 873 1187
2519 2 2 7 11 294 874 1186
2520 2 2 7 11 296 876 1188
2521 2 2 7 11 1060 806 1333
2522 2 2 7 11 1059 807 1335
2523 2 2 7 11 1058 808 1336
2524 2 2 7 11 1057 805 1334
2525 2 2 7 11 559 1495 1188
2526 2 2 7 11 557 1493 1187
2527 2 2 7 11 558 1494 1185
2528 2 2 7 11 560 1496 1186
2529 2 2 7 11 559 1188 1068
2530 2 2 7 11 557 1187 1067
2531 2 2 7 11 558 1185 1065
2532 2 2 7 11 560 1186 1066
2533 2 2 7 11 395 1122 984
2534 2 2 7 11 396 1124 983
2535 2 2 7 11 393 1123 982
2536 2 2 7 11 394 1121 981
2537 2 2 7 11 221 1277 1374
2538 2 2 7 11 222 1278 1373
2539 2 2 7 11 224 1279 1375
2540 2 2 7 11 223 1280 1376
2541 2 2 7 11 661 1373 1278
2542 2 2 7 11 662 1374 1277
2543 2 2 7 11 663 1375 1279
2544 2 2 7 11 664 1376 1280
2545 2 2 7 11 245 829 1366
2546 2 2 7 11 246 830 1365
2547 2 2 7 11 248 832 1368
2548 2 2 7 11 247 831 1367
2549 2 2 7 11 439 1201 949
2550 2 2 7 11 440 1202 950
2551 2 2 7 11 437 1203 951
2552 2 2 7 11 438 1204 952
2553 2 2 7 11 406 925 1470
2554 2 2 7 11 405 926 1471
2555 2 2 7 11 408 928 1472
2556 2 2 7 11 407 927 1469
2557 2 2 7 11 1043 1543 549
2558 2 2 7 11 1044 1542 551
2559 2 2 7 11 1041 1541 550
2560 2 2 7 11 1042 1544 552
2561 2 2 7 11 446 878 1266
2562 2 2 7 11 445 877 1267
2563 2 2 7 11 448 880 1268
2564 2 2 7 11 447 879 1265
2565 2 2 7 11 256 1268 880
2566 2 2 7 11 254 1266 878
2567 2 2 7 11 253 1267 877
2568 2 2 7 11 255 1265 879
2569 2 2 7 11 50 51 1257
2570 2 2 7 11 81 82 1258
2571 2 2 7 11 19 20 1259
2572 2 2 7 11 112 113 1260
2573 2 2 7 11 149 1270 150
2574 2 2 7 11 160 1269 161
2575 2 2 7 11 138 1272 139
2576 2 2 7 11 171 1271 172
2577 2 2 7 11 246 1229 1046
2578 2 2 7 11 245 1230 1045
2579 2 2 7 11 247 1231 1047
2580 2 2 7 11 248 1232 1048
2581 2 2 7 11 461 1260 894
2582 2 2 7 11 462 1259 896
2583 2 2 7 11 463 1258 895
2584 2 2 7 11 464 1257 893
2585 2 2 7 11 113 894 1260
2586 2 2 7 11 20 896 1259
2587 2 2 7 11 51 893 1257
2588 2 2 7 11 82 895 1258
2589 2 2 7 11 215 1530 956
2590 2 2 7 11 216 1529 953
2591 2 2 7 11 213 1531 955
2592 2 2 7 11 214 1532 954
2593 2 2 7 11 528 955 1531
2594 2 2 7 11 527 954 1532
2595 2 2 7 11 526 956 1530
2596 2 2 7 11 525 953 1529
2597 2 2 7 11 341 845 1377
2598 2 2 7 11 343 847 1379
2599 2 2 7 11 342 846 1378
2600 2 2 7 11 344 848 1380
2601 2 2 7 11 426 922 1326
2602 2 2 7 11 425 921 1325
2603 2 2 7 11 427 923 1327
2604 2 2 7 11 428 924 1328
2605 2 2 7 11 351 1511 861
2606 2 2 7 11 352 1512 862
2607 2 2 7 11 350 1509 863
2608 2 2 7 11 349 1510 864
2609 2 2 7 11 512 949 1458
2610 2 2 7 11 511 950 1457
2611 2 2 7 11 509 951 1459
2612 2 2 7 11 510 952 1460
2613 2 2 7 11 40 1458 949
2614 2 2 7 11 71 1457 950
2615 2 2 7 11 102 1459 951
2616 2 2 7 11 9 1460 952
2617 2 2 7 11 449 1317 985
2618 2 2 7 11 450 1319 988
2619 2 2 7 11 452 1318 987
2620 2 2 7 11 451 1320 986
2621 2 2 7 11 184 1342 1025
2622 2 2 7 11 182 1343 1027
2623 2 2 7 11 183 1341 1026
2624 2 2 7 11 181 1344 1028
2625 2 2 7 11 362 1263 1297
2626 2 2 7 11 361 1261 1298
2627 2 2 7 11 363 1264 1299
2628 2 2 7 11 364 1262 1300
2629 2 2 7 11 622 1297 1263
2630 2 2 7 11 623 1298 1261
2631 2 2 7 11 621 1299 1264
2632 2 2 7 11 624 1300 1262
2633 2 2 7 11 524 851 1533
2634 2 2 7 11 523 849 1536
2635 2 2 7 11 521 852 1535
2636 2 2 7 11 522 850 1534
2637 2 2 7 11 145 1301 146
2638 2 2 7 11 134 1302 135
2639 2 2 7 11 167 1303 168
2640 2 2 7 11 156 1304 157
2641 2 2 7 11 440 879 1281
2642 2 2 7 11 437 878 1284
2643 2 2 7 11 438 877 1282
2644 2 2 7 11 439 880 1283
2645 2 2 7 11 252 1141 973
2646 2 2 7 11 250 1142 975
2647 2 2 7 11 249 1143 976
2648 2 2 7 11 251 1144 974
2649 2 2 7 11 74 75 1394
2650 2 2 7 11 43 44 1393
2651 2 2 7 11 105 106 1395
2652 2 2 7 11 12 13 1396
2653 2 2 7 11 414 1000 1103
2654 2 2 7 11 416 997 1101
2655 2 2 7 11 415 998 1102
2656 2 2 7 11 413 999 1104
2657 2 2 7 11 417 1106 1001
2658 2 2 7 11 420 1105 1002
2659 2 2 7 11 418 1107 1003
2660 2 2 7 11 419 1108 1004
2661 2 2 7 11 68 69 1405
2662 2 2 7 11 99 100 1406
2663 2 2 7 11 130 131 1407
2664 2 2 7 11 37 38 1408
2665 2 2 7 11 628 1158 1493
2666 2 2 7 11 626 1160 1495
2667 2 2 7 11 625 1159 1496
2668 2 2 7 11 627 1157 1494
2669 2 2 7 11 295 1493 1158
2670 2 2 7 11 296 1495 1160
2671 2 2 7 11 294 1496 1159
2672 2 2 7 11 293 1494 1157
2673 2 2 7 11 88 89 1424
2674 2 2 7 11 57 58 1421
2675 2 2 7 11 26 27 1422
2676 2 2 7 11 119 120 1423
2677 2 2 7 11 442 863 1509
2678 2 2 7 11 444 861 1511
2679 2 2 7 11 441 862 1512
2680 2 2 7 11 443 864 1510
2681 2 2 7 11 71 72 1457
2682 2 2 7 11 40 41 1458
2683 2 2 7 11 102 103 1459
2684 2 2 7 11 9 10 1460
2685 2 2 7 11 527 1532 1455
2686 2 2 7 11 528 1531 1456
2687 2 2 7 11 526 1530 1453
2688 2 2 7 11 525 1529 1454
2689 2 2 7 11 128 129 1520
2690 2 2 7 11 97 98 1518
2691 2 2 7 11 66 67 1517
2692 2 2 7 11 35 36 1519
2693 2 2 7 11 436 1172 1168
2694 2 2 7 11 434 1170 1167
2695 2 2 7 11 433 1171 1165
2696 2 2 7 11 435 1169 1166
2697 2 2 7 11 535 1167 1170
2698 2 2 7 11 533 1168 1172
2699 2 2 7 11 536 1165 1171
2700 2 2 7 11 534 1166 1169
2701 2 2 7 11 186 870 1477
2702 2 2 7 11 185 869 1478
2703 2 2 7 11 187 871 1479
2704 2 2 7 11 188 872 1480
2705 2 2 7 11 386 946 1413
2706 2 2 7 11 388 948 1416
2707 2 2 7 11 387 947 1414
2708 2 2 7 11 385 945 1415
2709 2 2 7 11 630 881 1521
2710 2 2 7 11 629 882 1522
2711 2 2 7 11 631 883 1524
2712 2 2 7 11 632 884 1523
2713 2 2 7 11 365 957 1307
2714 2 2 7 11 366 958 1308
2715 2 2 7 11 367 959 1305
2716 2 2 7 11 368 960 1306
2717 2 2 7 11 197 1078 1426
2718 2 2 7 11 199 1077 1427
2719 2 2 7 11 200 1079 1428
2720 2 2 7 11 198 1080 1425
2721 2 2 7 11 573 1473 1515
2722 2 2 7 11 574 1474 1516
2723 2 2 7 11 575 1475 1513
2724 2 2 7 11 576 1476 1514
2725 2 2 7 11 238 907 1419
2726 2 2 7 11 237 908 1420
2727 2 2 7 11 239 906 1418
2728 2 2 7 11 240 905 1417
2729 2 2 7 11 769 1515 1473
2730 2 2 7 11 770 1516 1474
2731 2 2 7 11 772 1513 1475
2732 2 2 7 11 771 1514 1476
2733 2 2 7 11 406 1341 925
2734 2 2 7 11 405 1342 926
2735 2 2 7 11 408 1343 928
2736 2 2 7 11 407 1344 927
2737 2 2 7 11 196 987 1535
2738 2 2 7 11 193 985 1534
2739 2 2 7 11 194 986 1533
2740 2 2 7 11 195 988 1536
2741 2 2 7 11 524 1533 986
2742 2 2 7 11 522 1534 985
2743 2 2 7 11 521 1535 987
2744 2 2 7 11 523 1536 988
2745 2 2 7 11 182 1541 1041
2746 2 2 7 11 184 1543 1043
2747 2 2 7 11 183 1542 1044
2748 2 2 7 11 181 1544 1042
2749 2 2 7 11 570 1161 1389
2750 2 2 7 11 572 1164 1391
2751 2 2 7 11 569 1162 1390
2752 2 2 7 11 571 1163 1392
2753 2 2 7 11 274 1389 1161
2754 2 2 7 11 276 1391 1164
2755 2 2 7 11 273 1390 1162
2756 2 2 7 11 275 1392 1163
2757 2 2 7 11 397 933 1431
2758 2 2 7 11 398 936 1429
2759 2 2 7 11 399 934 1430
2760 2 2 7 11 400 935 1432
2761 2 2 7 11 450 988 1338
2762 2 2 7 11 451 986 1340
2763 2 2 7 11 449 985 1337
2764 2 2 7 11 452 987 1339
2765 2 2 7 11 429 1178 1117
2766 2 2 7 11 432 1180 1118
2767 2 2 7 11 431 1179 1119
2768 2 2 7 11 430 1177 1120
2769 2 2 7 11 386 1413 990
2770 2 2 7 11 388 1416 989
2771 2 2 7 11 387 1414 992
2772 2 2 7 11 385 1415 991
2773 2 2 7 11 479 1379 1271
2774 2 2 7 11 477 1377 1269
2775 2 2 7 11 478 1378 1270
2776 2 2 7 11 480 1380 1272
2777 2 2 7 11 296 1188 1495
2778 2 2 7 11 295 1187 1493
2779 2 2 7 11 293 1185 1494
2780 2 2 7 11 294 1186 1496
2781 2 2 7 11 216 917 1529
2782 2 2 7 11 215 918 1530
2783 2 2 7 11 213 920 1531
2784 2 2 7 11 214 919 1532
2785 2 2 7 11 282 1220 1521
2786 2 2 7 11 283 1218 1524
2787 2 2 7 11 284 1217 1522
2788 2 2 7 11 281 1219 1523
2789 2 2 7 11 631 1524 1218
2790 2 2 7 11 630 1521 1220
2791 2 2 7 11 629 1522 1217
2792 2 2 7 11 632 1523 1219
2793 2 2 7 11 475 1504 977
2794 2 2 7 11 474 1502 980
2795 2 2 7 11 476 1501 979
2796 2 2 7 11 473 1503 978
2797 2 2 7 11 287 1537 1222
2798 2 2 7 11 285 1539 1223
2799 2 2 7 11 286 1538 1221
2800 2 2 7 11 288 1540 1224
2801 2 2 7 11 633 1222 1537
2802 2 2 7 11 635 1223 1539
2803 2 2 7 11 634 1221 1538
2804 2 2 7 11 636 1224 1540
2805 2 2 7 11 563 1119 1179
2806 2 2 7 11 564 1120 1177
2807 2 2 7 11 562 1117 1178
2808 2 2 7 11 561 1118 1180
2809 2 2 7 11 286 1155 1538
2810 2 2 7 11 285 1153 1539
2811 2 2 7 11 287 1154 1537
2812 2 2 7 11 288 1156 1540
2813 2 2 7 11 609 1538 1155
2814 2 2 7 11 612 1540 1156
2815 2 2 7 11 610 1539 1153
2816 2 2 7 11 611 1537 1154
2817 2 2 7 11 433 1065 1185
2818 2 2 7 11 435 1066 1186
2819 2 2 7 11 434 1067 1187
2820 2 2 7 11 436 1068 1188
2821 2 2 7 11 493 1309 1193
2822 2 2 7 11 494 1311 1194
2823 2 2 7 11 495 1310 1195
2824 2 2 7 11 496 1312 1196
2825 2 2 7 11 552 1194 1311
2826 2 2 7 11 550 1193 1309
2827 2 2 7 11 551 1195 1310
2828 2 2 7 11 549 1196 1312
2829 2 2 7 11 1026 1341 748
2830 2 2 7 11 747 1025 1342
2831 2 2 7 11 746 1027 1343
2832 2 2 7 11 745 1028 1344
2833 2 2 7 11 1046 1229 663
2834 2 2 7 11 1045 1230 664
2835 2 2 7 11 1048 1232 662
2836 2 2 7 11 1047 1231 661
2837 2 2 7 11 671 1469 1350
2838 2 2 7 11 672 1472 1352
2839 2 2 7 11 670 1470 1349
2840 2 2 7 11 669 1471 1351
2841 2 2 7 11 354 1350 1469
2842 2 2 7 11 355 1351 1471
2843 2 2 7 11 353 1352 1472
2844 2 2 7 11 356 1349 1470
2845 2 2 7 11 490 1060 1333
2846 2 2 7 11 489 1059 1335
2847 2 2 7 11 491 1058 1336
2848 2 2 7 11 492 1057 1334
2849 2 2 7 11 677 1322 1525
2850 2 2 7 11 678 1323 1526
2851 2 2 7 11 679 1321 1528
2852 2 2 7 11 680 1324 1527
2853 2 2 7 11 497 1525 1322
2854 2 2 7 11 498 1526 1323
2855 2 2 7 11 499 1528 1321
2856 2 2 7 11 500 1527 1324
2857 2 2 7 11 1058 1439 790
2858 2 2 7 11 1057 1437 789
2859 2 2 7 11 1060 1440 792
2860 2 2 7 11 1059 1438 791
2861 2 2 7 11 524 1240 1236
2862 2 2 7 11 522 1237 1234
2863 2 2 7 11 523 1239 1233
2864 2 2 7 11 521 1238 1235
2865 2 2 7 11 463 1234 1237
2866 2 2 7 11 462 1235 1238
2867 2 2 7 11 464 1236 1240
2868 2 2 7 11 461 1233 1239
2869 2 2 7 11 450 1338 1051
2870 2 2 7 11 451 1340 1050
2871 2 2 7 11 452 1339 1049
2872 2 2 7 11 449 1337 1052
2873 2 2 7 11 487 1243 1499
2874 2 2 7 11 488 1241 1500
2875 2 2 7 11 485 1244 1497
2876 2 2 7 11 486 1242 1498
2877 2 2 7 11 283 1524 1238
2878 2 2 7 11 282 1521 1237
2879 2 2 7 11 281 1523 1239
2880 2 2 7 11 284 1522 1240
2881 2 2 7 11 193 1337 985
2882 2 2 7 11 194 1340 986
2883 2 2 7 11 196 1339 987
2884 2 2 7 11 195 1338 988
2885 2 2 7 11 553 991 1415
2886 2 2 7 11 555 992 1414
2887 2 2 7 11 554 990 1413
2888 2 2 7 11 556 989 1416
2889 2 2 7 11 345 1355 1114
2890 2 2 7 11 348 1353 1115
2891 2 2 7 11 346 1356 1113
2892 2 2 7 11 347 1354 1116
2893 2 2 7 11 507 1114 1355
2894 2 2 7 11 508 1113 1356
2895 2 2 7 11 506 1115 1353
2896 2 2 7 11 505 1116 1354
2897 2 2 7 11 272 1514 1283
2898 2 2 7 11 271 1513 1281
2899 2 2 7 11 270 1515 1284
2900 2 2 7 11 269 1516 1282
2901 2 2 7 11 492 1334 1384
2902 2 2 7 11 490 1333 1381
2903 2 2 7 11 489 1335 1382
2904 2 2 7 11 491 1336 1383
2905 2 2 7 11 250 975 1498
2906 2 2 7 11 252 973 1499
2907 2 2 7 11 249 976 1497
2908 2 2 7 11 251 974 1500
2909 2 2 7 11 475 977 1482
2910 2 2 7 11 473 978 1484
2911 2 2 7 11 474 980 1483
2912 2 2 7 11 476 979 1481
2913 2 2 7 11 207 1482 977
2914 2 2 7 11 206 1481 979
2915 2 2 7 11 208 1484 978
2916 2 2 7 11 205 1483 980
2917 2 2 7 11 535 1170 1428
2918 2 2 7 11 536 1171 1425
2919 2 2 7 11 534 1169 1426
2920 2 2 7 11 533 1172 1427
2921 2 2 7 11 200 1428 1170
2922 2 2 7 11 198 1425 1171
2923 2 2 7 11 197 1426 1169
2924 2 2 7 11 199 1427 1172
2925 2 2 7 11 314 1189 1388
2926 2 2 7 11 313 1190 1387
2927 2 2 7 11 315 1191 1385
2928 2 2 7 11 316 1192 1386
2929 2 2 7 11 542 1387 1190
2930 2 2 7 11 544 1388 1189
2931 2 2 7 11 541 1385 1191
2932 2 2 7 11 543 1386 1192
2933 2 2 7 11 453 1078 1315
2934 2 2 7 11 454 1077 1314
2935 2 2 7 11 455 1080 1313
2936 2 2 7 11 456 1079 1316
2937 2 2 7 11 1227 766 1444
2938 2 2 7 11 1225 765 1441
2939 2 2 7 11 1226 768 1443
2940 2 2 7 11 1228 767 1442
2941 2 2 7 11 326 1362 1275
2942 2 2 7 11 325 1361 1273
2943 2 2 7 11 328 1363 1274
2944 2 2 7 11 327 1364 1276
2945 2 2 7 11 565 1275 1362
2946 2 2 7 11 567 1276 1364
2947 2 2 7 11 566 1273 1361
2948 2 2 7 11 568 1274 1363
2949 2 2 7 11 426 1381 1039
2950 2 2 7 11 425 1382 1037
2951 2 2 7 11 427 1383 1038
2952 2 2 7 11 428 1384 1040
2953 2 2 7 11 535 1428 1053
2954 2 2 7 11 533 1427 1054
2955 2 2 7 11 536 1425 1056
2956 2 2 7 11 534 1426 1055
2957 2 2 7 11 397 1431 1129
2958 2 2 7 11 398 1429 1130
2959 2 2 7 11 399 1430 1131
2960 2 2 7 11 400 1432 1132
2961 2 2 7 11 492 1437 1057
2962 2 2 7 11 491 1439 1058
2963 2 2 7 11 489 1438 1059
2964 2 2 7 11 490 1440 1060
2965 2 2 7 11 493 1209 1309
2966 2 2 7 11 495 1211 1310
2967 2 2 7 11 494 1212 1311
2968 2 2 7 11 496 1210 1312
2969 2 2 7 11 265 1309 1209
2970 2 2 7 11 267 1310 1211
2971 2 2 7 11 266 1311 1212
2972 2 2 7 11 268 1312 1210
2973 2 2 7 11 616 1265 1409
2974 2 2 7 11 614 1267 1411
2975 2 2 7 11 615 1266 1412
2976 2 2 7 11 613 1268 1410
2977 2 2 7 11 254 1412 1266
2978 2 2 7 11 253 1411 1267
2979 2 2 7 11 256 1410 1268
2980 2 2 7 11 255 1409 1265
2981 2 2 7 11 623 1331 1298
2982 2 2 7 11 622 1332 1297
2983 2 2 7 11 621 1329 1299
2984 2 2 7 11 624 1330 1300
2985 2 2 7 11 797 1357 1481
2986 2 2 7 11 799 1359 1482
2987 2 2 7 11 798 1358 1483
2988 2 2 7 11 800 1360 1484
2989 2 2 7 11 693 1130 1429
2990 2 2 7 11 694 1131 1430
2991 2 2 7 11 695 1129 1431
2992 2 2 7 11 696 1132 1432
2993 2 2 7 11 773 1505 1121
2994 2 2 7 11 776 1508 1122
2995 2 2 7 11 775 1507 1124
2996 2 2 7 11 774 1506 1123
2997 2 2 7 11 753 1183 1451
2998 2 2 7 11 754 1184 1452
2999 2 2 7 11 756 1182 1450
3000 2 2 7 11 755 1181 1449
3001 2 2 7 11 222 1121 1505
3002 2 2 7 11 221 1123 1506
3003 2 2 7 11 223 1124 1507
3004 2 2 7 11 224 1122 1508
3005 2 2 7 11 616 1409 1454
3006 2 2 7 11 613 1410 1453
3007 2 2 7 11 614 1411 1455
3008 2 2 7 11 615 1412 1456
3009 2 2 7 11 525 1454 1409
3010 2 2 7 11 526 1453 1410
3011 2 2 7 11 527 1455 1411
3012 2 2 7 11 528 1456 1412
3013 2 2 7 11 515 1449 1181
3014 2 2 7 11 516 1450 1182
3015 2 2 7 11 513 1451 1183
3016 2 2 7 11 514 1452 1184
3017 2 2 7 11 470 1298 1331
3018 2 2 7 11 469 1297 1332
3019 2 2 7 11 471 1299 1329
3020 2 2 7 11 472 1300 1330
3021 2 2 7 11 593 1285 1390
3022 2 2 7 11 595 1286 1392
3023 2 2 7 11 594 1288 1389
3024 2 2 7 11 596 1287 1391
3025 2 2 7 11 570 1389 1288
3026 2 2 7 11 571 1392 1286
3027 2 2 7 11 572 1391 1287
3028 2 2 7 11 569 1390 1285
3029 2 2 7 11 219 1225 1441
3030 2 2 7 11 217 1226 1443
3031 2 2 7 11 220 1228 1442
3032 2 2 7 11 218 1227 1444
3033 2 2 7 11 612 1296 1540
3034 2 2 7 11 611 1295 1537
3035 2 2 7 11 610 1293 1539
3036 2 2 7 11 609 1294 1538
3037 2 2 7 11 635 1539 1293
3038 2 2 7 11 636 1540 1296
3039 2 2 7 11 633 1537 1295
3040 2 2 7 11 634 1538 1294
3041 2 2 7 11 186 1477 1486
3042 2 2 7 11 187 1479 1485
3043 2 2 7 11 188 1480 1487
3044 2 2 7 11 185 1478 1488
3045 2 2 7 11 628 1485 1479
3046 2 2 7 11 625 1486 1477
3047 2 2 7 11 626 1487 1480
3048 2 2 7 11 627 1488 1478
3049 2 2 7 11 475 1245 1504
3050 2 2 7 11 474 1247 1502
3051 2 2 7 11 473 1246 1503
3052 2 2 7 11 476 1248 1501
3053 2 2 7 11 193 1534 1289
3054 2 2 7 11 194 1533 1291
3055 2 2 7 11 196 1535 1290
3056 2 2 7 11 195 1536 1292
3057 2 2 7 11 851 1291 1533
3058 2 2 7 11 852 1290 1535
3059 2 2 7 11 849 1292 1536
3060 2 2 7 11 850 1289 1534
3061 2 2 7 11 474 1483 1358
3062 2 2 7 11 475 1482 1359
3063 2 2 7 11 476 1481 1357
3064 2 2 7 11 473 1484 1360
3065 2 2 7 11 573 1406 1473
3066 2 2 7 11 574 1407 1474
3067 2 2 7 11 576 1408 1476
3068 2 2 7 11 575 1405 1475
3069 2 2 7 11 100 1473 1406
3070 2 2 7 11 131 1474 1407
3071 2 2 7 11 38 1476 1408
3072 2 2 7 11 69 1475 1405
3073 2 2 7 11 575 1513 1436
3074 2 2 7 11 573 1515 1434
3075 2 2 7 11 574 1516 1435
3076 2 2 7 11 576 1514 1433
3077 2 2 7 11 558 1488 1494
3078 2 2 7 11 557 1485 1493
3079 2 2 7 11 560 1486 1496
3080 2 2 7 11 559 1487 1495
3081 2 2 7 11 625 1496 1486
3082 2 2 7 11 626 1495 1487
3083 2 2 7 11 628 1493 1485
3084 2 2 7 11 627 1494 1488
3085 2 2 7 11 272 1433 1514
3086 2 2 7 11 271 1436 1513
3087 2 2 7 11 270 1434 1515
3088 2 2 7 11 269 1435 1516
$EndElements


Revision-number: 33
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-25T18:40:15.823805Z
PROPS-END

Node-path: postprocessing/InterpolatorScalar.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 333
Text-content-md5: 8516a9492446c7919daa34717d99dc5e
Text-content-sha1: e38a1bc0239670eed5f5b29c83720c196a160a5f
Content-length: 343

PROPS-END
#include "InterpolatorScalar.h"
#include "Exception.h"

InterpolatorScalar::InterpolatorScalar(void){
  scalar = true;
}

InterpolatorScalar::~InterpolatorScalar(void){
}

std::vector<double>*
InterpolatorScalar::getNodeValue(void) const{
  if(!gotInterpolation)
    throw Exception("Field not interpolated");

  return nodeValue;
}


Node-path: postprocessing/InterpolatorScalar.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 755
Text-content-md5: 54a7c08719c3a30cefa9fb0f8abde2e4
Text-content-sha1: b5d38e0332a7991e14d89448418ddfca55cd5487
Content-length: 765

PROPS-END
#ifndef _INTERPOLATORSCALAR_H_
#define _INTERPOLATORSCALAR_H_

#include <vector>
#include "Interpolator.h"

/**
   @class InterpolatorScalar
   @brief Interpolator for scalar fields
   
   This an Interpolator for @em scalar fields.
   
   @note
   An InterpolatorScalar can't be instantiate (but descendant can)
*/

class InterpolatorScalar: public Interpolator{
 protected:
  std::vector<double>* nodeValue;

 public:
  virtual ~InterpolatorScalar(void);

  std::vector<double>* getNodeValue(void) const;

 protected:
  InterpolatorScalar(void);
};

/**
   @fn InterpolatorScalar::~InterpolatorScalar
   @return Deletes the InterpolatorScalar

   @fn InterpolatorScalar::getNodeValue
   @return Returns the interpolated 
   @em scalar field
 */

#endif


Node-path: postprocessing/InterpolatorVector.cpp
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 343
Text-content-md5: fb7e896689a2ac32a871c4a4895ab084
Text-content-sha1: a975e283d4a5dc3d32e2df4c3fa38a19f81d82a7
Content-length: 353

PROPS-END
#include "InterpolatorVector.h"
#include "Exception.h"

InterpolatorVector::InterpolatorVector(void){
  scalar = false;
}

InterpolatorVector::~InterpolatorVector(void){
}

std::vector<Vector<double>*>*
InterpolatorVector::getNodeValue(void) const{
  if(!gotInterpolation)
    throw Exception("Field not interpolated");

  return nodeValue;
}


Node-path: postprocessing/InterpolatorVector.h
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 800
Text-content-md5: 418442b7b2ea2a10d7ce2b7e348327f8
Text-content-sha1: b817f5c9c4c24831cb43a48965347d0351737859
Content-length: 810

PROPS-END
#ifndef _INTERPOLATORVECTOR_H_
#define _INTERPOLATORVECTOR_H_

#include <vector>
#include "Vector.h"
#include "Interpolator.h"

/**
   @class InterpolatorVector
   @brief Interpolator for vectorial fields
   
   This an Interpolator for @em vectorial fields.

   @note
   An InterpolatorVector can't be instantiate (but descendant can)
*/

class InterpolatorVector: public Interpolator{
 protected:
  std::vector<Vector<double>*>* nodeValue;

 public:
  virtual ~InterpolatorVector(void);

  std::vector<Vector<double>*>* getNodeValue(void) const;

 protected:
  InterpolatorVector(void);
};

/**
   @fn InterpolatorVector::~InterpolatorVector
   @return Deletes the InterpolatorVector

   @fn InterpolatorVector::getNodeValue
   @return Returns the interpolated 
   @em vectorial field
 */


#endif


Revision-number: 34
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-29T16:05:09.118827Z
PROPS-END

Node-path: Main.cpp
Node-kind: file
Node-action: change
Text-content-length: 854
Text-content-md5: 6c4929674cc6043060a9b3420cccad16
Text-content-sha1: 920dba0aea1f525cdbeb528112067ba60eddc4a8
Content-length: 854

#include <iostream>
#include "Mesh.h"
#include "Vector.h"
#include "FormulationLaplace.h"
#include "FormulationProjection.h"
#include "System.h"
#include "Solution.h"

using namespace std;

int main(int argc, char** argv){
  // Get Mesh //
  Mesh msh(argv[1]);
  

  // Laplace //
  FormulationLaplace laplace;
  System sysLaplace(msh.getAllNodeElements(), laplace);

  sysLaplace.fixBC(5, -2);
  sysLaplace.fixBC(6,  1);

  sysLaplace.solve();

  Solution solLaplace(msh, laplace);
  solLaplace.write("laplace.pos", "laplace");

    
  // Projection //
  Vector<double> f(2); 
  f(0) = -1; f(1) = 1; // Vector to project
  
  FormulationProjection projection(f);
  System sysProj(msh.getAllEdgeElements(), projection);

  sysProj.solve();
  
  Solution solProj(msh, projection);
  solProj.write("projection.pos", "projection");
      
  
  return 0;
}



Node-path: geometry/Jacobian.cpp
Node-kind: file
Node-action: change
Text-content-length: 1796
Text-content-md5: 6d7b1f37a25b92f76f13e276a8750cda
Text-content-sha1: 5cb64713f7292d755f8c04cf1119fd3c77275f14
Content-length: 1796

#include "Jacobian.h"

Jacobian::Jacobian(const std::vector<Node*>& nodes){
  nNode = nodes.size();
  
  nodeX = new double[nNode];
  nodeY = new double[nNode];
  nodeZ = new double[nNode];

  for(int i = 0; i < nNode; i++){
    nodeX[i] = nodes[i]->getX();
    nodeY[i] = nodes[i]->getY();
    nodeZ[i] = nodes[i]->getZ();
  }  

  dxdu = nodeX[1] - nodeX[0];
  dxdv = nodeX[2] - nodeX[0];
  dydu = nodeY[1] - nodeY[0];
  dydv = nodeY[2] - nodeY[0];
  
  detDxDu = (dxdu * dydv) - (dxdv * dydu);
  
  dudx = +dydv / detDxDu;
  dudy = -dxdv / detDxDu;
  dvdx = -dydu / detDxDu;
  dvdy = +dxdu / detDxDu; 
}

Jacobian::~Jacobian(void){
  delete[] nodeX;
  delete[] nodeY;
  delete[] nodeZ;
}

Vector<double> Jacobian::grad(const Vector<double>& gradUV) const{
  Vector<double> gradXY(2);
  
  gradXY(0) = gradUV(0) * dudx + gradUV(1) * dvdx;
  gradXY(1) = gradUV(0) * dudy + gradUV(1) * dvdy;    
  
  return gradXY;
}

Vector<double> Jacobian::invMap(const Vector<double>& XY) const{
  Vector<double> UV(2);
  
  UV(0) = (XY(0) - nodeX[0]) * dudx + (XY(1) - nodeY[0]) * dudy;
  UV(1) = (XY(0) - nodeX[0]) * dvdx + (XY(1) - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::invMap(const double x, const double y) const{
  Vector<double> UV(2);
  
  UV(0) = (x - nodeX[0]) * dudx + (y - nodeY[0]) * dudy;
  UV(1) = (x - nodeX[0]) * dvdx + (y - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::map(const Vector<double>& UV) const{
  Vector<double> XY(2);

  XY(0) = UV(0) * dxdu + UV(1) * dxdv + nodeX[0];
  XY(1) = UV(0) * dydu + UV(1) * dydv + nodeY[0];  

  return XY;
}

Vector<double> Jacobian::map(const double u, const double v) const{
  Vector<double> XY(2);

  XY(0) = u * dxdu + v * dxdv + nodeX[0];
  XY(1) = u * dydu + v * dydv + nodeY[0];  

  return XY;
}


Node-path: geometry/Jacobian.h
Node-kind: file
Node-action: change
Text-content-length: 2891
Text-content-md5: f49492f5ad36569f36c57937adb81642
Text-content-sha1: 64f0cdf2b7b15766656afa203c62a975af58ca36
Content-length: 2891

#ifndef _JACOBIAN_H_
#define _JACOBIAN_H_

#include <vector>
#include "Vector.h"
#include "Node.h"

/**
   @class Jacobian
   @brief Transformations between
   physical and reference spaces

   This class handles the transformations
   between physical and reference spaces.@n

   The @em pysical space is defined by:
   @li @c X and @c Y coordinates in @c 2D
   @li @c X, @c Y and @c Z coordinates in @c 3D

   The @em reference space is defined by:
   @li @c U and @c V coordinates in @c 2D
   @li @c U, @c V and @c W coordinates in @c 3D

   @todo
   Use a real Matrix to handle Jacobian%s
*/

class Jacobian{
 private:
  int nNode;

  double* nodeX;
  double* nodeY;
  double* nodeZ;

  double dxdu;
  double dxdv;
  double dydu;
  double dydv;

  double detDxDu;

  double dudx;
  double dudy;
  double dvdx;
  double dvdy;

 public:
   Jacobian(const std::vector<Node*>& nodes);
  ~Jacobian(void);

  double det(void) const;

  Vector<double> grad(const Vector<double>& gradUV) const;

  Vector<double> invMap(const Vector<double>& XY) const;
  Vector<double> invMap(const double x, const double y) const;

  Vector<double> map(const Vector<double>& UV) const;
  Vector<double> map(const double u, const double v) const;
};

/**
   @fn Jacobian::Jacobian
   @param nodes Node%s defining the geometry of the 
   @em physical element to transform (onto the 
   @em reference element)
   @return Returns a new Jacobian

   @fn Jacobian::~Jacobian
   @return Deletes this Jacobian

   @fn Jacobian::det
   @return Returns the determinant of the 
   transformation jacobian matrix

   @fn Jacobian::grad
   @param gradUV A gradient in the @em reference space
   @returns Returns the given gradient in the 
   @em physical space

   @fn Jacobian::invMap(const Vector<double>&) const
   @param XY A @c 2D Vector with the coordinates 
   of a point in the @em physical (@c 2D) space
   @returns Returns the coordiantes of the given point
   in the @em reference space

   @fn Jacobian::invMap(const double, const double) const
   @param x The @c X coordinate 
   of a point in the @em physical (@c 2D) space
   @param y The @c Y coordinate of the same point
   @returns Returns the coordiantes of the given point
   in the @em reference space

   @fn Jacobian::map(const Vector<double>&) const
   @param UV A @c 2D Vector with the coordinates 
   of a point in the @em reference (@c 2D) space
   @returns Returns the coordiantes of the given point
   in the @em physical space

   @fn Jacobian::map(const double, const double) const
   @param u The @c U coordinate 
   of a point in the @em reference (@c 2D) space
   @param v The @c V coordinate of the same point
   @returns Returns the coordiantes of the given point
   in the @em physical space
 */

//////////////////////
// Inline Functions //
//////////////////////

inline double Jacobian::det(void) const{
  return detDxDu;
}

#endif


Node-path: postprocessing/Solution.cpp
Node-kind: file
Node-action: change
Text-content-length: 2921
Text-content-md5: 3e44b4c1db6b6ebe42368095b279383a
Text-content-sha1: 90d54acda127a630098733a4239c48e1a18c3a5b
Content-length: 2921

#include "Solution.h"
#include "Exception.h"
#include "Formulation.h"
#include "InterpolatorScalar.h"
#include "InterpolatorVector.h"

using namespace std;

Solution::Solution(const Mesh& mesh, const Formulation& formulation){
  msh     = &mesh;
  element = &msh->getAllNodeElements();
  E       = msh->getNbNodeElement();
  node    = &msh->getAllNodes();
  N       = msh->getNbNode();
  
  interp = &(formulation.interpolator());
  interp->interpolate(mesh);

  if(interp->isScalar()){
    InterpolatorScalar& ic = 
      static_cast<InterpolatorScalar&>(*interp); 

    nodalVectorValue = NULL;
    nodalScalarValue = ic.getNodeValue(); 
  }
  
  else{
    InterpolatorVector& iv = 
      static_cast<InterpolatorVector&>(*interp); 

    nodalVectorValue = iv.getNodeValue();
    nodalScalarValue = NULL; 
 }
}

Solution::~Solution(void){
}

void Solution::write(const string fileName,
		     const string name) const{
  ofstream out;
  out.open(fileName.c_str());

  writeHeader(out);
  writeNodes(out);
  writeElements(out);
  writeNodalValues(out, 
		   interp->isScalar(),
		   name);  

  out.close();
}

void Solution::writeHeader(ofstream& out) const{
  out << "$MeshFormat" << endl;
  out << "2.2 0 8" << endl;
  out << "$EndMeshFormat" << endl; 
}

void Solution::writeNodes(ofstream& out) const{
  out << "$Nodes" << endl;
  out << N << endl;

  for(int i = 0; i < N; i++)
    out << (*node)[i]->getId() + 1 << " " 
	<< (*node)[i]->getX()      << " "
	<< (*node)[i]->getY()      << " "
	<< (*node)[i]->getZ()      << endl;
  
  out << "$EndNodes" << endl;
}

void Solution::writeElements(ofstream& out) const{
  out << "$Elements" << endl;
  out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "2 2 1 1" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++)
      out << (*element)[i]->getEntity(j).getId() + 1 << " ";
    out << endl;
  }

  out << "$EndElements" << endl;
}

void Solution::writeNodalValues(ofstream& out, 
				bool isScalar,
				const string name) const{
  out << "$ElementNodeData"   << endl
      << "1"                  << endl
      << "\"" << name << "\"" << endl
      << "1"                  << endl
      << "0"                  << endl
      << "3"                  << endl
      << "0"                  << endl;
    
  if(isScalar)
      out << "1" << endl;
  else
      out << "3" << endl;
    
    out << E << endl;
  
  for(int i = 0; i < E; i++){
    out << (*element)[i]->getId() + 1 << " " << "3" << " ";
    
    const int M = (*element)[i]->nEntity();
    for(int j = 0; j < M; j++){
      const int id = (*element)[i]->getEntity(j).getId();

      if(isScalar)
	out << (*nodalScalarValue)[id] << " ";
      else
	out << (*nodalVectorValue)[id]->get(0) << " "
	    << (*nodalVectorValue)[id]->get(1) << " "
	    << "0 ";
    }

    out << endl;
  }
  out << "$EndElementNodeData" << endl;
}


Node-path: postprocessing/Solution.h
Node-kind: file
Node-action: change
Text-content-length: 1781
Text-content-md5: a22ffb2462ea1dc463ee995421d64f14
Text-content-sha1: 91a50be36cbb23e66a23237eea157125a04f6aca
Content-length: 1781

#ifndef _SOLUTION_H_
#define _SOLUTION_H_

#include "Mesh.h"
#include "Formulation.h"
#include "Vector.h"

#include "Interpolator.h"

#include <fstream>
#include <string>
#include <vector>

/**
   @class Solution
   @brief Writes the solution of a problem

   This class writes the solution of a finite element
   problem in a @c .msh 
   (<a href="http://www.geuz.org/gmsh">gmsh</a>
   file format)
   file.@n

   The problem is defined by a Mesh and a Formulation.@n
   The solution is the given by the Mesh Entity values.@n
   The Entity type to use is given by the Formulation.

   @todo
   May be use a general 'Problem' class ??@n
   Allow multiple fields
*/

class Solution{
 private:
  const Mesh* msh;
  const std::vector<Element*>* element;
  const std::vector<Node*>*    node;
  int N;
  int E;

  Interpolator* interp;

  std::vector<double>* nodalScalarValue;
  const std::vector<Vector<double>*>* nodalVectorValue;

 public:
   Solution(const Mesh& mesh, const Formulation& formulation);
  ~Solution(void);

  void write(const std::string fileName,
	     const std::string name) const;

 private:
  void writeHeader(std::ofstream& out) const;
  void writeNodes(std::ofstream& out) const;
  void writeElements(std::ofstream& out) const;
  void writeNodalValues(std::ofstream& out, 
			bool isScalar,
			const std::string name) const;
};

/**
   @fn Solution::Solution
   @param mesh The Mesh to use
   @param formulation The Formulation to use
   @return Returns a new Solution with the given parameters

   @fn Solution::~Solution
   @return Deletes this Solution

   @fn Solution::write
   @param fileName The path to the @c .msh 
   to write the solution into
   @param name Name of the solution
   @return Writes the solution in the given @c .msh file
 */

#endif


Revision-number: 35
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-30T12:44:37.410649Z
PROPS-END

Node-path: common/Exception.cpp
Node-kind: file
Node-action: change
Text-content-length: 436
Text-content-md5: 4ffc8c58de0e196d5f3428880e9ad2aa
Text-content-sha1: 1cc32a0b4fca4fa9be48d0932ad84e5815a69efc
Content-length: 436

#include <cstdio>
#include "Exception.h"

Exception::Exception(const std::string format, ...){
  char    buf[256];
  va_list list;
  
  va_start(list, format);
  
  if(vsnprintf(buf, 256, format.c_str(), list) < 0)
    why = new std::string("Unknown Exception");

  else
    why = new std::string(buf);
}

Exception::~Exception(void) throw(){
  delete why;
}
  
const char* Exception::what(void) const throw(){
  return why->c_str();
}


Node-path: common/Exception.h
Node-kind: file
Node-action: change
Text-content-length: 984
Text-content-md5: 0b35fc2ce6b998eeb12be7845976cb9f
Text-content-sha1: 5c3ab62266440539e0bb18a98ab1120bb972ff6a
Content-length: 984

#ifndef _EXCEPTION_H_
#define _EXCEPTION_H_

#include <string>
#include <exception>
#include <cstdarg>

/**
   @class Exception
   @brief A general class for exceptions

   Exception is a general class for exceptions.@n

   An Exception is instantiated with a @em string.@n
   This string is used as a @em description 
   of the @em cause of the exception.
 */

class Exception: public std::exception{
 protected:
  std::string* why;
  
 public:
  Exception(const std::string format, ...);

  virtual ~Exception(void) throw();
  virtual const char* what(void) const throw();
};

/**
   @fn Exception::Exception(const std::string cause)
   @param format A @em formated string 
   of the @em cause of the exception
   @param ... The parameters of the formated string
   @return Instantiates a new Exception

   @fn Exception::~Exception(void)
   @return Deletes the Exception

   @fn const char* Exception::what(void) const
   @return Returns the @em cause of the exception
 */

#endif


Node-path: geometry/Jacobian.cpp
Node-kind: file
Node-action: change
Text-content-length: 2058
Text-content-md5: b441a036869ac7b86f49364b78a5e9a3
Text-content-sha1: e51725c736c46c131908c64f14f3bea543a8a92b
Content-length: 2058

#include "Jacobian.h"
#include "Exception.h"

Jacobian::Jacobian(const std::vector<Node*>& nodes){
  nNode = nodes.size();
  
  jac = new Matrix(3, 3);

  nodeX = new double[nNode];
  nodeY = new double[nNode];
  nodeZ = new double[nNode];

  for(int i = 0; i < nNode; i++){
    nodeX[i] = nodes[i]->getX();
    nodeY[i] = nodes[i]->getY();
    nodeZ[i] = nodes[i]->getZ();
  }  

  switch(nNode){
  case 3: triJac(); break;

  default: 
    throw Exception
      ("I can't compute the Jacobian of an Element with %d nodes",
       nNode);
  }
}

Jacobian::~Jacobian(void){
  delete[] nodeX;
  delete[] nodeY;
  delete[] nodeZ;
  delete   jac;
}

Vector<double> Jacobian::grad(const Vector<double>& gradUV) const{
  Vector<double> gradXY(2);
  
  gradXY(0) = gradUV(0) * dudx + gradUV(1) * dvdx;
  gradXY(1) = gradUV(0) * dudy + gradUV(1) * dvdy;    
  
  return gradXY;
}

Vector<double> Jacobian::invMap(const Vector<double>& XY) const{
  Vector<double> UV(2);
  
  UV(0) = (XY(0) - nodeX[0]) * dudx + (XY(1) - nodeY[0]) * dudy;
  UV(1) = (XY(0) - nodeX[0]) * dvdx + (XY(1) - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::invMap(const double x, const double y) const{
  Vector<double> UV(2);
  
  UV(0) = (x - nodeX[0]) * dudx + (y - nodeY[0]) * dudy;
  UV(1) = (x - nodeX[0]) * dvdx + (y - nodeY[0]) * dvdy;  
  
  return UV;
}

Vector<double> Jacobian::map(const Vector<double>& UV) const{
  Vector<double> XY(2);

  XY(0) = UV(0) * dxdu + UV(1) * dxdv + nodeX[0];
  XY(1) = UV(0) * dydu + UV(1) * dydv + nodeY[0];  

  return XY;
}

Vector<double> Jacobian::map(const double u, const double v) const{
  Vector<double> XY(2);

  XY(0) = u * dxdu + v * dxdv + nodeX[0];
  XY(1) = u * dydu + v * dydv + nodeY[0];  

  return XY;
}

void Jacobian::triJac(void){

  dxdu = nodeX[1] - nodeX[0];
  dxdv = nodeX[2] - nodeX[0];
  dydu = nodeY[1] - nodeY[0];
  dydv = nodeY[2] - nodeY[0];
  
  detDxDu = (dxdu * dydv) - (dxdv * dydu);
  
  dudx = +dydv / detDxDu;
  dudy = -dxdv / detDxDu;
  dvdx = -dydu / detDxDu;
  dvdy = +dxdu / detDxDu; 
}


Node-path: geometry/Jacobian.h
Node-kind: file
Node-action: change
Text-content-length: 2993
Text-content-md5: 3a2c0956cb3ee499a50fbbdde5eab59f
Text-content-sha1: d0426c175fd782b8d70cd5488592b65cd2325c40
Content-length: 2993

#ifndef _JACOBIAN_H_
#define _JACOBIAN_H_

#include <vector>
#include "Vector.h"
#include "Matrix.h"
#include "Node.h"

/**
   @class Jacobian
   @brief Transformations between
   physical and reference spaces

   This class handles the transformations
   between physical and reference spaces.@n

   The @em pysical space is defined by:
   @li @c X and @c Y coordinates in @c 2D
   @li @c X, @c Y and @c Z coordinates in @c 3D

   The @em reference space is defined by:
   @li @c U and @c V coordinates in @c 2D
   @li @c U, @c V and @c W coordinates in @c 3D

   @todo
   Use a real Matrix to handle Jacobian%s
*/

class Jacobian{
 private:
  int nNode;

  double* nodeX;
  double* nodeY;
  double* nodeZ;

  Matrix* jac; // From Ref. Space to Phys. Space

  double dxdu;
  double dxdv;
  double dydu;
  double dydv;

  double detDxDu;

  double dudx;
  double dudy;
  double dvdx;
  double dvdy;

 public:
   Jacobian(const std::vector<Node*>& nodes);
  ~Jacobian(void);

  double det(void) const;

  Vector<double> grad(const Vector<double>& gradUV) const;

  Vector<double> invMap(const Vector<double>& XY) const;
  Vector<double> invMap(const double x, const double y) const;

  Vector<double> map(const Vector<double>& UV) const;
  Vector<double> map(const double u, const double v) const;

 private:
  void triJac(void);
};

/**
   @fn Jacobian::Jacobian
   @param nodes Node%s defining the geometry of the 
   @em physical element to transform (onto the 
   @em reference element)
   @return Returns a new Jacobian

   @fn Jacobian::~Jacobian
   @return Deletes this Jacobian

   @fn Jacobian::det
   @return Returns the determinant of the 
   transformation jacobian matrix

   @fn Jacobian::grad
   @param gradUV A gradient in the @em reference space
   @returns Returns the given gradient in the 
   @em physical space

   @fn Jacobian::invMap(const Vector<double>&) const
   @param XY A @c 2D Vector with the coordinates 
   of a point in the @em physical (@c 2D) space
   @returns Returns the coordiantes of the given point
   in the @em reference space

   @fn Jacobian::invMap(const double, const double) const
   @param x The @c X coordinate 
   of a point in the @em physical (@c 2D) space
   @param y The @c Y coordinate of the same point
   @returns Returns the coordiantes of the given point
   in the @em reference space

   @fn Jacobian::map(const Vector<double>&) const
   @param UV A @c 2D Vector with the coordinates 
   of a point in the @em reference (@c 2D) space
   @returns Returns the coordiantes of the given point
   in the @em physical space

   @fn Jacobian::map(const double, const double) const
   @param u The @c U coordinate 
   of a point in the @em reference (@c 2D) space
   @param v The @c V coordinate of the same point
   @returns Returns the coordiantes of the given point
   in the @em physical space
 */

//////////////////////
// Inline Functions //
//////////////////////

inline double Jacobian::det(void) const{
  return detDxDu;
}

#endif


Node-path: tests/quad.geo
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 451
Text-content-md5: 4f833be6b72b3109207b63325140c41e
Text-content-sha1: 5923805e94ea209cb1d6014d3b0d0929f5d2755f
Content-length: 461

PROPS-END
msh = 10;
cl = 1.5;

l = 1;

Point(1) = {+l, -l, 0, cl};
Point(2) = {+l, +l, 0, cl};
Point(3) = {-l, +l, 0, cl};
Point(4) = {-l, -l, 0, cl};

Line(1) = {1, 2};
Line(2) = {2, 3};
Line(3) = {3, 4};
Line(4) = {4, 1};

Line Loop(1) = {1, 2, 3, 4};

Plane Surface(1) = {1};

Transfinite Line {1, 2, 3, 4} = msh Using Progression 1;
Transfinite Surface {1};
Recombine Surface {1};

Physical Line(5) = {3};
Physical Line(6) = {1};
Physical Surface(7) = {1};


Node-path: tests/quad.msh
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 5918
Text-content-md5: 47ec444bea7470c91b90cec6ca90fd8f
Text-content-sha1: 38b4f0fb1b4a78281b48105784d148f431fd8975
Content-length: 5928

PROPS-END
$MeshFormat
2.2 0 8
$EndMeshFormat
$Nodes
100
1 1 -1 0
2 1 1 0
3 -1 1 0
4 -1 -1 0
5 1 -0.7777777777783945 0
6 1 -0.5555555555567891 0
7 1 -0.3333333333349524 0
8 1 -0.1111111111130386 0
9 1 0.1111111111091836 0
10 1 0.3333333333317141 0
11 1 0.5555555555543217 0
12 1 0.7777777777771608 0
13 0.7777777777783945 1 0
14 0.5555555555567891 1 0
15 0.3333333333349524 1 0
16 0.1111111111130386 1 0
17 -0.1111111111091836 1 0
18 -0.3333333333317141 1 0
19 -0.5555555555543217 1 0
20 -0.7777777777771608 1 0
21 -1 0.7777777777783945 0
22 -1 0.5555555555567891 0
23 -1 0.3333333333349524 0
24 -1 0.1111111111130386 0
25 -1 -0.1111111111091836 0
26 -1 -0.3333333333317141 0
27 -1 -0.5555555555543217 0
28 -1 -0.7777777777771608 0
29 -0.7777777777783945 -1 0
30 -0.5555555555567891 -1 0
31 -0.3333333333349524 -1 0
32 -0.1111111111130386 -1 0
33 0.1111111111091836 -1 0
34 0.3333333333317141 -1 0
35 0.5555555555543217 -1 0
36 0.7777777777771608 -1 0
37 0.7777777777772978 -0.7777777777782575 0
38 0.5555555555545958 -0.7777777777781202 0
39 0.333333333332074 -0.7777777777779833 0
40 0.1111111111096119 -0.7777777777778461 0
41 -0.1111111111126103 -0.7777777777777093 0
42 -0.3333333333345926 -0.7777777777775721 0
43 -0.555555555556515 -0.7777777777774351 0
44 -0.7777777777782575 -0.7777777777772981 0
45 0.7777777777774348 -0.5555555555565149 0
46 0.5555555555548701 -0.5555555555562408 0
47 0.3333333333324336 -0.5555555555559666 0
48 0.1111111111100402 -0.5555555555556926 0
49 -0.111111111112182 -0.5555555555554184 0
50 -0.3333333333342328 -0.555555555555144 0
51 -0.5555555555562408 -0.5555555555548699 0
52 -0.7777777777781204 -0.5555555555545959 0
53 0.7777777777775721 -0.3333333333345926 0
54 0.5555555555551441 -0.3333333333342328 0
55 0.3333333333327936 -0.333333333333873 0
56 0.1111111111104686 -0.3333333333335131 0
57 -0.1111111111117536 -0.3333333333331534 0
58 -0.333333333333873 -0.3333333333327936 0
59 -0.5555555555559666 -0.3333333333324338 0
60 -0.7777777777779833 -0.333333333332074 0
61 0.7777777777777091 -0.1111111111126103 0
62 0.5555555555554181 -0.111111111112182 0
63 0.3333333333331534 -0.1111111111117536 0
64 0.1111111111108969 -0.1111111111113253 0
65 -0.1111111111113253 -0.1111111111108969 0
66 -0.3333333333335132 -0.1111111111104686 0
67 -0.5555555555556926 -0.1111111111100402 0
68 -0.7777777777778461 -0.1111111111096119 0
69 0.7777777777778463 0.1111111111096119 0
70 0.5555555555556926 0.1111111111100403 0
71 0.3333333333335132 0.1111111111104686 0
72 0.1111111111113252 0.1111111111108969 0
73 -0.1111111111108969 0.1111111111113252 0
74 -0.3333333333331534 0.1111111111117536 0
75 -0.5555555555554184 0.1111111111121819 0
76 -0.7777777777777093 0.1111111111126102 0
77 0.7777777777779833 0.3333333333320739 0
78 0.5555555555559666 0.3333333333324337 0
79 0.3333333333338729 0.3333333333327935 0
80 0.1111111111117536 0.3333333333331535 0
81 -0.1111111111104686 0.3333333333335131 0
82 -0.3333333333327936 0.333333333333873 0
83 -0.5555555555551441 0.3333333333342328 0
84 -0.7777777777775721 0.3333333333345926 0
85 0.7777777777781203 0.5555555555545957 0
86 0.5555555555562407 0.5555555555548699 0
87 0.3333333333342327 0.5555555555551441 0
88 0.111111111112182 0.5555555555554184 0
89 -0.1111111111100402 0.5555555555556926 0
90 -0.3333333333324338 0.5555555555559666 0
91 -0.5555555555548701 0.5555555555562408 0
92 -0.7777777777774351 0.555555555556515 0
93 0.7777777777782575 0.7777777777772978 0
94 0.5555555555565149 0.777777777777435 0
95 0.3333333333345927 0.7777777777775721 0
96 0.1111111111126103 0.7777777777777093 0
97 -0.1111111111096119 0.7777777777778462 0
98 -0.3333333333320739 0.7777777777779833 0
99 -0.5555555555545959 0.7777777777781203 0
100 -0.7777777777772981 0.7777777777782573 0
$EndNodes
$Elements
99
1 1 2 6 1 1 5
2 1 2 6 1 5 6
3 1 2 6 1 6 7
4 1 2 6 1 7 8
5 1 2 6 1 8 9
6 1 2 6 1 9 10
7 1 2 6 1 10 11
8 1 2 6 1 11 12
9 1 2 6 1 12 2
10 1 2 5 3 3 21
11 1 2 5 3 21 22
12 1 2 5 3 22 23
13 1 2 5 3 23 24
14 1 2 5 3 24 25
15 1 2 5 3 25 26
16 1 2 5 3 26 27
17 1 2 5 3 27 28
18 1 2 5 3 28 4
19 3 2 7 1 1 5 37 36
20 3 2 7 1 36 37 38 35
21 3 2 7 1 35 38 39 34
22 3 2 7 1 34 39 40 33
23 3 2 7 1 33 40 41 32
24 3 2 7 1 32 41 42 31
25 3 2 7 1 31 42 43 30
26 3 2 7 1 30 43 44 29
27 3 2 7 1 29 44 28 4
28 3 2 7 1 5 6 45 37
29 3 2 7 1 37 45 46 38
30 3 2 7 1 38 46 47 39
31 3 2 7 1 39 47 48 40
32 3 2 7 1 40 48 49 41
33 3 2 7 1 41 49 50 42
34 3 2 7 1 42 50 51 43
35 3 2 7 1 43 51 52 44
36 3 2 7 1 44 52 27 28
37 3 2 7 1 6 7 53 45
38 3 2 7 1 45 53 54 46
39 3 2 7 1 46 54 55 47
40 3 2 7 1 47 55 56 48
41 3 2 7 1 48 56 57 49
42 3 2 7 1 49 57 58 50
43 3 2 7 1 50 58 59 51
44 3 2 7 1 51 59 60 52
45 3 2 7 1 52 60 26 27
46 3 2 7 1 7 8 61 53
47 3 2 7 1 53 61 62 54
48 3 2 7 1 54 62 63 55
49 3 2 7 1 55 63 64 56
50 3 2 7 1 56 64 65 57
51 3 2 7 1 57 65 66 58
52 3 2 7 1 58 66 67 59
53 3 2 7 1 59 67 68 60
54 3 2 7 1 60 68 25 26
55 3 2 7 1 8 9 69 61
56 3 2 7 1 61 69 70 62
57 3 2 7 1 62 70 71 63
58 3 2 7 1 63 71 72 64
59 3 2 7 1 64 72 73 65
60 3 2 7 1 65 73 74 66
61 3 2 7 1 66 74 75 67
62 3 2 7 1 67 75 76 68
63 3 2 7 1 68 76 24 25
64 3 2 7 1 9 10 77 69
65 3 2 7 1 69 77 78 70
66 3 2 7 1 70 78 79 71
67 3 2 7 1 71 79 80 72
68 3 2 7 1 72 80 81 73
69 3 2 7 1 73 81 82 74
70 3 2 7 1 74 82 83 75
71 3 2 7 1 75 83 84 76
72 3 2 7 1 76 84 23 24
73 3 2 7 1 10 11 85 77
74 3 2 7 1 77 85 86 78
75 3 2 7 1 78 86 87 79
76 3 2 7 1 79 87 88 80
77 3 2 7 1 80 88 89 81
78 3 2 7 1 81 89 90 82
79 3 2 7 1 82 90 91 83
80 3 2 7 1 83 91 92 84
81 3 2 7 1 84 92 22 23
82 3 2 7 1 11 12 93 85
83 3 2 7 1 85 93 94 86
84 3 2 7 1 86 94 95 87
85 3 2 7 1 87 95 96 88
86 3 2 7 1 88 96 97 89
87 3 2 7 1 89 97 98 90
88 3 2 7 1 90 98 99 91
89 3 2 7 1 91 99 100 92
90 3 2 7 1 92 100 21 22
91 3 2 7 1 12 2 13 93
92 3 2 7 1 93 13 14 94
93 3 2 7 1 94 14 15 95
94 3 2 7 1 95 15 16 96
95 3 2 7 1 96 16 17 97
96 3 2 7 1 97 17 18 98
97 3 2 7 1 98 18 19 99
98 3 2 7 1 99 19 20 100
99 3 2 7 1 100 20 3 21
$EndElements


Revision-number: 36
Prop-content-length: 101
Content-length: 101

K 7
svn:log
V 0

K 10
svn:author
V 7
nicolas
K 8
svn:date
V 27
2012-05-31T16:12:13.303015Z
PROPS-END

Node-path: assembler/System.h
Node-kind: file
Node-action: change
Text-content-length: 2379
Text-content-md5: 35533c6480c41207a2c17c01af48838f
Text-content-sha1: 64d521564179f75daf6a1b2b09f9a2661d1ef0c0
Content-length: 2379

#ifndef _SYSTEM_H_
#define _SYSTEM_H_

#include "Matrix.h"
#include "Vector.h"
#include "Mesh.h"
#include "Jacobian.h"
#include "DofManager.h"
#include "Formulation.h"

/**
   @class System
   @brief This class assembles a linear system

   This class assembles the linear system, that comes from a Formulation 
   and a list of Element%s.@n
  
   @warning
   Up to now, the assembly is done when the System is instantiated@n
   Also, we can @em only assemble Dof related to an Element@n

   @todo
   Assembly done by a specific method, not the constructor@n
   Assembly of @em non @em geometric Dof@n
   Maybe put the list of element on the formulation ? 
   Or more abstract concept -- 'Problem' Class ?@n
   Give the possiblite to get the solution Vector instead of setting 
   Entity values
 */

class System{
 private:
  Matrix* A;
  Vector<double>* n;
  int size;

  DofManager* dofM;
  const Formulation* formulation;

 public:
   System(const std::vector<Element*>& elements, 
	  const Formulation& formulation);
  ~System(void);

  Matrix& getMatrix(void) const;
  Vector<double>& getRHS(void) const;

  void fixBC(const int physicalId, const double value);
  void solve(void);
  
 private:
  void assemble(GroupOfDof& group);
};


/**
   @fn System::System(const std::vector<Element*>& elements, 
   const Formulation& formulation)
   @param elements A list of Element%s, giving the geomtry of the problem to solve
   @param formulation A Formulation, giving the way to assemble the system
   @return A new @em assembled System
 
   @fn System::~System(void)
   @return Deletes the System

   @fn Matrix& System::getMatrix(void) const
   @return Returns the assembled matrix of the the linear system

   @fn Vector<double>& System::getRHS(void) const
   @return Returns the assembled Right Hand Side of the the linear system

   @fn void System::fixBC(const int physicalId, const double value)
   @param physicalId The physical @c ID on which the bondary condtion shall be imposed
   @param value The value of the bondary condition
   @return Fix a Boundary Condition on the linear system

   @fn void System::solve(void)
   @return Solves the linear system
*/

//////////////////////
// Inline Functions //
//////////////////////


inline Matrix& System::getMatrix(void) const{
  return *A;
}

inline Vector<double>& System::getRHS(void) const{
  return *n;
}

#endif


Node-path: doc/Doxyfile
Node-kind: file
Node-action: change
Text-content-length: 77756
Text-content-md5: 0db81d7893635e088b733c4d8902c20c
Text-content-sha1: f03f40401c7039f975fb4d4c3b1168746c17ae6b
Content-length: 77756

# Doxyfile 1.8.1

# This file describes the settings to be used by the documentation system
# doxygen (www.doxygen.org) for a project.
#
# All text after a hash (#) is considered a comment and will be ignored.
# The format is:
#       TAG = value [value, ...]
# For lists items can also be appended using:
#       TAG += value [value, ...]
# Values that contain spaces should be placed between quotes (" ").

#---------------------------------------------------------------------------
# Project related configuration options
#---------------------------------------------------------------------------

# This tag specifies the encoding used for all characters in the config file
# that follow. The default is UTF-8 which is also the encoding used for all
# text before the first occurrence of this tag. Doxygen uses libiconv (or the
# iconv built into libc) for the transcoding. See
# http://www.gnu.org/software/libiconv for the list of possible encodings.

DOXYFILE_ENCODING      = UTF-8

# The PROJECT_NAME tag is a single word (or sequence of words) that should
# identify the project. Note that if you do not use Doxywizard you need
# to put quotes around the project name if it contains spaces.

PROJECT_NAME           = "Small FEM"

# The PROJECT_NUMBER tag can be used to enter a project or revision number.
# This could be handy for archiving the generated documentation or
# if some version control system is used.

PROJECT_NUMBER         =

# Using the PROJECT_BRIEF tag one can provide an optional one line description
# for a project that appears at the top of each page and should give viewer
# a quick idea about the purpose of the project. Keep the description short.

PROJECT_BRIEF          =

# With the PROJECT_LOGO tag one can specify an logo or icon that is
# included in the documentation. The maximum height of the logo should not
# exceed 55 pixels and the maximum width should not exceed 200 pixels.
# Doxygen will copy the logo to the output directory.

PROJECT_LOGO           =

# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)
# base path where the generated documentation will be put.
# If a relative path is entered, it will be relative to the location
# where doxygen was started. If left blank the current directory will be used.

OUTPUT_DIRECTORY       = /home/nicolas/projects/small_fem/doc

# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create
# 4096 sub-directories (in 2 levels) under the output directory of each output
# format and will distribute the generated files over these directories.
# Enabling this option can be useful when feeding doxygen a huge amount of
# source files, where putting all generated files in the same directory would
# otherwise cause performance problems for the file system.

CREATE_SUBDIRS         = NO

# The OUTPUT_LANGUAGE tag is used to specify the language in which all
# documentation generated by doxygen is written. Doxygen will use this
# information to generate all constant output in the proper language.
# The default language is English, other supported languages are:
# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,
# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,
# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English
# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,
# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak,
# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.

OUTPUT_LANGUAGE        = English

# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will
# include brief member descriptions after the members that are listed in
# the file and class documentation (similar to JavaDoc).
# Set to NO to disable this.

BRIEF_MEMBER_DESC      = NO

# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend
# the brief description of a member or function before the detailed description.
# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the
# brief descriptions will be completely suppressed.

REPEAT_BRIEF           = NO

# This tag implements a quasi-intelligent brief description abbreviator
# that is used to form the text in various listings. Each string
# in this list, if found as the leading text of the brief description, will be
# stripped from the text and the result after processing the whole list, is
# used as the annotated text. Otherwise, the brief description is used as-is.
# If left blank, the following values are used ("$name" is automatically
# replaced with the name of the entity): "The $name class" "The $name widget"
# "The $name file" "is" "provides" "specifies" "contains"
# "represents" "a" "an" "the"

ABBREVIATE_BRIEF       = "The $name class" \
                         "The $name widget" \
                         "The $name file" \
                         is \
                         provides \
                         specifies \
                         contains \
                         represents \
                         a \
                         an \
                         the

# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then
# Doxygen will generate a detailed section even if there is only a brief
# description.

ALWAYS_DETAILED_SEC    = NO

# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all
# inherited members of a class in the documentation of that class as if those
# members were ordinary class members. Constructors, destructors and assignment
# operators of the base classes will not be shown.

INLINE_INHERITED_MEMB  = YES

# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full
# path before files name in the file list and in the header files. If set
# to NO the shortest path that makes the file name unique will be used.

FULL_PATH_NAMES        = NO

# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag
# can be used to strip a user-defined part of the path. Stripping is
# only done if one of the specified strings matches the left-hand part of
# the path. The tag can be used to show relative paths in the file list.
# If left blank the directory from which doxygen is run is used as the
# path to strip.

STRIP_FROM_PATH        =

# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of
# the path mentioned in the documentation of a class, which tells
# the reader which header file to include in order to use a class.
# If left blank only the name of the header file containing the class
# definition is used. Otherwise one should specify the include paths that
# are normally passed to the compiler using the -I flag.

STRIP_FROM_INC_PATH    =

# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter
# (but less readable) file names. This can be useful if your file system
# doesn't support long names like on DOS, Mac, or CD-ROM.

SHORT_NAMES            = NO

# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen
# will interpret the first line (until the first dot) of a JavaDoc-style
# comment as the brief description. If set to NO, the JavaDoc
# comments will behave just like regular Qt-style comments
# (thus requiring an explicit @brief command for a brief description.)

JAVADOC_AUTOBRIEF      = NO

# If the QT_AUTOBRIEF tag is set to YES then Doxygen will
# interpret the first line (until the first dot) of a Qt-style
# comment as the brief description. If set to NO, the comments
# will behave just like regular Qt-style comments (thus requiring
# an explicit \brief command for a brief description.)

QT_AUTOBRIEF           = NO

# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen
# treat a multi-line C++ special comment block (i.e. a block of //! or ///
# comments) as a brief description. This used to be the default behaviour.
# The new default is to treat a multi-line C++ comment block as a detailed
# description. Set this tag to YES if you prefer the old behaviour instead.

MULTILINE_CPP_IS_BRIEF = NO

# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented
# member inherits the documentation from any documented member that it
# re-implements.

INHERIT_DOCS           = YES

# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce
# a new page for each member. If set to NO, the documentation of a member will
# be part of the file/class/namespace that contains it.

SEPARATE_MEMBER_PAGES  = NO

# The TAB_SIZE tag can be used to set the number of spaces in a tab.
# Doxygen uses this value to replace tabs by spaces in code fragments.

TAB_SIZE               = 8

# This tag can be used to specify a number of aliases that acts
# as commands in the documentation. An alias has the form "name=value".
# For example adding "sideeffect=\par Side Effects:\n" will allow you to
# put the command \sideeffect (or @sideeffect) in the documentation, which
# will result in a user-defined paragraph with heading "Side Effects:".
# You can put \n's in the value part of an alias to insert newlines.

ALIASES                =

# This tag can be used to specify a number of word-keyword mappings (TCL only).
# A mapping has the form "name=value". For example adding
# "class=itcl::class" will allow you to use the command class in the
# itcl::class meaning.

TCL_SUBST              =

# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C
# sources only. Doxygen will then generate output that is more tailored for C.
# For instance, some of the names that are used will be different. The list
# of all members will be omitted, etc.

OPTIMIZE_OUTPUT_FOR_C  = NO

# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java
# sources only. Doxygen will then generate output that is more tailored for
# Java. For instance, namespaces will be presented as packages, qualified
# scopes will look different, etc.

OPTIMIZE_OUTPUT_JAVA   = NO

# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran
# sources only. Doxygen will then generate output that is more tailored for
# Fortran.

OPTIMIZE_FOR_FORTRAN   = NO

# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL
# sources. Doxygen will then generate output that is tailored for
# VHDL.

OPTIMIZE_OUTPUT_VHDL   = NO

# Doxygen selects the parser to use depending on the extension of the files it
# parses. With this tag you can assign which parser to use for a given extension.
# Doxygen has a built-in mapping, but you can override or extend it using this
# tag. The format is ext=language, where ext is a file extension, and language
# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C,
# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make
# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C
# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions
# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.

EXTENSION_MAPPING      =

# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all
# comments according to the Markdown format, which allows for more readable
# documentation. See http://daringfireball.net/projects/markdown/ for details.
# The output of markdown processing is further processed by doxygen, so you
# can mix doxygen, HTML, and XML commands with Markdown formatting.
# Disable only in case of backward compatibilities issues.

MARKDOWN_SUPPORT       = YES

# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want
# to include (a tag file for) the STL sources as input, then you should
# set this tag to YES in order to let doxygen match functions declarations and
# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.
# func(std::string) {}). This also makes the inheritance and collaboration
# diagrams that involve STL classes more complete and accurate.

BUILTIN_STL_SUPPORT    = NO

# If you use Microsoft's C++/CLI language, you should set this option to YES to
# enable parsing support.

CPP_CLI_SUPPORT        = NO

# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.
# Doxygen will parse them like normal C++ but will assume all classes use public
# instead of private inheritance when no explicit protection keyword is present.

SIP_SUPPORT            = NO

# For Microsoft's IDL there are propget and propput attributes to indicate getter
# and setter methods for a property. Setting this option to YES (the default)
# will make doxygen replace the get and set methods by a property in the
# documentation. This will only work if the methods are indeed getting or
# setting a simple type. If this is not the case, or you want to show the
# methods anyway, you should set this option to NO.

IDL_PROPERTY_SUPPORT   = NO

# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC
# tag is set to YES, then doxygen will reuse the documentation of the first
# member in the group (if any) for the other members of the group. By default
# all members of a group must be documented explicitly.

DISTRIBUTE_GROUP_DOC   = NO

# Set the SUBGROUPING tag to YES (the default) to allow class member groups of
# the same type (for instance a group of public functions) to be put as a
# subgroup of that type (e.g. under the Public Functions section). Set it to
# NO to prevent subgrouping. Alternatively, this can be done per class using
# the \nosubgrouping command.

SUBGROUPING            = YES

# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and
# unions are shown inside the group in which they are included (e.g. using
# @ingroup) instead of on a separate page (for HTML and Man pages) or
# section (for LaTeX and RTF).

INLINE_GROUPED_CLASSES = NO

# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and
# unions with only public data fields will be shown inline in the documentation
# of the scope in which they are defined (i.e. file, namespace, or group
# documentation), provided this scope is documented. If set to NO (the default),
# structs, classes, and unions are shown on a separate page (for HTML and Man
# pages) or section (for LaTeX and RTF).

INLINE_SIMPLE_STRUCTS  = NO

# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum
# is documented as struct, union, or enum with the name of the typedef. So
# typedef struct TypeS {} TypeT, will appear in the documentation as a struct
# with name TypeT. When disabled the typedef will appear as a member of a file,
# namespace, or class. And the struct will be named TypeS. This can typically
# be useful for C code in case the coding convention dictates that all compound
# types are typedef'ed and only the typedef is referenced, never the tag name.

TYPEDEF_HIDES_STRUCT   = NO

# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to
# determine which symbols to keep in memory and which to flush to disk.
# When the cache is full, less often used symbols will be written to disk.
# For small to medium size projects (<1000 input files) the default value is
# probably good enough. For larger projects a too small cache size can cause
# doxygen to be busy swapping symbols to and from disk most of the time
# causing a significant performance penalty.
# If the system has enough physical memory increasing the cache will improve the
# performance by keeping more symbols in memory. Note that the value works on
# a logarithmic scale so increasing the size by one will roughly double the
# memory usage. The cache size is given by this formula:
# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,
# corresponding to a cache size of 2^16 = 65536 symbols.

SYMBOL_CACHE_SIZE      = 0

# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be
# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given
# their name and scope. Since this can be an expensive process and often the
# same symbol appear multiple times in the code, doxygen keeps a cache of
# pre-resolved symbols. If the cache is too small doxygen will become slower.
# If the cache is too large, memory is wasted. The cache size is given by this
# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0,
# corresponding to a cache size of 2^16 = 65536 symbols.

LOOKUP_CACHE_SIZE      = 0

#---------------------------------------------------------------------------
# Build related configuration options
#---------------------------------------------------------------------------

# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in
# documentation are documented, even if no documentation was available.
# Private class members and static file members will be hidden unless
# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES

EXTRACT_ALL            = NO

# If the EXTRACT_PRIVATE tag is set to YES all private members of a class
# will be included in the documentation.

EXTRACT_PRIVATE        = NO

# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal scope will be included in the documentation.

EXTRACT_PACKAGE        = NO

# If the EXTRACT_STATIC tag is set to YES all static members of a file
# will be included in the documentation.

EXTRACT_STATIC         = NO

# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)
# defined locally in source files will be included in the documentation.
# If set to NO only classes defined in header files are included.

EXTRACT_LOCAL_CLASSES  = NO

# This flag is only useful for Objective-C code. When set to YES local
# methods, which are defined in the implementation section but not in
# the interface are included in the documentation.
# If set to NO (the default) only methods in the interface are included.

EXTRACT_LOCAL_METHODS  = NO

# If this flag is set to YES, the members of anonymous namespaces will be
# extracted and appear in the documentation as a namespace called
# 'anonymous_namespace{file}', where file will be replaced with the base
# name of the file that contains the anonymous namespace. By default
# anonymous namespaces are hidden.

EXTRACT_ANON_NSPACES   = NO

# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all
# undocumented members of documented classes, files or namespaces.
# If set to NO (the default) these members will be included in the
# various overviews, but no documentation section is generated.
# This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_MEMBERS     = YES

# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all
# undocumented classes that are normally visible in the class hierarchy.
# If set to NO (the default) these classes will be included in the various
# overviews. This option has no effect if EXTRACT_ALL is enabled.

HIDE_UNDOC_CLASSES     = NO

# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all
# friend (class|struct|union) declarations.
# If set to NO (the default) these declarations will be included in the
# documentation.

HIDE_FRIEND_COMPOUNDS  = YES

# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any
# documentation blocks found inside the body of a function.
# If set to NO (the default) these blocks will be appended to the
# function's detailed documentation block.

HIDE_IN_BODY_DOCS      = NO

# The INTERNAL_DOCS tag determines if documentation
# that is typed after a \internal command is included. If the tag is set
# to NO (the default) then the documentation will be excluded.
# Set it to YES to include the internal documentation.

INTERNAL_DOCS          = NO

# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate
# file names in lower-case letters. If set to YES upper-case letters are also
# allowed. This is useful if you have classes or files whose names only differ
# in case and if your file system supports case sensitive file names. Windows
# and Mac users are advised to set this option to NO.

CASE_SENSE_NAMES       = NO

# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen
# will show members with their full class and namespace scopes in the
# documentation. If set to YES the scope will be hidden.

HIDE_SCOPE_NAMES       = NO

# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen
# will put a list of the files that are included by a file in the documentation
# of that file.

SHOW_INCLUDE_FILES     = NO

# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen
# will list include files with double quotes in the documentation
# rather than with sharp brackets.

FORCE_LOCAL_INCLUDES   = NO

# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]
# is inserted in the documentation for inline members.

INLINE_INFO            = NO

# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen
# will sort the (detailed) documentation of file and class members
# alphabetically by member name. If set to NO the members will appear in
# declaration order.

SORT_MEMBER_DOCS       = NO

# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the
# brief documentation of file, namespace and class members alphabetically
# by member name. If set to NO (the default) the members will appear in
# declaration order.

SORT_BRIEF_DOCS        = NO

# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen
# will sort the (brief and detailed) documentation of class members so that
# constructors and destructors are listed first. If set to NO (the default)
# the constructors will appear in the respective orders defined by
# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS.
# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO
# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.

SORT_MEMBERS_CTORS_1ST = NO

# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the
# hierarchy of group names into alphabetical order. If set to NO (the default)
# the group names will appear in their defined order.

SORT_GROUP_NAMES       = NO

# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be
# sorted by fully-qualified names, including namespaces. If set to
# NO (the default), the class list will be sorted only by class name,
# not including the namespace part.
# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.
# Note: This option applies only to the class list, not to the
# alphabetical list.

SORT_BY_SCOPE_NAME     = NO

# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to
# do proper type resolution of all parameters of a function it will reject a
# match between the prototype and the implementation of a member function even
# if there is only one candidate or it is obvious which candidate to choose
# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen
# will still accept a match between prototype and implementation in such cases.

STRICT_PROTO_MATCHING  = NO

# The GENERATE_TODOLIST tag can be used to enable (YES) or
# disable (NO) the todo list. This list is created by putting \todo
# commands in the documentation.

GENERATE_TODOLIST      = YES

# The GENERATE_TESTLIST tag can be used to enable (YES) or
# disable (NO) the test list. This list is created by putting \test
# commands in the documentation.

GENERATE_TESTLIST      = YES

# The GENERATE_BUGLIST tag can be used to enable (YES) or
# disable (NO) the bug list. This list is created by putting \bug
# commands in the documentation.

GENERATE_BUGLIST       = YES

# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or
# disable (NO) the deprecated list. This list is created by putting
# \deprecated commands in the documentation.

GENERATE_DEPRECATEDLIST= YES

# The ENABLED_SECTIONS tag can be used to enable conditional
# documentation sections, marked by \if sectionname ... \endif.

ENABLED_SECTIONS       =

# The MAX_INITIALIZER_LINES tag determines the maximum number of lines
# the initial value of a variable or macro consists of for it to appear in
# the documentation. If the initializer consists of more lines than specified
# here it will be hidden. Use a value of 0 to hide initializers completely.
# The appearance of the initializer of individual variables and macros in the
# documentation can be controlled using \showinitializer or \hideinitializer
# command in the documentation regardless of this setting.

MAX_INITIALIZER_LINES  = 30

# Set the SHOW_USED_FILES tag to NO to disable the list of files generated
# at the bottom of the documentation of classes and structs. If set to YES the
# list will mention the files that were used to generate the documentation.

SHOW_USED_FILES        = NO

# Set the SHOW_FILES tag to NO to disable the generation of the Files page.
# This will remove the Files entry from the Quick Index and from the
# Folder Tree View (if specified). The default is YES.

SHOW_FILES             = YES

# Set the SHOW_NAMESPACES tag to NO to disable the generation of the
# Namespaces page.
# This will remove the Namespaces entry from the Quick Index
# and from the Folder Tree View (if specified). The default is YES.

SHOW_NAMESPACES        = YES

# The FILE_VERSION_FILTER tag can be used to specify a program or script that
# doxygen should invoke to get the current version for each file (typically from
# the version control system). Doxygen will invoke the program by executing (via
# popen()) the command <command> <input-file>, where <command> is the value of
# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file
# provided by doxygen. Whatever the program writes to standard output
# is used as the file version. See the manual for examples.

FILE_VERSION_FILTER    =

# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed
# by doxygen. The layout file controls the global structure of the generated
# output files in an output format independent way. The create the layout file
# that represents doxygen's defaults, run doxygen with the -l option.
# You can optionally specify a file name after the option, if omitted
# DoxygenLayout.xml will be used as the name of the layout file.

LAYOUT_FILE            =

# The CITE_BIB_FILES tag can be used to specify one or more bib files
# containing the references data. This must be a list of .bib files. The
# .bib extension is automatically appended if omitted. Using this command
# requires the bibtex tool to be installed. See also
# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style
# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this
# feature you need bibtex and perl available in the search path.

CITE_BIB_FILES         =

#---------------------------------------------------------------------------
# configuration options related to warning and progress messages
#---------------------------------------------------------------------------

# The QUIET tag can be used to turn on/off the messages that are generated
# by doxygen. Possible values are YES and NO. If left blank NO is used.

QUIET                  = YES

# The WARNINGS tag can be used to turn on/off the warning messages that are
# generated by doxygen. Possible values are YES and NO. If left blank
# NO is used.

WARNINGS               = YES

# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings
# for undocumented members. If EXTRACT_ALL is set to YES then this flag will
# automatically be disabled.

WARN_IF_UNDOCUMENTED   = YES

# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for
# potential errors in the documentation, such as not documenting some
# parameters in a documented function, or documenting parameters that
# don't exist or using markup commands wrongly.

WARN_IF_DOC_ERROR      = YES

# The WARN_NO_PARAMDOC option can be enabled to get warnings for
# functions that are documented, but have no documentation for their parameters
# or return value. If set to NO (the default) doxygen will only warn about
# wrong or incomplete parameter documentation, but not about the absence of
# documentation.

WARN_NO_PARAMDOC       = NO

# The WARN_FORMAT tag determines the format of the warning messages that
# doxygen can produce. The string should contain the $file, $line, and $text
# tags, which will be replaced by the file and line number from which the
# warning originated and the warning text. Optionally the format may contain
# $version, which will be replaced by the version of the file (if it could
# be obtained via FILE_VERSION_FILTER)

WARN_FORMAT            = "$file:$line: $text"

# The WARN_LOGFILE tag can be used to specify a file to which warning
# and error messages should be written. If left blank the output is written
# to stderr.

WARN_LOGFILE           =

#---------------------------------------------------------------------------
# configuration options related to the input files
#---------------------------------------------------------------------------

# The INPUT tag can be used to specify the files and/or directories that contain
# documented source files. You may enter file names like "myfile.cpp" or
# directories like "/usr/src/myproject". Separate the files or directories
# with spaces.

INPUT                  = /home/nicolas/projects/small_fem

# This tag can be used to specify the character encoding of the source files
# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is
# also the default input encoding. Doxygen uses libiconv (or the iconv built
# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for
# the list of possible encodings.

INPUT_ENCODING         = UTF-8

# If the value of the INPUT tag contains directories, you can use the
# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp
# and *.h) to filter out the source-files in the directories. If left
# blank the following patterns are tested:
# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh
# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py
# *.f90 *.f *.for *.vhd *.vhdl

FILE_PATTERNS          = *.c \
                         *.cc \
                         *.cxx \
                         *.cpp \
                         *.c++ \
                         *.d \
                         *.java \
                         *.ii \
                         *.ixx \
                         *.ipp \
                         *.i++ \
                         *.inl \
                         *.h \
                         *.hh \
                         *.hxx \
                         *.hpp \
                         *.h++ \
                         *.idl \
                         *.odl \
                         *.cs \
                         *.php \
                         *.php3 \
                         *.inc \
                         *.m \
                         *.mm \
                         *.dox \
                         *.py \
                         *.f90 \
                         *.f \
                         *.for \
                         *.vhd \
                         *.vhdl

# The RECURSIVE tag can be used to turn specify whether or not subdirectories
# should be searched for input files as well. Possible values are YES and NO.
# If left blank NO is used.

RECURSIVE              = YES

# The EXCLUDE tag can be used to specify files and/or directories that should be
# excluded from the INPUT source files. This way you can easily exclude a
# subdirectory from a directory tree whose root is specified with the INPUT tag.
# Note that relative paths are relative to the directory from which doxygen is
# run.

EXCLUDE                =

# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or
# directories that are symbolic links (a Unix file system feature) are excluded
# from the input.

EXCLUDE_SYMLINKS       = NO

# If the value of the INPUT tag contains directories, you can use the
# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
# certain files from those directories. Note that the wildcards are matched
# against the file with absolute path, so to exclude all test directories
# for example use the pattern */test/*

EXCLUDE_PATTERNS       =

# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names
# (namespaces, classes, functions, etc.) that should be excluded from the
# output. The symbol name can be a fully qualified name, a word, or if the
# wildcard * is used, a substring. Examples: ANamespace, AClass,
# AClass::ANamespace, ANamespace::*Test

EXCLUDE_SYMBOLS        =

# The EXAMPLE_PATH tag can be used to specify one or more files or
# directories that contain example code fragments that are included (see
# the \include command).

EXAMPLE_PATH           =

# If the value of the EXAMPLE_PATH tag contains directories, you can use the
# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp
# and *.h) to filter out the source-files in the directories. If left
# blank all files are included.

EXAMPLE_PATTERNS       = *

# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be
# searched for input files to be used with the \include or \dontinclude
# commands irrespective of the value of the RECURSIVE tag.
# Possible values are YES and NO. If left blank NO is used.

EXAMPLE_RECURSIVE      = NO

# The IMAGE_PATH tag can be used to specify one or more files or
# directories that contain image that are included in the documentation (see
# the \image command).

IMAGE_PATH             =

# The INPUT_FILTER tag can be used to specify a program that doxygen should
# invoke to filter for each input file. Doxygen will invoke the filter program
# by executing (via popen()) the command <filter> <input-file>, where <filter>
# is the value of the INPUT_FILTER tag, and <input-file> is the name of an
# input file. Doxygen will then use the output that the filter program writes
# to standard output.
# If FILTER_PATTERNS is specified, this tag will be
# ignored.

INPUT_FILTER           =

# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern
# basis.
# Doxygen will compare the file name with each pattern and apply the
# filter if there is a match.
# The filters are a list of the form:
# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further
# info on how filters are used. If FILTER_PATTERNS is empty or if
# non of the patterns match the file name, INPUT_FILTER is applied.

FILTER_PATTERNS        =

# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using
# INPUT_FILTER) will be used to filter the input files when producing source
# files to browse (i.e. when SOURCE_BROWSER is set to YES).

FILTER_SOURCE_FILES    = NO

# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file
# pattern. A pattern will override the setting for FILTER_PATTERN (if any)
# and it is also possible to disable source filtering for a specific pattern
# using *.ext= (so without naming a filter). This option only has effect when
# FILTER_SOURCE_FILES is enabled.

FILTER_SOURCE_PATTERNS =

#---------------------------------------------------------------------------
# configuration options related to source browsing
#---------------------------------------------------------------------------

# If the SOURCE_BROWSER tag is set to YES then a list of source files will
# be generated. Documented entities will be cross-referenced with these sources.
# Note: To get rid of all source code in the generated output, make sure also
# VERBATIM_HEADERS is set to NO.

SOURCE_BROWSER         = YES

# Setting the INLINE_SOURCES tag to YES will include the body
# of functions and classes directly in the documentation.

INLINE_SOURCES         = NO

# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct
# doxygen to hide any special comment blocks from generated source code
# fragments. Normal C and C++ comments will always remain visible.

STRIP_CODE_COMMENTS    = YES

# If the REFERENCED_BY_RELATION tag is set to YES
# then for each documented function all documented
# functions referencing it will be listed.

REFERENCED_BY_RELATION = NO

# If the REFERENCES_RELATION tag is set to YES
# then for each documented function all documented entities
# called/used by that function will be listed.

REFERENCES_RELATION    = NO

# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)
# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from
# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will
# link to the source code.
# Otherwise they will link to the documentation.

REFERENCES_LINK_SOURCE = YES

# If the USE_HTAGS tag is set to YES then the references to source code
# will point to the HTML generated by the htags(1) tool instead of doxygen
# built-in source browser. The htags tool is part of GNU's global source
# tagging system (see http://www.gnu.org/software/global/global.html). You
# will need version 4.8.6 or higher.

USE_HTAGS              = NO

# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen
# will generate a verbatim copy of the header file for each class for
# which an include is specified. Set to NO to disable this.

VERBATIM_HEADERS       = YES

#---------------------------------------------------------------------------
# configuration options related to the alphabetical class index
#---------------------------------------------------------------------------

# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index
# of all compounds will be generated. Enable this if the project
# contains a lot of classes, structs, unions or interfaces.

ALPHABETICAL_INDEX     = YES

# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then
# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns
# in which this list will be split (can be a number in the range [1..20])

COLS_IN_ALPHA_INDEX    = 5

# In case all classes in a project start with a common prefix, all
# classes will be put under the same header in the alphabetical index.
# The IGNORE_PREFIX tag can be used to specify one or more prefixes that
# should be ignored while generating the index headers.

IGNORE_PREFIX          =

#---------------------------------------------------------------------------
# configuration options related to the HTML output
#---------------------------------------------------------------------------

# If the GENERATE_HTML tag is set to YES (the default) Doxygen will
# generate HTML output.

GENERATE_HTML          = YES

# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.
# If a relative path is entered the value of OUTPUT_DIRECTORY will be
# put in front of it. If left blank `html' will be used as the default path.

HTML_OUTPUT            = html

# The HTML_FILE_EXTENSION tag can be used to specify the file extension for
# each generated HTML page (for example: .htm,.php,.asp). If it is left blank
# doxygen will generate files with .html extension.

HTML_FILE_EXTENSION    = .html

# The HTML_HEADER tag can be used to specify a personal HTML header for
# each generated HTML page. If it is left blank doxygen will generate a
# standard header. Note that when using a custom header you are responsible
#  for the proper inclusion of any scripts and style sheets that doxygen
# needs, which is dependent on the configuration options used.
# It is advised to generate a default header using "doxygen -w html
# header.html footer.html stylesheet.css YourConfigFile" and then modify
# that header. Note that the header is subject to change so you typically
# have to redo this when upgrading to a newer version of doxygen or when
# changing the value of configuration settings such as GENERATE_TREEVIEW!

HTML_HEADER            =

# The HTML_FOOTER tag can be used to specify a personal HTML footer for
# each generated HTML page. If it is left blank doxygen will generate a
# standard footer.

HTML_FOOTER            =

# The HTML_STYLESHEET tag can be used to specify a user-defined cascading
# style sheet that is used by each HTML page. It can be used to
# fine-tune the look of the HTML output. If the tag is left blank doxygen
# will generate a default style sheet. Note that doxygen will try to copy
# the style sheet file to the HTML output directory, so don't put your own
# style sheet in the HTML output directory as well, or it will be erased!

HTML_STYLESHEET        =

# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or
# other source files which should be copied to the HTML output directory. Note
# that these files will be copied to the base HTML output directory. Use the
# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these
# files. In the HTML_STYLESHEET file, use the file name only. Also note that
# the files will be copied as-is; there are no commands or markers available.

HTML_EXTRA_FILES       =

# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.
# Doxygen will adjust the colors in the style sheet and background images
# according to this color. Hue is specified as an angle on a colorwheel,
# see http://en.wikipedia.org/wiki/Hue for more information.
# For instance the value 0 represents red, 60 is yellow, 120 is green,
# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.
# The allowed range is 0 to 359.

HTML_COLORSTYLE_HUE    = 220

# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of
# the colors in the HTML output. For a value of 0 the output will use
# grayscales only. A value of 255 will produce the most vivid colors.

HTML_COLORSTYLE_SAT    = 100

# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to
# the luminance component of the colors in the HTML output. Values below
# 100 gradually make the output lighter, whereas values above 100 make
# the output darker. The value divided by 100 is the actual gamma applied,
# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,
# and 100 does not change the gamma.

HTML_COLORSTYLE_GAMMA  = 80

# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML
# page will contain the date and time when the page was generated. Setting
# this to NO can help when comparing the output of multiple runs.

HTML_TIMESTAMP         = YES

# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML
# documentation will contain sections that can be hidden and shown after the
# page has loaded.

HTML_DYNAMIC_SECTIONS  = NO

# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of
# entries shown in the various tree structured indices initially; the user
# can expand and collapse entries dynamically later on. Doxygen will expand
# the tree to such a level that at most the specified number of entries are
# visible (unless a fully collapsed tree already exceeds this amount).
# So setting the number of entries 1 will produce a full collapsed tree by
# default. 0 is a special value representing an infinite number of entries
# and will result in a full expanded tree by default.

HTML_INDEX_NUM_ENTRIES = 100

# If the GENERATE_DOCSET tag is set to YES, additional index files
# will be generated that can be used as input for Apple's Xcode 3
# integrated development environment, introduced with OSX 10.5 (Leopard).
# To create a documentation set, doxygen will generate a Makefile in the
# HTML output directory. Running make will produce the docset in that
# directory and running "make install" will install the docset in
# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find
# it at startup.
# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html
# for more information.

GENERATE_DOCSET        = NO

# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the
# feed. A documentation feed provides an umbrella under which multiple
# documentation sets from a single provider (such as a company or product suite)
# can be grouped.

DOCSET_FEEDNAME        = "Doxygen generated docs"

# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that
# should uniquely identify the documentation set bundle. This should be a
# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen
# will append .docset to the name.

DOCSET_BUNDLE_ID       = org.doxygen.Project

# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify
# the documentation publisher. This should be a reverse domain-name style
# string, e.g. com.mycompany.MyDocSet.documentation.

DOCSET_PUBLISHER_ID    = org.doxygen.Publisher

# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.

DOCSET_PUBLISHER_NAME  = Publisher

# If the GENERATE_HTMLHELP tag is set to YES, additional index files
# will be generated that can be used as input for tools like the
# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)
# of the generated HTML documentation.

GENERATE_HTMLHELP      = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can
# be used to specify the file name of the resulting .chm file. You
# can add a path in front of the file if the result should not be
# written to the html output directory.

CHM_FILE               =

# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can
# be used to specify the location (absolute path including file name) of
# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run
# the HTML help compiler on the generated index.hhp.

HHC_LOCATION           =

# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag
# controls if a separate .chi index file is generated (YES) or that
# it should be included in the master .chm file (NO).

GENERATE_CHI           = NO

# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING
# is used to encode HtmlHelp index (hhk), content (hhc) and project file
# content.

CHM_INDEX_ENCODING     =

# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag
# controls whether a binary table of contents is generated (YES) or a
# normal table of contents (NO) in the .chm file.

BINARY_TOC             = NO

# The TOC_EXPAND flag can be set to YES to add extra items for group members
# to the contents of the HTML help documentation and to the tree view.

TOC_EXPAND             = NO

# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and
# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated
# that can be used as input for Qt's qhelpgenerator to generate a
# Qt Compressed Help (.qch) of the generated HTML documentation.

GENERATE_QHP           = NO

# If the QHG_LOCATION tag is specified, the QCH_FILE tag can
# be used to specify the file name of the resulting .qch file.
# The path specified is relative to the HTML output folder.

QCH_FILE               =

# The QHP_NAMESPACE tag specifies the namespace to use when generating
# Qt Help Project output. For more information please see
# http://doc.trolltech.com/qthelpproject.html#namespace

QHP_NAMESPACE          = org.doxygen.Project

# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating
# Qt Help Project output. For more information please see
# http://doc.trolltech.com/qthelpproject.html#virtual-folders

QHP_VIRTUAL_FOLDER     = doc

# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to
# add. For more information please see
# http://doc.trolltech.com/qthelpproject.html#custom-filters

QHP_CUST_FILTER_NAME   =

# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the
# custom filter to add. For more information please see
# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters">
# Qt Help Project / Custom Filters</a>.

QHP_CUST_FILTER_ATTRS  =

# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this
# project's
# filter section matches.
# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes">
# Qt Help Project / Filter Attributes</a>.

QHP_SECT_FILTER_ATTRS  =

# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can
# be used to specify the location of Qt's qhelpgenerator.
# If non-empty doxygen will try to run qhelpgenerator on the generated
# .qhp file.

QHG_LOCATION           =

# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files
#  will be generated, which together with the HTML files, form an Eclipse help
# plugin. To install this plugin and make it available under the help contents
# menu in Eclipse, the contents of the directory containing the HTML and XML
# files needs to be copied into the plugins directory of eclipse. The name of
# the directory within the plugins directory should be the same as
# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before
# the help appears.

GENERATE_ECLIPSEHELP   = NO

# A unique identifier for the eclipse help plugin. When installing the plugin
# the directory name containing the HTML and XML files should also have
# this name.

ECLIPSE_DOC_ID         = org.doxygen.Project

# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)
# at top of each HTML page. The value NO (the default) enables the index and
# the value YES disables it. Since the tabs have the same information as the
# navigation tree you can set this option to NO if you already set
# GENERATE_TREEVIEW to YES.

DISABLE_INDEX          = NO

# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
# structure should be generated to display hierarchical information.
# If the tag value is set to YES, a side panel will be generated
# containing a tree-like index structure (just like the one that
# is generated for HTML Help). For this to work a browser that supports
# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).
# Windows users are probably better off using the HTML help feature.
# Since the tree basically has the same information as the tab index you
# could consider to set DISABLE_INDEX to NO when enabling this option.

GENERATE_TREEVIEW      = NO

# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values
# (range [0,1..20]) that doxygen will group on one line in the generated HTML
# documentation. Note that a value of 0 will completely suppress the enum
# values from appearing in the overview section.

ENUM_VALUES_PER_LINE   = 4

# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be
# used to set the initial width (in pixels) of the frame in which the tree
# is shown.

TREEVIEW_WIDTH         = 250

# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open
# links to external symbols imported via tag files in a separate window.

EXT_LINKS_IN_WINDOW    = NO

# Use this tag to change the font size of Latex formulas included
# as images in the HTML documentation. The default is 10. Note that
# when you change the font size after a successful doxygen run you need
# to manually remove any form_*.png images from the HTML output directory
# to force them to be regenerated.

FORMULA_FONTSIZE       = 10

# Use the FORMULA_TRANPARENT tag to determine whether or not the images
# generated for formulas are transparent PNGs. Transparent PNGs are
# not supported properly for IE 6.0, but are supported on all modern browsers.
# Note that when changing this option you need to delete any form_*.png files
# in the HTML output before the changes have effect.

FORMULA_TRANSPARENT    = YES

# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax
# (see http://www.mathjax.org) which uses client side Javascript for the
# rendering instead of using prerendered bitmaps. Use this if you do not
# have LaTeX installed or if you want to formulas look prettier in the HTML
# output. When enabled you may also need to install MathJax separately and
# configure the path to it using the MATHJAX_RELPATH option.

USE_MATHJAX            = NO

# When MathJax is enabled you need to specify the location relative to the
# HTML output directory using the MATHJAX_RELPATH option. The destination
# directory should contain the MathJax.js script. For instance, if the mathjax
# directory is located at the same level as the HTML output directory, then
# MATHJAX_RELPATH should be ../mathjax. The default value points to
# the MathJax Content Delivery Network so you can quickly see the result without
# installing MathJax.
# However, it is strongly recommended to install a local
# copy of MathJax from http://www.mathjax.org before deployment.

MATHJAX_RELPATH        = http://www.mathjax.org/mathjax

# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension
# names that should be enabled during MathJax rendering.

MATHJAX_EXTENSIONS     =

# When the SEARCHENGINE tag is enabled doxygen will generate a search box
# for the HTML output. The underlying search engine uses javascript
# and DHTML and should work on any modern browser. Note that when using
# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets
# (GENERATE_DOCSET) there is already a search function so this one should
# typically be disabled. For large projects the javascript based search engine
# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.

SEARCHENGINE           = YES

# When the SERVER_BASED_SEARCH tag is enabled the search engine will be
# implemented using a PHP enabled web server instead of at the web client
# using Javascript. Doxygen will generate the search PHP script and index
# file to put on the web server. The advantage of the server
# based approach is that it scales better to large projects and allows
# full text search. The disadvantages are that it is more difficult to setup
# and does not have live searching capabilities.

SERVER_BASED_SEARCH    = NO

#---------------------------------------------------------------------------
# configuration options related to the LaTeX output
#---------------------------------------------------------------------------

# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will
# generate Latex output.

GENERATE_LATEX         = NO

# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.
# If a relative path is entered the value of OUTPUT_DIRECTORY will be
# put in front of it. If left blank `latex' will be used as the default path.

LATEX_OUTPUT           = latex

# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be
# invoked. If left blank `latex' will be used as the default command name.
# Note that when enabling USE_PDFLATEX this option is only used for
# generating bitmaps for formulas in the HTML output, but not in the
# Makefile that is written to the output directory.

LATEX_CMD_NAME         = latex

# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to
# generate index for LaTeX. If left blank `makeindex' will be used as the
# default command name.

MAKEINDEX_CMD_NAME     = makeindex

# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact
# LaTeX documents. This may be useful for small projects and may help to
# save some trees in general.

COMPACT_LATEX          = NO

# The PAPER_TYPE tag can be used to set the paper type that is used
# by the printer. Possible values are: a4, letter, legal and
# executive. If left blank a4wide will be used.

PAPER_TYPE             = a4

# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX
# packages that should be included in the LaTeX output.

EXTRA_PACKAGES         =

# The LATEX_HEADER tag can be used to specify a personal LaTeX header for
# the generated latex document. The header should contain everything until
# the first chapter. If it is left blank doxygen will generate a
# standard header. Notice: only use this tag if you know what you are doing!

LATEX_HEADER           =

# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for
# the generated latex document. The footer should contain everything after
# the last chapter. If it is left blank doxygen will generate a
# standard footer. Notice: only use this tag if you know what you are doing!

LATEX_FOOTER           =

# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated
# is prepared for conversion to pdf (using ps2pdf). The pdf file will
# contain links (just like the HTML output) instead of page references
# This makes the output suitable for online browsing using a pdf viewer.

PDF_HYPERLINKS         = YES

# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of
# plain latex in the generated Makefile. Set this option to YES to get a
# higher quality PDF documentation.

USE_PDFLATEX           = YES

# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode.
# command to the generated LaTeX files. This will instruct LaTeX to keep
# running if errors occur, instead of asking the user for help.
# This option is also used when generating formulas in HTML.

LATEX_BATCHMODE        = NO

# If LATEX_HIDE_INDICES is set to YES then doxygen will not
# include the index chapters (such as File Index, Compound Index, etc.)
# in the output.

LATEX_HIDE_INDICES     = NO

# If LATEX_SOURCE_CODE is set to YES then doxygen will include
# source code with syntax highlighting in the LaTeX output.
# Note that which sources are shown also depends on other settings
# such as SOURCE_BROWSER.

LATEX_SOURCE_CODE      = NO

# The LATEX_BIB_STYLE tag can be used to specify the style to use for the
# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See
# http://en.wikipedia.org/wiki/BibTeX for more info.

LATEX_BIB_STYLE        = plain

#---------------------------------------------------------------------------
# configuration options related to the RTF output
#---------------------------------------------------------------------------

# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output
# The RTF output is optimized for Word 97 and may not look very pretty with
# other RTF readers or editors.

GENERATE_RTF           = NO

# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.
# If a relative path is entered the value of OUTPUT_DIRECTORY will be
# put in front of it. If left blank `rtf' will be used as the default path.

RTF_OUTPUT             = rtf

# If the COMPACT_RTF tag is set to YES Doxygen generates more compact
# RTF documents. This may be useful for small projects and may help to
# save some trees in general.

COMPACT_RTF            = NO

# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated
# will contain hyperlink fields. The RTF file will
# contain links (just like the HTML output) instead of page references.
# This makes the output suitable for online browsing using WORD or other
# programs which support those fields.
# Note: wordpad (write) and others do not support links.

RTF_HYPERLINKS         = NO

# Load style sheet definitions from file. Syntax is similar to doxygen's
# config file, i.e. a series of assignments. You only have to provide
# replacements, missing definitions are set to their default value.

RTF_STYLESHEET_FILE    =

# Set optional variables used in the generation of an rtf document.
# Syntax is similar to doxygen's config file.

RTF_EXTENSIONS_FILE    =

#---------------------------------------------------------------------------
# configuration options related to the man page output
#---------------------------------------------------------------------------

# If the GENERATE_MAN tag is set to YES (the default) Doxygen will
# generate man pages

GENERATE_MAN           = NO

# The MAN_OUTPUT tag is used to specify where the man pages will be put.
# If a relative path is entered the value of OUTPUT_DIRECTORY will be
# put in front of it. If left blank `man' will be used as the default path.

MAN_OUTPUT             = man

# The MAN_EXTENSION tag determines the extension that is added to
# the generated man pages (default is the subroutine's section .3)

MAN_EXTENSION          = .3

# If the MAN_LINKS tag is set to YES and Doxygen generates man output,
# then it will generate one additional man file for each entity
# documented in the real man page(s). These additional files
# only source the real man page, but without them the man command
# would be unable to find the correct page. The default is NO.

MAN_LINKS              = NO

#---------------------------------------------------------------------------
# configuration options related to the XML output
#---------------------------------------------------------------------------

# If the GENERATE_XML tag is set to YES Doxygen will
# generate an XML file that captures the structure of
# the code including all documentation.

GENERATE_XML           = NO

# The XML_OUTPUT tag is used to specify where the XML pages will be put.
# If a relative path is entered the value of OUTPUT_DIRECTORY will be
# put in front of it. If left blank `xml' will be used as the default path.

XML_OUTPUT             = xml

# The XML_SCHEMA tag can be used to specify an XML schema,
# which can be used by a validating XML parser to check the
# syntax of the XML files.

XML_SCHEMA             =

# The XML_DTD tag can be used to specify an XML DTD,
# which can be used by a validating XML parser to check the
# syntax of the XML files.

XML_DTD                =

# If the XML_PROGRAMLISTING tag is set to YES Doxygen will
# dump the program listings (including syntax highlighting
# and cross-referencing information) to the XML output. Note that
# enabling this will significantly increase the size of the XML output.

XML_PROGRAMLISTING     = YES

#---------------------------------------------------------------------------
# configuration options for the AutoGen Definitions output
#---------------------------------------------------------------------------

# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will
# generate an AutoGen Definitions (see autogen.sf.net) file
# that captures the structure of the code including all
# documentation. Note that this feature is still experimental
# and incomplete at the moment.

GENERATE_AUTOGEN_DEF   = NO

#---------------------------------------------------------------------------
# configuration options related to the Perl module output
#---------------------------------------------------------------------------

# If the GENERATE_PERLMOD tag is set to YES Doxygen will
# generate a Perl module file that captures the structure of
# the code including all documentation. Note that this
# feature is still experimental and incomplete at the
# moment.

GENERATE_PERLMOD       = NO

# If the PERLMOD_LATEX tag is set to YES Doxygen will generate
# the necessary Makefile rules, Perl scripts and LaTeX code to be able
# to generate PDF and DVI output from the Perl module output.

PERLMOD_LATEX          = NO

# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be
# nicely formatted so it can be parsed by a human reader.
# This is useful
# if you want to understand what is going on.
# On the other hand, if this
# tag is set to NO the size of the Perl module output will be much smaller
# and Perl will parse it just the same.

PERLMOD_PRETTY         = YES

# The names of the make variables in the generated doxyrules.make file
# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.
# This is useful so different doxyrules.make files included by the same
# Makefile don't overwrite each other's variables.

PERLMOD_MAKEVAR_PREFIX =

#---------------------------------------------------------------------------
# Configuration options related to the preprocessor
#---------------------------------------------------------------------------

# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will
# evaluate all C-preprocessor directives found in the sources and include
# files.

ENABLE_PREPROCESSING   = YES

# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro
# names in the source code. If set to NO (the default) only conditional
# compilation will be performed. Macro expansion can be done in a controlled
# way by setting EXPAND_ONLY_PREDEF to YES.

MACRO_EXPANSION        = NO

# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES
# then the macro expansion is limited to the macros specified with the
# PREDEFINED and EXPAND_AS_DEFINED tags.

EXPAND_ONLY_PREDEF     = NO

# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files
# pointed to by INCLUDE_PATH will be searched when a #include is found.

SEARCH_INCLUDES        = YES

# The INCLUDE_PATH tag can be used to specify one or more directories that
# contain include files that are not input files but should be processed by
# the preprocessor.

INCLUDE_PATH           =

# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard
# patterns (like *.h and *.hpp) to filter out the header-files in the
# directories. If left blank, the patterns specified with FILE_PATTERNS will
# be used.

INCLUDE_FILE_PATTERNS  =

# The PREDEFINED tag can be used to specify one or more macro names that
# are defined before the preprocessor is started (similar to the -D option of
# gcc). The argument of the tag is a list of macros of the form: name
# or name=definition (no spaces). If the definition and the = are
# omitted =1 is assumed. To prevent a macro definition from being
# undefined via #undef or recursively expanded use the := operator
# instead of the = operator.

PREDEFINED             =

# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then
# this tag can be used to specify a list of macro names that should be expanded.
# The macro definition that is found in the sources will be used.
# Use the PREDEFINED tag if you want to use a different macro definition that
# overrules the definition found in the source code.

EXPAND_AS_DEFINED      =

# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then
# doxygen's preprocessor will remove all references to function-like macros
# that are alone on a line, have an all uppercase name, and do not end with a
# semicolon, because these will confuse the parser if not removed.

SKIP_FUNCTION_MACROS   = YES

#---------------------------------------------------------------------------
# Configuration::additions related to external references
#---------------------------------------------------------------------------

# The TAGFILES option can be used to specify one or more tagfiles. For each
# tag file the location of the external documentation should be added. The
# format of a tag file without this location is as follows:
#
# TAGFILES = file1 file2 ...
# Adding location for the tag files is done as follows:
#
# TAGFILES = file1=loc1 "file2 = loc2" ...
# where "loc1" and "loc2" can be relative or absolute paths
# or URLs. Note that each tag file must have a unique name (where the name does
# NOT include the path). If a tag file is not located in the directory in which
# doxygen is run, you must also specify the path to the tagfile here.

TAGFILES               =

# When a file name is specified after GENERATE_TAGFILE, doxygen will create
# a tag file that is based on the input files it reads.

GENERATE_TAGFILE       =

# If the ALLEXTERNALS tag is set to YES all external classes will be listed
# in the class index. If set to NO only the inherited external classes
# will be listed.

ALLEXTERNALS           = NO

# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed
# in the modules index. If set to NO, only the current project's groups will
# be listed.

EXTERNAL_GROUPS        = YES

# The PERL_PATH should be the absolute path and name of the perl script
# interpreter (i.e. the result of `which perl').

PERL_PATH              = /usr/bin/perl

#---------------------------------------------------------------------------
# Configuration options related to the dot tool
#---------------------------------------------------------------------------

# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will
# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base
# or super classes. Setting the tag to NO turns the diagrams off. Note that
# this option also works with HAVE_DOT disabled, but it is recommended to
# install and use dot, since it yields more powerful graphs.

CLASS_DIAGRAMS         = NO

# You can define message sequence charts within doxygen comments using the \msc
# command. Doxygen will then run the mscgen tool (see
# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the
# documentation. The MSCGEN_PATH tag allows you to specify the directory where
# the mscgen tool resides. If left empty the tool is assumed to be found in the
# default search path.

MSCGEN_PATH            =

# If set to YES, the inheritance and collaboration graphs will hide
# inheritance and usage relations if the target is undocumented
# or is not a class.

HIDE_UNDOC_RELATIONS   = YES

# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is
# available from the path. This tool is part of Graphviz, a graph visualization
# toolkit from AT&T and Lucent Bell Labs. The other options in this section
# have no effect if this option is set to NO (the default)

HAVE_DOT               = YES

# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is
# allowed to run in parallel. When set to 0 (the default) doxygen will
# base this on the number of processors available in the system. You can set it
# explicitly to a value larger than 0 to get control over the balance
# between CPU load and processing speed.

DOT_NUM_THREADS        = 0

# By default doxygen will use the Helvetica font for all dot files that
# doxygen generates. When you want a differently looking font you can specify
# the font name using DOT_FONTNAME. You need to make sure dot is able to find
# the font, which can be done by putting it in a standard location or by setting
# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the
# directory containing the font.

DOT_FONTNAME           = Helvetica

# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.
# The default size is 10pt.

DOT_FONTSIZE           = 10

# By default doxygen will tell dot to use the Helvetica font.
# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to
# set the path where dot can find it.

DOT_FONTPATH           =

# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen
# will generate a graph for each documented class showing the direct and
# indirect inheritance relations. Setting this tag to YES will force the
# CLASS_DIAGRAMS tag to NO.

CLASS_GRAPH            = YES

# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen
# will generate a graph for each documented class showing the direct and
# indirect implementation dependencies (inheritance, containment, and
# class references variables) of the class with other documented classes.

COLLABORATION_GRAPH    = YES

# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen
# will generate a graph for groups, showing the direct groups dependencies

GROUP_GRAPHS           = YES

# If the UML_LOOK tag is set to YES doxygen will generate inheritance and
# collaboration diagrams in a style similar to the OMG's Unified Modeling
# Language.

UML_LOOK               = YES

# If the UML_LOOK tag is enabled, the fields and methods are shown inside
# the class node. If there are many fields or methods and many nodes the
# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS
# threshold limits the number of items for each type to make the size more
# managable. Set this to 0 for no limit. Note that the threshold may be
# exceeded by 50% before the limit is enforced.

UML_LIMIT_NUM_FIELDS   = 10

# If set to YES, the inheritance and collaboration graphs will show the
# relations between templates and their instances.

TEMPLATE_RELATIONS     = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT
# tags are set to YES then doxygen will generate a graph for each documented
# file showing the direct and indirect include dependencies of the file with
# other documented files.

INCLUDE_GRAPH          = YES

# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and
# HAVE_DOT tags are set to YES then doxygen will generate a graph for each
# documented header file showing the documented files that directly or
# indirectly include this file.

INCLUDED_BY_GRAPH      = YES

# If the CALL_GRAPH and HAVE_DOT options are set to YES then
# doxygen will generate a call dependency graph for every global function
# or class method. Note that enabling this option will significantly increase
# the time of a run. So in most cases it will be better to enable call graphs
# for selected functions only using the \callgraph command.

CALL_GRAPH             = NO

# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then
# doxygen will generate a caller dependency graph for every global function
# or class method. Note that enabling this option will significantly increase
# the time of a run. So in most cases it will be better to enable caller
# graphs for selected functions only using the \callergraph command.

CALLER_GRAPH           = NO

# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen
# will generate a graphical hierarchy of all classes instead of a textual one.

GRAPHICAL_HIERARCHY    = YES

# If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES
# then doxygen will show the dependencies a directory has on other directories
# in a graphical way. The dependency relations are determined by the #include
# relations between the files in the directories.

DIRECTORY_GRAPH        = YES

# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images
# generated by dot. Possible values are svg, png, jpg, or gif.
# If left blank png will be used. If you choose svg you need to set
# HTML_FILE_EXTENSION to xhtml in order to make the SVG files
# visible in IE 9+ (other browsers do not have this requirement).

DOT_IMAGE_FORMAT       = svg

# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to
# enable generation of interactive SVG images that allow zooming and panning.
# Note that this requires a modern browser other than Internet Explorer.
# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you
# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files
# visible. Older versions of IE do not have SVG support.

INTERACTIVE_SVG        = NO

# The tag DOT_PATH can be used to specify the path where the dot tool can be
# found. If left blank, it is assumed the dot tool can be found in the path.

DOT_PATH               =

# The DOTFILE_DIRS tag can be used to specify one or more directories that
# contain dot files that are included in the documentation (see the
# \dotfile command).

DOTFILE_DIRS           =

# The MSCFILE_DIRS tag can be used to specify one or more directories that
# contain msc files that are included in the documentation (see the
# \mscfile command).

MSCFILE_DIRS           =

# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of
# nodes that will be shown in the graph. If the number of nodes in a graph
# becomes larger than this value, doxygen will truncate the graph, which is
# visualized by representing a node as a red box. Note that doxygen if the
# number of direct children of the root node in a graph is already larger than
# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note
# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.

DOT_GRAPH_MAX_NODES    = 50

# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the
# graphs generated by dot. A depth value of 3 means that only nodes reachable
# from the root by following a path via at most 3 edges will be shown. Nodes
# that lay further from the root node will be omitted. Note that setting this
# option to 1 or 2 may greatly reduce the computation time needed for large
# code bases. Also note that the size of a graph can be further restricted by
# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.

MAX_DOT_GRAPH_DEPTH    = 0

# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent
# background. This is disabled by default, because dot on Windows does not
# seem to support this out of the box. Warning: Depending on the platform used,
# enabling this option may lead to badly anti-aliased labels on the edges of
# a graph (i.e. they become hard to read).

DOT_TRANSPARENT        = NO

# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output
# files in one run (i.e. multiple -o and -T options on the command line). This
# makes dot run faster, but since only newer versions of dot (>1.8.10)
# support this, this feature is disabled by default.

DOT_MULTI_TARGETS      = NO

# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will
# generate a legend page explaining the meaning of the various boxes and
# arrows in the dot generated graphs.

GENERATE_LEGEND        = YES

# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will
# remove the intermediate dot files that are used to generate
# the various graphs.

DOT_CLEANUP            = YES


